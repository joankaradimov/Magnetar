#include "starcraft_exe/types.h"

namespace game::starcraft
{
#define DECL_FUNC(decl, func, offset) decl = (decltype(func)) offset;

DECL_FUNC(void (__cdecl*type_info_destructor_dealloc)(void *location), type_info_destructor_dealloc, 0x401000);
ListNodeUnknown * _Unknown_Destructor(ListNodeUnknown *a1, char a2) {
    int address = 0x401020;
    ListNodeUnknown * result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void HiddenCtrl_Destructor(ListNodeUnknown *a1) {
    int address = 0x401090;
    __asm {
        mov ebx, a1
        call address
    }
}
void somePlayImageCrapThatCrashes(char a1, char a2, CImage *image, CSprite *edi0, int a5) {
    int address = 0x4010e0;
    __asm {
        xor eax, eax
        xor ecx, ecx
        push dword ptr a5
        mov edi, edi0
        mov ebx, image
        mov cl, a2
        mov al, a1
        call address
    }
}
void hideImage(CImage *a1) {
    int address = 0x401100;
    __asm {
        mov esi, a1
        call address
    }
}
DECL_FUNC(void (__thiscall*showImage)(CImage *this_), showImage, 0x401120);
void setAllOverlayDirectionsGeneric(CThingy *thingy, unsigned __int8 direction) {
    int address = 0x401140;
    __asm {
        push dword ptr direction
        mov eax, thingy
        call address
    }
}
DECL_FUNC(BOOL (__stdcall*unitIsOwnerByCurrentPlayer)(CUnit *unit), unitIsOwnerByCurrentPlayer, 0x401170);
__int32 unitSetRetreatPoint(unsigned __int8 a1, CUnit *a2) {
    int address = 0x4011a0;
    __int32 result_;
    __asm {
        xor eax, eax
        mov edx, a2
        mov al, a1
        call address
        mov result_, eax
    }
    return result_;
}
BOOL UnitIsGoliath(CUnit *a1) {
    int address = 0x4011f0;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
BOOL UnitCanCastSpells(CUnit *a1) {
    int address = 0x401210;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
BOOL isDistanceGreaterThanHaltDistance(int a1, CUnit *a2, unsigned int a3, int a4) {
    int address = 0x401240;
    BOOL result_;
    __asm {
        xor eax, eax
        push dword ptr a4
        push dword ptr a3
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void Game_Hdr_Node_Destructor(int a1) {
    int address = 0x401270;
    __asm {
        mov ebx, a1
        call address
    }
}
void Saved_Game_Node_Destructor(int a1) {
    int address = 0x4012c0;
    __asm {
        mov ebx, a1
        call address
    }
}
int sub_401310(int result, int a2) {
    int address = 0x401310;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
u8 RemoveUnitAirPathing(char a1, CUnit *a2) {
    int address = 0x401360;
    u8 result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov al, a1
        call address
        mov result_, al
    }
    return result_;
}
signed SetUnitEnergy(CUnit *a1, unsigned __int8 a2) {
    int address = 0x4013b0;
    signed result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(signed (__thiscall*GetMaximumHP)(CUnit *this_), GetMaximumHP, 0x401400);
BOOL UnitIsInstallationTrap(CUnit *a1) {
    int address = 0x401430;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
BOOL UnitIsFighter(CUnit *a1) {
    int address = 0x401450;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
BOOL BWFXN_UnitIsCarrier(CUnit *a1) {
    int address = 0x401470;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
BOOL BWFXN_UnitIsReaver(CUnit *a1) {
    int address = 0x401490;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
BOOL UnitHasFighters(CUnit *a1) {
    int address = 0x4014b0;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
CUnit * UnitGetWorkerPowerup(CUnit *a1) {
    int address = 0x4014e0;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(BOOL (__thiscall*UnitIsTrainingOrMorphing)(CUnit *this_), UnitIsTrainingOrMorphing, 0x401500);
BOOL UnitIsGhost(CUnit *a1) {
    int address = 0x401570;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
STREAMED * Streamed_SFX_Cleanup(STREAMED *a1) {
    int address = 0x4015a0;
    STREAMED * result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
void Streamed_SFX_FullDestructor(SFX_related *a1) {
    int address = 0x4015f0;
    __asm {
        mov ebx, a1
        call address
    }
}
STREAMED * Streamed_SFX_Destructor(STREAMED *a1, SFX_related *a2) {
    int address = 0x401650;
    STREAMED * result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void Provider_Destructor(int a1) {
    int address = 0x4016a0;
    __asm {
        mov ebx, a1
        call address
    }
}
void _ID_Destructor(void *a1) {
    int address = 0x4016f0;
    __asm {
        mov ebx, a1
        call address
    }
}
signed _ID_Destructor2(void *a1, int a2) {
    int address = 0x401740;
    signed result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
int * vector_insert(int *a1, int a2, void *a3, int a4) {
    int address = 0x4017b0;
    int * result_;
    __asm {
        xor eax, eax
        push dword ptr a4
        push dword ptr a3
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void GameNode_Destructor(int a1) {
    int address = 0x401860;
    __asm {
        mov ebx, a1
        call address
    }
}
int GameNode_Destructor_0_sub(_DWORD *a1, int a2) {
    int address = 0x4018b0;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
void SaveGame_Destructor(int a1) {
    int address = 0x401920;
    __asm {
        mov ebx, a1
        call address
    }
}
void _list_unlink(ListNode *a1) {
    int address = 0x401970;
    __asm {
        mov ebx, a1
        call address
    }
}
void * vector_remove(void *a1, char a2) {
    int address = 0x4019b0;
    void * result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
void Device_Destructor(int a1) {
    int address = 0x401a10;
    __asm {
        mov ebx, a1
        call address
    }
}
void PhoneNumber_Destructor(int a1) {
    int address = 0x401a60;
    __asm {
        mov ebx, a1
        call address
    }
}
int PhoneNumber_Destructor_0(_DWORD *a1, int a2) {
    int address = 0x401ab0;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
void DrawText_Destructor(int a1) {
    int address = 0x401b20;
    __asm {
        mov ebx, a1
        call address
    }
}
int DrawText_Destructor_0(_DWORD *a1, int a2) {
    int address = 0x401b70;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
void Template_Destructor(TemplateList *a1) {
    int address = 0x401be0;
    __asm {
        mov ebx, a1
        call address
    }
}
signed Template_Destructor_0(TemplateListEntry *a1, int a2) {
    int address = 0x401c30;
    signed result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
void vector_delete(ListNode *a1) {
    int address = 0x401ca0;
    __asm {
        mov ebx, a1
        call address
    }
}
DECL_FUNC(BOOL (__fastcall*unitIsActiveResourceDepot)(CUnit *a1, CUnit *a2), unitIsActiveResourceDepot, 0x401cf0);
BOOL unitIsSubunit(CUnit *a1) {
    int address = 0x401d40;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
BOOL unitCanSeeCloakedTarget(CUnit *a1, CUnit *a2) {
    int address = 0x401d60;
    BOOL result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void UnitClearOrderTarget(CUnit *a1) {
    int address = 0x401da0;
    __asm {
        mov eax, a1
        call address
    }
}
int isUnitMovableAndAtDestination(CUnit *a1) {
    int address = 0x401dc0;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void getImageAttackFrame(point *a1, CSprite *a2, int a3, unsigned __int8 a4) {
    int address = 0x401df0;
    __asm {
        push dword ptr a4
        mov edi, a3
        mov ecx, a2
        mov eax, a1
        call address
    }
}
CImage * setSpriteMainImgOffset(CSprite *a1, char a2, char a3) {
    int address = 0x401e40;
    CImage * result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(BOOL (__fastcall*isQueueSlotActive)(CUnit *a1, int a2), isQueueSlotActive, 0x401e70);
char updateUnitTransportData(CUnit *a1) {
    int address = 0x401ea0;
    char result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, al
    }
    return result_;
}
void fixTargetLocation(UnitType unit_type, Position *a2) {
    int address = 0x401fa0;
    __asm {
        xor eax, eax
        mov edx, a2
        mov ax, unit_type
        call address
    }
}
void getAbsoluteUnitBounds(CUnit *a1, rect *rectangle) {
    int address = 0x402020;
    __asm {
        mov ecx, rectangle
        mov eax, a1
        call address
    }
}
__int16 getAbsoluteUnitBoundsFromTarget(int a1, __int16 a2, _WORD *a3, __int16 a4) {
    int address = 0x402070;
    __int16 result_;
    __asm {
        xor eax, eax
        xor edx, edx
        xor esi, esi
        mov si, a4
        mov ecx, a3
        mov dx, a2
        mov eax, a1
        call address
        mov result_, ax
    }
    return result_;
}
BOOL UnitIsFrozenOrInAir(CUnit *a1) {
    int address = 0x4020b0;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
__int16 * fixTargetPoint(__int16 *result) {
    int address = 0x4020f0;
    __int16 * result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
unsigned getUnitDistanceToHalt(CUnit *unit, int a2, int a3) {
    int address = 0x402140;
    unsigned result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        mov ecx, a2
        mov eax, unit
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*isUnitPositions2Equal)(void), isUnitPositions2Equal, 0x402160);
void Accelerate(CFlingy *result, int acceleration) {
    int address = 0x402180;
    __asm {
        mov edx, acceleration
        mov eax, result
        call address
    }
}
signed CC_CanBeInfested(CUnit *unit) {
    int address = 0x402210;
    signed result_;
    __asm {
        xor eax, eax
        mov edx, unit
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__fastcall*unitHPbetween33_66_percent)(_DWORD a1, _DWORD a2), unitHPbetween33_66_percent, 0x402270);
DECL_FUNC(BOOL (__thiscall*unitHPbelow33_percent)(CUnit *this_), unitHPbelow33_percent, 0x4022c0);
BOOL unitIsPerformingUnbreakableCode(CUnit *a1) {
    int address = 0x402310;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void TriggerNode_Destructor(TriggerList *tirgger_list) {
    int address = 0x402330;
    __asm {
        mov ebx, tirgger_list
        call address
    }
}
DECL_FUNC(signed (__fastcall*IsTargNotVisibleCB)(__int16 a1, __int16 a2, __int16 a3, __int16 a4), IsTargNotVisibleCB, 0x402380);
DECL_FUNC(signed (__fastcall*isTargVisibleCB)(__int16 a1, __int16 a2, __int16 a3, __int16 a4), isTargVisibleCB, 0x402440);
DECL_FUNC(int (__fastcall*getVisibilityMaskFromPositionAndSize)(int a1, __int16 width, __int16 y, __int16 x, __int16 height), getVisibilityMaskFromPositionAndSize, 0x402500);
DECL_FUNC(int (__fastcall*getVisibilityMaskFromPositionAndSize_0)(int a1, __int16 a2, __int16 a3, __int16 a4, __int16 a5), getVisibilityMaskFromPositionAndSize_0, 0x402570);
void BNetMessage_Destructor(int a1) {
    int address = 0x4025e0;
    __asm {
        mov ebx, a1
        call address
    }
}
int BNetMessage_Destructor_0(_DWORD *a1, int a2) {
    int address = 0x402630;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
CUnit * setFlagHoldPosition(CUnit *a1) {
    int address = 0x4026a0;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int UnitGetShieldAndHitpoints(CUnit *a1) {
    int address = 0x4026d0;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int UnitGetMaxShieldAndHitpoints(CUnit *a1) {
    int address = 0x402710;
    int result_;
    __asm {
        xor eax, eax
        mov edx, a1
        call address
        mov result_, eax
    }
    return result_;
}
BOOL BWFXN_UnitIsQueen(CUnit *a1) {
    int address = 0x402750;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed allTilesInRectAreVisibleFor(__int16 a1, __int16 a2, int a3, __int16 a4, char a5) {
    int address = 0x402770;
    signed result_;
    __asm {
        xor eax, eax
        xor edx, edx
        xor ecx, ecx
        push dword ptr a5
        push dword ptr a4
        mov ebx, a3
        mov cx, a2
        mov dx, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed allTilesInRectAreExploredFor(__int16 a1, __int16 a2, int a3, __int16 a4, char a5) {
    int address = 0x4027f0;
    signed result_;
    __asm {
        xor eax, eax
        xor edx, edx
        xor ecx, ecx
        push dword ptr a5
        push dword ptr a4
        mov edi, a3
        mov cx, a2
        mov dx, a1
        call address
        mov result_, eax
    }
    return result_;
}
void * FileDownloadSession_Destructor(int a1, int a2, int *a3, int a4) {
    int address = 0x402870;
    void * result_;
    __asm {
        xor eax, eax
        push dword ptr a4
        push dword ptr a3
        mov edi, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void Ban_Destructor(int a1) {
    int address = 0x4028e0;
    __asm {
        mov ebx, a1
        call address
    }
}
_DWORD * _unk_Destructor_20(int a1) {
    int address = 0x402930;
    _DWORD * result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
BOOL sub_4029B0(CSprite *a1, int a2, int a3) {
    int address = 0x4029b0;
    BOOL result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        mov edx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int sub_402A00(int a1, int a2, CUnit *a3) {
    int address = 0x402a00;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        mov edi, a2
        mov ebx, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*isUnitBurrowed)(void), isUnitBurrowed, 0x402a70);
BOOL sub_402A90(CUnit *a1) {
    int address = 0x402a90;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
rect * getDoubleUnitBoundingBoxMashup(rect *result, CUnit *a2, CUnit *a3, __int16 a4, __int16 a5) {
    int address = 0x402b10;
    rect * result_;
    __asm {
        xor eax, eax
        xor edi, edi
        push dword ptr a5
        mov di, a4
        mov ecx, a3
        mov edx, a2
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
BOOL sub_402BA0(CUnit *a1, CUnit *a2) {
    int address = 0x402ba0;
    BOOL result_;
    __asm {
        xor eax, eax
        mov edx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
BOOL isUnitAtWPPosOrFacingDirection(CUnit *a1) {
    int address = 0x402be0;
    BOOL result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
BOOL Unit_IsZergMainBuilding(CUnit *a1) {
    int address = 0x402c20;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int getHPGainForRepair(CUnit *a1) {
    int address = 0x402c40;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(char * (__thiscall*unittracker_ctor)(_DWORD *this_), unittracker_ctor, 0x402c60);
DECL_FUNC(unsigned (__stdcall*packDetailFinderData)(int a1), packDetailFinderData, 0x402d10);
DECL_FUNC(int (__fastcall*unpackDetailFinderData)(int a1, int a2), unpackDetailFinderData, 0x402fb0);
int AITrack_Container_Erase(int result, int a2) {
    int address = 0x403030;
    int result_;
    __asm {
        xor eax, eax
        mov edx, a2
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
void SaveGame_Destructor_0(int a1) {
    int address = 0x403080;
    __asm {
        mov ebx, a1
        call address
    }
}
u8 toggleUnitPathingProperties(CUnit *a1) {
    int address = 0x4030d0;
    u8 result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
_DWORD * resetAIThreadData(_DWORD *a1) {
    int address = 0x403130;
    _DWORD * result_;
    __asm {
        xor eax, eax
        mov edx, a1
        call address
        mov result_, eax
    }
    return result_;
}
int packAIThreadData(int a1) {
    int address = 0x403230;
    int result_;
    __asm {
        xor eax, eax
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__fastcall*unpackAIThreadData)(int a1, int a2), unpackAIThreadData, 0x403310);
_DWORD * AI_Stop(_DWORD *result, int *a2) {
    int address = 0x403380;
    _DWORD * result_;
    __asm {
        xor eax, eax
        mov edx, a2
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
BOOL isUnitUpgradeAvailable(int a1, int a2) {
    int address = 0x4033d0;
    BOOL result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
BOOL unitIsCleanDetector(CUnit *a1) {
    int address = 0x403430;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
unsigned packAICaptainData(int a1) {
    int address = 0x403480;
    unsigned result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
_DWORD * unpackAICaptainData(_DWORD *result) {
    int address = 0x4035b0;
    _DWORD * result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__thiscall*resetPathingData)(int this_), resetPathingData, 0x403650);
int packPathingData(unsigned int *a1) {
    int address = 0x4036d0;
    int result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__stdcall*unpackAllPathingData)(int a1), unpackAllPathingData, 0x403780);
int packTownMgr_03_Unit_Data(int a1) {
    int address = 0x403ae0;
    int result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
_DWORD * unpackTownMgr_03_Unit_Data(_DWORD *result) {
    int address = 0x403cb0;
    _DWORD * result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(char * (__thiscall*sub_403DB0)(_DWORD *this_), sub_403DB0, 0x403db0);
DECL_FUNC(int (__stdcall*packTownMgr_01_Data)(int a1), packTownMgr_01_Data, 0x403e50);
DECL_FUNC(int (__fastcall*unpackTownMgr_01_Data)(int a1, int a2), unpackTownMgr_01_Data, 0x4041f0);
DECL_FUNC(char * (__thiscall*sub_404280)(_DWORD *this_), sub_404280, 0x404280);
int packTownMgr_02_Data(unsigned int *a1) {
    int address = 0x404350;
    int result_;
    __asm {
        xor eax, eax
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*unpackTownMgr_02_Data)(void), unpackTownMgr_02_Data, 0x404410);
_DWORD * removeAIWorkerController(_DWORD *result, int *a2) {
    int address = 0x404470;
    _DWORD * result_;
    __asm {
        xor eax, eax
        mov edx, a2
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
int * GetNewAITask(_DWORD *a1) {
    int address = 0x4044c0;
    int * result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
int RemoveAITaskController(int result, int *a2) {
    int address = 0x404500;
    int result_;
    __asm {
        xor eax, eax
        mov edx, a2
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
int sub_404550(_DWORD *a1) {
    int address = 0x404550;
    int result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
int packTownMgr_03_Data(int a1) {
    int address = 0x404620;
    int result_;
    __asm {
        xor eax, eax
        mov ebx, a1
        call address
        mov result_, eax
    }
    return result_;
}
int unpackTownMgr_03_Data(int *a1) {
    int address = 0x4046d0;
    int result_;
    __asm {
        xor eax, eax
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
int contourcalc_upHeap(int a1, _DWORD *a2) {
    int address = 0x404750;
    int result_;
    __asm {
        xor eax, eax
        mov esi, a2
        mov ecx, a1
        call address
        mov result_, eax
    }
    return result_;
}
int contourcalc_downHeap(int a1, int a2) {
    int address = 0x404790;
    int result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int getDoubleUnitBoundingBoxMashup_0(int result, CUnit *a2, CUnit *a3) {
    int address = 0x404810;
    int result_;
    __asm {
        xor eax, eax
        mov ecx, a3
        mov edx, a2
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
int AreaFixup_Destructor(_DWORD *a1, int a2) {
    int address = 0x4048b0;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
int * pathcalc_downHeap(int a1, struct_a2_1 *a2) {
    int address = 0x404920;
    int * result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_4049A0)(void), sub_4049A0, 0x4049a0);
_WORD * setRect16(__int16 a1, __int16 a2, __int16 a3, __int16 a4, _WORD *a5) {
    int address = 0x4049d0;
    _WORD * result_;
    __asm {
        xor eax, eax
        xor edx, edx
        xor ecx, ecx
        xor edi, edi
        xor esi, esi
        push dword ptr a5
        mov si, a4
        mov di, a3
        mov cx, a2
        mov dx, a1
        call address
        mov result_, eax
    }
    return result_;
}
void BltMask_Destructor(int a1) {
    int address = 0x404a10;
    __asm {
        mov ebx, a1
        call address
    }
}
signed CtrlNode_Destructor(int a1, int a2) {
    int address = 0x404a60;
    signed result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
void DlgGrp_Destructor(int a1) {
    int address = 0x404ad0;
    __asm {
        mov ebx, a1
        call address
    }
}
ChunkListItem * sub_404B20(ChunkNode *a1) {
    int address = 0x404b20;
    ChunkListItem * result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void ChunkNode_Destructor(ChunkNode *a1) {
    int address = 0x404b70;
    __asm {
        mov ebx, a1
        call address
    }
}
void * sub_404BC0(int a1, ChunkNode *a2) {
    int address = 0x404bc0;
    void * result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (*sub_404BFA)(), sub_404BFA, 0x404bfa);
DECL_FUNC(void (*sub_404C1E)(), sub_404C1E, 0x404c1e);
DECL_FUNC(void (__fastcall*renderTerrainGRPToCache)(grpFrame *a1, int a2), renderTerrainGRPToCache, 0x40aae0);
DECL_FUNC(char (__fastcall*imageRenderFxn0_0)(int a1, int a2, grpFrame *a3, RECT *a4, int a5), imageRenderFxn0_0, 0x40abbe);
DECL_FUNC(char (__fastcall*sub_40AD04)(int a1, int a2, int a3, int a4, int a5), sub_40AD04, 0x40ad04);
DECL_FUNC(char (__fastcall*sub_40AE63)(int a1, int a2, grpFrame *a3, _DWORD *a4, int a5), sub_40AE63, 0x40ae63);
DECL_FUNC(char (__fastcall*sub_40AFD5)(int a1, int a2, grpFrame *a3, tagRECT *a4, int a5), sub_40AFD5, 0x40afd5);
DECL_FUNC(char (__fastcall*imageRenderFxn3_0)(int a1, int a2, int a3, tagRECT *a4, int a5), imageRenderFxn3_0, 0x40b155);
DECL_FUNC(char (__fastcall*imageRenderFxn8_0)(int a1, int a2, int a3, tagRECT *a4, int a5), imageRenderFxn8_0, 0x40b2d3);
DECL_FUNC(char (__fastcall*imageRenderFxn17_0_cntd)(int a1, int a2, grpFrame *a3, RECT *a4, int a5), imageRenderFxn17_0_cntd, 0x40b441);
DECL_FUNC(char (__fastcall*imageRenderFxn9_0)(int a1, int a2, int a3, tagRECT *a4, int a5), imageRenderFxn9_0, 0x40b596);
DECL_FUNC(char (__fastcall*imageRenderFxn10_0)(int a1, int a2, grpFrame *a3, RECT *a4, int a5), imageRenderFxn10_0, 0x40b6f0);
DECL_FUNC(char (__fastcall*imageRenderFxn5_2__1_common)(int a1, int a2, int a3, tagRECT *a4, int a5), imageRenderFxn5_2__1_common, 0x40b824);
DECL_FUNC(char (__fastcall*imageRenderFxn3_1)(int a1, int a2, int a3, tagRECT *a4, int a5), imageRenderFxn3_1, 0x40b9a9);
DECL_FUNC(char (__fastcall*imageRenderFxn8_1)(int a1, int a2, int a3, tagRECT *a4, int a5), imageRenderFxn8_1, 0x40bb2e);
DECL_FUNC(char (__fastcall*imageRenderFxn9_1)(int a1, int a2, int a3, tagRECT *a4, int a5), imageRenderFxn9_1, 0x40bca3);
DECL_FUNC(char (__fastcall*imageRenderFxn17_1_cntd)(int a1, int a2, grpFrame *a3, RECT *a4, int a5), imageRenderFxn17_1_cntd, 0x40be04);
DECL_FUNC(char (__fastcall*imageRenderFxn0_1)(int a1, int a2, grpFrame *a3, RECT *a4, int a5), imageRenderFxn0_1, 0x40bf60);
DECL_FUNC(char (__fastcall*imageRenderFxn10_1)(int a1, int a2, grpFrame *a3, RECT *a4, int a5), imageRenderFxn10_1, 0x40c0ae);
void BlitToBitmap(int result, int a2, void *a3, const void *a4) {
    int address = 0x40c200;
    __asm {
        mov esi, a4
        mov edi, a3
        mov edx, a2
        mov eax, result
        call address
    }
}
DECL_FUNC(void (*BWFXN_blitMapTiles)(), BWFXN_blitMapTiles, 0x40c253);
DECL_FUNC(void (__fastcall*BlitTerrainCacheToGameBitmap)(int this_, int edx0, int a3, int a4), BlitTerrainCacheToGameBitmap, 0x40c2bd);
DECL_FUNC(unsigned (__fastcall*getDistancePrecise)(int a1, int a2, int a3, int a4), getDistancePrecise, 0x40c300);
DECL_FUNC(unsigned (__fastcall*GetApproxDistance)(int x, int a2, int y, int a4), GetApproxDistance, 0x40c360);
void drawMinitileImageData(signed int framebuf_pos, int minitile) {
    int address = 0x40c3b0;
    __asm {
        mov ecx, minitile
        mov edx, framebuf_pos
        call address
    }
}
DECL_FUNC(int (__fastcall*sub_40C4D2)(int a1, int a2, unsigned __int16 *a3, int a4), sub_40C4D2, 0x40c4d2);
DECL_FUNC(char * (__thiscall*type_info__szName)(type_info *this_), type_info__szName, 0x40c5bf);
DECL_FUNC(void (*sub_40CCA6)(), sub_40CCA6, 0x40cca6);
DECL_FUNC(void (*sub_40FFCB)(), sub_40FFCB, 0x40ffcb);
DECL_FUNC(void (__fastcall*scSpecialChars)(_BYTE *a1, _BYTE *a2), scSpecialChars, 0x410330);
DECL_FUNC(void (*sub_4103A0)(), sub_4103A0, 0x4103a0);
DECL_FUNC(void (*restoreStackPartial)(), restoreStackPartial, 0x4103e7);
DECL_FUNC(unsigned (__cdecl*crc32pk)(void *a1, int a2, int *a3), crc32pk, 0x410430);
DECL_FUNC(int (__cdecl*pk_explode)(int a1, int a2, int a3, int a4), pk_explode, 0x410470);
DECL_FUNC(int (__cdecl*pk_Expand)(int a1), pk_Expand, 0x4105f0);
DECL_FUNC(int (__cdecl*DecodeLit)(int a1), DecodeLit, 0x4106f0);
DECL_FUNC(int (__cdecl*DecodeDist)(_DWORD *a1, int a2), DecodeDist, 0x4108a0);
DECL_FUNC(int (__cdecl*WasteBits)(int a1, unsigned int a2), WasteBits, 0x410920);
DECL_FUNC(void (__cdecl*GenDecodeTabs)(int a1, int a2, int a3, int a4), GenDecodeTabs, 0x4109b0);
DECL_FUNC(unsigned (__cdecl*GenAscTabs)(int a1), GenAscTabs, 0x4109f0);
DECL_FUNC(int (__cdecl*lmemcpy)(_DWORD *a1, char *a2, unsigned int a3), lmemcpy, 0x410af0);
DECL_FUNC(int (__cdecl*pk_implode)(int a1, int a2, _DWORD *a3, int a4, _DWORD *a5, _DWORD *a6), pk_implode, 0x410b30);
DECL_FUNC(int (__cdecl*WriteCmpData)(int a1), WriteCmpData, 0x410cd0);
DECL_FUNC(int (__cdecl*FindRep)(int a1, unsigned __int8 *a2), FindRep, 0x411050);
DECL_FUNC(int (__cdecl*OutputBits)(int a1, unsigned int a2, unsigned int a3), OutputBits, 0x411390);
DECL_FUNC(__int16 (__cdecl*lmemset)(char *a1, unsigned __int8 a2, unsigned int a3), lmemset, 0x411420);
DECL_FUNC(int (__cdecl*FlushBuf)(int a1), FlushBuf, 0x411490);
DECL_FUNC(int (__cdecl*SortBuffer)(int a1, unsigned __int8 *a2, unsigned int a3), SortBuffer, 0x411510);
void sha1_init(ShaState *state) {
    int address = 0x411e90;
    __asm {
        mov eax, state
        call address
    }
}
int AES_Comp(_DWORD *a1, int *a2) {
    int address = 0x411ec0;
    int result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void MD5_0(ShaState *a1, char *a2, unsigned int a3) {
    int address = 0x4132b0;
    __asm {
        push dword ptr a3
        push dword ptr a2
        mov ebx, a1
        call address
    }
}
void MD5_1(ShaState *a1, BYTE *a2) {
    int address = 0x413380;
    __asm {
        mov edi, a2
        mov eax, a1
        call address
    }
}
signed CopySectionData(SectionData *a1, void *a2) {
    int address = 0x413440;
    signed result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(_DWORD * (__fastcall*sub_413480)(_DWORD *a1, _DWORD *a2), sub_413480, 0x413480);
DECL_FUNC(signed (__stdcall*ChunkNode_Constructor)(SectionData *a1, int a2, ChunkNode *a3), ChunkNode_Constructor, 0x4134a0);
DECL_FUNC(signed (__thiscall*sub_413550)(ChkSectionLoader *loader, ChunkNode *a2, int a3, MapChunks *map_chunks), sub_413550, 0x413550);
signed sub_4135C0(ChkSectionLoader *chk_section_loaders, ChunkNode *a2, int chk_section_loader_count) {
    int address = 0x4135c0;
    signed result_;
    __asm {
        xor eax, eax
        push dword ptr chk_section_loader_count
        mov edi, a2
        mov ecx, chk_section_loaders
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__thiscall*sub_413610)(_DWORD *this_), sub_413610, 0x413610);
int sub_413640(unsigned int *a1, int a2, unsigned int *a3) {
    int address = 0x413640;
    int result_;
    __asm {
        xor eax, eax
        mov esi, a3
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed sub_413670(Chunk *chk_data, ChunkNode *chunk_node, int chk_size_, int (__stdcall *chunk_node_constructor)(SectionData *, _DWORD, ChunkNode *)) {
    int address = 0x413670;
    signed result_;
    __asm {
        xor eax, eax
        push dword ptr chunk_node_constructor
        push dword ptr chk_size_
        mov edi, chunk_node
        mov eax, chk_data
        call address
        mov result_, eax
    }
    return result_;
}
signed ReadChunkNodes(int chk_section_loader_count, int chk_size_, ChkSectionLoader *chk_section_loader, void *chk_data, MapChunks *map_chunks) {
    int address = 0x413710;
    signed result_;
    __asm {
        xor eax, eax
        push dword ptr map_chunks
        push dword ptr chk_data
        mov ecx, chk_section_loader
        mov edx, chk_size_
        mov eax, chk_section_loader_count
        call address
        mov result_, eax
    }
    return result_;
}
void mapAuthProc(int (__stdcall *a1)(char *, void *, struct_v3 *), struct_v3 *a2) {
    int address = 0x4137f0;
    __asm {
        push dword ptr a2
        mov ebx, a1
        call address
    }
}
BOOL sub_413850(int a1, int a2) {
    int address = 0x413850;
    BOOL result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int spreadsCreep(UnitType unit_type, int a2) {
    int address = 0x413870;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov ax, unit_type
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(u8 * (__thiscall*getMapCreepDataBeginAndEnd)(void *this_), getMapCreepDataBeginAndEnd, 0x4138c0);
DECL_FUNC(u8 * (__thiscall*sub_4138E0)(void *this_), sub_4138E0, 0x4138e0);
DECL_FUNC(TileID * (__thiscall*getMapCreepData2BeginAndEnd)(void *this_), getMapCreepData2BeginAndEnd, 0x413900);
DECL_FUNC(TileID * (__thiscall*sub_413920)(void *this_), sub_413920, 0x413920);
DECL_FUNC(void (__thiscall*sub_413940)(void *this_, int a2, int a3), sub_413940, 0x413940);
int * sub_413980(int *result) {
    int address = 0x413980;
    int * result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
int * sub_4139D0(int *result) {
    int address = 0x4139d0;
    int * result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__fastcall*FreeCreepData)(bool exit_code), FreeCreepData, 0x413a10);
DECL_FUNC(signed (__stdcall*getCreepValue)(TileID *a1, int a2, int a3, TileID *a4, unsigned __int8 a5), getCreepValue, 0x413a70);
DECL_FUNC(signed (__stdcall*cb)(TileID *a1, int a2, int a3, TileID *a4, int a5), cb, 0x413aa0);
DECL_FUNC(int (*sub_413AE0)(), sub_413AE0, 0x413ae0);
BOOL sub_413B20(__int16 a1) {
    int address = 0x413b20;
    BOOL result_;
    __asm {
        xor eax, eax
        mov ax, a1
        call address
        mov result_, eax
    }
    return result_;
}
unsigned iterateDirectionalCreepData(int (__stdcall *a1)(char, TileID *, int, int, byte *), byte *a2, int a3, int a4) {
    int address = 0x413b30;
    unsigned result_;
    __asm {
        xor eax, eax
        push dword ptr a4
        push dword ptr a3
        mov edi, a2
        mov ebx, a1
        call address
        mov result_, eax
    }
    return result_;
}
_DWORD * sub_413BA0(_DWORD *result, _WORD *a2) {
    int address = 0x413ba0;
    _DWORD * result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
_DWORD * sub_413BD0(_DWORD *result) {
    int address = 0x413bd0;
    _DWORD * result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__cdecl*sub_413C00)(), sub_413C00, 0x413c00);
DECL_FUNC(void (__cdecl*sub_413C50)(), sub_413C50, 0x413c50);
DECL_FUNC(void (*nullsub_7)(), nullsub_7, 0x413d00);
DECL_FUNC(int (__cdecl*sub_413D10)(int a1, int a2, int (__cdecl *a3)(int, int, int *)), sub_413D10, 0x413d10);
signed sub_413DB0(int a1, UnitType dx0, signed int a3, signed int a4) {
    int address = 0x413db0;
    signed result_;
    __asm {
        xor eax, eax
        xor edx, edx
        push dword ptr a4
        push dword ptr a3
        mov dx, dx0
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(BOOL (__thiscall*sub_413F20)(void *this_, int a2), sub_413F20, 0x413f20);
BOOL sub_413F50(_WORD *a1) {
    int address = 0x413f50;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__fastcall*sub_413F70)(int a1, int a2), sub_413F70, 0x413f70);
DECL_FUNC(void (__stdcall*setCreepRelationalData)(int a1, int a2, int (__stdcall *a3)(TileID *, _DWORD, _DWORD, TileID *, _DWORD), int a4), setCreepRelationalData, 0x413fa0);
DECL_FUNC(signed (__stdcall*runCreepRandomizer_notePossibleDesync)(TileID *a1, int a2, int a3, TileID *a4, int a5), runCreepRandomizer_notePossibleDesync, 0x4140a0);
DECL_FUNC(grpHead * (__thiscall*readCreepFile)(char *grpFile), readCreepFile, 0x414100);
BOOL sub_414180(UnitType a1, int a2, int a3, int a4, int a5, int a6) {
    int address = 0x414180;
    BOOL result_;
    __asm {
        xor eax, eax
        xor edx, edx
        push dword ptr a6
        push dword ptr a5
        mov esi, a4
        mov edi, a3
        mov ebx, a2
        mov dx, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(BOOL (__fastcall*sub_4141F0)(unsigned int a1, unsigned int a2), sub_4141F0, 0x4141f0);
DECL_FUNC(int (__stdcall*getCreepAtAndSet)(char a1, TileID *a2, int a3, int a4, _BYTE *a5), getCreepAtAndSet, 0x414230);
DECL_FUNC(int (__stdcall*getNumSurroundingCreepTiles)(unsigned int a1, unsigned int a2), getNumSurroundingCreepTiles, 0x414290);
DECL_FUNC(int (__stdcall*BWFXN_CreepManagementCB)(char a1, TileID *a2, int a3, int a4, byte *a5), BWFXN_CreepManagementCB, 0x414440);
int sub_4144C0(int a1, int a2) {
    int address = 0x4144c0;
    int result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed sub_4144E0(int a1, int a2) {
    int address = 0x4144e0;
    signed result_;
    __asm {
        xor eax, eax
        mov esi, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed sub_414520(int a1, int a2) {
    int address = 0x414520;
    signed result_;
    __asm {
        xor eax, eax
        mov esi, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed sub_414560(int a1, int a2, UnitType dx0, int a4) {
    int address = 0x414560;
    signed result_;
    __asm {
        xor eax, eax
        xor edx, edx
        push dword ptr a4
        mov dx, dx0
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
char sub_414680(int a1, int a2, UnitType a3) {
    int address = 0x414680;
    char result_;
    __asm {
        xor eax, eax
        xor edx, edx
        mov dx, a3
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
DECL_FUNC(char (__stdcall*ApplyCreepAtLocationFromUnitType)(unsigned __int16 a1, int a2, int a3), ApplyCreepAtLocationFromUnitType, 0x4148f0);
void InitTerrainGraphicsAndCreep(struct_a1 *a1, TileID *a2, int a3, int a4, void *a5) {
    int address = 0x414a30;
    __asm {
        push dword ptr a5
        push dword ptr a4
        push dword ptr a3
        mov ecx, a2
        mov eax, a1
        call address
    }
}
dialog * sub_414B50(dialog *a1, int (__thiscall *a2)(_DWORD *)) {
    int address = 0x414b50;
    dialog * result_;
    __asm {
        xor eax, eax
        mov edi, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int sub_414B70(dialog *a1, dialog *a2) {
    int address = 0x414b70;
    int result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
_DWORD * sub_414B90(_DWORD *result, _DWORD *a2) {
    int address = 0x414b90;
    _DWORD * result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
_DWORD * sub_414BB0(_DWORD *result, _DWORD *a2) {
    int address = 0x414bb0;
    _DWORD * result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
_DWORD * sub_414BC0(_DWORD *a1, int (__thiscall *a2)(_DWORD *), _DWORD *a3) {
    int address = 0x414bc0;
    _DWORD * result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        mov edi, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void scrollerInit(dialog *result) {
    int address = 0x414c00;
    __asm {
        mov eax, result
        call address
    }
}
dialog * sub_414C90(unsigned __int16 a1, int a2, int a3, int a4) {
    int address = 0x414c90;
    dialog * result_;
    __asm {
        xor eax, eax
        push dword ptr a4
        push dword ptr a3
        push dword ptr a2
        mov ax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__thiscall*sub_414D30)(dialog *this_), sub_414D30, 0x414d30);
dialog * sub_414DB0(dialog *result, char a2, char a3) {
    int address = 0x414db0;
    dialog * result_;
    __asm {
        xor eax, eax
        xor edx, edx
        xor ecx, ecx
        mov cl, a3
        mov dl, a2
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
u16 sub_414DC0(dialog *a1) {
    int address = 0x414dc0;
    u16 result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, ax
    }
    return result_;
}
DECL_FUNC(__int16 (__thiscall*sub_414DD0)(dialog *this_), sub_414DD0, 0x414dd0);
signed ScrollerKeyPress(dlgEvent *a1, dialog *a2) {
    int address = 0x414e30;
    signed result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__fastcall*sub_414F10)(dialog *a1, dlgEvent *a2), sub_414F10, 0x414f10);
void sub_415090(dialog *a1) {
    int address = 0x415090;
    __asm {
        mov edi, a1
        call address
    }
}
void scrollerMouseUpdate(dlgEvent *a1, dialog *a2) {
    int address = 0x415140;
    __asm {
        mov esi, a2
        mov eax, a1
        call address
    }
}
void scrollerUpdate(__int16 a1, dialog *a2) {
    int address = 0x4152f0;
    __asm {
        xor eax, eax
        mov esi, a2
        mov ax, a1
        call address
    }
}
void ScrollBar_SetBounds(__int16 a1, __int16 a2, dialog *a3) {
    int address = 0x415340;
    __asm {
        xor edx, edx
        xor ecx, ecx
        mov esi, a3
        mov cx, a2
        mov dx, a1
        call address
    }
}
int sub_4153B0(dialog *a1, rect *a2) {
    int address = 0x4153b0;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov ebx, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__fastcall*genericHScrollUpdate)(dialog *dlg, int x, int y, rect *dst), genericHScrollUpdate, 0x4155a0);
DECL_FUNC(void (__fastcall*genericVScrollUpdate)(dialog *dlg, int x, int y, rect *dst), genericVScrollUpdate, 0x415760);
void updateScroller(dialog *result, dlgEvent *a2) {
    int address = 0x415910;
    __asm {
        push dword ptr a2
        mov eax, result
        call address
    }
}
void selectNextScrollerElement(dialog *a1, dlgEvent *a2, __int16 a3, int a4) {
    int address = 0x415980;
    __asm {
        push dword ptr a4
        push dword ptr a3
        push dword ptr a2
        mov esi, a1
        call address
    }
}
char scrollerLBtnDown(dialog *a1, dlgEvent *a2) {
    int address = 0x415a90;
    char result_;
    __asm {
        xor eax, eax
        mov edi, a2
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
DECL_FUNC(bool (__fastcall*genericScrollerInteract)(dialog *dlg, struct dlgEvent *evt), genericScrollerInteract, 0x415af0);
const char * sub_415C70(__int16 a1, int a2) {
    int address = 0x415c70;
    const char * result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov ax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int sub_415CA0(int a1, int a2, int a3, int (__fastcall *a4)(int, _DWORD, _DWORD, int, int)) {
    int address = 0x415ca0;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a4
        push dword ptr a3
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void * loadTBL(int a1, int a2, char *a3, char *a4, char **a5, FastFileRead a6) {
    int address = 0x415cc0;
    void * result_;
    __asm {
        xor eax, eax
        push dword ptr a6
        push dword ptr a5
        push dword ptr a4
        mov ecx, a3
        mov edx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int sub_415D20(unsigned __int16 a1, dialog *a2, int a3) {
    int address = 0x415d20;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        mov ecx, a2
        mov ax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__thiscall*sub_415D60)(Timer *this_), sub_415D60, 0x415d60);
DECL_FUNC(BOOL (__thiscall*sub_415D70)(Timer *this_), sub_415D70, 0x415d70);
DECL_FUNC(BOOL (__thiscall*sub_415D90)(Timer *this_), sub_415D90, 0x415d90);
DECL_FUNC(void (__cdecl*iterateTimers)(), iterateTimers, 0x415dc0);
void freeTimers(dialog *a1) {
    int address = 0x415f30;
    __asm {
        mov edi, a1
        call address
    }
}
Timer * waitLoopCntd(__int16 timer_id, dialog *a2) {
    int address = 0x416000;
    Timer * result_;
    __asm {
        xor eax, eax
        xor edx, edx
        mov esi, a2
        mov dx, timer_id
        call address
        mov result_, eax
    }
    return result_;
}
void SetCallbackTimer(__int16 timer_id, dialog *dlg, int a3, void (__fastcall *a4)(dialog *, __int16)) {
    int address = 0x416090;
    __asm {
        xor eax, eax
        push dword ptr a4
        push dword ptr a3
        mov ecx, dlg
        mov ax, timer_id
        call address
    }
}
int sub_4161A0(dialog *a1, char *a2) {
    int address = 0x4161a0;
    int result_;
    __asm {
        xor eax, eax
        mov edx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
char sub_4161B0(char a1, int a2) {
    int address = 0x4161b0;
    char result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov al, a1
        call address
        mov result_, al
    }
    return result_;
}
signed koreanTextLeadByteCheck(int byte_position, const char *text) {
    int address = 0x4161c0;
    signed result_;
    __asm {
        xor eax, eax
        mov edi, text
        mov ebx, byte_position
        call address
        mov result_, eax
    }
    return result_;
}
char DlgDrawEditCharacters(dialog *a1) {
    int address = 0x416240;
    char result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, al
    }
    return result_;
}
char * setFontSizeFromFlags(dialog *a1) {
    int address = 0x416450;
    char * result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
__int16 sub_4164D0(int a1, dialog *a2) {
    int address = 0x4164d0;
    __int16 result_;
    __asm {
        xor eax, eax
        mov esi, a2
        mov edx, a1
        call address
        mov result_, ax
    }
    return result_;
}
void sub_416570(dialog *a1, char a2) {
    int address = 0x416570;
    __asm {
        xor ebx, ebx
        mov bl, a2
        mov eax, a1
        call address
    }
}
void dlgEditDestroy(dialog *a1) {
    int address = 0x4165c0;
    __asm {
        mov eax, a1
        call address
    }
}
DECL_FUNC(void (__fastcall*sub_416600)(dialog *a1, __int16 a2), sub_416600, 0x416600);
void sub_416650(const char *a1, dialog *a2) {
    int address = 0x416650;
    __asm {
        mov esi, a2
        mov edi, a1
        call address
    }
}
void sub_416690(dialog *a1, char a2) {
    int address = 0x416690;
    __asm {
        push dword ptr a2
        mov esi, a1
        call address
    }
}
void sub_416710(dialog *a1, char a2) {
    int address = 0x416710;
    __asm {
        push dword ptr a2
        mov esi, a1
        call address
    }
}
void SetTextBoxTimer(char a1, dialog *a2) {
    int address = 0x416790;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov al, a1
        call address
    }
}
void DlgDrawEditText(dialog *a1) {
    int address = 0x4167f0;
    __asm {
        mov edi, a1
        call address
    }
}
DECL_FUNC(bool (__fastcall*genericEditInteract)(dialog *dlg, struct dlgEvent *evt), genericEditInteract, 0x416980);
DECL_FUNC(BOOL (*BWFXN_GameEndTarget)(), BWFXN_GameEndTarget, 0x416d90);
int * sub_416E40(int a1, int a2, int a3) {
    int address = 0x416e40;
    int * result_;
    __asm {
        xor eax, eax
        mov esi, a3
        mov edi, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
char * sub_416E80(int a1, int a2) {
    int address = 0x416e80;
    char * result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (*sub_416EB0)(), sub_416EB0, 0x416eb0);
DECL_FUNC(void (*sub_416EC0)(), sub_416EC0, 0x416ec0);
int ExecuteSCode(int a1, int a2, int a3, int a4, int a5, int a6) {
    int address = 0x416ed0;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a6
        push dword ptr a5
        push dword ptr a4
        mov ecx, a3
        mov edx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__stdcall*sub_416F30)(int a1, int a2, int a3, int a4, int a5, int a6), sub_416F30, 0x416f30);
int sub_417130(int result, int a2, int a3, int a4, int a5, int a6, int a7) {
    int address = 0x417130;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a7
        push dword ptr a6
        push dword ptr a5
        push dword ptr a4
        mov ecx, a3
        mov edx, a2
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
bool sub_4171F0(const void *a1, const void *a2) {
    int address = 0x4171f0;
    bool result_;
    __asm {
        xor eax, eax
        mov edx, a2
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
unsigned sub_417210(unsigned __int8 result, unsigned __int8 a2, unsigned __int8 a3) {
    int address = 0x417210;
    unsigned result_;
    __asm {
        xor eax, eax
        xor edx, edx
        xor ecx, ecx
        mov cl, a3
        mov dl, a2
        mov al, result
        call address
        mov result_, eax
    }
    return result_;
}
int sub_417270(int a1, int a2) {
    int address = 0x417270;
    int result_;
    __asm {
        xor eax, eax
        mov ebx, a2
        mov ecx, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__fastcall*sub_4172C0)(int a1, int a2), sub_4172C0, 0x4172c0);
int DrawTransparencies(int a1, int a2, RECT *a3, int a4, int a5, int a6) {
    int address = 0x4172f0;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a6
        push dword ptr a5
        push dword ptr a4
        mov edi, a3
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__stdcall*sub_4174A0)(char *a1, int a2, unsigned __int8 a3), sub_4174A0, 0x4174a0);
void sub_4178B0(const void *result, _DWORD *a2) {
    int address = 0x4178b0;
    __asm {
        push dword ptr a2
        mov eax, result
        call address
    }
}
unsigned sub_417A10(unsigned __int8 a1, char *a2, int a3, int a4, int a5) {
    int address = 0x417a10;
    unsigned result_;
    __asm {
        xor eax, eax
        push dword ptr a5
        push dword ptr a4
        push dword ptr a3
        push dword ptr a2
        mov al, a1
        call address
        mov result_, eax
    }
    return result_;
}
void CompileSCode(int a1, int palette) {
    int address = 0x417c20;
    __asm {
        push dword ptr palette
        mov ebx, a1
        call address
    }
}
DECL_FUNC(__int16 (__fastcall*sub_417DF0)(int a1, int a2), sub_417DF0, 0x417df0);
DECL_FUNC(int (__fastcall*pDLGInteract)(int a1, int a2), pDLGInteract, 0x417e20);
DECL_FUNC(int (__thiscall*canTextboxDlgAcceptEvents_CB)(dialog *this_), canTextboxDlgAcceptEvents_CB, 0x417e30);
int setSelectedIndexDirect(int a1, dialog *a2) {
    int address = 0x417e50;
    int result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int doUserEvent(unsigned __int16 a1, int a2, dialog *a3) {
    int address = 0x417e70;
    int result_;
    __asm {
        xor eax, eax
        mov ecx, a3
        mov edx, a2
        mov ax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int DLG_IterateChildren(dialog *a1, int (__fastcall *a2)(_DWORD, _DWORD), int a3) {
    int address = 0x417eb0;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        mov ebx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int dlgUpdate1(dialog *a1, dlgEvent *a2, int (__fastcall *a3)(_DWORD, _DWORD)) {
    int address = 0x417f00;
    int result_;
    __asm {
        xor eax, eax
        mov edi, a3
        mov ebx, a2
        mov ecx, a1
        call address
        mov result_, eax
    }
    return result_;
}
int sub_417F20(int result, int a2, _WORD *a3) {
    int address = 0x417f20;
    int result_;
    __asm {
        xor eax, eax
        mov ecx, a3
        mov edx, a2
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
BOOL sub_417F50(_WORD *a1, _WORD *a2) {
    int address = 0x417f50;
    BOOL result_;
    __asm {
        xor eax, eax
        mov edx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int sub_417F80(int result) {
    int address = 0x417f80;
    int result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
int sub_417FA0(int result) {
    int address = 0x417fa0;
    int result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_417FB0)(), sub_417FB0, 0x417fb0);
BOOL sub_417FF0(dialog *a1) {
    int address = 0x417ff0;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(signed (__thiscall*isDlgVisible_CB)(dialog *this_), isDlgVisible_CB, 0x418010);
int dlgMouseOverGenericLabel(dialog *a1) {
    int address = 0x418030;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
dialog * sub_418060(dialog *a1, int a2) {
    int address = 0x418060;
    dialog * result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
dialog * getControlFromIndex(dialog *dlg, __int16 index) {
    int address = 0x418080;
    dialog * result_;
    __asm {
        xor eax, eax
        xor ecx, ecx
        mov cx, index
        mov eax, dlg
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(dialog * (__thiscall*DLG_prevEntry)(dialog *a1), DLG_prevEntry, 0x4180a0);
DECL_FUNC(dialog * (__thiscall*DLG_nextEntry)(dialog *this_), DLG_nextEntry, 0x4180c0);
dialog * sub_4180D0(dialog *result, int a2) {
    int address = 0x4180d0;
    dialog * result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
void registerUserDialogAction(dialog *result, unsigned int a2, FnInteract *a3) {
    int address = 0x418100;
    __asm {
        mov edi, a3
        mov ecx, a2
        mov eax, result
        call address
    }
}
unsigned sub_418150(dialog *a1) {
    int address = 0x418150;
    unsigned result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__fastcall*dlgPassUpperKeyDwnEventToUserHotkey_CB)(dialog *a1, char *a2), dlgPassUpperKeyDwnEventToUserHotkey_CB, 0x418170);
DECL_FUNC(int (__fastcall*dlgPassLowerKeyDwnEventToUserHotkey_CB)(dialog *a1, char *a2), dlgPassLowerKeyDwnEventToUserHotkey_CB, 0x4181d0);
DECL_FUNC(int (__fastcall*SendLowercaseHotkeyEvent_CB)(dialog *a1, char *a2), SendLowercaseHotkeyEvent_CB, 0x418220);
int dlgPassHotkeyEventToFlags(int a1, int a2) {
    int address = 0x418270;
    int result_;
    __asm {
        xor eax, eax
        mov edx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int dlgPassHotkeyEventToIndex(dialog *a1, __int16 a2) {
    int address = 0x4182f0;
    int result_;
    __asm {
        xor eax, eax
        xor ecx, ecx
        mov cx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
dialog * dlgSetMouseOver(dialog *a1, struct dlgEvent *a2) {
    int address = 0x418340;
    dialog * result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
BOOL isDlgEventCursorInsideDlg(dialog *a1, dlgEvent *a2) {
    int address = 0x418410;
    BOOL result_;
    __asm {
        xor eax, eax
        mov edx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(unsigned (__thiscall*sub_418440)(int this_), sub_418440, 0x418440);
u8 * FreeDialogDestBuffer(dialog *a1) {
    int address = 0x418480;
    u8 * result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
int passUppercaseKeyDwnToUserChrEvent(dlgEvent *a1, int a2, dialog *a3) {
    int address = 0x4184a0;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int passLowercaseKeyDwnToUserChrEvent(dlgEvent *a1, dialog *a2) {
    int address = 0x4184e0;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int GenericCharEvent_HandleChild_maybe(dialog *a1, dlgEvent *a2) {
    int address = 0x418510;
    int result_;
    __asm {
        xor eax, eax
        mov edi, a2
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
void sub_418570(dialog *a1) {
    int address = 0x418570;
    __asm {
        mov eax, a1
        call address
    }
}
void UpdateDlgOnFlag(dialog *a1) {
    int address = 0x418580;
    __asm {
        mov eax, a1
        call address
    }
}
void RefreshDlgForCursor(dialog *a1) {
    int address = 0x4185a0;
    __asm {
        mov esi, a1
        call address
    }
}
void sub_4185E0(dialog *a1, char *a2) {
    int address = 0x4185e0;
    __asm {
        mov ecx, a2
        mov eax, a1
        call address
    }
}
DECL_FUNC(void (__thiscall*sub_418600)(dialog *this_), sub_418600, 0x418600);
DialogFlags DisableControl(dialog *a1) {
    int address = 0x418640;
    DialogFlags result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
void showDialog(dialog *dlg) {
    int address = 0x4186a0;
    __asm {
        mov esi, dlg
        call address
    }
}
void HideDialog(dialog *dlg) {
    int address = 0x418700;
    __asm {
        mov esi, dlg
        call address
    }
}
void SetAsActiveControl_maybe(dialog *a1, dialog *a2) {
    int address = 0x418790;
    __asm {
        mov esi, a2
        mov edi, a1
        call address
    }
}
void sub_418830(dialog *a1) {
    int address = 0x418830;
    __asm {
        mov edi, a1
        call address
    }
}
void setDialogVisibility(int a1, dialog *a2) {
    int address = 0x4188e0;
    __asm {
        mov ecx, a2
        mov eax, a1
        call address
    }
}
void genericDlgMouseMoveEventHandler(dialog *a1, dlgEvent *a2) {
    int address = 0x418900;
    __asm {
        mov ecx, a2
        mov eax, a1
        call address
    }
}
void ShowDialog(dlgEvent *a1, dialog *a2, dialog *a3) {
    int address = 0x418960;
    __asm {
        mov ecx, a3
        mov edx, a2
        mov eax, a1
        call address
    }
}
signed sub_418A10(dialog *a1, dlgEvent *a2) {
    int address = 0x418a10;
    signed result_;
    __asm {
        xor eax, eax
        mov esi, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed SetNextActiveElement(dialog *a1, dialog *(__thiscall *a2)(dialog *a1)) {
    int address = 0x418a60;
    signed result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
u32 genericDlgCharEventHandler(dlgEvent *evt, dialog *dlg) {
    int address = 0x418ab0;
    u32 result_;
    __asm {
        xor eax, eax
        push dword ptr dlg
        mov eax, evt
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__stdcall*sub_418C00)(dialog *a1), sub_418C00, 0x418c00);
unsigned genericCommonInteract(dlgEvent *a1, dialog *a2) {
    int address = 0x418c40;
    unsigned result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void EnableControl(dialog *a1) {
    int address = 0x418e00;
    __asm {
        mov esi, a1
        call address
    }
}
DECL_FUNC(int (__fastcall*statRes_Text_Interact)(dialog *dlg, dlgEvent *evt), statRes_Text_Interact, 0x418e60);
DECL_FUNC(int (__fastcall*genericDlgInteract)(dialog *dlg, struct dlgEvent *evt), genericDlgInteract, 0x418eb0);
void sub_419170(int a1, dialog *a2) {
    int address = 0x419170;
    __asm {
        mov ecx, a2
        mov eax, a1
        call address
    }
}
DECL_FUNC(int (__fastcall*genericLabelInteract)(dialog *dlg, dlgEvent *evt), genericLabelInteract, 0x419190);
DECL_FUNC(int (__fastcall*genericImageInteract)(dialog *dlg, struct dlgEvent *evt), genericImageInteract, 0x4191e0);
DECL_FUNC(int (*sub_419260)(), sub_419260, 0x419260);
__int16 sub_419290(DlgGrp *a1) {
    int address = 0x419290;
    __int16 result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, ax
    }
    return result_;
}
int sub_419450(int result) {
    int address = 0x419450;
    int result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
void sub_419460(void (__stdcall *result)(int)) {
    int address = 0x419460;
    __asm {
        mov eax, result
        call address
    }
}
DECL_FUNC(void (__thiscall*sub_419470)(void *this_), sub_419470, 0x419470);
DECL_FUNC(BOOL (__thiscall*sub_419480)(void *this_), sub_419480, 0x419480);
DECL_FUNC(void (*sub_4194B0)(), sub_4194B0, 0x4194b0);
void AllocInitDialogData(dialog *a1, dialog *a2, FnAllocBackgroundImage allocFunction, const char *logfile, int logline) {
    int address = 0x4194e0;
    __asm {
        push dword ptr logline
        push dword ptr logfile
        push dword ptr allocFunction
        mov ebx, a2
        mov eax, a1
        call address
    }
}
DECL_FUNC(int (*sub_4195E0)(), sub_4195E0, 0x4195e0);
void removeDlgFromTimerTracking(dialog *a1) {
    int address = 0x419640;
    __asm {
        mov edx, a1
        call address
    }
}
void assignNextActiveDlgElement(dialog *dlg, int a2) {
    int address = 0x4196a0;
    __asm {
        mov esi, a2
        mov edi, dlg
        call address
    }
}
void SetActivationDelay_maybe(dialog *dlg) {
    int address = 0x4196f0;
    __asm {
        mov edx, dlg
        call address
    }
}
DECL_FUNC(void (__cdecl*pressGlobalDlgHotkey)(), pressGlobalDlgHotkey, 0x419740);
DlgGrp * DlgGrp_Constructor(int a1, char *a2, const char *grp_path, grpHead *(__fastcall *a4)(const char *, int, const char *, int)) {
    int address = 0x4197b0;
    DlgGrp * result_;
    __asm {
        xor eax, eax
        push dword ptr a4
        push dword ptr grp_path
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__fastcall*DestroyScreenLayer)(bool exit_code), DestroyScreenLayer, 0x419cb0);
void InitializeDialog(dialog *a1, FnInteract a2) {
    int address = 0x419d20;
    __asm {
        mov eax, a2
        mov esi, a1
        call address
    }
}
dialog * sub_419E10(int a1, int a2, int a3, int (__fastcall *a4)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD), void (__fastcall *a5)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD)) {
    int address = 0x419e10;
    dialog * result_;
    __asm {
        xor eax, eax
        push dword ptr a5
        push dword ptr a4
        mov esi, a3
        mov edi, a2
        mov ecx, a1
        call address
        mov result_, eax
    }
    return result_;
}
void setFontHandleFromFlags(dialog *a1) {
    int address = 0x419e50;
    __asm {
        mov eax, a1
        call address
    }
}
void DestroyDialog(dialog *a1) {
    int address = 0x419ea0;
    __asm {
        mov esi, a1
        call address
    }
}
DECL_FUNC(void (*sub_419F80)(), sub_419F80, 0x419f80);
int sendInputToAllDialogs(dlgEvent *evt) {
    int address = 0x419fd0;
    int result_;
    __asm {
        xor eax, eax
        mov ebx, evt
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__cdecl*InitializeDialogScreenLayer)(), InitializeDialogScreenLayer, 0x41a030);
int gluLoadBINDlg(dialog *a1, FnInteract fn_interact) {
    int address = 0x41a080;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr fn_interact
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
dialog * comboboxInit(dialog *result) {
    int address = 0x41a110;
    dialog * result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
void comboboxSelNext(dialog *dlg) {
    int address = 0x41a140;
    __asm {
        mov eax, dlg
        call address
    }
}
char sub_41A180(int a1) {
    int address = 0x41a180;
    char result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
DECL_FUNC(int (*sub_41A190)(), sub_41A190, 0x41a190);
DECL_FUNC(int (*sub_41A1A0)(), sub_41A1A0, 0x41a1a0);
BOOL isEventInDlgField(dialog *a1, dlgEvent *a2) {
    int address = 0x41a1b0;
    BOOL result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*isCursorInDlgControl)(void), isCursorInDlgControl, 0x41a270);
DECL_FUNC(int (__thiscall*listboxGetSelectedIndexFromMousePosition)(_DWORD a1), listboxGetSelectedIndexFromMousePosition, 0x41a2c0);
DECL_FUNC(int (*sub_41A3C0)(), sub_41A3C0, 0x41a3c0);
DECL_FUNC(int (*sub_41A3F0)(), sub_41A3F0, 0x41a3f0);
DECL_FUNC(int (*sub_41A420)(), sub_41A420, 0x41a420);
DECL_FUNC(int (__stdcall*sub_41A430)(int a1), sub_41A430, 0x41a430);
DECL_FUNC(int (*sub_41A450)(), sub_41A450, 0x41a450);
void listboxLButtonUp(dialog *a1) {
    int address = 0x41a490;
    __asm {
        mov eax, a1
        call address
    }
}
void comboboxLButtonUp(dialog *a1) {
    int address = 0x41a4e0;
    __asm {
        mov esi, a1
        call address
    }
}
void ResetDropdown(dialog *a1) {
    int address = 0x41a530;
    __asm {
        mov esi, a1
        call address
    }
}
void comboboxLButtonDown(dialog *a1) {
    int address = 0x41a580;
    __asm {
        mov esi, a1
        call address
    }
}
void DlgSetSelected_UpdateScrollbar(unsigned __int8 a1, dialog *a2) {
    int address = 0x41a600;
    __asm {
        xor ebx, ebx
        mov esi, a2
        mov bl, a1
        call address
    }
}
DECL_FUNC(void (__thiscall*scrollerUpdateParent)(dialog *this_), scrollerUpdateParent, 0x41a6a0);
void dlgFontSize(dialog *a1) {
    int address = 0x41a6d0;
    __asm {
        mov esi, a1
        call address
    }
}
void dlgSetSelectedImmediate(unsigned __int8 a1, dialog *a2) {
    int address = 0x41a850;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov al, a1
        call address
    }
}
DECL_FUNC(unsigned (__stdcall*sub_41A890)(dialog *a1, int *a2), sub_41A890, 0x41a890);
int dlgScrollKeyInteract(dialog *a1, dlgEvent *a2) {
    int address = 0x41a9d0;
    int result_;
    __asm {
        xor eax, eax
        mov edx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void listboxLButtonDown(dialog *a1, dlgEvent *a2) {
    int address = 0x41ab20;
    __asm {
        push dword ptr a2
        mov eax, a1
        call address
    }
}
DECL_FUNC(void (__thiscall*sub_41AC20)(dialog *this_), sub_41AC20, 0x41ac20);
u8 dlgComboboxUpdate(dialog *a1, rect *a2) {
    int address = 0x41ac50;
    u8 result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov ebx, a1
        call address
        mov result_, al
    }
    return result_;
}
void listboxMouseMove(dialog *a1, dlgEvent *a2) {
    int address = 0x41ae90;
    __asm {
        mov edi, a2
        mov eax, a1
        call address
    }
}
DECL_FUNC(void (__fastcall*listboxEntryUpdate)(struct dialog *dlg, u8 selectedIndex, rect *dstRect, int x, int y), listboxEntryUpdate, 0x41af10);
DECL_FUNC(void (__fastcall*genericComboboxUpdate)(dialog *dlg, int x, int y, rect *dst), genericComboboxUpdate, 0x41b110);
__int16 listboxInit(dialog *a1) {
    int address = 0x41b140;
    __int16 result_;
    __asm {
        xor eax, eax
        mov ebx, a1
        call address
        mov result_, ax
    }
    return result_;
}
void setScrollbarVisibility(dialog *a1, int a2) {
    int address = 0x41b300;
    __asm {
        mov edi, a2
        mov eax, a1
        call address
    }
}
void listboxHide(dialog *a1) {
    int address = 0x41b3d0;
    __asm {
        mov eax, a1
        call address
    }
}
void listboxShow(dialog *a1) {
    int address = 0x41b3f0;
    __asm {
        mov eax, a1
        call address
    }
}
void List_Update(dialog *a1) {
    int address = 0x41b410;
    __asm {
        mov eax, a1
        call address
    }
}
void * ListBox_RemoveEntry(unsigned __int8 a1, dialog *a2) {
    int address = 0x41b550;
    void * result_;
    __asm {
        xor eax, eax
        mov esi, a2
        mov al, a1
        call address
        mov result_, eax
    }
    return result_;
}
void sub_41B620(const char *a1, dialog *dlg, unsigned __int8 a3, char a4) {
    int address = 0x41b620;
    __asm {
        push dword ptr a4
        push dword ptr a3
        mov ecx, dlg
        mov eax, a1
        call address
    }
}
u8 ListBox_AddEntry(const char *a1, dialog *a2, char a3) {
    int address = 0x41b760;
    u8 result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
DECL_FUNC(int (*sub_41B860)(), sub_41B860, 0x41b860);
void ClearListBox(dialog *a1) {
    int address = 0x41b890;
    __asm {
        mov eax, a1
        call address
    }
}
int sub_41B8E0(int a1) {
    int address = 0x41b8e0;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
BOOL genericListboxDestroy(dialog *a1) {
    int address = 0x41b8f0;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__fastcall*genericListboxUpdate)(dialog *dlg, int x, int y, rect *dst), genericListboxUpdate, 0x41b950);
DECL_FUNC(int (__fastcall*genericListboxInteract)(dialog *dlg, dlgEvent *evt), genericListboxInteract, 0x41baa0);
DECL_FUNC(int (__fastcall*genericComboboxInteract)(dialog *dlg, struct dlgEvent *evt), genericComboboxInteract, 0x41bc40);
DECL_FUNC(void (*sub_41BD00)(), sub_41BD00, 0x41bd00);
Bitmap * sub_41BD20(Bitmap *result) {
    int address = 0x41bd20;
    Bitmap * result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
int sub_41BD30(int result) {
    int address = 0x41bd30;
    int result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
int sub_41BD50(int a1) {
    int address = 0x41bd50;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
BOOL isDialogInRect(dialog *a1, tagRECT *a2) {
    int address = 0x41bda0;
    BOOL result_;
    __asm {
        xor eax, eax
        mov edx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_41BDF0)(), sub_41BDF0, 0x41bdf0);
DECL_FUNC(void (*sub_41BE20)(), sub_41BE20, 0x41be20);
BOOL sub_41BE70(__int16 *a1) {
    int address = 0x41be70;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
BOOL sub_41BED0(rect *a1) {
    int address = 0x41bed0;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_41BF30)(), sub_41BF30, 0x41bf30);
DECL_FUNC(int (__thiscall*isRectBoundsInside_Assign_16)(_DWORD a1), isRectBoundsInside_Assign_16, 0x41bf60);
BOOL isRectBoundsInside_Assign_32(LPRECT a1, RECT *a2) {
    int address = 0x41bfc0;
    BOOL result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_41C010)(), sub_41C010, 0x41c010);
DECL_FUNC(int (*sub_41C030)(), sub_41C030, 0x41c030);
BOOL sub_41C050(__int16 *a1, LPRECT lprc) {
    int address = 0x41c050;
    BOOL result_;
    __asm {
        xor eax, eax
        push dword ptr lprc
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
Bitmap * sub_41C080(RECT *a1, dialog *a2) {
    int address = 0x41c080;
    Bitmap * result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void _RgnUnk(LPRECT a1) {
    int address = 0x41c200;
    __asm {
        mov eax, a1
        call address
    }
}
void sub_41C2A0(tagRECT *a1) {
    int address = 0x41c2a0;
    __asm {
        mov eax, a1
        call address
    }
}
DECL_FUNC(void (*RefreshCursorRect)(), RefreshCursorRect, 0x41c2c0);
void updateDialog(dialog *dlg) {
    int address = 0x41c400;
    __asm {
        mov eax, dlg
        call address
    }
}
void sub_41C4F0(dialog *a1) {
    int address = 0x41c4f0;
    __asm {
        mov edi, a1
        call address
    }
}
int sub_41C5A0(int a1, rect *a2) {
    int address = 0x41c5a0;
    int result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(signed (__stdcall*CtrlNode_Constructor)(dialog *a1, RECT *a2), CtrlNode_Constructor, 0x41c5d0);
DECL_FUNC(void (*updateAllDlgs)(), updateAllDlgs, 0x41c780);
DECL_FUNC(void (*sub_41C7B0)(), sub_41C7B0, 0x41c7b0);
int sub_41C810(int a1, int a2) {
    int address = 0x41c810;
    int result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (*BWFXN_RedrawTarget)(), BWFXN_RedrawTarget, 0x41ca00);
DECL_FUNC(void (__fastcall*DialogUpdateProc)(int a1, int a2, Bitmap *pSurface, bounds *pBounds), DialogUpdateProc, 0x41cb50);
int fixDrawBoundsWithin(__int16 *a1, __int16 *a2) {
    int address = 0x41cf60;
    int result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void BWFXN_PrintIcon(bounds *a1, Bitmap *a2, __int16 a3, __int16 a4) {
    int address = 0x41d090;
    __asm {
        push dword ptr a4
        push dword ptr a3
        mov edi, a2
        mov eax, a1
        call address
    }
}
u8 * sub_41D160(unsigned __int8 a1, Bitmap *a2, int a3, int a4, int a5, int a6, int a7) {
    int address = 0x41d160;
    u8 * result_;
    __asm {
        xor eax, eax
        push dword ptr a7
        push dword ptr a6
        push dword ptr a5
        push dword ptr a4
        mov ecx, a3
        mov edx, a2
        mov al, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_41D1D0)(), sub_41D1D0, 0x41d1d0);
void sub_41D210(Bitmap *eax0, __int16 a2, __int16 a3) {
    int address = 0x41d210;
    __asm {
        push dword ptr a3
        push dword ptr a2
        mov eax, eax0
        call address
    }
}
int BlitSurface(bounds *a1, Bitmap *a2, __int16 a3, __int16 a4) {
    int address = 0x41d260;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a4
        push dword ptr a3
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
__int16 sub_41D310(int a1, char a2) {
    int address = 0x41d310;
    __int16 result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov ebx, a1
        call address
        mov result_, ax
    }
    return result_;
}
DECL_FUNC(void (*sub_41D350)(), sub_41D350, 0x41d350);
BOOL sub_41D360(int a1, RECT *a2, int edx0) {
    int address = 0x41d360;
    BOOL result_;
    __asm {
        xor eax, eax
        mov edx, edx0
        mov eax, a2
        mov ecx, a1
        call address
        mov result_, eax
    }
    return result_;
}
BOOL sub_41D370(int a1, int a2) {
    int address = 0x41d370;
    BOOL result_;
    __asm {
        xor eax, eax
        mov esi, a2
        mov ecx, a1
        call address
        mov result_, eax
    }
    return result_;
}
BOOL BlitDirtyArray(RECT *a1) {
    int address = 0x41d3a0;
    BOOL result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__cdecl*DoBltUsingMask)(), DoBltUsingMask, 0x41d420);
DECL_FUNC(int (*BWFXN_UpdateBltMasks)(), BWFXN_UpdateBltMasks, 0x41d470);
DECL_FUNC(void (*TransDestroy)(), TransDestroy, 0x41d540);
void updateConsoleImage(void **a1) {
    int address = 0x41d5a0;
    __asm {
        mov eax, a1
        call address
    }
}
BltMask * BltMask_Constructor(Bitmap *a1, char *a2, char *a3) {
    int address = 0x41d640;
    BltMask * result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        push dword ptr a2
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(signed (*realizePalette)(), realizePalette, 0x41d710);
DECL_FUNC(int (__stdcall*sub_41D780)(__int16 a1, __int16 a2), sub_41D780, 0x41d780);
DECL_FUNC(u8 * (__fastcall*drawVertLine)(int a1, unsigned __int16 a2, __int16 a3, unsigned __int16 a4), drawVertLine, 0x41d7d0);
__int16 MinimapFill(unsigned __int16 a1, int a2, __int16 a3, __int16 a4) {
    int address = 0x41d810;
    __int16 result_;
    __asm {
        xor eax, eax
        xor ecx, ecx
        push dword ptr a4
        push dword ptr a3
        mov ebx, a2
        mov cx, a1
        call address
        mov result_, ax
    }
    return result_;
}
DECL_FUNC(int (*sub_41D860)(), sub_41D860, 0x41d860);
DECL_FUNC(int (__thiscall*sub_41D880)(char *logfilename), sub_41D880, 0x41d880);
DECL_FUNC(int (__fastcall*sub_41D8A0)(unsigned int numentries, unsigned int firstentry), sub_41D8A0, 0x41d8a0);
DECL_FUNC(HWND (*BWFXN_DDrawDestroy)(), BWFXN_DDrawDestroy, 0x41d8b0);
DECL_FUNC(BOOL (*BWFXN_DDrawInitialize)(), BWFXN_DDrawInitialize, 0x41d930);
void sub_41DC20(PALETTEENTRY *a1, PALETTEENTRY *a2, int a3) {
    int address = 0x41dc20;
    __asm {
        mov ecx, a3
        mov edx, a2
        mov eax, a1
        call address
    }
}
unsigned sub_41DCF0(unsigned int result) {
    int address = 0x41dcf0;
    unsigned result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_41DD10)(), sub_41DD10, 0x41dd10);
DECL_FUNC(u8 * (*sub_41DD20)(), sub_41DD20, 0x41dd20);
void sub_41DD50(PALETTEENTRY *a1, unsigned int a2, unsigned int a3) {
    int address = 0x41dd50;
    __asm {
        mov edi, a3
        mov ebx, a2
        mov eax, a1
        call address
    }
}
DECL_FUNC(u8 * (*sub_41DD90)(), sub_41DD90, 0x41dd90);
DECL_FUNC(BOOL (*sub_41DDD0)(), sub_41DDD0, 0x41ddd0);
DECL_FUNC(char (__stdcall*refreshRect)(int a1, int a2, int a3, int a4), refreshRect, 0x41de20);
DECL_FUNC(int (__stdcall*BlitBitmap)(Bitmap *a1), BlitBitmap, 0x41deb0);
DECL_FUNC(void (__fastcall*BlitCursorSurface)(int a1, __int16 a2, Bitmap *a3, __int16 a4), BlitCursorSurface, 0x41df40);
DECL_FUNC(void (__cdecl*sub_41E000)(), sub_41E000, 0x41e000);
DECL_FUNC(void (__cdecl*InitializeImage)(), InitializeImage, 0x41e050);
DECL_FUNC(void (__fastcall*DestroyImage)(bool exit_code), DestroyImage, 0x41e0a0);
signed BWFXN_RefreshTarget(signed int left, signed int bottom, signed int top, signed int right) {
    int address = 0x41e0d0;
    signed result_;
    __asm {
        xor eax, eax
        push dword ptr right
        mov ecx, top
        mov edx, bottom
        mov eax, left
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_41E1A0)(), sub_41E1A0, 0x41e1a0);
DECL_FUNC(void (__cdecl*RefreshCursorScreen)(), RefreshCursorScreen, 0x41e230);
DECL_FUNC(void (*DirtyArrayHandling)(), DirtyArrayHandling, 0x41e280);
signed sub_41E430(signed int result) {
    int address = 0x41e430;
    signed result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
void sub_41E450(int (__thiscall *a1)(PALETTEENTRY *, PALETTEENTRY), PALETTEENTRY *a2) {
    int address = 0x41e450;
    __asm {
        push dword ptr a2
        mov ebx, a1
        call address
    }
}
unsigned SetCurrentPaletteInfo(PALETTEENTRY *a1, unsigned __int16 a2, unsigned __int8 a3) {
    int address = 0x41e480;
    unsigned result_;
    __asm {
        xor eax, eax
        xor ecx, ecx
        push dword ptr a3
        mov cx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void CyclePalette(int a1) {
    int address = 0x41e4b0;
    __asm {
        mov eax, a1
        call address
    }
}
void CyclePaletteAdvanced(int cycle_struct_index) {
    int address = 0x41e4f0;
    __asm {
        mov eax, cycle_struct_index
        call address
    }
}
CycleStruct * sub_41E550(unsigned __int8 a1, BYTE a2, BYTE a3, BYTE a4, void *a5, BYTE a6) {
    int address = 0x41e550;
    CycleStruct * result_;
    __asm {
        xor eax, eax
        xor edx, edx
        xor ecx, ecx
        push dword ptr a6
        push dword ptr a5
        push dword ptr a4
        mov cl, a3
        mov dl, a2
        mov al, a1
        call address
        mov result_, eax
    }
    return result_;
}
int sub_41E590(unsigned __int8 a1) {
    int address = 0x41e590;
    int result_;
    __asm {
        xor eax, eax
        mov al, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_41E5A0)(), sub_41E5A0, 0x41e5a0);
void setPaletteGamma(int a1, signed int a2) {
    int address = 0x41e5c0;
    __asm {
        mov esi, a2
        mov edi, a1
        call address
    }
}
unsigned DoCycle(CycleStruct *cycle_struct, unsigned int cycle_struct_index, unsigned int a3) {
    int address = 0x41e7b0;
    unsigned result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        push dword ptr cycle_struct_index
        mov eax, cycle_struct
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(BOOL (*updatePaletteEntries)(), updatePaletteEntries, 0x41e870);
void gluDlgFadePalette(unsigned int a1) {
    int address = 0x41e8b0;
    __asm {
        mov eax, a1
        call address
    }
}
DECL_FUNC(void (__cdecl*colorCycleInterval)(), colorCycleInterval, 0x41e900);
DECL_FUNC(void (*pauseSetPaletteToGreyscale)(), pauseSetPaletteToGreyscale, 0x41e930);
DECL_FUNC(void (__stdcall*sub_41E9E0)(int a1), sub_41E9E0, 0x41e9e0);
DECL_FUNC(void (__stdcall*TitlePaletteUpdate)(int a1), TitlePaletteUpdate, 0x41ea30);
int CreateDirectory(const char *a1) {
    int address = 0x41eab0;
    int result_;
    __asm {
        xor eax, eax
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(SIZE_T (__stdcall*GetFileInfo)(void *a1), GetFileInfo, 0x41eb80);
int createErrorsDirectory(char *a1) {
    int address = 0x41ec40;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(HANDLE (*createErrFile)(), createErrFile, 0x41ecb0);
DECL_FUNC(void (*ProcError)(int a1), ProcError, 0x41ee50);
DECL_FUNC(void (*ErrorLog)(char *arg0, ...), ErrorLog, 0x41ef00);
DECL_FUNC(void (*ErrorLogSystemInfo)(), ErrorLogSystemInfo, 0x41efd0);
DECL_FUNC(int (__thiscall*___vsnprintf)(char *a1), ___vsnprintf, 0x41f0a0);
LPVOID localLoadResource(LPCSTR lpName, const CHAR *a2, int a3) {
    int address = 0x41f0c0;
    LPVOID result_;
    __asm {
        xor eax, eax
        mov edi, a3
        mov eax, a2
        mov ecx, lpName
        call address
        mov result_, eax
    }
    return result_;
}
int localLoadString(UINT a1, int a2, CHAR *a3) {
    int address = 0x41f110;
    int result_;
    __asm {
        xor eax, eax
        mov esi, a3
        mov edi, a2
        mov ebx, a1
        call address
        mov result_, eax
    }
    return result_;
}
HACCEL InitLocaleAccelerators(const char *a1) {
    int address = 0x41f140;
    HACCEL result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(HINSTANCE (*localFreeLibrary)(), localFreeLibrary, 0x41f170);
BOOL localLoadLibrary(const CHAR *a1) {
    int address = 0x41f190;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int __snprintf(char *buff, size_t size_, const char *format, ...) {
    int address = 0x41f1b0;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr format
        mov esi, size_
        mov edi, buff
        call address
        mov result_, eax
        add esp, 4
    }
    return result_;
}
DECL_FUNC(unsigned (*LocalGetLang)(), LocalGetLang, 0x41f1d0);
INT_PTR sub_41F230(DLGPROC lpDialogFunc, LPARAM a2, int a3) {
    int address = 0x41f230;
    INT_PTR result_;
    __asm {
        xor eax, eax
        mov edi, a3
        mov eax, a2
        mov ecx, lpDialogFunc
        call address
        mov result_, eax
    }
    return result_;
}
char sub_41F270(_DWORD *a1) {
    int address = 0x41f270;
    char result_;
    __asm {
        xor eax, eax
        mov ebx, a1
        call address
        mov result_, al
    }
    return result_;
}
LONG WriteWindowText(__int16 *a1, int a2) {
    int address = 0x41f2b0;
    LONG result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int getColourHandle(unsigned __int8 a1) {
    int address = 0x41f610;
    int result_;
    __asm {
        xor eax, eax
        mov al, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_41F7A0)(), sub_41F7A0, 0x41f7a0);
DECL_FUNC(int (__fastcall*getCharacterWidth)(u8 a1), getCharacterWidth, 0x41f7c0);
DECL_FUNC(void (*sub_41F8A0)(), sub_41F8A0, 0x41f8a0);
char sub_41F8B0(char result) {
    int address = 0x41f8b0;
    char result_;
    __asm {
        xor eax, eax
        mov al, result
        call address
        mov result_, al
    }
    return result_;
}
DECL_FUNC(int (*nullsub_8)(), nullsub_8, 0x41f8c0);
DECL_FUNC(int (*sub_41F8D0)(), sub_41F8D0, 0x41f8d0);
u8 * setTextAlignment(u8 *a1) {
    int address = 0x41f920;
    u8 * result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__thiscall*BWFXN_SetFont)(Font *this_), BWFXN_SetFont, 0x41fb30);
int sub_41FC20(char *a1, int a2) {
    int address = 0x41fc20;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int getMessageWidth(const char *a1) {
    int address = 0x41fc80;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
FontChar * sub_41FCC0(u8 a1) {
    int address = 0x41fcc0;
    FontChar * result_;
    __asm {
        xor eax, eax
        mov al, a1
        call address
        mov result_, eax
    }
    return result_;
}
BOOL sub_41FCF0(_DWORD *a1) {
    int address = 0x41fcf0;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
Font * LoadFont(char *font_name, Font *(__fastcall *a2)(char *, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD)) {
    int address = 0x41fd10;
    Font * result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, font_name
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(Color * (__stdcall*writeFontApplyColour)(int a1, unsigned int a2), writeFontApplyColour, 0x41fd70);
u8 * BWFXN_PrintXY(char *a1, int a2) {
    int address = 0x4200d0;
    u8 * result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
unsigned BWFXN_DrawXY(char *text, signed int x, signed int y) {
    int address = 0x4202b0;
    unsigned result_;
    __asm {
        xor eax, eax
        push dword ptr y
        mov esi, x
        mov eax, text
        call address
        mov result_, eax
    }
    return result_;
}
BOOL __fwrite(size_t a1, void *a2, FILE *a3) {
    int address = 0x4204a0;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a3
        mov edx, a2
        mov ecx, a1
        call address
        mov result_, eax
    }
    return result_;
}
BOOL __fread(size_t a1, void *a2, FILE *a3) {
    int address = 0x4204c0;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a3
        mov edx, a2
        mov ecx, a1
        call address
        mov result_, eax
    }
    return result_;
}
int __fgetc(FILE *a1) {
    int address = 0x4204e0;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int __fseek(__int32 a1, FILE *a2, int a3) {
    int address = 0x4204f0;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a3
        mov edx, a2
        mov ecx, a1
        call address
        mov result_, eax
    }
    return result_;
}
int __fclose(FILE *a1) {
    int address = 0x420500;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
BOOL DeleteFile(int a1, const CHAR *a2) {
    int address = 0x420510;
    BOOL result_;
    __asm {
        xor eax, eax
        mov esi, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
FILE * _pfopen(char *filename, __int16 flags) {
    int address = 0x420540;
    FILE * result_;
    __asm {
        xor eax, eax
        mov ax, flags
        push dword ptr filename
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__fastcall*saveRegOptions)(bool exit_code), saveRegOptions, 0x4205e0);
DECL_FUNC(int ** (*ApplyDefaultOptions)(), ApplyDefaultOptions, 0x420640);
DECL_FUNC(char (*LoadRegOptions)(), LoadRegOptions, 0x4206a0);
void AppExit(bool exit_code) {
    int address = 0x4207b0;
    __asm {
        xor ebx, ebx
        mov bl, exit_code
        call address
    }
}
void sub_420830(unsigned __int8 a1, int a2) {
    int address = 0x420830;
    __asm {
        xor eax, eax
        mov esi, a2
        mov al, a1
        call address
    }
}
BOOL dlgCenterScreen_0(HWND a1) {
    int address = 0x420860;
    BOOL result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
BOOL ErrMessageBox(__int16 a1, LPCSTR lpText, LPCSTR lpCaption) {
    int address = 0x4208e0;
    BOOL result_;
    __asm {
        xor eax, eax
        push dword ptr lpCaption
        push dword ptr lpText
        mov ax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(BOOL (__stdcall*DialogFunc)(HWND a1, UINT a2, WPARAM a3, LPARAM a4), DialogFunc, 0x420980);
int sub_420A20(int a1) {
    int address = 0x420a20;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int DSERR_GetString(size_t size_, char *dest, int a3) {
    int address = 0x420a30;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a3
        mov edx, dest
        mov ecx, size_
        call address
        mov result_, eax
    }
    return result_;
}
int DDERR_GetString(size_t size_, char *dest, int a3) {
    int address = 0x420b90;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a3
        mov edx, dest
        mov ecx, size_
        call address
        mov result_, eax
    }
    return result_;
}
char * GetErrorString(LPSTR lpBuffer, DWORD a2, unsigned int a3) {
    int address = 0x421140;
    char * result_;
    __asm {
        xor eax, eax
        mov ebx, a3
        mov eax, a2
        mov ecx, lpBuffer
        call address
        mov result_, eax
    }
    return result_;
}
void ErrorDDrawInit(char *source_file, char *function_name, unsigned int last_error, WORD resource, int source_line) {
    int address = 0x4211f0;
    __asm {
        push dword ptr source_line
        push dword ptr resource
        mov ebx, last_error
        mov eax, function_name
        mov ecx, source_file
        call address
    }
}
void SysWarn_FileNotFound(const char *a1, int last_error) {
    int address = 0x4212c0;
    __asm {
        mov ebx, last_error
        push dword ptr a1
        call address
    }
}
DECL_FUNC(BOOL (*SystemWarning_Configuration)(), SystemWarning_Configuration, 0x421360);
DECL_FUNC(BOOL (*SystemWarning_PhysicalMemory)(), SystemWarning_PhysicalMemory, 0x4213a0);
DECL_FUNC(BOOL (*SystemWarning_PentiumProcessor)(), SystemWarning_PentiumProcessor, 0x4213e0);
DECL_FUNC(BOOL (*sub_421420)(), sub_421420, 0x421420);
BOOL SystemWarning_20MBDiskSpace(int a1) {
    int address = 0x421460;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(DWORD (*sub_4214C0)(), sub_4214C0, 0x4214c0);
DECL_FUNC(void (__cdecl*DLGErrFatal)(), DLGErrFatal, 0x4214d0);
DECL_FUNC(void (*sub_421510)(), sub_421510, 0x421510);
DECL_FUNC(void (*FatalError)(const char *arg0, ...), FatalError, 0x4215d0);
DECL_FUNC(void (__cdecl*SetCursorClipBounds)(), SetCursorClipBounds, 0x4215e0);
DECL_FUNC(LONG (__stdcall*sub_421640)(LONG *a1, LONG *a2), sub_421640, 0x421640);
void _SetCursorPos(__int16 a1, __int16 a2) {
    int address = 0x421670;
    __asm {
        xor edi, edi
        xor esi, esi
        mov si, a2
        mov di, a1
        call address
    }
}
int _ClipCursor(RECT *a1) {
    int address = 0x421690;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int sub_4216F0(int result) {
    int address = 0x4216f0;
    int result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
void doCursorClip(int a1) {
    int address = 0x421730;
    __asm {
        mov eax, a1
        call address
    }
}
DECL_FUNC(int (__thiscall*sub_421770)(_DWORD a1), sub_421770, 0x421770);
DECL_FUNC(_DWORD (__stdcall*sub_4217E0)(__int16 a1, char a2), sub_4217E0, 0x4217e0);
DECL_FUNC(int (__thiscall*sub_4218E0)(_DWORD a1), sub_4218E0, 0x4218e0);
DECL_FUNC(unsigned (__fastcall*InsertContour)(int a1, int a2, int a3, unsigned int *a4, unsigned int *a5), InsertContour, 0x421910);
DECL_FUNC(int (*sub_421A60)(), sub_421A60, 0x421a60);
DECL_FUNC(int (*sub_421AA0)(), sub_421AA0, 0x421aa0);
DECL_FUNC(int (*sub_421AF0)(), sub_421AF0, 0x421af0);
DECL_FUNC(int (__stdcall*sub_421B40)(int a1, int a2), sub_421B40, 0x421b40);
DECL_FUNC(int (__thiscall*sub_421BA0)(_DWORD a1), sub_421BA0, 0x421ba0);
SaiContourHub * setContourSearchBounds(SaiContourHub *result, __int16 a2, __int16 a3, __int16 a4, __int16 a5) {
    int address = 0x421c60;
    SaiContourHub * result_;
    __asm {
        xor eax, eax
        xor edx, edx
        xor ecx, ecx
        push dword ptr a5
        push dword ptr a4
        mov cx, a3
        mov dx, a2
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_421CB0)(), sub_421CB0, 0x421cb0);
DECL_FUNC(int (*sub_421CD0)(void), sub_421CD0, 0x421cd0);
DECL_FUNC(int (*sub_422070)(), sub_422070, 0x422070);
SaiContourHub * setContourSearchVariablesFromUnitType(SaiContourHub *result, unsigned __int16 a2) {
    int address = 0x4220c0;
    SaiContourHub * result_;
    __asm {
        xor eax, eax
        xor ecx, ecx
        mov cx, a2
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
int sub_422160(int a1) {
    int address = 0x422160;
    int result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
char sub_422600(__int16 a1, int a2, int a3, char a4) {
    int address = 0x422600;
    char result_;
    __asm {
        xor eax, eax
        xor ebx, ebx
        push dword ptr a4
        push dword ptr a3
        mov edi, a2
        mov bx, a1
        call address
        mov result_, al
    }
    return result_;
}
int * sub_4228E0(__int16 *a1, int *a2) {
    int address = 0x4228e0;
    int * result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*nullsub_9)(), nullsub_9, 0x422a40);
DECL_FUNC(int (*sub_422A50)(), sub_422A50, 0x422a50);
signed sub_422A90(struct_a1_1 *a1, Position *a2) {
    int address = 0x422a90;
    signed result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__stdcall*sub_422C90)(__int16 *a1), sub_422C90, 0x422c90);
DECL_FUNC(signed (__stdcall*sub_422FA0)(struct_a1_1 *a1, int a2), sub_422FA0, 0x422fa0);
DECL_FUNC(void (__fastcall*BTNSACT_None)(int action_variable, bool is_shift_used), BTNSACT_None, 0x423180);
signed getLarvaeUnitsFromList(CUnit *a1, CUnit **a2) {
    int address = 0x423190;
    signed result_;
    __asm {
        xor eax, eax
        mov esi, a2
        mov edx, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__fastcall*CMDACT_CancelNuke)(int action_variable, bool is_shift_used), CMDACT_CancelNuke, 0x4231d0);
DECL_FUNC(void (__fastcall*CMDACT_MergeDarkArchon)(int action_variable, bool is_shift_used), CMDACT_MergeDarkArchon, 0x4231f0);
DECL_FUNC(void (__fastcall*CMDACT_MergeArchon)(int action_variable, bool is_shift_used), CMDACT_MergeArchon, 0x423210);
DECL_FUNC(void (__fastcall*CMDACT_Lift)(int action_variable, bool is_shift_used), CMDACT_Lift, 0x423230);
DECL_FUNC(void (__fastcall*CMDACT_Decloak)(int action_variable, bool is_shift_used), CMDACT_Decloak, 0x423270);
DECL_FUNC(void (__fastcall*CMDACT_Unburrow)(int action_variable, bool is_shift_used), CMDACT_Unburrow, 0x423290);
DECL_FUNC(void (__fastcall*CMDACT_Burrow)(int action_variable, bool is_shift_used), CMDACT_Burrow, 0x4232b0);
DECL_FUNC(void (__fastcall*CMDACT_CancelAddon)(int action_variable, bool is_shift_used), CMDACT_CancelAddon, 0x4232d0);
DECL_FUNC(void (__fastcall*CMDACT_CancelUpgrade)(int action_variable, bool is_shift_used), CMDACT_CancelUpgrade, 0x4232f0);
DECL_FUNC(void (__fastcall*CMDACT_Upgrade)(int action_variable, bool is_shift_used), CMDACT_Upgrade, 0x423310);
DECL_FUNC(void (__fastcall*CMDACT_CancelResearch)(int action_variable, bool is_shift_used), CMDACT_CancelResearch, 0x423330);
DECL_FUNC(void (__fastcall*CMDACT_Research)(int action_variable, bool is_shift_used), CMDACT_Research, 0x423350);
DECL_FUNC(void (__fastcall*CMDACT_HoldPosition)(int action_variable, bool is_shift_used), CMDACT_HoldPosition, 0x423370);
DECL_FUNC(void (__fastcall*CMDACT_TrainFighter)(int action_variable, bool is_shift_used), CMDACT_TrainFighter, 0x423390);
DECL_FUNC(void (__fastcall*CMDACT_ReaverStop)(int action_variable, bool is_shift_used), CMDACT_ReaverStop, 0x4233b0);
DECL_FUNC(void (__fastcall*CMDACT_CarrierStop)(int action_variable, bool is_shift_used), CMDACT_CarrierStop, 0x4233d0);
DECL_FUNC(void (__fastcall*CMDACT_Stop)(int action_variable, bool is_shift_used), CMDACT_Stop, 0x4233f0);
DECL_FUNC(void (__fastcall*CMDACT_CancelUnitMorph)(int action_variable, bool is_shift_used), CMDACT_CancelUnitMorph, 0x423410);
DECL_FUNC(void (__fastcall*CMDACT_CancelConstruction)(int action_variable, bool is_shift_used), CMDACT_CancelConstruction, 0x423430);
DECL_FUNC(void (__fastcall*CMDACT_Siege)(int action_variable, bool is_shift_used), CMDACT_Siege, 0x423450);
DECL_FUNC(void (__fastcall*CMDACT_Unsiege)(int action_variable, bool is_shift_used), CMDACT_Unsiege, 0x423470);
DECL_FUNC(void (__fastcall*CMDACT_CancelTrain)(int action_variable, bool is_shift_used), CMDACT_CancelTrain, 0x423490);
DECL_FUNC(void (__fastcall*CMDACT_Train)(int action_variable, bool is_shift_used), CMDACT_Train, 0x4234b0);
DECL_FUNC(void (__fastcall*CMDACT_Stimpack)(int action_variable, bool is_shift_used), CMDACT_Stimpack, 0x4234d0);
DECL_FUNC(signed (*unit_CanCloak)(), unit_CanCloak, 0x423540);
signed TechUseCheckForGroupEnergyCost(Tech a1) {
    int address = 0x423660;
    signed result_;
    __asm {
        xor eax, eax
        mov al, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__fastcall*CMDACT_Cloak)(int action_variable, bool is_shift_used), CMDACT_Cloak, 0x423730);
DECL_FUNC(void (__fastcall*CMDACT_ReturnCargo)(int action_variable, bool is_shift_used), CMDACT_ReturnCargo, 0x423760);
DECL_FUNC(void (__fastcall*CMDACT_Morph)(int action_variable, bool is_shift_used), CMDACT_Morph, 0x423790);
DECL_FUNC(void (__fastcall*CMDACT_BuildingMorph)(int action_variable, bool is_shift_used), CMDACT_BuildingMorph, 0x423860);
DECL_FUNC(void (__fastcall*BTNSACT_SelectLarva)(int action_variable, bool is_shift_used), BTNSACT_SelectLarva, 0x423930);
DECL_FUNC(void (__fastcall*BTNSACT_Heal)(int action_variable, bool is_shift_used), BTNSACT_Heal, 0x4239e0);
DECL_FUNC(void (__fastcall*BTNSACT_UseNuke)(int action_variable, bool is_shift_used), BTNSACT_UseNuke, 0x423a40);
DECL_FUNC(void (__fastcall*BTNSACT_RechargeShields)(int action_variable, bool is_shift_used), BTNSACT_RechargeShields, 0x423aa0);
DECL_FUNC(void (__fastcall*CMDACT_UnloadAll)(int action_variable, bool is_shift_used), CMDACT_UnloadAll, 0x423b00);
DECL_FUNC(void (__fastcall*BTNSACT_LoadUnit)(int action_variable, bool is_shift_used), BTNSACT_LoadUnit, 0x423b40);
DECL_FUNC(void (__fastcall*BTNSACT_Harvest)(int action_variable, bool is_shift_used), BTNSACT_Harvest, 0x423b70);
DECL_FUNC(void (__fastcall*BTNSACT_Repair)(int action_variable, bool is_shift_used), BTNSACT_Repair, 0x423bd0);
DECL_FUNC(void (__fastcall*BTNSACT_BuildingLand)(int action_variable, bool is_shift_used), BTNSACT_BuildingLand, 0x423c30);
DECL_FUNC(void (__fastcall*BTNSACT_PlaceNydusExit)(int action_variable, bool is_shift_used), BTNSACT_PlaceNydusExit, 0x423c40);
DECL_FUNC(void (__fastcall*BTNSACT_ZergBuild)(int action_variable, bool is_shift_used), BTNSACT_ZergBuild, 0x423c50);
DECL_FUNC(void (__fastcall*BTNSACT_PlaceAddon)(int action_variable, bool is_shift_used), BTNSACT_PlaceAddon, 0x423d10);
DECL_FUNC(void (__fastcall*BTNSACT_BuildProtoss)(int action_variable, bool is_shift_used), BTNSACT_BuildProtoss, 0x423dd0);
DECL_FUNC(void (__fastcall*BTNSACT_PlaceCOP)(int action_variable, bool is_shift_used), BTNSACT_PlaceCOP, 0x423e90);
DECL_FUNC(void (__fastcall*BTNSACT_BuildTerran)(int action_variable, bool is_shift_used), BTNSACT_BuildTerran, 0x423eb0);
DECL_FUNC(void (__fastcall*BTNSACT_UseTech)(int action_variable, bool is_shift_used), BTNSACT_UseTech, 0x423f70);
DECL_FUNC(void (__fastcall*BTNSACT_Patrol)(int a1, bool a2), BTNSACT_Patrol, 0x424140);
DECL_FUNC(void (__fastcall*BTNSACT_ReaverAttack)(int action_variable, bool is_shift_used), BTNSACT_ReaverAttack, 0x4241a0);
DECL_FUNC(void (__fastcall*BTNSACT_CarrierAttack)(int action_variable, bool is_shift_used), BTNSACT_CarrierAttack, 0x424200);
DECL_FUNC(void (__fastcall*BTNSACT_CarrierMove)(int action_variable, bool is_shift_used), BTNSACT_CarrierMove, 0x424260);
DECL_FUNC(void (__fastcall*BTNSACT_TowerAttack)(int action_variable, bool is_shift_used), BTNSACT_TowerAttack, 0x4242c0);
DECL_FUNC(void (__fastcall*BTNSACT_AttackUnit)(int action_variable, bool is_shift_used), BTNSACT_AttackUnit, 0x424320);
DECL_FUNC(void (__fastcall*BTNSACT_AttackMove)(int a1, bool a2), BTNSACT_AttackMove, 0x424380);
DECL_FUNC(void (__fastcall*BTNSACT_Move)(int a1, bool a2), BTNSACT_Move, 0x424440);
DECL_FUNC(void (__fastcall*BTNSACT_RallyPoint)(int action_variable, bool is_shift_used), BTNSACT_RallyPoint, 0x4244a0);
DECL_FUNC(bool (__cdecl*UnitStatCond_Never)(), UnitStatCond_Never, 0x424500);
DECL_FUNC(CUnit * (*sub_424510)(), sub_424510, 0x424510);
DECL_FUNC(bool (__cdecl*UnitStatCond_Powerup)(), UnitStatCond_Powerup, 0x424520);
DECL_FUNC(void (__cdecl*storeSelectionGroupHPAndType)(), storeSelectionGroupHPAndType, 0x424540);
DECL_FUNC(signed (*isSelGroupUpdated)(), isSelGroupUpdated, 0x424660);
DECL_FUNC(CUnit * (*sub_4246B0)(), sub_4246B0, 0x4246b0);
DECL_FUNC(s32 (*sub_4246D0)(), sub_4246D0, 0x4246d0);
DECL_FUNC(bool (__fastcall*sub_424780)(__int16 a1), sub_424780, 0x424780);
DECL_FUNC(CUnit * (*sub_4248F0)(), sub_4248F0, 0x4248f0);
DECL_FUNC(bool (__cdecl*UnitStatCond_Standard)(), UnitStatCond_Standard, 0x424980);
DECL_FUNC(CUnit * (*sub_4249E0)(), sub_4249E0, 0x4249e0);
DECL_FUNC(BOOL (*sub_424A10)(), sub_424A10, 0x424a10);
DECL_FUNC(bool (__cdecl*UnitStatCond_Egg)(), UnitStatCond_Egg, 0x424ac0);
DECL_FUNC(bool (__cdecl*UnitStatCond_Archon)(), UnitStatCond_Archon, 0x424af0);
DECL_FUNC(CUnit * (*sub_424B10)(), sub_424B10, 0x424b10);
DECL_FUNC(bool (__cdecl*UnitStatCond_CarrierReaver)(), UnitStatCond_CarrierReaver, 0x424b50);
void setSpellSpecialBtnGraphic(dialog *a1) {
    int address = 0x424ba0;
    __asm {
        mov eax, a1
        call address
    }
}
DECL_FUNC(bool (__cdecl*UnitStatCond_Dropship)(), UnitStatCond_Dropship, 0x424f10);
DECL_FUNC(CUnit * (*sub_424FC0)(), sub_424FC0, 0x424fc0);
DECL_FUNC(bool (__cdecl*UnitStatCond_Building)(), UnitStatCond_Building, 0x425180);
DECL_FUNC(CUnit * (*sub_4251F0)(), sub_4251F0, 0x4251f0);
DECL_FUNC(bool (*sub_425230)(), sub_425230, 0x425230);
void sub_425310(dialog *a1, unsigned __int16 a2) {
    int address = 0x425310;
    __asm {
        push dword ptr a2
        mov eax, a1
        call address
    }
}
void StatHangerCount(dialog *a1, unsigned __int16 a2) {
    int address = 0x4253d0;
    __asm {
        push dword ptr a2
        mov ebx, a1
        call address
    }
}
void sub_425510(dialog *a1, unsigned __int16 a2) {
    int address = 0x425510;
    __asm {
        push dword ptr a2
        mov eax, a1
        call address
    }
}
void sub_425600(dialog *a1, unsigned __int16 a2) {
    int address = 0x425600;
    __asm {
        push dword ptr a2
        mov eax, a1
        call address
    }
}
void sub_425790(dialog *a1, unsigned __int16 a2, WeaponType weapon_type) {
    int address = 0x425790;
    __asm {
        push dword ptr weapon_type
        push dword ptr a2
        mov eax, a1
        call address
    }
}
void AddTextToDialog(dialog *a1, __int16 a2, const char *a3) {
    int address = 0x4258b0;
    __asm {
        xor ecx, ecx
        push dword ptr a3
        mov cx, a2
        mov eax, a1
        call address
    }
}
DECL_FUNC(bool (__cdecl*UnitStatCond_overlord)(), UnitStatCond_overlord, 0x425900);
void sub_425960(dialog *stardata_dlg) {
    int address = 0x425960;
    __asm {
        mov eax, stardata_dlg
        call address
    }
}
void sub_425A30(dialog *a1) {
    int address = 0x425a30;
    __asm {
        mov ebx, a1
        call address
    }
}
DECL_FUNC(void (__stdcall*SetUnitStatusStrText)(dialog *a1), SetUnitStatusStrText, 0x425b50);
void SetKillsStrText(dialog *a1) {
    int address = 0x425dd0;
    __asm {
        mov ebx, a1
        call address
    }
}
DECL_FUNC(void (__stdcall*getActivePortraitUnitName)(dialog *a1), getActivePortraitUnitName, 0x425ec0);
DECL_FUNC(void (__fastcall*UnitStatAct_Default)(dialog *this_), UnitStatAct_Default, 0x425ee0);
void sub_425F30(dialog *a1) {
    int address = 0x425f30;
    __asm {
        mov edi, a1
        call address
    }
}
void sub_4260C0(dialog *a1) {
    int address = 0x4260c0;
    __asm {
        mov edi, a1
        call address
    }
}
void sub_426190(dialog *a1) {
    int address = 0x426190;
    __asm {
        mov eax, a1
        call address
    }
}
signed StatSpidermineCount(dialog *a1, unsigned __int16 a2) {
    int address = 0x426300;
    signed result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__stdcall*setTextStr)(dialog *a1), setTextStr, 0x4263e0);
DECL_FUNC(void (__stdcall*sub_426500)(dialog *a1), sub_426500, 0x426500);
DECL_FUNC(void (__stdcall*sub_4266F0)(dialog *a1), sub_4266F0, 0x4266f0);
DECL_FUNC(void (__stdcall*sub_4268D0)(dialog *a1), sub_4268D0, 0x4268d0);
DECL_FUNC(void (__stdcall*sub_426C60)(dialog *a1), sub_426C60, 0x426c60);
DECL_FUNC(void (__fastcall*UnitStatAct_Powerup)(dialog *dlg), UnitStatAct_Powerup, 0x426ee0);
DECL_FUNC(void (__fastcall*UnitStatAct_Standard)(dialog *this_), UnitStatAct_Standard, 0x426f50);
DECL_FUNC(void (__stdcall*sub_426FF0)(dialog *a1), sub_426FF0, 0x426ff0);
DECL_FUNC(void (__fastcall*UnitStatAct_Egg)(dialog *dlg), UnitStatAct_Egg, 0x427260);
DECL_FUNC(void (__fastcall*UnitStatAct_Archon)(dialog *dlg), UnitStatAct_Archon, 0x4273e0);
DECL_FUNC(void (__fastcall*UnitStatAct_CarrierReaver)(dialog *dlg), UnitStatAct_CarrierReaver, 0x4274a0);
void sub_427540(dialog *a1) {
    int address = 0x427540;
    __asm {
        mov eax, a1
        call address
    }
}
DECL_FUNC(void (__fastcall*UnitStatAct_Building)(dialog *dlg), UnitStatAct_Building, 0x427890);
void replayStatBtns(dialog *dlg) {
    int address = 0x427a80;
    __asm {
        mov ebx, dlg
        call address
    }
}
DECL_FUNC(void (__fastcall*UnitStatAct_Dropship)(dialog *dlg), UnitStatAct_Dropship, 0x427c90);
DECL_FUNC(void (__fastcall*UnitStatAct_Overlord)(dialog *dlg), UnitStatAct_Overlord, 0x427d30);
signed BriefingActionsLoop(Trigger *a1) {
    int address = 0x427da0;
    signed result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (*sub_427E30)(), sub_427E30, 0x427e30);
DECL_FUNC(int (*BRFACT_NoAct)(), BRFACT_NoAct, 0x427e40);
DECL_FUNC(signed (__fastcall*BRFACT_Wait)(Action *action, BYTE action_index), BRFACT_Wait, 0x427e50);
DECL_FUNC(int (__fastcall*BRFACT_SkipTutorial)(Action *action, BYTE action_index), BRFACT_SkipTutorial, 0x427ea0);
DECL_FUNC(signed (__thiscall*BRFACT_MissionObjectives)(int this_), BRFACT_MissionObjectives, 0x427ec0);
DECL_FUNC(signed (__thiscall*BRFACT_HidePortrait)(int this_), BRFACT_HidePortrait, 0x427ee0);
DECL_FUNC(int (__fastcall*BRFACT_ShowPortrait)(Action *action, BYTE action_index), BRFACT_ShowPortrait, 0x427ef0);
DECL_FUNC(signed (__thiscall*BRFACT_TextMessage)(int this_), BRFACT_TextMessage, 0x427f10);
DECL_FUNC(int (__fastcall*BRFACT_DisplaySpeakingPortrait)(int a1, int a2), BRFACT_DisplaySpeakingPortrait, 0x427f80);
DECL_FUNC(int (__fastcall*BRFACT_PlayWAV)(Action *action, BYTE action_index), BRFACT_PlayWAV, 0x427fa0);
DECL_FUNC(signed (__fastcall*BRFACT_Transmission)(int a1, int a2), BRFACT_Transmission, 0x4280e0);
DECL_FUNC(int (__fastcall*isUpgradeInProgress)(char a1, int a2), isUpgradeInProgress, 0x4281b0);
DECL_FUNC(u8 * (__fastcall*sub_4281E0)(char a1, int a2), sub_4281E0, 0x4281e0);
DECL_FUNC(u8 * (__fastcall*sub_428210)(char a1, int a2), sub_428210, 0x428210);
int isResearchInProgress(int a1, char a2) {
    int address = 0x428240;
    int result_;
    __asm {
        xor eax, eax
        xor ecx, ecx
        mov cl, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
u8 * sub_428270(int a1, char a2) {
    int address = 0x428270;
    u8 * result_;
    __asm {
        xor eax, eax
        xor ecx, ecx
        mov cl, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
u8 * sub_4282A0(int a1, char a2) {
    int address = 0x4282a0;
    u8 * result_;
    __asm {
        xor eax, eax
        xor ecx, ecx
        mov cl, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(ButtonState (__fastcall*BTNSCOND_Always)(u16 variable, int player_id, CUnit *unit), BTNSCOND_Always, 0x4282d0);
DECL_FUNC(signed (*sub_4282E0)(), sub_4282E0, 0x4282e0);
DECL_FUNC(ButtonState (__fastcall*BTNSCOND_ScvIsBuilding)(u16 variable, int player_id, CUnit *unit), BTNSCOND_ScvIsBuilding, 0x428310);
DECL_FUNC(ButtonState (__fastcall*BTNSCOND_NoNydusExit)(u16 variable, int player_id, CUnit *unit), BTNSCOND_NoNydusExit, 0x428340);
DECL_FUNC(ButtonState (__fastcall*BTNSCOND_LurkerStop)(u16 variable, int player_id, CUnit *unit), BTNSCOND_LurkerStop, 0x428360);
DECL_FUNC(ButtonState (__fastcall*BTNSCOND_Movement)(u16 variable, int player_id, CUnit *unit), BTNSCOND_Movement, 0x4283c0);
DECL_FUNC(ButtonState (__fastcall*BTNSCOND_IsLifted)(u16 variable, int player_id, CUnit *unit), BTNSCOND_IsLifted, 0x4283f0);
DECL_FUNC(ButtonState (__fastcall*BTNSCOND_IsLiftedCanMove)(u16 variable, int player_id, CUnit *unit), BTNSCOND_IsLiftedCanMove, 0x428420);
DECL_FUNC(ButtonState (__fastcall*BTNSCOND_CanRechargeShields)(u16 variable, int player_id, CUnit *unit), BTNSCOND_CanRechargeShields, 0x428440);
DECL_FUNC(ButtonState (__fastcall*BTNSCOND_HasCargo)(u16 variable, int player_id, CUnit *unit), BTNSCOND_HasCargo, 0x428480);
DECL_FUNC(ButtonState (__fastcall*BTNSCOND_NoCargo)(u16 variable, int player_id, CUnit *unit), BTNSCOND_NoCargo, 0x4284b0);
DECL_FUNC(ButtonState (__fastcall*BTNSCOND_IsConstructing)(u16 variable, int player_id, CUnit *unit), BTNSCOND_IsConstructing, 0x4284e0);
DECL_FUNC(ButtonState (__fastcall*BTNSCOND_HatcheryLairHive)(u16 variable, int player_id, CUnit *unit), BTNSCOND_HatcheryLairHive, 0x428500);
DECL_FUNC(ButtonState (__fastcall*BTNSCOND_IsTraining)(u16 variable, int player_id, CUnit *unit), BTNSCOND_IsTraining, 0x428530);
DECL_FUNC(ButtonState (__fastcall*BTNSCOND_HasCargoTerran)(u16 variable, int player_id, CUnit *unit), BTNSCOND_HasCargoTerran, 0x428560);
DECL_FUNC(ButtonState (__fastcall*BTNSCOND_NoCargoTerran)(u16 variable, int player_id, CUnit *unit), BTNSCOND_NoCargoTerran, 0x4285a0);
DECL_FUNC(ButtonState (__fastcall*BTNSCOND_CanRepair)(u16 variable, int player_id, CUnit *unit), BTNSCOND_CanRepair, 0x4285e0);
DECL_FUNC(ButtonState (__fastcall*BTNSCOND_SCVCanAttack)(u16 variable, int player_id, CUnit *unit), BTNSCOND_SCVCanAttack, 0x428610);
DECL_FUNC(ButtonState (__fastcall*BTNSCOND_SCVCanStop)(u16 variable, int player_id, CUnit *unit), BTNSCOND_SCVCanStop, 0x428640);
DECL_FUNC(ButtonState (__fastcall*BTNSCOND_SCVCanMove)(u16 variable, int player_id, CUnit *unit), BTNSCOND_SCVCanMove, 0x428670);
DECL_FUNC(ButtonState (__fastcall*BTNSCOND_HasScarabs)(u16 variable, int player_id, CUnit *unit), BTNSCOND_HasScarabs, 0x4286a0);
DECL_FUNC(ButtonState (__fastcall*BTNSCOND_HasInterceptors)(u16 variable, int player_id, CUnit *unit), BTNSCOND_HasInterceptors, 0x4286e0);
DECL_FUNC(ButtonState (__fastcall*BTNSCOND_ZergHasCargo)(u16 variable, int player_id, CUnit *unit), BTNSCOND_ZergHasCargo, 0x428730);
DECL_FUNC(ButtonState (__fastcall*BTNSCOND_ZergNoCargo)(u16 variable, int player_id, CUnit *unit), BTNSCOND_ZergNoCargo, 0x428780);
DECL_FUNC(ButtonState (__fastcall*BTNSCOND_IsLanded)(u16 variable, int player_id, CUnit *unit), BTNSCOND_IsLanded, 0x4287d0);
DECL_FUNC(ButtonState (__fastcall*BTNSCOND_HasNuke)(u16 variable, int player_id, CUnit *unit), BTNSCOND_HasNuke, 0x428810);
DECL_FUNC(ButtonState (__fastcall*BTNSCOND_TankMove)(u16 variable, int player_id, CUnit *unit), BTNSCOND_TankMove, 0x428860);
DECL_FUNC(int (*sub_4288A0)(), sub_4288A0, 0x4288a0);
DECL_FUNC(int (*sub_4288C0)(), sub_4288C0, 0x4288c0);
DECL_FUNC(ButtonState (__fastcall*BTNSCOND_IsResearching)(u16 variable, int player_id, CUnit *unit), BTNSCOND_IsResearching, 0x4288e0);
DECL_FUNC(ButtonState (__fastcall*BTNSCOND_IsUpgrading)(u16 variable, int player_id, CUnit *unit), BTNSCOND_IsUpgrading, 0x428900);
DECL_FUNC(ButtonState (__fastcall*BTNSCOND_IsBuildingAddon)(u16 variable, int player_id, CUnit *unit), BTNSCOND_IsBuildingAddon, 0x428920);
DECL_FUNC(ButtonState (__fastcall*BTNSCOND_SiloHasNoNuke)(u16 variable, int player_id, CUnit *unit), BTNSCOND_SiloHasNoNuke, 0x428960);
DECL_FUNC(ButtonState (__fastcall*BTNSCOND_TerranAdvanced)(u16 variable, int player_id, CUnit *unit), BTNSCOND_TerranAdvanced, 0x428990);
DECL_FUNC(ButtonState (__fastcall*BTNSCOND_TerranBasic)(u16 variable, int player_id, CUnit *unit), BTNSCOND_TerranBasic, 0x428a10);
DECL_FUNC(ButtonState (__fastcall*BTNSCOND_ProtossAdvanced)(u16 variable, int player_id, CUnit *unit), BTNSCOND_ProtossAdvanced, 0x428ad0);
DECL_FUNC(ButtonState (__fastcall*BTNSCOND_ProtossBasic)(u16 variable, int player_id, CUnit *unit), BTNSCOND_ProtossBasic, 0x428b80);
DECL_FUNC(ButtonState (__fastcall*BTNSCOND_ZergAdvanced)(u16 variable, int player_id, CUnit *unit), BTNSCOND_ZergAdvanced, 0x428c30);
DECL_FUNC(ButtonState (__fastcall*BTNSCOND_ZergBasic)(u16 variable, int player_id, CUnit *unit), BTNSCOND_ZergBasic, 0x428cb0);
DECL_FUNC(ButtonState (__fastcall*BTNSCOND_CanMoveSpecialCase)(u16 variable, int player_id, CUnit *unit), BTNSCOND_CanMoveSpecialCase, 0x428d40);
DECL_FUNC(ButtonState (__fastcall*BTNSCOND_CanMove)(u16 variable, int player_id, CUnit *unit), BTNSCOND_CanMove, 0x428da0);
DECL_FUNC(ButtonState (__fastcall*BTNSCOND_TrainingFighter)(u16 variable, int player_id, CUnit *unit), BTNSCOND_TrainingFighter, 0x428e00);
DECL_FUNC(ButtonState (__fastcall*BTNSCOND_CanBuildUnit)(u16 variable, int player_id, CUnit *unit), BTNSCOND_CanBuildUnit, 0x428e60);
DECL_FUNC(ButtonState (__fastcall*BTNSCOND_HasUnit)(u16 variable, int player_id, CUnit *unit), BTNSCOND_HasUnit, 0x428ea0);
DECL_FUNC(ButtonState (__fastcall*BTNSCOND_Stationary)(u16 variable, int player_id, CUnit *unit), BTNSCOND_Stationary, 0x428ed0);
DECL_FUNC(ButtonState (__fastcall*BTNSCOND_CanAttack)(u16 variable, int player_id, CUnit *unit), BTNSCOND_CanAttack, 0x428f30);
DECL_FUNC(ButtonState (__fastcall*BTNSCOND_BattleOrders)(u16 variable, int player_id, CUnit *unit), BTNSCOND_BattleOrders, 0x428fa0);
DECL_FUNC(ButtonState (__fastcall*BTNSCOND_HasRoom)(u16 variable, int player_id, CUnit *unit), BTNSCOND_HasRoom, 0x428ff0);
DECL_FUNC(ButtonState (__fastcall*BTNSCOND_IsBurrowed)(u16 variable, int player_id, CUnit *unit), BTNSCOND_IsBurrowed, 0x429070);
DECL_FUNC(ButtonState (__fastcall*BTNSCOND_CanBurrow)(u16 variable, int player_id, CUnit *unit), BTNSCOND_CanBurrow, 0x4290f0);
DECL_FUNC(ButtonState (__fastcall*BTNSCOND_IsSieged)(u16 variable, int player_id, CUnit *unit), BTNSCOND_IsSieged, 0x429170);
DECL_FUNC(ButtonState (__fastcall*BTNSCOND_IsUnsieged)(u16 variable, int player_id, CUnit *unit), BTNSCOND_IsUnsieged, 0x4291c0);
DECL_FUNC(ButtonState (__fastcall*BTNSCOND_IsCloaked)(u16 variable, int player_id, CUnit *unit), BTNSCOND_IsCloaked, 0x429210);
DECL_FUNC(ButtonState (__fastcall*BTNSCOND_CanCloak)(u16 variable, int player_id, CUnit *unit), BTNSCOND_CanCloak, 0x4292c0);
DECL_FUNC(ButtonState (__fastcall*BTNSCOND_IsCloaked_0)(u16 variable, int player_id, CUnit *unit), BTNSCOND_IsCloaked_0, 0x429370);
DECL_FUNC(ButtonState (__fastcall*BTNSCOND_CanCloak_0)(u16 variable, int player_id, CUnit *unit), BTNSCOND_CanCloak_0, 0x4293e0);
DECL_FUNC(ButtonState (__fastcall*BTNSCOND_CanUpgrade)(u16 variable, int player_id, CUnit *unit), BTNSCOND_CanUpgrade, 0x429450);
DECL_FUNC(ButtonState (__fastcall*BTNSCOND_HasSpidermines)(u16 variable, int player_id, CUnit *unit), BTNSCOND_HasSpidermines, 0x429470);
DECL_FUNC(ButtonState (__fastcall*BTNSCOND_HasTech)(u16 variable, int player_id, CUnit *unit), BTNSCOND_HasTech, 0x4294e0);
DECL_FUNC(ButtonState (__fastcall*BTNSCOND_CanResearch)(u16 variable, int player_id, CUnit *unit), BTNSCOND_CanResearch, 0x429500);
DECL_FUNC(ButtonState (__fastcall*BTNSCOND_Rally)(u16 variable, int player_id, CUnit *unit), BTNSCOND_Rally, 0x429520);
DECL_FUNC(ButtonState (__fastcall*BTNSCOND_CanMergeDarkArchonTwoSelected)(u16 variable, int player_id, CUnit *unit), BTNSCOND_CanMergeDarkArchonTwoSelected, 0x429640);
DECL_FUNC(ButtonState (__fastcall*BTNSCOND_CanMergeDarkArchonOneSelected)(u16 variable, int player_id, CUnit *unit), BTNSCOND_CanMergeDarkArchonOneSelected, 0x429680);
DECL_FUNC(ButtonState (__fastcall*BTNSCOND_CanMergeArchonTwoSelected)(u16 variable, int player_id, CUnit *unit), BTNSCOND_CanMergeArchonTwoSelected, 0x4296b0);
DECL_FUNC(ButtonState (__fastcall*BTNSCOND_CanMergeArchonOneSelected)(u16 variable, int player_id, CUnit *unit), BTNSCOND_CanMergeArchonOneSelected, 0x4296f0);
DECL_FUNC(ButtonState (__fastcall*BTNSCOND_CanMorphLurker)(u16 variable, int player_id, CUnit *unit), BTNSCOND_CanMorphLurker, 0x429720);
DECL_FUNC(ButtonState (__fastcall*BTNSCOND_HatcheryLairHiveRally)(u16 variable, int player_id, CUnit *unit), BTNSCOND_HatcheryLairHiveRally, 0x429740);
DECL_FUNC(void (__fastcall*BTNSACT_TargetOrderCancel)(int action_variable, bool is_shift_used), BTNSACT_TargetOrderCancel, 0x429770);
DECL_FUNC(void (__fastcall*BTNSACT_CancelPlacement)(int action_variable, bool is_shift_used), BTNSACT_CancelPlacement, 0x429780);
DECL_FUNC(int (*nullsub_11)(), nullsub_11, 0x4297a0);
DECL_FUNC(int (__stdcall*sub_4297B0)(int a1), sub_4297B0, 0x4297b0);
DECL_FUNC(_DWORD (__stdcall*findContourInWork_3)(_DWORD a1, _DWORD a2, _DWORD a3), findContourInWork_3, 0x429800);
DECL_FUNC(_DWORD (__stdcall*findContourInWork_2)(_DWORD a1, _DWORD a2, _DWORD a3), findContourInWork_2, 0x4298c0);
DECL_FUNC(_DWORD (__stdcall*findContourInWork_1)(_DWORD a1, _DWORD a2, _DWORD a3), findContourInWork_1, 0x429990);
DECL_FUNC(_DWORD (__stdcall*findContourInWork_0)(_DWORD a1, _DWORD a2, _DWORD a3), findContourInWork_0, 0x429a60);
DECL_FUNC(signed (__thiscall*isContourSpaceAvailable)(SaiContourHub *this_, int x, int y), isContourSpaceAvailable, 0x429b20);
DECL_FUNC(_DWORD (__stdcall*sub_429D50)(__int16 a1, __int16 a2, _DWORD a3), sub_429D50, 0x429d50);
DECL_FUNC(_DWORD (__stdcall*sub_42A1B0)(_DWORD a1, _DWORD a2, _DWORD a3), sub_42A1B0, 0x42a1b0);
DECL_FUNC(int (__stdcall*sub_42A570)(int a1), sub_42A570, 0x42a570);
DECL_FUNC(int (__stdcall*sub_42A5C0)(Position *a1, Position *a2, signed __int16 *a3), sub_42A5C0, 0x42a5c0);
unsigned sub_42A840(unsigned __int8 a1, unsigned __int8 a2, int a3) {
    int address = 0x42a840;
    unsigned result_;
    __asm {
        xor eax, eax
        xor ecx, ecx
        push dword ptr a3
        mov cl, a2
        mov al, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_42A860)(), sub_42A860, 0x42a860);
DECL_FUNC(int (__stdcall*sub_42A8A0)(int a1), sub_42A8A0, 0x42a8a0);
DECL_FUNC(_DWORD (__stdcall*sub_42A8D0)(_DWORD a1, _DWORD a2, _DWORD a3), sub_42A8D0, 0x42a8d0);
DECL_FUNC(_DWORD (__stdcall*sub_42AB50)(_DWORD a1, _DWORD a2), sub_42AB50, 0x42ab50);
int sub_42ACB0(_DWORD *a1, char *a2) {
    int address = 0x42acb0;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
BOOL InitializeSightValues(int max_sight_range, SightStruct *sight_data, int map_tile_width) {
    int address = 0x42ad60;
    BOOL result_;
    __asm {
        xor eax, eax
        push dword ptr map_tile_width
        mov ecx, sight_data
        mov eax, max_sight_range
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_42AE30)(), sub_42AE30, 0x42ae30);
DECL_FUNC(int (*sub_42AE70)(), sub_42AE70, 0x42ae70);
DECL_FUNC(_DWORD (__stdcall*MD5)(_DWORD a1), MD5, 0x42ae90);
_DWORD * sub_42B500(_DWORD *result) {
    int address = 0x42b500;
    _DWORD * result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
int * sub_42B530(int a1) {
    int address = 0x42b530;
    int * result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int sub_42B570(int result, _DWORD *a2, char *a3) {
    int address = 0x42b570;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        mov ebx, a2
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
int sub_42B5D0(int a1, int a2, _DWORD *a3) {
    int address = 0x42b5d0;
    int result_;
    __asm {
        xor eax, eax
        mov esi, a3
        mov edi, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(_DWORD * (*SAI_PathCreate_Sub1_1)(), SAI_PathCreate_Sub1_1, 0x42b620);
DECL_FUNC(int (__stdcall*SAI_ContoursCreate_1)(BYTE (*a1)[1024], int *a2, int *a3), SAI_ContoursCreate_1, 0x42b760);
DECL_FUNC(int (__cdecl*PtFuncCompare)(const void *a1, const void *a2), PtFuncCompare, 0x42b850);
void SAI_ContoursRealloc(SaiContourHub *a1) {
    int address = 0x42b8a0;
    __asm {
        mov ebx, a1
        call address
    }
}
BOOL SAI_ContoursCreate_2(SaiContourHub *a1) {
    int address = 0x42b9f0;
    BOOL result_;
    __asm {
        xor eax, eax
        mov ebx, a1
        call address
        mov result_, eax
    }
    return result_;
}
void sai_contoursCreate_Cleanup(SaiContour **a1) {
    int address = 0x42bbd0;
    __asm {
        mov esi, a1
        call address
    }
}
DECL_FUNC(void (__cdecl*SAI_PathCreate_Sub1_0)(), SAI_PathCreate_Sub1_0, 0x42bc30);
void SAI_ContoursCreate(SaiContourHub *a1) {
    int address = 0x42c060;
    __asm {
        mov esi, a1
        call address
    }
}
void SAI_PathCreate_Sub4(SAI_Paths *a1) {
    int address = 0x42c5c0;
    __asm {
        mov eax, a1
        call address
    }
}
DECL_FUNC(int (__thiscall*TRGCND_Switch)(int this_), TRGCND_Switch, 0x42c610);
DECL_FUNC(int (*TRGCND_Never)(), TRGCND_Never, 0x42c670);
DECL_FUNC(int (*TRGCND_Always)(), TRGCND_Always, 0x42c680);
DECL_FUNC(int (*sub_42C690)(), sub_42C690, 0x42c690);
int sub_42C6A0(unsigned __int8 *a1) {
    int address = 0x42c6a0;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_42C6B0)(), sub_42C6B0, 0x42c6b0);
DECL_FUNC(BOOL (__thiscall*TRGCND_ElapsedTime)(int this_), TRGCND_ElapsedTime, 0x42c6e0);
DECL_FUNC(BOOL (__thiscall*TRGCND_CountdownTimer)(int this_), TRGCND_CountdownTimer, 0x42c720);
DECL_FUNC(BOOL (__thiscall*TRGCND_LeastResources)(unsigned __int8 *this_), TRGCND_LeastResources, 0x42c760);
DECL_FUNC(BOOL (__thiscall*TRGCND_MostResources)(void *this_), TRGCND_MostResources, 0x42c7d0);
DECL_FUNC(BOOL (__thiscall*TRGCND_LowestScore)(unsigned __int8 *this_), TRGCND_LowestScore, 0x42c840);
DECL_FUNC(BOOL (__thiscall*TRGCND_HighestScore)(unsigned __int8 *this_), TRGCND_HighestScore, 0x42c8b0);
DECL_FUNC(BOOL (__thiscall*TRGCND_LeastKills)(unsigned __int16 *this_), TRGCND_LeastKills, 0x42c920);
DECL_FUNC(BOOL (__thiscall*TRGCND_MostKills)(unsigned __int16 *this_), TRGCND_MostKills, 0x42c990);
DECL_FUNC(BOOL (__thiscall*TRGCND_CommandTheLeast)(_WORD *this_), TRGCND_CommandTheLeast, 0x42ca00);
DECL_FUNC(BOOL (__thiscall*TRGCND_CommandTheMost)(_WORD *this_), TRGCND_CommandTheMost, 0x42ca70);
DECL_FUNC(int (*TRGCND_Score)(), TRGCND_Score, 0x42cae0);
DECL_FUNC(int (*TRGCND_Opponents)(), TRGCND_Opponents, 0x42cb20);
DECL_FUNC(int (*TRGCND_Deaths)(), TRGCND_Deaths, 0x42cb60);
DECL_FUNC(int (__thiscall*TRGCND_Kill)(int this_), TRGCND_Kill, 0x42cba0);
DECL_FUNC(int (*TRGCND_Accumulate)(), TRGCND_Accumulate, 0x42cbe0);
DECL_FUNC(int (*TRGCND_Command)(), TRGCND_Command, 0x42cc20);
DECL_FUNC(BOOL (__thiscall*TRGCND_CommandTheLeastAt)(_WORD *this_), TRGCND_CommandTheLeastAt, 0x42cc70);
DECL_FUNC(BOOL (__thiscall*TRGCND_CommandTheMostAt)(_WORD *this_), TRGCND_CommandTheMostAt, 0x42ccf0);
DECL_FUNC(int (*TRGCND_Bring)(), TRGCND_Bring, 0x42cd70);
int sub_42CDD0(int result, int tech, int a3) {
    int address = 0x42cdd0;
    int result_;
    __asm {
        xor eax, eax
        mov ecx, a3
        mov edx, tech
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
char getUnitCostInfo(int *mineral_cost_ptr, int *supply_cost_ptr, UnitType unit_type, int *gas_cost_ptr) {
    int address = 0x42cdf0;
    char result_;
    __asm {
        xor eax, eax
        xor ecx, ecx
        push dword ptr gas_cost_ptr
        mov cx, unit_type
        mov edx, supply_cost_ptr
        mov eax, mineral_cost_ptr
        call address
        mov result_, al
    }
    return result_;
}
int subtractMorphCost(unsigned __int8 a1) {
    int address = 0x42ce40;
    int result_;
    __asm {
        xor eax, eax
        mov al, a1
        call address
        mov result_, eax
    }
    return result_;
}
void refundBuildingCost(UnitType a1, unsigned __int8 a2) {
    int address = 0x42ce70;
    __asm {
        xor eax, eax
        xor ecx, ecx
        mov cl, a2
        mov ax, a1
        call address
    }
}
int refundUnitTrainCost(unsigned __int8 playerID, UnitType unitType) {
    int address = 0x42cec0;
    int result_;
    __asm {
        xor eax, eax
        xor ecx, ecx
        mov cx, unitType
        mov al, playerID
        call address
        mov result_, eax
    }
    return result_;
}
int sub_42CEF0(int a1) {
    int address = 0x42cef0;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int sub_42CF00(int a1) {
    int address = 0x42cf00;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int sub_42CF10(int a1) {
    int address = 0x42cf10;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void sub_42CF20(unsigned __int16 a1, int a2, int a3, char a4, unsigned __int8 a5) {
    int address = 0x42cf20;
    __asm {
        xor eax, eax
        push dword ptr a5
        push dword ptr a4
        mov esi, a3
        mov edi, a2
        mov ax, a1
        call address
    }
}
void j_ShowErrorMessageWithSfx(int playerId, __int16 statTxtId, SfxData sfxId) {
    int address = 0x42cf60;
    __asm {
        xor edi, edi
        mov esi, sfxId
        mov di, statTxtId
        mov ebx, playerId
        call address
    }
}
DECL_FUNC(signed (__stdcall*hasSuppliesForUnit)(u8 playerID, UnitType unit_type, int a3), hasSuppliesForUnit, 0x42cf70);
signed sub_42D0C0(int a1, unsigned __int8 a2, int a3) {
    int address = 0x42d0c0;
    signed result_;
    __asm {
        xor eax, eax
        xor ecx, ecx
        mov esi, a3
        mov cl, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int sub_42D140(UnitType a1, u8 a2, int a3, int a4) {
    int address = 0x42d140;
    int result_;
    __asm {
        xor eax, eax
        xor edx, edx
        xor ebx, ebx
        push dword ptr a4
        mov esi, a3
        mov bl, a2
        mov dx, a1
        call address
        mov result_, eax
    }
    return result_;
}
int sub_42D190(unsigned __int8 a1, unsigned __int8 a2, int a3) {
    int address = 0x42d190;
    int result_;
    __asm {
        xor eax, eax
        xor ecx, ecx
        push dword ptr a3
        mov cl, a2
        mov al, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__fastcall*sub_42D240)(int a1, Tech a2, int a3), sub_42D240, 0x42d240);
BYTE refreshImageData(RECT *a1) {
    int address = 0x42d280;
    BYTE result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, al
    }
    return result_;
}
DECL_FUNC(CSprite * (*sub_42D330)(), sub_42D330, 0x42d330);
DECL_FUNC(int (*sub_42D350)(), sub_42D350, 0x42d350);
DECL_FUNC(unsigned (*sub_42D370)(), sub_42D370, 0x42d370);
DECL_FUNC(unsigned (*sub_42D400)(), sub_42D400, 0x42d400);
DECL_FUNC(CSprite * (__cdecl*getFirstSprite)(), getFirstSprite, 0x42d460);
int sub_42D4C0(CSprite *a1) {
    int address = 0x42d4c0;
    int result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
BOOL isVisible(__int16 y, __int16 x) {
    int address = 0x42d560;
    BOOL result_;
    __asm {
        xor eax, eax
        xor ecx, ecx
        xor esi, esi
        mov si, x
        mov cx, y
        call address
        mov result_, eax
    }
    return result_;
}
int sub_42D600(Anims animation) {
    int address = 0x42d600;
    int result_;
    __asm {
        xor eax, eax
        mov al, animation
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__fastcall*getUnitCollision_CB)(CUnit *a1, void *a2), getUnitCollision_CB, 0x42d650);
BOOL sub_42D6B0(CUnit *a1, __int16 a2, __int16 a3, unsigned __int16 a4, __int16 a5, __int16 a6) {
    int address = 0x42d6b0;
    BOOL result_;
    __asm {
        xor eax, eax
        xor ecx, ecx
        xor ebx, ebx
        push dword ptr a6
        push dword ptr a5
        push dword ptr a4
        mov bx, a3
        mov cx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(BOOL (__stdcall*canDimensionsFitAt)(signed int x, signed int y, signed int a3, signed int a4), canDimensionsFitAt, 0x42d740);
BOOL canUnitTypeFitAt(signed int x, UnitType unit_type, __int16 y) {
    int address = 0x42d810;
    BOOL result_;
    __asm {
        xor eax, eax
        xor ebx, ebx
        xor edi, edi
        mov di, y
        mov bx, unit_type
        mov eax, x
        call address
        mov result_, eax
    }
    return result_;
}
void sub_42D890(CUnit *a1, _DWORD *a2) {
    int address = 0x42d890;
    __asm {
        mov ecx, a2
        mov eax, a1
        call address
    }
}
void sub_42D8C0(CUnit *unit) {
    int address = 0x42d8c0;
    __asm {
        mov esi, unit
        call address
    }
}
CUnit * getUnitCollision(CUnit *a1) {
    int address = 0x42d9a0;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(BOOL (__fastcall*DoesBlockPoint)(int a1, CUnit *a2, unsigned __int16 a3, __int16 a4, __int16 a5), DoesBlockPoint, 0x42da00);
DECL_FUNC(BOOL (__fastcall*IsPointAtUnitBorder)(int a1, CUnit *a2, CUnit *a3, int a4), IsPointAtUnitBorder, 0x42da90);
signed sub_42DB50(CUnit *unit, int a2, int a3, Position *a4) {
    int address = 0x42db50;
    signed result_;
    __asm {
        xor eax, eax
        push dword ptr a4
        push dword ptr a3
        push dword ptr a2
        mov ebx, unit
        call address
        mov result_, eax
    }
    return result_;
}
BOOL CanCollideWith(CUnit *self, CUnit *other) {
    int address = 0x42dee0;
    BOOL result_;
    __asm {
        xor eax, eax
        mov esi, other
        mov edx, self
        call address
        mov result_, eax
    }
    return result_;
}
BOOL HasToDodge(CUnit *a1, CUnit *a2) {
    int address = 0x42df70;
    BOOL result_;
    __asm {
        xor eax, eax
        mov edx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
CUnit ** GetCollidingUnits(__int16 radius, CUnit *a2, int a3, int a4) {
    int address = 0x42e000;
    CUnit ** result_;
    __asm {
        xor eax, eax
        push dword ptr a4
        push dword ptr a3
        push dword ptr a2
        mov ax, radius
        call address
        mov result_, eax
    }
    return result_;
}
BOOL sub_42E0E0(CUnit *a1, int a2) {
    int address = 0x42e0e0;
    BOOL result_;
    __asm {
        xor eax, eax
        mov edi, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
CUnit ** sub_42E170(rect *a1, CUnit *a2) {
    int address = 0x42e170;
    CUnit ** result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__stdcall*sub_42E1D0)(CUnit *a1, int a2), sub_42E1D0, 0x42e1d0);
void orders_ResetCollision2(CUnit *unit) {
    int address = 0x42e320;
    __asm {
        mov eax, unit
        call address
    }
}
DECL_FUNC(void (*nullsub_12)(), nullsub_12, 0x42e430);
DECL_FUNC(void (__fastcall*nullsub_1)(bool exit_code), nullsub_1, 0x42e440);
DECL_FUNC(signed (*sub_42E450)(), sub_42E450, 0x42e450);
DECL_FUNC(int (*sub_42E460)(), sub_42E460, 0x42e460);
int sub_42E470(int a1, struct_a1_1 *a2, int *a3) {
    int address = 0x42e470;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        mov edi, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
char sub_42E4F0(int a1, int a2) {
    int address = 0x42e4f0;
    char result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
DECL_FUNC(BOOL (__stdcall*CreatePath_PullContours)(struct_a1_1 *a1, int a2, unsigned __int16 a3), CreatePath_PullContours, 0x42e600);
BOOL GetClosestReachable(struct_a1_1 *a1) {
    int address = 0x42efa0;
    BOOL result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (*nullsub_13)(), nullsub_13, 0x42f340);
DECL_FUNC(void (*nullsub_14)(), nullsub_14, 0x42f350);
DECL_FUNC(void (*nullsub_15)(), nullsub_15, 0x42f360);
char * getUnitRankString(CUnit *a1) {
    int address = 0x42f370;
    char * result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__thiscall*sub_42F440)(int *this_), sub_42F440, 0x42f440);
_DWORD * sub_42F480(int a1) {
    int address = 0x42f480;
    _DWORD * result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void * (*sub_42F4C0)(), sub_42F4C0, 0x42f4c0);
DECL_FUNC(signed (*AllocAIPathPool)(), AllocAIPathPool, 0x42f4f0);
DECL_FUNC(void (*nullsub_16)(), nullsub_16, 0x42f550);
struct_path_related * createUnitPathFromPathCreate(struct_a1_1 *a1) {
    int address = 0x42f560;
    struct_path_related * result_;
    __asm {
        xor eax, eax
        mov ebx, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (*sub_42F600)(), sub_42F600, 0x42f600);
DECL_FUNC(unsigned (__stdcall*sub_42F650)(CUnit *a1, Position a2, Position a3), sub_42F650, 0x42f650);
signed unitSubtractPathDelayAndCheck(CUnit *a1) {
    int address = 0x42f700;
    signed result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void unitSetPathDelay(CUnit *a1, char a2) {
    int address = 0x42f720;
    __asm {
        push dword ptr a2
        mov eax, a1
        call address
    }
}
void reAssignPath(CUnit *a1) {
    int address = 0x42f740;
    __asm {
        mov esi, a1
        call address
    }
}
struct_a1_1 * assignPathCreateFromUnitPath(struct_a1_1 *result, struct_path_related *a2, CUnit *a3) {
    int address = 0x42f790;
    struct_a1_1 * result_;
    __asm {
        xor eax, eax
        mov ecx, a3
        mov edx, a2
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
struct_path_related * getAllocatedPathSingleStep(CUnit *a1, int a2, int a3) {
    int address = 0x42f830;
    struct_path_related * result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
unsigned getUnitDistanceToPathEnd(CUnit *a1, struct_a1_1 *a2) {
    int address = 0x42f8f0;
    unsigned result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed isLargePath(CUnit *a1, points a2) {
    int address = 0x42f920;
    signed result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
BOOL unitHasPathToDestOnGround(CUnit *a1, __int16 a2, __int16 a3) {
    int address = 0x42fa00;
    BOOL result_;
    __asm {
        xor eax, eax
        xor edx, edx
        push dword ptr a3
        mov dx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
unsigned unitGetImaginaryPathDistanceToPosition(__int16 a1, CUnit *a2, int a3) {
    int address = 0x42fa30;
    unsigned result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        mov ecx, a2
        mov ax, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed sub_42FC10(CUnit *unit, Position a2, points *a3) {
    int address = 0x42fc10;
    signed result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        push dword ptr a2
        mov eax, unit
        call address
        mov result_, eax
    }
    return result_;
}
signed UMAnotherPath(CUnit *unit, points p) {
    int address = 0x42fe00;
    signed result_;
    __asm {
        xor eax, eax
        push dword ptr p
        mov eax, unit
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(CUnit ** (*sub_42FE90)(), sub_42FE90, 0x42fe90);
DECL_FUNC(int (*sub_42FEC0)(), sub_42FEC0, 0x42fec0);
DECL_FUNC(void (__cdecl*resetUnitBoundsLists_GetMaxUnitTypeSize)(), resetUnitBoundsLists_GetMaxUnitTypeSize, 0x42fee0);
CUnit ** getAllUnitsInBounds(rect *a1) {
    int address = 0x42ff80;
    CUnit ** result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
CUnit ** getUnitsAtPoint(__int16 a1, int a2) {
    int address = 0x4300e0;
    CUnit ** result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov ax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(s32 * (__thiscall*UnitRelManyFinderUMScoutPath)(CUnit *this_, __int16 a2, __int16 a3), UnitRelManyFinderUMScoutPath, 0x430190);
s32 * unkUnitRelManyFinderEx(__int16 a1, int a2, int a3) {
    int address = 0x4304d0;
    s32 * result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        mov ecx, a2
        mov ax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(CUnit ** (__stdcall*FindAllUnits)(Box16 *box), FindAllUnits, 0x4308a0);
CUnit ** findAllUnitsInBoundsUsing(rect *a1, int (__fastcall *a2)(_DWORD, _DWORD), int a3) {
    int address = 0x430b00;
    CUnit ** result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(CUnit ** (__stdcall*getAllUnitsInRegion)(unsigned __int16 a1), getAllUnitsInRegion, 0x430b50);
DECL_FUNC(int * (__stdcall*getClosestReachableUnit)(CUnit *a1, signed __int16 a2, __int16 a3), getClosestReachableUnit, 0x430be0);
unsigned sub_430D30(CUnit *a1, CUnit *a2) {
    int address = 0x430d30;
    unsigned result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(unsigned (__thiscall*sub_430E50)(CUnit *this_, __int16 a2, __int16 a3), sub_430E50, 0x430e50);
DECL_FUNC(BOOL (__thiscall*isTargetWithinMinRange)(CUnit *this_, unsigned int min_range, CUnit *target), isTargetWithinMinRange, 0x430f10);
bool ** GetClickableUnits(int a1, __int16 a2) {
    int address = 0x431030;
    bool ** result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int sub_4310F0(int a1) {
    int address = 0x4310f0;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int sub_431100(int a1) {
    int address = 0x431100;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed sub_431110(signed int unitType) {
    int address = 0x431110;
    signed result_;
    __asm {
        xor eax, eax
        mov eax, unitType
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__thiscall*filterUnitStrength)(_DWORD a1), filterUnitStrength, 0x431150);
int sub_431200(WeaponType weapon_type) {
    int address = 0x431200;
    int result_;
    __asm {
        xor eax, eax
        mov al, weapon_type
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_431230)(), sub_431230, 0x431230);
DECL_FUNC(int (*sub_431240)(), sub_431240, 0x431240);
DECL_FUNC(int (*sub_431250)(), sub_431250, 0x431250);
int calcUnitStrength(int a1, WeaponType weapon_type) {
    int address = 0x431270;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr weapon_type
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int sub_431320(signed int unitType) {
    int address = 0x431320;
    int result_;
    __asm {
        xor eax, eax
        mov esi, unitType
        call address
        mov result_, eax
    }
    return result_;
}
int sub_431370(signed int unit_type) {
    int address = 0x431370;
    int result_;
    __asm {
        xor eax, eax
        mov esi, unit_type
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (*calculateUnitStrengths)(void), calculateUnitStrengths, 0x4313c0);
Position sub_4314F0(CUnit *a1, int a2) {
    int address = 0x4314f0;
    Position result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
BOOL sub_431550(int a1, CUnit *a2) {
    int address = 0x431550;
    BOOL result_;
    __asm {
        xor eax, eax
        mov esi, a2
        mov ecx, a1
        call address
        mov result_, eax
    }
    return result_;
}
int BeefUnitStrength_AirOrGround(unsigned int a1, int a2, int a3) {
    int address = 0x4315e0;
    int result_;
    __asm {
        xor eax, eax
        mov ecx, a3
        mov edx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int getUnitStrength_AirOrGround(int a1, CUnit *a2) {
    int address = 0x4316d0;
    int result_;
    __asm {
        xor eax, eax
        mov edi, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int GetAlteredUnitStrength(int a1, CUnit *a2) {
    int address = 0x431730;
    int result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
unsigned getUnitStrength(CUnit *a1, int a2) {
    int address = 0x431800;
    unsigned result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
unsigned sub_4318B0(CUnit *a1) {
    int address = 0x4318b0;
    unsigned result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
int GetEnemyStrength(__int16 a1, int a2, int a3) {
    int address = 0x4318e0;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        push dword ptr a2
        mov ax, a1
        call address
        mov result_, eax
    }
    return result_;
}
CUnit * GetStrongestUnitInX_AirOrGround(int *a1, int a2, CUnit *a3, int a4, int a5) {
    int address = 0x431990;
    CUnit * result_;
    __asm {
        xor eax, eax
        push dword ptr a5
        push dword ptr a4
        push dword ptr a3
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__stdcall*sub_431CE0)(int a1), sub_431CE0, 0x431ce0);
int GetEnemyAirStrength(__int16 a1, int a2) {
    int address = 0x431d00;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov ax, a1
        call address
        mov result_, eax
    }
    return result_;
}
CUnit * GetStrongestUnitInRegion_AirOrGround(CUnit *a1, int a2) {
    int address = 0x431de0;
    CUnit * result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
CUnit * AI_GetStrongestGroundUnit(CUnit *a1) {
    int address = 0x431e90;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
CUnit * AI_GetStrongestAirUnit(CUnit *a1) {
    int address = 0x431ee0;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_431F30)(), sub_431F30, 0x431f30);
DECL_FUNC(int (__fastcall*AI_GetExpansionCount)(int a1), AI_GetExpansionCount, 0x431f40);
DECL_FUNC(int (__stdcall*sub_431F60)(int a1), sub_431F60, 0x431f60);
int AI_BuildAndTechAndUpgrade(int a1, char a2, char a3, UnitType unit_type, char a5, char a6) {
    int address = 0x431f90;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a6
        push dword ptr a5
        push dword ptr unit_type
        push dword ptr a3
        push dword ptr a2
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed sub_431FF0(int a1, int a2, int a3) {
    int address = 0x431ff0;
    signed result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        mov edx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int * CreateTown(int a1, __int16 a2, __int16 a3) {
    int address = 0x432020;
    int * result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        push dword ptr a2
        mov ebx, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*nullsub_17)(), nullsub_17, 0x4320c0);
int getPlayerDefaultRefineryUnitType(int playerID) {
    int address = 0x4320d0;
    int result_;
    __asm {
        xor eax, eax
        mov eax, playerID
        call address
        mov result_, eax
    }
    return result_;
}
int sub_432100(int a1) {
    int address = 0x432100;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int getDefaultWorkerUnitType(int a1) {
    int address = 0x432130;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int sub_432150(int a1) {
    int address = 0x432150;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_432170)(), sub_432170, 0x432170);
DECL_FUNC(int (*AISomethingToID)(), AISomethingToID, 0x432180);
int sub_4321A0(int result) {
    int address = 0x4321a0;
    int result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_4321B0)(), sub_4321B0, 0x4321b0);
DECL_FUNC(int (*sub_4321D0)(), sub_4321D0, 0x4321d0);
DECL_FUNC(int (*sub_4321F0)(), sub_4321F0, 0x4321f0);
DECL_FUNC(int (*nullsub_18)(), nullsub_18, 0x432220);
DECL_FUNC(int (*nullsub_19)(), nullsub_19, 0x432230);
DECL_FUNC(int (*sub_432240)(), sub_432240, 0x432240);
DECL_FUNC(unsigned (__stdcall*AI_RegionSize)(int a1, unsigned int a2), AI_RegionSize, 0x432260);
DECL_FUNC(int (__fastcall*AI_getNumOwnedMineralClusters)(int a1), AI_getNumOwnedMineralClusters, 0x432320);
BOOL playerHasAverageResources(int a1) {
    int address = 0x432360;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__fastcall*sub_4323B0)(UnitType unit_type), sub_4323B0, 0x4323b0);
int sub_4323C0(char a1, char a2, __int16 a3, int a4) {
    int address = 0x4323c0;
    int result_;
    __asm {
        xor eax, eax
        xor edx, edx
        xor ecx, ecx
        mov esi, a4
        mov cx, a3
        mov dl, a2
        mov al, a1
        call address
        mov result_, eax
    }
    return result_;
}
unsigned AI_Build(unsigned int result, char a2, unsigned int unit_type, int a4, char a5) {
    int address = 0x4323d0;
    unsigned result_;
    __asm {
        xor eax, eax
        xor edx, edx
        push dword ptr a5
        mov esi, a4
        mov ecx, unit_type
        mov dl, a2
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__stdcall*sub_432400)(char a1, int a2), sub_432400, 0x432400);
DECL_FUNC(int (*isUnitOwnedBy)(), isUnitOwnedBy, 0x432420);
DECL_FUNC(int (__thiscall*sub_432430)(_DWORD a1), sub_432430, 0x432430);
DECL_FUNC(int (*sub_432450)(), sub_432450, 0x432450);
signed isUnitTypeRaceUnitRace(unsigned __int16 a1, CUnit *a2) {
    int address = 0x432480;
    signed result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov ax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_4324E0)(), sub_4324E0, 0x4324e0);
DECL_FUNC(int (*sub_432500)(), sub_432500, 0x432500);
signed sub_432530(int a1, int a2) {
    int address = 0x432530;
    signed result_;
    __asm {
        xor eax, eax
        mov esi, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int sub_4325A0(int a1, int a2) {
    int address = 0x4325a0;
    int result_;
    __asm {
        xor eax, eax
        mov edi, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__cdecl*initAITownMgr)(), initAITownMgr, 0x432610);
DECL_FUNC(char (__stdcall*sub_4326A0)(int a1), sub_4326A0, 0x4326a0);
int AI_getVespeneType(CUnit *a1, int player) {
    int address = 0x4326e0;
    int result_;
    __asm {
        xor eax, eax
        mov edx, player
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__thiscall*AI_Unassign)(CUnit *this_), AI_Unassign, 0x432760);
BOOL sub_4327D0(CUnit *a1) {
    int address = 0x4327d0;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int unpackTownMgr_02_Unit_Data(_DWORD *a1) {
    int address = 0x432810;
    int result_;
    __asm {
        xor eax, eax
        mov ebx, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(unsigned (__stdcall*sub_4328E0)(int a1), sub_4328E0, 0x4328e0);
DECL_FUNC(int (*sub_4329F0)(), sub_4329F0, 0x4329f0);
int sub_432A30(int a1) {
    int address = 0x432a30;
    int result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__fastcall*AI_getClosestEnemyRace)(int a1, int a2), AI_getClosestEnemyRace, 0x432aa0);
signed RegionContainsWorkerOrBuilding(__int16 a1, int a2) {
    int address = 0x432ad0;
    signed result_;
    __asm {
        xor eax, eax
        mov edi, a2
        mov ax, a1
        call address
        mov result_, eax
    }
    return result_;
}
bool AI_CanBuild(CUnit *a1, UnitType unit_type) {
    int address = 0x432b60;
    bool result_;
    __asm {
        xor eax, eax
        xor ebx, ebx
        mov bx, unit_type
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
CUnit * GetAIRefinery(int a1, int a2, int a3) {
    int address = 0x432b90;
    CUnit * result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        push dword ptr a2
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
int LoadAITownData(FILE *a1) {
    int address = 0x432c10;
    int result_;
    __asm {
        xor eax, eax
        mov ebx, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__stdcall*WriteAITownData)(FILE *a1), WriteAITownData, 0x432da0);
signed isGroundMap(__int16 a1, __int16 a2, int a3) {
    int address = 0x433110;
    signed result_;
    __asm {
        xor eax, eax
        xor ebx, ebx
        xor edi, edi
        push dword ptr a3
        mov di, a2
        mov bx, a1
        call address
        mov result_, eax
    }
    return result_;
}
int getGuardXY(int a1, int a2, _DWORD *a3, _DWORD *a4) {
    int address = 0x433190;
    int result_;
    __asm {
        xor eax, eax
        mov edi, a4
        mov ebx, a3
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int AI_WaitBuild(int a1, UnitType unit_type, int a3) {
    int address = 0x433210;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        push dword ptr unit_type
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed sub_433410(int a1) {
    int address = 0x433410;
    signed result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int sub_433470(int a1, int a2) {
    int address = 0x433470;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed sub_4335F0(int a1, int a2, CUnit *a3, signed int a4) {
    int address = 0x4335f0;
    signed result_;
    __asm {
        xor eax, eax
        push dword ptr a4
        push dword ptr a3
        mov esi, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int AI_FinishUnit(int a1, CUnit *a2) {
    int address = 0x433640;
    int result_;
    __asm {
        xor eax, eax
        mov edi, a2
        mov edx, a1
        call address
        mov result_, eax
    }
    return result_;
}
char sub_433660(int a1) {
    int address = 0x433660;
    char result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
DECL_FUNC(char (__stdcall*sub_433730)(int a1), sub_433730, 0x433730);
DECL_FUNC(BOOL (__stdcall*AI_UnitConstructionBehaviour)(int a1, CUnit *a2, int a3), AI_UnitConstructionBehaviour, 0x433890);
void AI_AutoHarvest(CUnit *a1, CUnit *a2, CUnit *a3) {
    int address = 0x433b90;
    __asm {
        push dword ptr a3
        mov ecx, a2
        mov eax, a1
        call address
    }
}
DECL_FUNC(signed (__stdcall*AI_SCVRepairController)(CUnit *a1, int a2), AI_SCVRepairController, 0x433c70);
char AI_AddUnitToTown(CUnit *a1, int a2) {
    int address = 0x433dd0;
    char result_;
    __asm {
        xor eax, eax
        mov edi, a2
        mov ebx, a1
        call address
        mov result_, al
    }
    return result_;
}
char sub_433FE0(CUnit *a1) {
    int address = 0x433fe0;
    char result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
char sub_434020(CUnit *a1) {
    int address = 0x434020;
    char result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
int * AI_StartAreaTown(int a1, int a2, int a3) {
    int address = 0x434060;
    int * result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int * AI_StartTown(int a1, __int16 a2, __int16 a3, int a4) {
    int address = 0x434220;
    int * result_;
    __asm {
        xor eax, eax
        push dword ptr a4
        push dword ptr a3
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed sub_434330(int a1) {
    int address = 0x434330;
    signed result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
char sub_434450(CUnit *a1) {
    int address = 0x434450;
    char result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
DECL_FUNC(_DWORD * (__stdcall*sub_434480)(int a1, int a2, int a3), sub_434480, 0x434480);
void AI_ResearchBehaviour(CUnit *a1, int player_id) {
    int address = 0x4345c0;
    __asm {
        mov ecx, player_id
        mov eax, a1
        call address
    }
}
void AI_UpgradeBehaviour(CUnit *a1, int player_id) {
    int address = 0x434670;
    __asm {
        mov ecx, player_id
        mov eax, a1
        call address
    }
}
signed AI_TrainBehaviour(CUnit *a1, int a2, int a3) {
    int address = 0x434720;
    signed result_;
    __asm {
        xor eax, eax
        mov ebx, a3
        mov edx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int sub_4347E0(int a1) {
    int address = 0x4347e0;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(signed (__stdcall*AttendTownNeeds)(int a1, CUnit *a2), AttendTownNeeds, 0x4348c0);
signed DetachUnitTaskFromTown(CUnit *a1, int a2) {
    int address = 0x434c90;
    signed result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
void AI_NukeSiloBehaviour(CUnit *a1) {
    int address = 0x434d50;
    __asm {
        mov eax, a1
        call address
    }
}
void AI_OverlordBehaviour(CUnit *a1) {
    int address = 0x434df0;
    __asm {
        mov eax, a1
        call address
    }
}
AiCaptain * AI_ConstructAddonBehaviour(int a1, CUnit *a2, int a3) {
    int address = 0x434e70;
    AiCaptain * result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed AI_MorphBehaviour(int a1, int a2, CUnit *a3, int a4) {
    int address = 0x434ff0;
    signed result_;
    __asm {
        xor eax, eax
        push dword ptr a4
        push dword ptr a3
        mov ebx, a2
        mov edx, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed AI_MakeDetectorBehaviour(CUnit *a1, int a2) {
    int address = 0x435130;
    signed result_;
    __asm {
        xor eax, eax
        mov edi, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__stdcall*AIWorkerController)(CUnit *a1), AIWorkerController, 0x435210);
DECL_FUNC(char (__stdcall*AI_GetOldPeons)(int a1, int a2), AI_GetOldPeons, 0x4355c0);
char AI_TrainingWorker(CUnit *a1, CUnit *a2) {
    int address = 0x435700;
    char result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
__int16 AI_TrainingOverlord(CUnit *a1, CUnit *a2) {
    int address = 0x435770;
    __int16 result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, ax
    }
    return result_;
}
void sub_4358D0(CUnit *result) {
    int address = 0x4358d0;
    __asm {
        mov eax, result
        call address
    }
}
char sub_435900(s32 a1, int a2) {
    int address = 0x435900;
    char result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
DECL_FUNC(unsigned (*AI_PanicControl)(), AI_PanicControl, 0x435bd0);
void AI_TrainingNormal(CUnit *a1, CUnit *a2) {
    int address = 0x435db0;
    __asm {
        mov ecx, a2
        mov eax, a1
        call address
    }
}
DECL_FUNC(signed (__stdcall*AI_PlanDoMergeMorph)(int a1, CUnit *unit, int a3), AI_PlanDoMergeMorph, 0x435f10);
DECL_FUNC(signed (__thiscall*AI_PerformTask)(CUnit *this_), AI_PerformTask, 0x4361a0);
DECL_FUNC(char (__stdcall*AI_UpgradesFinished)(int a1), AI_UpgradesFinished, 0x436320);
int sub_436880(int result, int a2, char a3) {
    int address = 0x436880;
    int result_;
    __asm {
        xor eax, eax
        xor ecx, ecx
        mov cl, a3
        mov edx, a2
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (*sub_4368B0)(), sub_4368B0, 0x4368b0);
DECL_FUNC(_DWORD (__stdcall*sub_4368C0)(_DWORD a1, _DWORD a2), sub_4368C0, 0x4368c0);
BOOL sub_4368F0(int a1, int a2) {
    int address = 0x4368f0;
    BOOL result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
BOOL OrderIsSpell(Order order) {
    int address = 0x436930;
    BOOL result_;
    __asm {
        xor eax, eax
        mov al, order
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__thiscall*DecCaptainScalerCounterValue)(_DWORD a1), DecCaptainScalerCounterValue, 0x436980);
DECL_FUNC(int (*sub_4369D0)(), sub_4369D0, 0x4369d0);
BOOL sub_4369F0(AiCaptain *a1) {
    int address = 0x4369f0;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int sub_436A10(int result) {
    int address = 0x436a10;
    int result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(unsigned (__thiscall*sub_436A20)(void *this_), sub_436A20, 0x436a20);
DECL_FUNC(void (__cdecl*freeAICaptains)(), freeAICaptains, 0x436a40);
int allocateAICaptains(int a1) {
    int address = 0x436a80;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*nullsub_20)(), nullsub_20, 0x436ad0);
int Unit__hasNoCaptainType(CUnit *a1) {
    int address = 0x436ae0;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(_DWORD (__stdcall*AI_getZergAirScore)(char a1), AI_getZergAirScore, 0x436b10);
DECL_FUNC(_DWORD (__stdcall*AI_getZergGroundScore)(char a1), AI_getZergGroundScore, 0x436b40);
DECL_FUNC(_DWORD (__stdcall*AI_getTerranInfantryScore)(char a1), AI_getTerranInfantryScore, 0x436b60);
DECL_FUNC(BOOL (__fastcall*AI_WaitTurrets)(int a1), AI_WaitTurrets, 0x436b90);
DECL_FUNC(BOOL (__fastcall*AI_WaitBunkers)(int a1), AI_WaitBunkers, 0x436bd0);
DECL_FUNC(signed (__stdcall*AISomethingHasOwnershipOfRegion)(int a1, unsigned __int16 a2), AISomethingHasOwnershipOfRegion, 0x436c10);
DECL_FUNC(signed (__fastcall*AI_isAttacking)(int a1), AI_isAttacking, 0x436c90);
_BYTE * PopulateRgnsWithSecondaryEnemyNeighbors(const void *a1) {
    int address = 0x436cf0;
    _BYTE * result_;
    __asm {
        xor eax, eax
        mov ebx, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed PopulateRgnsWithNeighbors(const void *a1) {
    int address = 0x436d80;
    signed result_;
    __asm {
        xor eax, eax
        mov ebx, a1
        call address
        mov result_, eax
    }
    return result_;
}
AiCaptain * sub_436E10(int a1, int a2) {
    int address = 0x436e10;
    AiCaptain * result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int UNIT_FinishedSummon(CUnit *a1) {
    int address = 0x436e40;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
BOOL IsMilitaryCaptain(CUnit *unit, int a2) {
    int address = 0x436e70;
    BOOL result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, unit
        call address
        mov result_, eax
    }
    return result_;
}
StatusFlags sub_436EB0(AiCaptain *a1) {
    int address = 0x436eb0;
    StatusFlags result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(BOOL (__thiscall*loadedProc_UnitIsFirebat)(CUnit *this_), loadedProc_UnitIsFirebat, 0x436ef0);
DECL_FUNC(signed (__fastcall*sub_436F00)(int a1), sub_436F00, 0x436f00);
DECL_FUNC(AiCaptain * (*j_freeAICaptains)(), j_freeAICaptains, 0x436f60);
DECL_FUNC(int (__stdcall*AssignCaptainToSlowestUnit)(AiCaptain *a1), AssignCaptainToSlowestUnit, 0x436f70);
int isUnknownSpellcaster(int a1) {
    int address = 0x437000;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__fastcall*RecalcRegionPriorities)(int a1, int a2, int a3), RecalcRegionPriorities, 0x437070);
DECL_FUNC(signed (__fastcall*IsRegionANeighborOfRegionB)(int a1, int a2, unsigned __int16 a3), IsRegionANeighborOfRegionB, 0x437180);
int sub_4371D0(int result, AiCaptain *a2) {
    int address = 0x4371d0;
    int result_;
    __asm {
        xor eax, eax
        mov edx, a2
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_437230)(), sub_437230, 0x437230);
DECL_FUNC(int (__thiscall*playerHasTransports)(_DWORD a1), playerHasTransports, 0x437250);
DECL_FUNC(AiCaptain * (__fastcall*sub_437290)(unsigned int a1), sub_437290, 0x437290);
DECL_FUNC(int (__thiscall*sub_4372E0)(unsigned __int8 *this_), sub_4372E0, 0x4372e0);
signed AI_GetDarkTemplarsForSummon(int a1, int a2, int a3) {
    int address = 0x437320;
    signed result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        mov ebx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(signed (__stdcall*AI_GetHighTemplarsForSummon)(int a1, int a2, int a3), AI_GetHighTemplarsForSummon, 0x437410);
CUnit * AI_GetHydraliskForMorph(int a1) {
    int address = 0x437570;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
CUnit * AI_GetMutaliskForMorph(int a1) {
    int address = 0x4375f0;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed GetTurretPosition(int a1, int a2) {
    int address = 0x437670;
    signed result_;
    __asm {
        xor eax, eax
        mov esi, a2
        mov ebx, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed GetBunkerPosition(int a1, Position *a2) {
    int address = 0x4376f0;
    signed result_;
    __asm {
        xor eax, eax
        mov esi, a2
        mov ebx, a1
        call address
        mov result_, eax
    }
    return result_;
}
int populateAttackRegions(int a1, int a2, int a3, int a4, int a5, int a6, int a7) {
    int address = 0x437770;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a7
        push dword ptr a6
        push dword ptr a5
        push dword ptr a4
        push dword ptr a3
        mov edx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
CUnit * sub_4379B0(int a1, int a2, int a3, int a4) {
    int address = 0x4379b0;
    CUnit * result_;
    __asm {
        xor eax, eax
        push dword ptr a4
        push dword ptr a3
        mov ebx, a2
        mov ecx, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__stdcall*InitRegionCaptains)(int a1), InitRegionCaptains, 0x437a70);
DECL_FUNC(int (__thiscall*isCaptainTrackingNonCritter)(_DWORD a1), isCaptainTrackingNonCritter, 0x437e00);
BOOL isImportantRegionAccessible(unsigned int a1, int a2, int a3) {
    int address = 0x437e70;
    BOOL result_;
    __asm {
        xor eax, eax
        mov esi, a3
        mov ebx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(signed (__fastcall*sub_437F20)(int a1, int a2), sub_437F20, 0x437f20);
DECL_FUNC(unsigned (__stdcall*sub_438050)(AiCaptain *a1, int a2, int a3), sub_438050, 0x438050);
DECL_FUNC(int (__thiscall*isAIControllerNotABuilding)(CUnit *this_), isAIControllerNotABuilding, 0x4381d0);
DECL_FUNC(int (*sub_438200)(), sub_438200, 0x438200);
int packAIPathingData(int a1) {
    int address = 0x438240;
    int result_;
    __asm {
        xor eax, eax
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
int sub_4382C0(int a1, int a2, int a3) {
    int address = 0x4382c0;
    int result_;
    __asm {
        xor eax, eax
        mov ecx, a3
        mov edx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__thiscall*sub_4383B0)(CUnit *this_), sub_4383B0, 0x4383b0);
DECL_FUNC(int (__thiscall*sub_4383E0)(CUnit *this_), sub_4383E0, 0x4383e0);
DECL_FUNC(signed (__fastcall*sub_438410)(int a1, CUnit *a2), sub_438410, 0x438410);
DECL_FUNC(int (__thiscall*sub_438470)(CUnit *this_), sub_438470, 0x438470);
int isUnitTypeFoundInRegion(unsigned __int16 a1, int a2, int a3) {
    int address = 0x4384a0;
    int result_;
    __asm {
        xor eax, eax
        mov esi, a3
        mov edi, a2
        mov ax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(u8 (__stdcall*AI_PatrolController)(CUnit *a1, int a2, int *a3), AI_PatrolController, 0x4384f0);
unsigned AI_BuildTurrets(int a1) {
    int address = 0x4387e0;
    unsigned result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
unsigned AI_BuildBunkers(int a1) {
    int address = 0x438870;
    unsigned result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
BOOL sub_438910(CUnit *a1) {
    int address = 0x438910;
    BOOL result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(unsigned (__stdcall*getBestAttackRegion_LeastEnemyStrength)(int a1, unsigned int a2, unsigned int *a3), getBestAttackRegion_LeastEnemyStrength, 0x438980);
UnitPrototypeFlags PopulateRgnsWithOwn(int a1, UnitPrototypeFlags a2) {
    int address = 0x438b30;
    UnitPrototypeFlags result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov ebx, a1
        call address
        mov result_, eax
    }
    return result_;
}
AiCaptain * getAIRegionInfoFromUnitLocation(CUnit *a1) {
    int address = 0x438bf0;
    AiCaptain * result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__stdcall*sub_438C20)(CUnit *a1), sub_438C20, 0x438c20);
DECL_FUNC(int (__thiscall*sub_438E10)(_DWORD a1), sub_438E10, 0x438e10);
BOOL sub_438E70(CUnit *a1, signed int y, signed int x) {
    int address = 0x438e70;
    BOOL result_;
    __asm {
        xor eax, eax
        push dword ptr x
        push dword ptr y
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed sub_438EF0(__int16 a1, int a2) {
    int address = 0x438ef0;
    signed result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov ax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__fastcall*CB_AICaptainStrengthIterator)(CUnit *a1, CUnit *a2), CB_AICaptainStrengthIterator, 0x438f60);
void getAITownCapabilities(AiCaptain *a1, int a2, int a3, int a4) {
    int address = 0x438fc0;
    __asm {
        mov esi, a4
        mov edi, a3
        mov ebx, a2
        mov eax, a1
        call address
    }
}
DECL_FUNC(BOOL (__fastcall*sub_439050)(int a1, int a2), sub_439050, 0x439050);
char AI_AssignCaptain(int a1, AiCaptain *a2) {
    int address = 0x4390a0;
    char result_;
    __asm {
        xor eax, eax
        mov esi, a2
        mov ebx, a1
        call address
        mov result_, al
    }
    return result_;
}
signed LoadAIPathingCaptainData(FILE *a1) {
    int address = 0x439220;
    signed result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__stdcall*WriteAIPathCaptainData)(FILE *a1), WriteAIPathCaptainData, 0x4392f0);
DECL_FUNC(unsigned (__stdcall*AI_Implode)(int a1), AI_Implode, 0x4393e0);
DECL_FUNC(BOOL (__fastcall*AI_EnterTransportProc)(CUnit *a1, CUnit *a2), AI_EnterTransportProc, 0x4394a0);
DECL_FUNC(unsigned (__stdcall*AI_AttackClear)(int a1), AI_AttackClear, 0x439500);
BOOL sub_439550(CUnit *a1) {
    int address = 0x439550;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(char (__stdcall*AI_ClearCombatData)(int a1, int a2), AI_ClearCombatData, 0x439660);
u8 AI_ValueArea(signed int a1, signed int a2, int a3) {
    int address = 0x4396f0;
    u8 result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        mov edi, a2
        mov ecx, a1
        call address
        mov result_, al
    }
    return result_;
}
DECL_FUNC(signed (__stdcall*AI_GetSpiderMineLocations)(CUnit *a1, int a2, int a3), AI_GetSpiderMineLocations, 0x439740);
DECL_FUNC(signed (__fastcall*AssignMilitaryToRegion)(int a1, int a2, int a3, int a4, int a5, int a6, int a7), AssignMilitaryToRegion, 0x4399d0);
DECL_FUNC(void (__stdcall*PopulateRgnsWithEnemy)(int a1, int a2), PopulateRgnsWithEnemy, 0x439b50);
DECL_FUNC(signed (__stdcall*AI_CaptExpand)(int a1, signed int a2), AI_CaptExpand, 0x439c00);
signed sub_439D50(CUnit *a1) {
    int address = 0x439d50;
    signed result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(signed (__stdcall*ClearUnitFromGlobalAIEntry)(CUnit *a1, int a2), ClearUnitFromGlobalAIEntry, 0x439d60);
DECL_FUNC(unsigned (__stdcall*AI_HelpIfTrouble)(int a1), AI_HelpIfTrouble, 0x439f50);
DECL_FUNC(char (__stdcall*AI_MakeGuard)(int a1, CUnit *a2), AI_MakeGuard, 0x43a010);
u8 sub_43A1D0(int a1, int a2, int a3) {
    int address = 0x43a1d0;
    u8 result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        push dword ptr a2
        mov edi, a1
        call address
        mov result_, al
    }
    return result_;
}
DECL_FUNC(int (*sub_43A250)(), sub_43A250, 0x43a250);
signed sub_43A2E0(int a1) {
    int address = 0x43a2e0;
    signed result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
unsigned sub_43A390(AiCaptain *a1) {
    int address = 0x43a390;
    unsigned result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(CUnit * (__stdcall*sub_43A510)(AiCaptain *a1), sub_43A510, 0x43a510);
DECL_FUNC(signed (__stdcall*sub_43A790)(AiCaptain *a1, AiCaptain *a2), sub_43A790, 0x43a790);
DECL_FUNC(CUnit * (__stdcall*sub_43A8F0)(int a1, signed int y, signed int x), sub_43A8F0, 0x43a8f0);
signed sub_43AA10(CUnit *a1) {
    int address = 0x43aa10;
    signed result_;
    __asm {
        xor eax, eax
        mov ebx, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(char (__stdcall*AI_BuildTurret)(int a1, int a2), AI_BuildTurret, 0x43aae0);
DECL_FUNC(BOOL (__stdcall*AI_AttackManager)(int a1, int a2, int a3, int a4, int a5), AI_AttackManager, 0x43abb0);
CUnit * sub_43AD60(CUnit *a1, CUnit *a2) {
    int address = 0x43ad60;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov esi, a2
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__stdcall*sub_43ADA0)(CUnit *a1, CUnit *a2, int a3), sub_43ADA0, 0x43ada0);
signed AI_Rush(int a1, int a2, int a3, int a4) {
    int address = 0x43b0b0;
    signed result_;
    __asm {
        xor eax, eax
        push dword ptr a4
        push dword ptr a3
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed AI_EvalHarass(int a1, int a2, int a3) {
    int address = 0x43b570;
    signed result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
BOOL sub_43B6D0(int unit_type, CUnit *a2, int a3) {
    int address = 0x43b6d0;
    BOOL result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        mov esi, a2
        mov ecx, unit_type
        call address
        mov result_, eax
    }
    return result_;
}
CUnit * sub_43B790(CUnit *a1, CUnit *a2, CUnit *a3) {
    int address = 0x43b790;
    CUnit * result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void AI_orderUnitCloaking(CUnit *a1) {
    int address = 0x43b970;
    __asm {
        mov esi, a1
        call address
    }
}
DECL_FUNC(char (__thiscall*sub_43B9E0)(void *this_, int a2), sub_43B9E0, 0x43b9e0);
DECL_FUNC(void * (__stdcall*sub_43BAC0)(AiCaptain *a1, unsigned int a2, int a3, int a4, int a5, int a6), sub_43BAC0, 0x43bac0);
DECL_FUNC(_DWORD * (__stdcall*sub_43BC40)(AiCaptain *a1, int a2, int a3, int a4, int a5), sub_43BC40, 0x43bc40);
DECL_FUNC(int (__stdcall*AI_OrderAllUnitsInLocation)(int a1, int a2, int a3, Order a4), AI_OrderAllUnitsInLocation, 0x43be50);
int AI_ExitTransport(int a1, int a2) {
    int address = 0x43bf00;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int AI_EnterTransport(int a1, int playerID) {
    int address = 0x43c050;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr playerID
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void sub_43C170(CUnit *a1) {
    int address = 0x43c170;
    __asm {
        mov eax, a1
        call address
    }
}
void AI_orderLurkerBurrow(CUnit *a1) {
    int address = 0x43c230;
    __asm {
        mov eax, a1
        call address
    }
}
int AI_EnterBunker(int a1, int a2) {
    int address = 0x43c260;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int AI_MakePatrol(int a1, int a2) {
    int address = 0x43c330;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed AI_Defender_Bunker_Behaviour(__int16 a1, CUnit *a2) {
    int address = 0x43c480;
    signed result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov ax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void AI_RespondToCloaked(CUnit *a1, CUnit *a2) {
    int address = 0x43c580;
    __asm {
        push dword ptr a2
        mov eax, a1
        call address
    }
}
void IssueCaptainUnitOrder(int order_id, CUnit *a2) {
    int address = 0x43c980;
    __asm {
        mov ecx, a2
        mov eax, order_id
        call address
    }
}
signed sub_43CA30(CUnit *a1) {
    int address = 0x43ca30;
    signed result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed sub_43CB00(CUnit *a1) {
    int address = 0x43cb00;
    signed result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
CUnit * sub_43CC40(AiCaptain *a1) {
    int address = 0x43cc40;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
void prepSuicide(CUnit *a1) {
    int address = 0x43cd40;
    __asm {
        mov eax, a1
        call address
    }
}
DECL_FUNC(char (__stdcall*AI_CaptainUpdate_Type3)(AiCaptain *a1), AI_CaptainUpdate_Type3, 0x43d350);
DECL_FUNC(void (__stdcall*AI_OrderToDestination)(CUnit *a1, signed int order, int a3, int a4), AI_OrderToDestination, 0x43d5d0);
void AI_ManageMilitaryController(CUnit *a1) {
    int address = 0x43d910;
    __asm {
        mov eax, a1
        call address
    }
}
char sub_43DA20(AiCaptain *a1, CUnit *a2, int a3) {
    int address = 0x43da20;
    char result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        mov ebx, a2
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
char sub_43DB10(CUnit *a1, signed int edi0, int a3) {
    int address = 0x43db10;
    char result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        mov edi, edi0
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
signed AI_TransportAction(CUnit *a1) {
    int address = 0x43db50;
    signed result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
void * sub_43DD20(AiCaptain *a1) {
    int address = 0x43dd20;
    void * result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__fastcall*sub_43DDE0)(CUnit *a1, AiCaptain *a2), sub_43DDE0, 0x43dde0);
signed sub_43DE40(AiCaptain *a1) {
    int address = 0x43de40;
    signed result_;
    __asm {
        xor eax, eax
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__stdcall*AIUnloading)(int a1), AIUnloading, 0x43df30);
void AI_SendSuicide(char a1, int a2) {
    int address = 0x43e050;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov al, a1
        call address
    }
}
DECL_FUNC(char (__stdcall*AI_TrainingBroodling)(CUnit *a1, CUnit *a2), AI_TrainingBroodling, 0x43e280);
signed sub_43E2E0(AiCaptain *a1, int a2, unsigned int a3) {
    int address = 0x43e2e0;
    signed result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed sub_43E400(CUnit *a1, CUnit *a2) {
    int address = 0x43e400;
    signed result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
CUnit * sub_43E580(AiCaptain *a1, AiCaptain *a2, CUnit *a3, int a4, int a5) {
    int address = 0x43e580;
    CUnit * result_;
    __asm {
        xor eax, eax
        push dword ptr a5
        push dword ptr a4
        push dword ptr a3
        mov esi, a2
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
unsigned sub_43E670(AiCaptain *a1) {
    int address = 0x43e670;
    unsigned result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int sub_43E760(unsigned __int16 *a1, AiCaptain *a2, int a3) {
    int address = 0x43e760;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        mov ebx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (*AI_SuicideControl)(), AI_SuicideControl, 0x43e7d0);
DECL_FUNC(char (__stdcall*AI_BuildBunker)(int a1, int a2), AI_BuildBunker, 0x43ebb0);
DECL_FUNC(char (__stdcall*AI_CaptainUpdate_Military12)(AiCaptain *a1), AI_CaptainUpdate_Military12, 0x43ee10);
DECL_FUNC(char (__stdcall*AI_CaptainUpdate_Military89)(AiCaptain *a1), AI_CaptainUpdate_Military89, 0x43eec0);
DECL_FUNC(char (__stdcall*AI_CaptainUpdate_Type7)(AiCaptain *a1), AI_CaptainUpdate_Type7, 0x43f020);
unsigned sub_43F100(AiCaptain *a1, WORD *a2, int a3, unsigned int a4) {
    int address = 0x43f100;
    unsigned result_;
    __asm {
        xor eax, eax
        push dword ptr a4
        push dword ptr a3
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__fastcall*WpnHit)(CUnit *a1, CUnit *a2, int unknown_flag, int a4), WpnHit, 0x43f320);
DECL_FUNC(unsigned (__stdcall*sub_43F990)(int a1), sub_43F990, 0x43f990);
void AI_CaptainTownUpdate(int a1, int player_id) {
    int address = 0x43fc60;
    __asm {
        mov ecx, player_id
        mov eax, a1
        call address
    }
}
DECL_FUNC(int (__fastcall*compareGeneralTarget)(CUnit *a1, CUnit *a2), compareGeneralTarget, 0x43fcf0);
DECL_FUNC(void (__cdecl*AIScriptLoopEnd)(), AIScriptLoopEnd, 0x43fd80);
void interceptorTargets(CUnit *unit) {
    int address = 0x43fe50;
    __asm {
        mov esi, unit
        call address
    }
}
void getMaelstromTarget(CUnit *unit) {
    int address = 0x43ff00;
    __asm {
        mov eax, unit
        call address
    }
}
void getTargetSomething(CUnit *unit) {
    int address = 0x43ff90;
    __asm {
        mov eax, unit
        call address
    }
}
DECL_FUNC(void (__stdcall*AI_AttackUnit)(CUnit *a1), AI_AttackUnit, 0x43ffd0);
unsigned SetAttackPriorityUnit(int a1, int a2) {
    int address = 0x440160;
    unsigned result_;
    __asm {
        xor eax, eax
        mov esi, a2
        mov ecx, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(BOOL (__fastcall*isDisabledAndOwnedProc)(CUnit *a1, int unit_type), isDisabledAndOwnedProc, 0x440190);
int RndGetAtkPriorityUnit(int a1) {
    int address = 0x4401b0;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(BOOL (__fastcall*AIUnitCanEnterBunkerProc)(CUnit *a1, CUnit *a2), AIUnitCanEnterBunkerProc, 0x440220);
DECL_FUNC(int (__stdcall*sub_440240)(int a1, int a2, int a3), sub_440240, 0x440240);
CUnit * IterateAllScannerSweeps(int (__fastcall *a1)(CUnit *a1, int a2), int a2) {
    int address = 0x440270;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov edi, a2
        mov ebx, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__fastcall*compareUnitToUnitTypeProc)(CUnit *a1, void *a2), compareUnitToUnitTypeProc, 0x4402a0);
DECL_FUNC(BOOL (__fastcall*GetBestSCVForRepairProc)(CUnit *a1, CUnit *a2), GetBestSCVForRepairProc, 0x4402b0);
DECL_FUNC(BOOL (__fastcall*buildingCanConnectToAddonProc)(CUnit *a1, CUnit *a2), buildingCanConnectToAddonProc, 0x4402f0);
DECL_FUNC(int (__thiscall*sub_440410)(CUnit *this_), sub_440410, 0x440410);
DECL_FUNC(CUnit * (__stdcall*GetDisabledUnitInRange)(int unit_type, int a2), GetDisabledUnitInRange, 0x440420);
void sub_440480(CUnit *a1) {
    int address = 0x440480;
    __asm {
        mov esi, a1
        call address
    }
}
CUnit * connectAddonCheck(CUnit *a1) {
    int address = 0x4404a0;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
void GetStaticMinRange(CUnit *a1) {
    int address = 0x440520;
    __asm {
        mov esi, a1
        call address
    }
}
DECL_FUNC(CUnit * (__stdcall*GetAttackTargetFromPriority)(CUnit *a1, int a2), GetAttackTargetFromPriority, 0x4405e0);
CUnit * sub_440720(Box16 *a1, unsigned __int16 a2) {
    int address = 0x440720;
    CUnit * result_;
    __asm {
        xor eax, eax
        xor ecx, ecx
        mov cx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
CUnit * sub_440740(CUnit *a1) {
    int address = 0x440740;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
CUnit * AI_AssignBestUnitRepairSCV(CUnit *unit) {
    int address = 0x440770;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov eax, unit
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(bool (__fastcall*AI_RecallRequirementsProc)(CUnit *a1, CUnit *a2), AI_RecallRequirementsProc, 0x440790);
DECL_FUNC(int (__fastcall*AI_RestorationRequirementsProc)(CUnit *a1, CUnit *a2), AI_RestorationRequirementsProc, 0x4407e0);
DECL_FUNC(int (__fastcall*AI_RestorationRequirementsProc2)(CUnit *a1, CUnit *a2), AI_RestorationRequirementsProc2, 0x440870);
DECL_FUNC(int (__fastcall*IsUnitVisibleIteratorProc)(CUnit *a1, int a2), IsUnitVisibleIteratorProc, 0x4408a0);
DECL_FUNC(int (__fastcall*powerupCanBePickedUpProc)(CUnit *a1, CUnit *a2), powerupCanBePickedUpProc, 0x440930);
DECL_FUNC(BOOL (__fastcall*isUnitTypeOwnerAllied)(CUnit *unit, UnitType unit_type), isUnitTypeOwnerAllied, 0x440980);
DECL_FUNC(CUnit * (__fastcall*sub_4409D0)(int a1, int a2), sub_4409D0, 0x4409d0);
DECL_FUNC(int (__fastcall*AI_targetEnemyProc)(CUnit *a1, CUnit *a2), AI_targetEnemyProc, 0x440a20);
DECL_FUNC(int (__fastcall*unitShieldsClumpInAreaAccumulatorProc)(CUnit *a1, CUnit *a2), unitShieldsClumpInAreaAccumulatorProc, 0x440a60);
DECL_FUNC(int (__fastcall*unitEnergyClumpInAreaAccumulatorProc)(CUnit *a1, CUnit *a2), unitEnergyClumpInAreaAccumulatorProc, 0x440ac0);
DECL_FUNC(int (__fastcall*getEnemyClumpValueProc)(CUnit *a1, CUnit *a2), getEnemyClumpValueProc, 0x440b20);
CUnit * IsUnitInUnsafeRegion(CUnit *a1) {
    int address = 0x440bb0;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
CUnit * AI_AssignBestRestorationTarget2(int a1, CUnit *a2) {
    int address = 0x440c10;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
CUnit * AI_AssignBestRestorationTarget(CUnit *a1) {
    int address = 0x440c30;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(_DWORD (__stdcall*isCurrentOrderTargetUnitAllied)(_DWORD a1), isCurrentOrderTargetUnitAllied, 0x440c90);
DECL_FUNC(int (__fastcall*AIEnemyOrganicUnitHPAccumulatorProc)(CUnit *a1, CUnit *a2), AIEnemyOrganicUnitHPAccumulatorProc, 0x440cf0);
DECL_FUNC(int (__fastcall*AIAllyUnitHPAccumulatorProc)(CUnit *a1, CUnit *a2), AIAllyUnitHPAccumulatorProc, 0x440d60);
DECL_FUNC(int (__fastcall*AIEnemyUnitHPAccumulatorProc)(CUnit *a1, CUnit *a2), AIEnemyUnitHPAccumulatorProc, 0x440dc0);
signed AI_TargetUnitIsWorthHitting(CUnit *a1, CUnit *a2) {
    int address = 0x440e30;
    signed result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__fastcall*SpiderMine_EnemyProc)(CUnit *a1, CUnit *a2), SpiderMine_EnemyProc, 0x440ec0);
DECL_FUNC(BOOL (__thiscall*sub_440F10)(CUnit *a1), sub_440F10, 0x440f10);
DECL_FUNC(BOOL (__fastcall*sub_440F50)(CUnit *a1, __int16 a2), sub_440F50, 0x440f50);
DECL_FUNC(int (__thiscall*sub_440F80)(CUnit *this_), sub_440F80, 0x440f80);
DECL_FUNC(int (__fastcall*returnCargoToBestDepotProc)(CUnit *a1, CUnit *a2), returnCargoToBestDepotProc, 0x440fa0);
DECL_FUNC(BOOL (__fastcall*FindNearestEnemyAndClumpProc)(CUnit *a1, CUnit *a2), FindNearestEnemyAndClumpProc, 0x440ff0);
CUnit * checkArbiterCloakingRange(CUnit *a1, unsigned __int16 a2) {
    int address = 0x4410c0;
    CUnit * result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int RevealUnits(CUnit *a1) {
    int address = 0x441130;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__fastcall*Medic_HealTargetProc)(CUnit *a1, CUnit *a2), Medic_HealTargetProc, 0x441240);
CUnit * SpiderMine_AcquireTarget(CUnit *unit) {
    int address = 0x441270;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov esi, unit
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__fastcall*AIsiegeTankCheckUnitCanBeAttackedProc)(CUnit *a1, CUnit *a2), AIsiegeTankCheckUnitCanBeAttackedProc, 0x4412a0);
CUnit * FindBestReturnCargoTarget(CUnit *a1) {
    int address = 0x441310;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
CUnit * AI_AcquireNearestEnemyTarget(CUnit *a1) {
    int address = 0x441370;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__fastcall*AI_EMPShieldRequirementsProc)(CUnit *a1, CUnit *a2), AI_EMPShieldRequirementsProc, 0x4413d0);
DECL_FUNC(BOOL (__fastcall*AI_EMPEnergyRequirementsProc)(CUnit *a1, CUnit *a2), AI_EMPEnergyRequirementsProc, 0x441450);
DECL_FUNC(BOOL (__fastcall*AI_IrradiateRequirementsProc)(CUnit *a1, CUnit *a2), AI_IrradiateRequirementsProc, 0x4414e0);
DECL_FUNC(int (__fastcall*AI_LockdownRequirementsProc)(CUnit *a1, CUnit *a2), AI_LockdownRequirementsProc, 0x441560);
DECL_FUNC(BOOL (__fastcall*AI_NukeRequirementsProc)(CUnit *a1, CUnit *a2), AI_NukeRequirementsProc, 0x441600);
DECL_FUNC(BOOL (__fastcall*AI_EnsnareRequirementsProc)(CUnit *a1, CUnit *a2), AI_EnsnareRequirementsProc, 0x4416c0);
DECL_FUNC(BOOL (__fastcall*AI_PlagueRequirementsProc)(CUnit *a1, CUnit *a2), AI_PlagueRequirementsProc, 0x4417a0);
DECL_FUNC(int (__fastcall*canHitUnit)(CUnit *a1, CUnit *a2), canHitUnit, 0x441870);
DECL_FUNC(BOOL (__fastcall*AI_PsiStormRequirementsProc)(CUnit *a1, CUnit *a2), AI_PsiStormRequirementsProc, 0x441950);
DECL_FUNC(BOOL (__fastcall*AI_StasisRequirementsProc)(CUnit *a1, CUnit *a2), AI_StasisRequirementsProc, 0x441a50);
DECL_FUNC(BOOL (__fastcall*AI_OpticalFlareRequirementsProc)(CUnit *a1, CUnit *a2), AI_OpticalFlareRequirementsProc, 0x441b50);
DECL_FUNC(BOOL (__fastcall*AI_ParasiteRequirementsProc)(CUnit *a1, CUnit *a2), AI_ParasiteRequirementsProc, 0x441bb0);
DECL_FUNC(int (__fastcall*AI_MindControlRequirementsProc)(CUnit *a1, CUnit *a2), AI_MindControlRequirementsProc, 0x441c50);
DECL_FUNC(BOOL (__fastcall*AI_FeedbackRequirementsProc)(CUnit *a1, CUnit *a2), AI_FeedbackRequirementsProc, 0x441d40);
DECL_FUNC(BOOL (__fastcall*AI_MaelstromRequirementsProc)(CUnit *a1, CUnit *a2), AI_MaelstromRequirementsProc, 0x441da0);
DECL_FUNC(signed (__fastcall*AI_DisruptionWebRequirementsProc)(CUnit *a1, CUnit *a2), AI_DisruptionWebRequirementsProc, 0x441f20);
DECL_FUNC(BOOL (__fastcall*AI_BroodlingRequirementsProc)(CUnit *a1, CUnit *a2), AI_BroodlingRequirementsProc, 0x442050);
DECL_FUNC(int (__fastcall*AI_YamatoRequirementsProc)(CUnit *a1, CUnit *a2), AI_YamatoRequirementsProc, 0x4420e0);
int unitGetAttackPriorityFor(CUnit *a1, CUnit *a2) {
    int address = 0x442160;
    int result_;
    __asm {
        xor eax, eax
        mov edi, a2
        mov ebx, a1
        call address
        mov result_, eax
    }
    return result_;
}
int sub_442210(CUnit *a1, CUnit *a2) {
    int address = 0x442210;
    int result_;
    __asm {
        xor eax, eax
        mov esi, a2
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
CUnit * AI_FindBestEnemyClump(CUnit *a1, int a2, int a3) {
    int address = 0x442260;
    CUnit * result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(char (__stdcall*MedicHeal_TargetAcquire)(CUnit *a1), MedicHeal_TargetAcquire, 0x4422a0);
DECL_FUNC(BOOL (__fastcall*AI_SiegedTankCanAttackUnitNear)(int a1, CUnit *a2), AI_SiegedTankCanAttackUnitNear, 0x442460);
DECL_FUNC(BOOL (__fastcall*AI_SCVBestRepairProc)(CUnit *a1, CUnit *a2), AI_SCVBestRepairProc, 0x4424c0);
CUnit * AI_AssignBestEMPTarget(CUnit *a1, int a2) {
    int address = 0x442530;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov ebx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__fastcall*AI_DefensiveMatrixRequirementsProc)(CUnit *a1, CUnit *a2), AI_DefensiveMatrixRequirementsProc, 0x4425a0);
CUnit * AI_AssignBestIrradiateTarget(int a1, CUnit *a2) {
    int address = 0x442660;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
CUnit * AI_AssignBestLockdownTarget(int a1, CUnit *a2) {
    int address = 0x4426c0;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
CUnit * AI_AssignBestNukeTarget(CUnit *a1) {
    int address = 0x442740;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
CUnit * AI_AssignBestEnsnareTarget(int a1, CUnit *a2) {
    int address = 0x442760;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
CUnit * AI_AssignBestPlagueTarget(int a1, CUnit *a2) {
    int address = 0x4427e0;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
CUnit * AI_AssignBestDarkSwarmTarget(int a1, CUnit *a2) {
    int address = 0x442840;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(BOOL (__fastcall*AI_HallucinationRequirementsProc)(CUnit *a1, CUnit *a2), AI_HallucinationRequirementsProc, 0x4428d0);
CUnit * AI_AssignBestPsiStormTarget(int a1, CUnit *a2) {
    int address = 0x442930;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
CUnit * AI_AssignBestStasisTarget(int a1, CUnit *a2) {
    int address = 0x4429b0;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
CUnit * AI_AssignBestOpticalFlareTarget(int a1, CUnit *a2) {
    int address = 0x442a30;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
CUnit * AI_AssignBestParasiteTarget(int a1, CUnit *a2) {
    int address = 0x442a90;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
CUnit * AI_AssignBestBroodlingTarget(int a1, CUnit *a2) {
    int address = 0x442af0;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
CUnit * AI_AssignBestMindControlTarget(CUnit *a1) {
    int address = 0x442b50;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
CUnit * AI_AssignBestFeedbackTarget(int a1, CUnit *a2) {
    int address = 0x442bb0;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
CUnit * AI_AssignBestMaelstromTarget(int a1, CUnit *a2) {
    int address = 0x442c30;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
CUnit * AI_AssignBestDisruptionWebTarget(int a1, CUnit *a2) {
    int address = 0x442cb0;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
CUnit * AI_AssignBestYamatoTarget(int a1, CUnit *a2) {
    int address = 0x442d30;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__fastcall*getStandardAttackTargetProc)(CUnit *a1, CUnit *a2), getStandardAttackTargetProc, 0x442da0);
DECL_FUNC(BOOL (__fastcall*findClosestMineralPatchproc)(CUnit *a1, CUnit *a2), findClosestMineralPatchproc, 0x442e80);
DECL_FUNC(CUnit * (__thiscall*getNextNearestResource)(CUnit *this_, int a2), getNextNearestResource, 0x442f70);
int getRandomAttackTarget(CUnit *unit) {
    int address = 0x442fc0;
    int result_;
    __asm {
        xor eax, eax
        mov esi, unit
        call address
        mov result_, eax
    }
    return result_;
}
CUnit * ChooseAttackTarget(CUnit *a1) {
    int address = 0x443080;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
CUnit * AI_SCV_FindBestRepairUnit(CUnit *a1) {
    int address = 0x443160;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
CUnit * AI_AssignBestDefensiveMatrixTarget(int a1, CUnit *a2) {
    int address = 0x4431c0;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
CUnit * AI_AssignBestHallucinationProc(int a1, CUnit *a2) {
    int address = 0x443220;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(BOOL (__fastcall*findClosestMineralPatchprocEx)(CUnit *a1, CUnit *a2), findClosestMineralPatchprocEx, 0x443280);
CUnit * getNextNearestMineralsEx(int a1, int a2, int a3) {
    int address = 0x4432d0;
    CUnit * result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int j_getRandomAttackTarget(CUnit *a1, CUnit *a2) {
    int address = 0x443340;
    int result_;
    __asm {
        xor eax, eax
        mov esi, a2
        mov ecx, a1
        call address
        mov result_, eax
    }
    return result_;
}
void CheckUnitVisibility(CUnit *a1) {
    int address = 0x443390;
    __asm {
        mov eax, a1
        call address
    }
}
DECL_FUNC(int (*sub_443410)(), sub_443410, 0x443410);
DECL_FUNC(int (*sub_443440)(), sub_443440, 0x443440);
DECL_FUNC(int (__fastcall*sub_443470)(int a1, int a2), sub_443470, 0x443470);
DECL_FUNC(int (__fastcall*sub_4434A0)(int a1, int a2), sub_4434A0, 0x4434a0);
baseLocation * sub_4434E0(unsigned int a1) {
    int address = 0x4434e0;
    baseLocation * result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_443500)(), sub_443500, 0x443500);
DECL_FUNC(int (*sub_443520)(), sub_443520, 0x443520);
DECL_FUNC(int (*sub_443530)(), sub_443530, 0x443530);
DECL_FUNC(int (*sub_443540)(), sub_443540, 0x443540);
DECL_FUNC(int (*sub_443550)(), sub_443550, 0x443550);
DECL_FUNC(int (*sub_443560)(), sub_443560, 0x443560);
DECL_FUNC(int (*sub_443570)(), sub_443570, 0x443570);
DECL_FUNC(int (__thiscall*getNextEmptyBaseLocation)(unsigned int *this_), getNextEmptyBaseLocation, 0x443590);
DECL_FUNC(int (*sub_4435D0)(), sub_4435D0, 0x4435d0);
DECL_FUNC(int (*sub_4435E0)(), sub_4435E0, 0x4435e0);
DECL_FUNC(int (*nullsub_21)(), nullsub_21, 0x443600);
DECL_FUNC(_DWORD (__stdcall*trimPlacement)(Position a1), trimPlacement, 0x443610);
DECL_FUNC(unsigned (__stdcall*excludePlacementSpotsDifferentHeight)(const void *a1, Position y), excludePlacementSpotsDifferentHeight, 0x4436c0);
signed reserveOnPlacemap(int a1, int a2, unsigned int a3, unsigned int a4, int a5, unsigned __int16 a6, int a7, Position a8) {
    int address = 0x443790;
    signed result_;
    __asm {
        xor eax, eax
        push dword ptr a8
        push dword ptr a7
        push dword ptr a6
        push dword ptr a5
        push dword ptr a4
        push dword ptr a3
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(_DWORD (__stdcall*excludeNonAIOwnedSpots)(_DWORD a1, _DWORD a2), excludeNonAIOwnedSpots, 0x443870);
DECL_FUNC(int (__stdcall*excludePlacementSpotsOutsideRegion)(int a1, Position position), excludePlacementSpotsOutsideRegion, 0x443900);
DECL_FUNC(int (__thiscall*AI_GetNumWorkersForMinerals)(_DWORD a1), AI_GetNumWorkersForMinerals, 0x4439b0);
DECL_FUNC(int (__fastcall*AI_AlliesWatchInit)(_DWORD a1, _DWORD a2), AI_AlliesWatchInit, 0x443a00);
unsigned getClosestBaseFromStartLocation(int a1, int a2, int y) {
    int address = 0x443a20;
    unsigned result_;
    __asm {
        xor eax, eax
        push dword ptr y
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(unsigned (__stdcall*reserveTurretPlacementPosition)(const void *a1, int a2, Position a3, __int16 a4, unsigned int a5), reserveTurretPlacementPosition, 0x443ac0);
DECL_FUNC(unsigned (__stdcall*excludeAddonBuildLocations)(unsigned __int16 a1, const void *a2, int a3, Position a4), excludeAddonBuildLocations, 0x443cc0);
DECL_FUNC(unsigned (__stdcall*reserveBuildingOnPlacemap)(unsigned __int16 a1, int a2, Position a3), reserveBuildingOnPlacemap, 0x443e30);
signed reserveStaticBuildingOnPlacemap(CUnit *a1, int a2, int a3, Position a4, int a5) {
    int address = 0x443f40;
    signed result_;
    __asm {
        xor eax, eax
        push dword ptr a5
        push dword ptr a4
        push dword ptr a3
        mov edx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed isRegionTraversable(int a1, int a2, int a3) {
    int address = 0x443fb0;
    signed result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        mov edx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__stdcall*BWFXN_getTileDistance)(int x, int y, int x2, int y2), BWFXN_getTileDistance, 0x444100);
DECL_FUNC(signed (__stdcall*getBunkerPlacementRegion)(int a1, int a2), getBunkerPlacementRegion, 0x4442e0);
int AI_GetNumDesiredWorkersForBase(unsigned int a1, int a2) {
    int address = 0x444430;
    int result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(unsigned (__stdcall*sub_444460)(int a1, signed int *a2, signed int *a3, signed int *a4), sub_444460, 0x444460);
DECL_FUNC(CUnit * (__fastcall*sub_4445E0)(int a1, int a2), sub_4445E0, 0x4445e0);
DECL_FUNC(__int16 (__stdcall*GetSecondHatcheryBuildLocation)(int a1, int a2, int a3), GetSecondHatcheryBuildLocation, 0x444630);
CUnit * sub_4447D0(int a1, CUnit *a2, int a3, int a4) {
    int address = 0x4447d0;
    CUnit * result_;
    __asm {
        xor eax, eax
        push dword ptr a4
        push dword ptr a3
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__stdcall*sub_444850)(int a1, int a2, int a3, int a4, int a5, int a6), sub_444850, 0x444850);
DECL_FUNC(_DWORD (__stdcall*reservePylonPlacementPosition)(_DWORD a1, _DWORD a2, _DWORD a3), reservePylonPlacementPosition, 0x4448d0);
DECL_FUNC(unsigned (__thiscall*reservePlayerUnitsOnPlacement)(void *this_, const void *a2, int a3, Position a4), reservePlayerUnitsOnPlacement, 0x4449a0);
DECL_FUNC(void (__fastcall*reserveStructureSpacing)(int a1, int a2, const void *a3, int a4, Position a5), reserveStructureSpacing, 0x444ce0);
DECL_FUNC(int (__thiscall*excludePlacementSpotsTooFar)(char *this_, int a2, unsigned int a3), excludePlacementSpotsTooFar, 0x444e20);
DECL_FUNC(CUnit * (__stdcall*DoAreaFixupsForEnemy)(int a1, unsigned __int16 a2, unsigned int a3), DoAreaFixupsForEnemy, 0x444eb0);
unsigned compareBases(int a1, int a2, int a3, int a4, int a5) {
    int address = 0x444fd0;
    unsigned result_;
    __asm {
        xor eax, eax
        push dword ptr a5
        push dword ptr a4
        push dword ptr a3
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int sub_4450E0(int a1, int a2, int a3, int a4, int a5) {
    int address = 0x4450e0;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a5
        push dword ptr a4
        push dword ptr a3
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*WriteAIBaseData)(void), WriteAIBaseData, 0x4452d0);
BOOL ReadAIBaseData(FILE *a1) {
    int address = 0x4452f0;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__fastcall*ReassignAllCaptainsInRegions)(unsigned int a1, int a2, unsigned int a3, int a4, unsigned int a5), ReassignAllCaptainsInRegions, 0x445310);
int getNextBaseLocationID(int a1, int a2, int a3) {
    int address = 0x4453e0;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(char (*RecountBaseLocationStats)(), RecountBaseLocationStats, 0x445610);
BOOL sub_445820(int y, CUnit *a2, int x, int a4, int a5) {
    int address = 0x445820;
    BOOL result_;
    __asm {
        xor eax, eax
        push dword ptr a5
        push dword ptr a4
        push dword ptr x
        mov esi, a2
        mov edi, y
        call address
        mov result_, eax
    }
    return result_;
}
signed sub_445930(CUnit *a1) {
    int address = 0x445930;
    signed result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
void sub_445AA0(signed int a1, signed int a2, unsigned int a3, unsigned int a4) {
    int address = 0x445aa0;
    __asm {
        push dword ptr a4
        mov ebx, a3
        mov ecx, a2
        mov edx, a1
        call address
    }
}
DECL_FUNC(int (__stdcall*sub_445B00)(int a1, int a2, int a3), sub_445B00, 0x445b00);
DECL_FUNC(signed (__stdcall*sub_445BA0)(int a1, int a2, int a3), sub_445BA0, 0x445ba0);
int getBuildPlacementInfo(unsigned int a1, int a2, int a3, int a4, Position a5) {
    int address = 0x445d60;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a5
        push dword ptr a4
        push dword ptr a3
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__stdcall*sub_445E80)(int a1, int a2), sub_445E80, 0x445e80);
unsigned AIReservePlacementData(void *unit_type, char *a2, int a3, Position a4, unsigned int a5) {
    int address = 0x4461b0;
    unsigned result_;
    __asm {
        xor eax, eax
        push dword ptr a5
        push dword ptr a4
        push dword ptr a3
        mov esi, a2
        mov ebx, unit_type
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (*sub_446350)(), sub_446350, 0x446350);
DECL_FUNC(signed (__thiscall*AIManageBuildingPlacement)(CUnit *this_, signed int a2, Position a3, int a4, unsigned int a5), AIManageBuildingPlacement, 0x4465c0);
DECL_FUNC(int (__thiscall*AIBuildAtLocation)(signed int a1, Position a2, int a3), AIBuildAtLocation, 0x446a40);
DECL_FUNC(_DWORD (__stdcall*_AIBuildAtLocation)(_DWORD a1, _DWORD a2), _AIBuildAtLocation, 0x446aa0);
DECL_FUNC(int (*sub_446AE0)(), sub_446AE0, 0x446ae0);
DECL_FUNC(int (__thiscall*AI_SetGenCmd)(_DWORD a1), AI_SetGenCmd, 0x446b10);
DECL_FUNC(int * (__fastcall*AI_GiveMoney)(int a1), AI_GiveMoney, 0x446b40);
DECL_FUNC(int (__stdcall*sub_446B80)(char a1), sub_446B80, 0x446b80);
DECL_FUNC(int (*AI_SetTargetExpansion_Off_SubAttacks)(void), AI_SetTargetExpansion_Off_SubAttacks, 0x446ba0);
DECL_FUNC(int (*sub_446BC0)(), sub_446BC0, 0x446bc0);
DECL_FUNC(int (*sub_446BE0)(), sub_446BE0, 0x446be0);
DECL_FUNC(int (__stdcall*sub_446C10)(char a1), sub_446C10, 0x446c10);
DECL_FUNC(int (*sub_446C30)(), sub_446C30, 0x446c30);
DECL_FUNC(int (*sub_446C50)(), sub_446C50, 0x446c50);
DECL_FUNC(int (*sub_446C70)(), sub_446C70, 0x446c70);
DECL_FUNC(int (*sub_446C90)(), sub_446C90, 0x446c90);
DECL_FUNC(int (*sub_446CB0)(), sub_446CB0, 0x446cb0);
DECL_FUNC(int (*sub_446CD0)(), sub_446CD0, 0x446cd0);
DECL_FUNC(int (*sub_446CF0)(), sub_446CF0, 0x446cf0);
DECL_FUNC(int (__stdcall*sub_446D00)(__int16 a1), sub_446D00, 0x446d00);
DECL_FUNC(int (*sub_446D20)(), sub_446D20, 0x446d20);
DECL_FUNC(int (__thiscall*AI_Creep)(_DWORD a1), AI_Creep, 0x446d40);
DECL_FUNC(int (*sub_446D60)(), sub_446D60, 0x446d60);
DECL_FUNC(int (*sub_446D70)(), sub_446D70, 0x446d70);
DECL_FUNC(int (*sub_446DB0)(), sub_446DB0, 0x446db0);
DECL_FUNC(int (*sub_446DE0)(), sub_446DE0, 0x446de0);
DECL_FUNC(int (*sub_446DF0)(), sub_446DF0, 0x446df0);
DECL_FUNC(int (*sub_446E10)(), sub_446E10, 0x446e10);
int sub_446E30(int a1) {
    int address = 0x446e30;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
bool IsNukeTimerReady(int player_id) {
    int address = 0x446e50;
    bool result_;
    __asm {
        xor eax, eax
        mov eax, player_id
        call address
        mov result_, al
    }
    return result_;
}
int sub_446E80(int a1) {
    int address = 0x446e80;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__stdcall*sub_446EA0)(char a1), sub_446EA0, 0x446ea0);
DECL_FUNC(int (*sub_446EC0)(), sub_446EC0, 0x446ec0);
DECL_FUNC(int (__stdcall*sub_446ED0)(__int16 a1), sub_446ED0, 0x446ed0);
DECL_FUNC(int (*sub_446EF0)(), sub_446EF0, 0x446ef0);
DECL_FUNC(int (*sub_446F10)(), sub_446F10, 0x446f10);
DECL_FUNC(int (*sub_446F30)(), sub_446F30, 0x446f30);
DECL_FUNC(int (*sub_446F50)(), sub_446F50, 0x446f50);
DECL_FUNC(int (*sub_446F70)(), sub_446F70, 0x446f70);
DECL_FUNC(int (*sub_446F90)(), sub_446F90, 0x446f90);
DECL_FUNC(int (*sub_446FA0)(), sub_446FA0, 0x446fa0);
DECL_FUNC(int (*sub_446FC0)(), sub_446FC0, 0x446fc0);
DECL_FUNC(int (*sub_446FE0)(), sub_446FE0, 0x446fe0);
DECL_FUNC(int (*sub_447000)(), sub_447000, 0x447000);
DECL_FUNC(int (__stdcall*sub_447010)(char a1), sub_447010, 0x447010);
DECL_FUNC(int (*sub_447030)(), sub_447030, 0x447030);
u16 * AIClearUnitTypeFromAttackGroup(int a1, int a2) {
    int address = 0x447040;
    u16 * result_;
    __asm {
        xor eax, eax
        mov edx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(u32 (__fastcall*AI_AttackTimerDecrement)(int a1), AI_AttackTimerDecrement, 0x447090);
BOOL sub_4470D0(int a1) {
    int address = 0x4470d0;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int sub_447100(int a1) {
    int address = 0x447100;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_447120)(), sub_447120, 0x447120);
DECL_FUNC(int (*sub_447130)(), sub_447130, 0x447130);
DECL_FUNC(int (*sub_447140)(), sub_447140, 0x447140);
DECL_FUNC(int (*sub_447150)(), sub_447150, 0x447150);
DECL_FUNC(int (*sub_447170)(), sub_447170, 0x447170);
DECL_FUNC(int (*sub_447180)(), sub_447180, 0x447180);
int sub_4471A0(int result, int a2) {
    int address = 0x4471a0;
    int result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
int sub_4471E0(int result, __int16 a2, int a3) {
    int address = 0x4471e0;
    int result_;
    __asm {
        xor eax, eax
        xor edx, edx
        mov ecx, a3
        mov dx, a2
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_447220)(), sub_447220, 0x447220);
unsigned AI_AttackAdd(unsigned int result, unsigned int a2, unsigned int a3) {
    int address = 0x447230;
    unsigned result_;
    __asm {
        xor eax, eax
        mov edi, a3
        mov ecx, a2
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_4472A0)(), sub_4472A0, 0x4472a0);
DECL_FUNC(int (*sub_4472C0)(), sub_4472C0, 0x4472c0);
DECL_FUNC(int (*sub_4472F0)(), sub_4472F0, 0x4472f0);
DECL_FUNC(int (*sub_447300)(), sub_447300, 0x447300);
DECL_FUNC(int (*sub_447310)(), sub_447310, 0x447310);
DECL_FUNC(int (*sub_447320)(), sub_447320, 0x447320);
DECL_FUNC(int (*sub_447330)(), sub_447330, 0x447330);
DECL_FUNC(int (*sub_447340)(), sub_447340, 0x447340);
DECL_FUNC(int (*sub_447350)(), sub_447350, 0x447350);
DECL_FUNC(int (*sub_447360)(), sub_447360, 0x447360);
BOOL AI_HasNoDefenseBuild(int a1) {
    int address = 0x447370;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*AI_DefenseClear_aa)(void), AI_DefenseClear_aa, 0x4473b0);
DECL_FUNC(int (*AI_DefenseClear_ga)(void), AI_DefenseClear_ga, 0x447400);
DECL_FUNC(int (*AI_DefenseClear_ag)(void), AI_DefenseClear_ag, 0x447450);
DECL_FUNC(int (*AI_DefenseClear_gg)(void), AI_DefenseClear_gg, 0x4474a0);
void AI_DefenseSet(_WORD *a1, unsigned int a2, UnitType a3) {
    int address = 0x4474f0;
    __asm {
        xor esi, esi
        mov si, a3
        mov ecx, a2
        mov edx, a1
        call address
    }
}
DECL_FUNC(BOOL (__fastcall*sub_447530)(int a1), sub_447530, 0x447530);
DECL_FUNC(int (*sub_447570)(), sub_447570, 0x447570);
DECL_FUNC(int (*sub_447580)(), sub_447580, 0x447580);
int getAIRequestedBuildType(int a1) {
    int address = 0x447590;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
s32 sub_4475B0(int a1, int a2, s32 a3) {
    int address = 0x4475b0;
    s32 result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        mov esi, a2
        mov ebx, a1
        call address
        mov result_, eax
    }
    return result_;
}
int sub_447650(int a1) {
    int address = 0x447650;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_447670)(), sub_447670, 0x447670);
DECL_FUNC(void (__cdecl*initAIControllerData)(), initAIControllerData, 0x447680);
s32 * UpdateTownPriorities(int a1) {
    int address = 0x4476d0;
    s32 * result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int sub_447780(int a1, int a2, int a3) {
    int address = 0x447780;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*nullsub_22)(), nullsub_22, 0x4477b0);
void sub_4477C0(CUnit *a1) {
    int address = 0x4477c0;
    __asm {
        mov edx, a1
        call address
    }
}
BOOL sub_447810(CUnit *a1) {
    int address = 0x447810;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
bool isAIAllowedToBuild(int player_id, UnitType unit_type) {
    int address = 0x447830;
    bool result_;
    __asm {
        xor eax, eax
        xor ecx, ecx
        mov cx, unit_type
        mov eax, player_id
        call address
        mov result_, al
    }
    return result_;
}
DECL_FUNC(int (*sub_447880)(), sub_447880, 0x447880);
DECL_FUNC(int (*sub_4478A0)(), sub_4478A0, 0x4478a0);
DECL_FUNC(int (*sub_4478C0)(), sub_4478C0, 0x4478c0);
DECL_FUNC(int (*sub_4478E0)(), sub_4478E0, 0x4478e0);
DECL_FUNC(int (*sub_447900)(), sub_447900, 0x447900);
DECL_FUNC(int (*sub_447920)(), sub_447920, 0x447920);
DECL_FUNC(int (*sub_447940)(), sub_447940, 0x447940);
DECL_FUNC(int (*sub_447960)(), sub_447960, 0x447960);
char AI_MergeMorph(UnitType unit_type, int a2, char a3, char a4, int a5) {
    int address = 0x447980;
    char result_;
    __asm {
        xor eax, eax
        xor ecx, ecx
        push dword ptr a5
        push dword ptr a4
        mov cl, a3
        mov edx, a2
        mov ax, unit_type
        call address
        mov result_, al
    }
    return result_;
}
DECL_FUNC(int (*nullsub_23)(), nullsub_23, 0x447a60);
BOOL sub_447A70(CUnit *a1) {
    int address = 0x447a70;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(CUnit ** (__thiscall*sub_447AF0)(CUnit *this_), sub_447AF0, 0x447af0);
char AIGetMultiCost(int a1, int a2, int a3, int a4, char a5, int arg_4) {
    int address = 0x447b30;
    char result_;
    __asm {
        xor eax, eax
        push dword ptr arg_4
        push dword ptr a5
        mov esi, a4
        mov edi, a3
        mov edx, a2
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
void AI_HarassFactor(int a1, int a2) {
    int address = 0x447bb0;
    __asm {
        mov edx, a2
        mov eax, a1
        call address
    }
}
DECL_FUNC(void (__thiscall*AI_Reserve)(int a1, int a2), AI_Reserve, 0x447d00);
int AI_ReserveCost(int a1, int a2, int a3) {
    int address = 0x447dc0;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        mov ebx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(signed (__stdcall*ReadAIBankerData)(FILE *a1), ReadAIBankerData, 0x447e20);
DECL_FUNC(int (__stdcall*WriteAIControllerData)(FILE *a1), WriteAIControllerData, 0x447ed0);
DECL_FUNC(int (__stdcall*sub_448160)(int a1), sub_448160, 0x448160);
s32 * sub_4481A0(int a1) {
    int address = 0x4481a0;
    s32 * result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
s32 * sub_4481B0(int a1) {
    int address = 0x4481b0;
    s32 * result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
char sub_4481C0(int a1, int eax0, int a3, int a4, char a5) {
    int address = 0x4481c0;
    char result_;
    __asm {
        xor eax, eax
        push dword ptr a5
        push dword ptr a4
        push dword ptr a3
        mov eax, eax0
        mov esi, a1
        call address
        mov result_, al
    }
    return result_;
}
DECL_FUNC(int (*sub_448220)(), sub_448220, 0x448220);
signed ReadAIScriptControllerData(FILE *a1, unsigned __int16 a2) {
    int address = 0x448230;
    signed result_;
    __asm {
        xor eax, eax
        mov ax, a2
        mov ecx, a1
        call address
        mov result_, eax
    }
    return result_;
}
char sub_4483D0(int a1, int a2, char a3) {
    int address = 0x4483d0;
    char result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        mov esi, a2
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
char sub_448400(int a1, int a2, int a3, int a4) {
    int address = 0x448400;
    char result_;
    __asm {
        xor eax, eax
        push dword ptr a4
        mov esi, a3
        mov edi, a2
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
DECL_FUNC(_DWORD (__stdcall*AI_MergeMorphSwitch)(_DWORD a1), AI_MergeMorphSwitch, 0x4484a0);
DECL_FUNC(_DWORD (__stdcall*sub_4485B0)(_DWORD a1, _DWORD a2), sub_4485B0, 0x4485b0);
u32 sub_448630(int a1, int eax0) {
    int address = 0x448630;
    u32 result_;
    __asm {
        xor eax, eax
        mov eax, eax0
        mov ecx, a1
        call address
        mov result_, eax
    }
    return result_;
}
BOOL sub_4486C0(int a1, Tech a2) {
    int address = 0x4486c0;
    BOOL result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov ebx, a1
        call address
        mov result_, eax
    }
    return result_;
}
BOOL sub_448750(int a1, unsigned __int8 a2) {
    int address = 0x448750;
    BOOL result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov ebx, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(BOOL (__fastcall*hasResourcesForUnit)(UnitType a1, int a2, int a3), hasResourcesForUnit, 0x4487b0);
DECL_FUNC(unsigned (*sub_448890)(), sub_448890, 0x448890);
DECL_FUNC(char (*AI_UpdateControllerTimers)(), AI_UpdateControllerTimers, 0x448920);
BOOL sub_4489E0(HWND hDlg, void *a2) {
    int address = 0x4489e0;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a2
        mov ecx, hDlg
        call address
        mov result_, eax
    }
    return result_;
}
int sub_4489F0(const CHAR *a1, HWND hWnd) {
    int address = 0x4489f0;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr hWnd
        mov ebx, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(char * (*cleanBNImages)(), cleanBNImages, 0x448ad0);
HFONT sub_448B20(HWND a1, int a2) {
    int address = 0x448b20;
    HFONT result_;
    __asm {
        xor eax, eax
        mov esi, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed sub_448BB0(HWND a1, const CHAR *lpString) {
    int address = 0x448bb0;
    signed result_;
    __asm {
        xor eax, eax
        push dword ptr lpString
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__stdcall*GhettoErrorProc)(HWND a1, unsigned int Msg, HDC hdc, HWND hWnd), GhettoErrorProc, 0x448d60);
DECL_FUNC(char * (__stdcall*BattleErrorDialog)(HWND hWnd, LPCSTR lpText, LPCSTR lpCaption, UINT uType), BattleErrorDialog, 0x448ec0);
DECL_FUNC(void * (*sub_449030)(), sub_449030, 0x449030);
DECL_FUNC(int (*sub_449060)(), sub_449060, 0x449060);
int GetBNIconImageRect(unsigned int a1, int a2) {
    int address = 0x449070;
    int result_;
    __asm {
        xor eax, eax
        mov edi, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*LoadBNIcons)(), LoadBNIcons, 0x4490e0);
BOOL sub_449140(unsigned int a1, HWND hWnd, char *a3, int a4) {
    int address = 0x449140;
    BOOL result_;
    __asm {
        xor eax, eax
        push dword ptr a4
        push dword ptr a3
        push dword ptr hWnd
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
BOOL sub_449190(unsigned int eax0, int a2, int a3, int a4, int a5) {
    int address = 0x449190;
    BOOL result_;
    __asm {
        xor eax, eax
        push dword ptr a5
        push dword ptr a4
        push dword ptr a3
        push dword ptr a2
        mov eax, eax0
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_4491E0)(), sub_4491E0, 0x4491e0);
int BNBlitToWindow(signed int a1, int arg0, int a3, int a4) {
    int address = 0x449240;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a4
        push dword ptr a3
        push dword ptr arg0
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void * (*sub_449390)(), sub_449390, 0x449390);
DECL_FUNC(int (__stdcall*ParseSCIcon)(int a1, int arg4, int arg8), ParseSCIcon, 0x4494a0);
int DrawChannelUser_maybe(int a1, int a2, int a3, LPCSTR lpString, int a5, char a6, int a7) {
    int address = 0x449650;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a7
        push dword ptr a6
        push dword ptr a5
        push dword ptr lpString
        mov esi, a3
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(signed (__stdcall*BattleGetErrorString)(signed int a1, int a2, int a3, int a4, int a5, char *dest, size_t size_), BattleGetErrorString, 0x449810);
int GluBN_SetMapStatsInfo(const CHAR *a1, int a2, char a3, time_t a4, int a5) {
    int address = 0x4499e0;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a5
        push dword ptr a4
        push dword ptr a3
        mov edx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__stdcall*BattleUpdateIcons)(int a1, int a2, LPCSTR lpString, int a4, int a5, char a6, int a7, int a8, int a9, COLORREF color), BattleUpdateIcons, 0x449f60);
DECL_FUNC(LONG (__stdcall*GetObjectHeight)(HGDIOBJ h), GetObjectHeight, 0x44a000);
BOOL sub_44A070(const char *a1, HWND hDlg) {
    int address = 0x44a070;
    BOOL result_;
    __asm {
        xor eax, eax
        push dword ptr hDlg
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__stdcall*addItemProc)(MapDirEntry *a1, char *a2, MapDirEntryFlags a3), addItemProc, 0x44a210);
DECL_FUNC(void * (*sub_44A250)(), sub_44A250, 0x44a250);
DECL_FUNC(BOOL (*sub_44A2B0)(), sub_44A2B0, 0x44a2b0);
signed openDlg_0(const CHAR *a1) {
    int address = 0x44a2d0;
    signed result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(char (__stdcall*sub_44A380)(HWND hWnd), sub_44A380, 0x44a380);
LRESULT sub_44A3C0(HWND a1) {
    int address = 0x44a3c0;
    LRESULT result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(char (__stdcall*sub_44A410)(HWND hWnd), sub_44A410, 0x44a410);
LRESULT sub_44A450(HWND a1) {
    int address = 0x44a450;
    LRESULT result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
char sub_44A4A0(HWND a1) {
    int address = 0x44a4a0;
    char result_;
    __asm {
        xor eax, eax
        mov edi, a1
        call address
        mov result_, al
    }
    return result_;
}
LRESULT sub_44A510(HWND a1) {
    int address = 0x44a510;
    LRESULT result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__stdcall*sub_44A560)(MapDirEntry *a1, char *a2, MapDirEntryFlags a3), sub_44A560, 0x44a560);
DECL_FUNC(BOOL (__stdcall*_ShowWindow)(int a1, HWND hWnd, int a3), _ShowWindow, 0x44a5d0);
LRESULT sub_44A5F0(HWND a1, LPARAM lParam) {
    int address = 0x44a5f0;
    LRESULT result_;
    __asm {
        xor eax, eax
        push dword ptr lParam
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
HFONT updateFont(int *a1, int a2, HWND hWnd) {
    int address = 0x44a660;
    HFONT result_;
    __asm {
        xor eax, eax
        push dword ptr hWnd
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(char * (*sub_44A730)(), sub_44A730, 0x44a730);
LONG sub_44A7C0(LONG a1, LPARAM a2) {
    int address = 0x44a7c0;
    LONG result_;
    __asm {
        xor eax, eax
        mov esi, a2
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_44A7E0)(), sub_44A7E0, 0x44a7e0);
DECL_FUNC(int (*sub_44A7F0)(), sub_44A7F0, 0x44a7f0);
DECL_FUNC(int (*sub_44A800)(), sub_44A800, 0x44a800);
DECL_FUNC(int (*sub_44A810)(), sub_44A810, 0x44a810);
DECL_FUNC(BOOL (__stdcall*sub_44A820)(HWND hWnd), sub_44A820, 0x44a820);
BOOL ApplyBNButtonGraphic(HWND a1) {
    int address = 0x44a930;
    BOOL result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__stdcall*sub_44AB40)(int a1, HWND a2, LPARAM a3), sub_44AB40, 0x44ab40);
DECL_FUNC(LRESULT (__thiscall*sub_44ABB0)(void *this_, LPARAM lParam, int a3, int a4, int a5), sub_44ABB0, 0x44abb0);
COLORREF sub_44AC00(int a1) {
    int address = 0x44ac00;
    COLORREF result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
COLORREF BnetMapBrowse_DrawItem(int a1) {
    int address = 0x44ad80;
    COLORREF result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_44AF10)(), sub_44AF10, 0x44af10);
LRESULT sub_44B030(HWND a1) {
    int address = 0x44b030;
    LRESULT result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(LPARAM (__stdcall*BNET_GetLastGameSpeed)(HWND hWnd), BNET_GetLastGameSpeed, 0x44b0d0);
BOOL BNET_SaveLastGameSpeed(HWND a1) {
    int address = 0x44b150;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
HWND InitBnetMapListBox(LPARAM listbox_handle, HWND hWnd) {
    int address = 0x44b1b0;
    HWND result_;
    __asm {
        xor eax, eax
        push dword ptr hWnd
        mov esi, listbox_handle
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(unsigned (__stdcall*sub_44B240)(int a1, int a2, GotFileValues *a3, int a4), sub_44B240, 0x44b240);
ListNode * InitBnetCreateGameScreen(HWND parent_dlg, HWND hWnd) {
    int address = 0x44b2c0;
    ListNode * result_;
    __asm {
        xor eax, eax
        push dword ptr hWnd
        mov esi, parent_dlg
        call address
        mov result_, eax
    }
    return result_;
}
BOOL InitBnetMapDialog(HWND a1) {
    int address = 0x44b4a0;
    BOOL result_;
    __asm {
        xor eax, eax
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
char sub_44B7E0(HWND a1) {
    int address = 0x44b7e0;
    char result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
LRESULT sub_44B9C0(HWND a1, int a2, char a3) {
    int address = 0x44b9c0;
    LRESULT result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        push dword ptr a2
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
void sub_44BA90(int a1) {
    int address = 0x44ba90;
    __asm {
        mov eax, a1
        call address
    }
}
void sub_44BAE0(HWND a1) {
    int address = 0x44bae0;
    __asm {
        mov esi, a1
        call address
    }
}
int sub_44BB20(HWND a1) {
    int address = 0x44bb20;
    int result_;
    __asm {
        xor eax, eax
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
HWND DLG_GlueBNETClick2(HWND a1) {
    int address = 0x44bc40;
    HWND result_;
    __asm {
        xor eax, eax
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
void sub_44C030(HWND a1, __int16 a2, char a3, char a4) {
    int address = 0x44c030;
    __asm {
        xor ecx, ecx
        push dword ptr a4
        push dword ptr a3
        mov cx, a2
        mov eax, a1
        call address
    }
}
DECL_FUNC(int (__stdcall*gluBN_CREATE_BROWSE_Proc)(HWND hDlg, UINT Msg, WPARAM wParam, LPARAM lParam), gluBN_CREATE_BROWSE_Proc, 0x44c170);
BOOL gluBN_CREATE_BROWSE_Create(HWND a1, HWND hWnd) {
    int address = 0x44c400;
    BOOL result_;
    __asm {
        xor eax, eax
        push dword ptr hWnd
        mov ebx, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed gluBN_CREATE_LIST_Proc(HWND a1, unsigned int a2, HWND hWnd, int a4) {
    int address = 0x44c620;
    signed result_;
    __asm {
        xor eax, eax
        push dword ptr a4
        push dword ptr hWnd
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(LPARAM (__stdcall*gluBN_CREATE_GAME_Proc)(HWND hDlg, UINT Msg, WPARAM wParam, LPARAM lParam), gluBN_CREATE_GAME_Proc, 0x44c960);
DECL_FUNC(signed (__stdcall*BattleMakeCreateGameDialog)(int a1, int a2, int a3, int a4, int a5, int a6), BattleMakeCreateGameDialog, 0x44cbe0);
DECL_FUNC(void * (*BNProfileImageCleanup_0)(), BNProfileImageCleanup_0, 0x44cda0);
DECL_FUNC(BOOL (*BNProfileImageCreate)(), BNProfileImageCreate, 0x44cdf0);
int sub_44CEB0(int *a1, int a2, int a3, HWND hWnd) {
    int address = 0x44ceb0;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr hWnd
        mov edi, a3
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(char * (*BNProfileImageCleanup)(), BNProfileImageCleanup, 0x44cf90);
HANDLE CreateFontHandle(int a1) {
    int address = 0x44cfe0;
    HANDLE result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int sub_44D050(int a1, int result, int ebx0, int edi0) {
    int address = 0x44d050;
    int result_;
    __asm {
        xor eax, eax
        mov edi, edi0
        mov ebx, ebx0
        mov eax, result
        mov ecx, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(_DWORD (__stdcall*sub_44D0C0)(_DWORD a1), sub_44D0C0, 0x44d0c0);
char ** sub_44D100(_DWORD *a1) {
    int address = 0x44d100;
    char ** result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(char * (*sub_44D120)(), sub_44D120, 0x44d120);
DECL_FUNC(char (__fastcall*sub_44D140)(const char *a1, LPARAM a2, HWND hDlg), sub_44D140, 0x44d140);
DECL_FUNC(int (__stdcall*SaveProfileChanges)(_DWORD a1, _DWORD a2, _DWORD a3, _DWORD a4), SaveProfileChanges, 0x44d1e0);
BOOL sub_44D450(HWND a1) {
    int address = 0x44d450;
    BOOL result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(_BYTE * (__fastcall*sub_44D540)(char *a1, _BYTE *a2, int a3), sub_44D540, 0x44d540);
DECL_FUNC(void * (*sub_44D5B0)(), sub_44D5B0, 0x44d5b0);
int gluBN_PROFILE_LinkHandler(LPCSTR lpszString, HDC a2, int a3, int a4, int a5) {
    int address = 0x44d630;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a5
        push dword ptr a4
        push dword ptr a3
        mov eax, a2
        mov ecx, lpszString
        call address
        mov result_, eax
    }
    return result_;
}
int sub_44D740(int a1) {
    int address = 0x44d740;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
LRESULT gluBN_PROFILE_Description(int a1) {
    int address = 0x44d760;
    LRESULT result_;
    __asm {
        xor eax, eax
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
HINSTANCE openWebWindow(const CHAR *a1, HWND hWnd) {
    int address = 0x44d7d0;
    HINSTANCE result_;
    __asm {
        xor eax, eax
        push dword ptr hWnd
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
int websiteLaunch(HWND a1, HWND a2) {
    int address = 0x44d8e0;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov ebx, a1
        call address
        mov result_, eax
    }
    return result_;
}
HANDLE sub_44D9F0(int a1, int a2, int a3) {
    int address = 0x44d9f0;
    HANDLE result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        mov ebx, a2
        mov ecx, a1
        call address
        mov result_, eax
    }
    return result_;
}
HANDLE sub_44DE70(int esi0, int a2, int a3) {
    int address = 0x44de70;
    HANDLE result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        push dword ptr a2
        mov esi, esi0
        call address
        mov result_, eax
    }
    return result_;
}
HWND InitProfileDialog(HWND a1) {
    int address = 0x44df20;
    HWND result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__stdcall*BattleDrawProfileInfo)(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11), BattleDrawProfileInfo, 0x44e150);
DECL_FUNC(int (__stdcall*DLG_PROFILE_Proc)(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam), DLG_PROFILE_Proc, 0x44e1d0);
DECL_FUNC(BOOL (__stdcall*BattleMakeProfileDialog)(int a1, int a2, int a3, int a4, LPARAM a5, int a6, int a7, int a8, int a9, int a10), BattleMakeProfileDialog, 0x44e390);
DECL_FUNC(int (*sub_44E400)(), sub_44E400, 0x44e400);
void sub_44E420(CheatHashMaybe *result, CheatHashMaybe *a2) {
    int address = 0x44e420;
    __asm {
        mov ecx, a2
        mov eax, result
        call address
    }
}
DECL_FUNC(int (*sub_44E4A0)(void), sub_44E4A0, 0x44e4a0);
DECL_FUNC(int (*sub_44E510)(), sub_44E510, 0x44e510);
unsigned makeHash(int a1, CheatHashRelated *a2, int a3) {
    int address = 0x44e550;
    unsigned result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        mov edx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
char * sub_44E780(CheatHashRelated *a1, _WORD *a2) {
    int address = 0x44e780;
    char * result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
CheatHashMaybe * sub_44E8D0(int *a1, int a2, int a3) {
    int address = 0x44e8d0;
    CheatHashMaybe * result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
unsigned sub_44E950(int a1, int a2, int a3) {
    int address = 0x44e950;
    unsigned result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        mov edx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_44E970)(), sub_44E970, 0x44e970);
DECL_FUNC(int (*sub_44E9B0)(), sub_44E9B0, 0x44e9b0);
DECL_FUNC(bool (__fastcall*gluPortrait_Update)(dialog *dlg, struct dlgEvent *evt), gluPortrait_Update, 0x44e9e0);
DECL_FUNC(int (*sub_44EA80)(), sub_44EA80, 0x44ea80);
DECL_FUNC(void (__cdecl*sub_44EAA0)(), sub_44EAA0, 0x44eaa0);
int gluRdy_Portrait_Destroy(dialog *a1, dialog *a2) {
    int address = 0x44eb20;
    int result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__stdcall*sub_44EB90)(dialog *a1), sub_44EB90, 0x44eb90);
DECL_FUNC(void (__stdcall*sub_44EC90)(dialog *a1), sub_44EC90, 0x44ec90);
void sub_44ED80(dialog *a1) {
    int address = 0x44ed80;
    __asm {
        mov eax, a1
        call address
    }
}
void StartUnitPortrait(dialog *dlg) {
    int address = 0x44edb0;
    __asm {
        mov eax, dlg
        call address
    }
}
void sub_44EE40(dialog *a1, __int16 a2) {
    int address = 0x44ee40;
    __asm {
        push dword ptr a2
        mov edi, a1
        call address
    }
}
DECL_FUNC(void (__fastcall*videoSpeakingPortraitLoop)(dialog *dlg, __int16 timer_id), videoSpeakingPortraitLoop, 0x44ee80);
DECL_FUNC(void (__thiscall*sub_44EED0)(dialog *this_, int a2), sub_44EED0, 0x44eed0);
void gluRdy_Portrait_InitChildren(dialog *a1) {
    int address = 0x44ef00;
    __asm {
        mov eax, a1
        call address
    }
}
DECL_FUNC(int (__fastcall*gluRdy_Portrait)(dialog *dlg, dlgEvent *evt), gluRdy_Portrait, 0x44efe0);
void LoadBriefingFrameImages(const char **highlighted_frame_paths, const char **normal_frame_paths) {
    int address = 0x44f020;
    __asm {
        push dword ptr normal_frame_paths
        mov eax, highlighted_frame_paths
        call address
    }
}
DECL_FUNC(void (*loadPortdataDAT)(), loadPortdataDAT, 0x44f0f0);
DECL_FUNC(void (*sub_44F4C0)(), sub_44F4C0, 0x44f4c0);
DECL_FUNC(int (__thiscall*getHumansOnTeam)(int team), getHumansOnTeam, 0x44f4e0);
DECL_FUNC(int (*sub_44F590)(), sub_44F590, 0x44f590);
DECL_FUNC(int (__fastcall*LeagueStats)(const char *string2, int a2), LeagueStats, 0x44f5a0);
DECL_FUNC(int (*sub_44F600)(), sub_44F600, 0x44f600);
DECL_FUNC(int (__fastcall*sub_44F640)(int a1, int a2), sub_44F640, 0x44f640);
int sub_44F680(int result, char a2) {
    int address = 0x44f680;
    int result_;
    __asm {
        xor eax, eax
        xor edx, edx
        mov dl, a2
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_44F6B0)(), sub_44F6B0, 0x44f6b0);
DECL_FUNC(int (*sub_44F6C0)(), sub_44F6C0, 0x44f6c0);
DECL_FUNC(BOOL (__stdcall*sub_44F6D0)(unsigned __int8 a1, unsigned __int8 a2), sub_44F6D0, 0x44f6d0);
Timer * resetPlayerLobbySlotInfo(dialog *a1) {
    int address = 0x44f730;
    Timer * result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_44F7B0)(), sub_44F7B0, 0x44f7b0);
int sub_44F860(int result) {
    int address = 0x44f860;
    int result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
_DWORD * slotUpdate(_DWORD *result, int a2) {
    int address = 0x44f890;
    _DWORD * result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
int sub_44F8D0(int a1, _DWORD *a2, const char *a3, int a4, _DWORD *a5) {
    int address = 0x44f8d0;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a5
        push dword ptr a4
        mov esi, a3
        mov edi, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
BOOL sub_44FA60(int a1, char a2) {
    int address = 0x44fa60;
    BOOL result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__fastcall*sub_44FAC0)(dialog *dlg, int x, int y, rect *dst), sub_44FAC0, 0x44fac0);
int sub_44FC20(int a1) {
    int address = 0x44fc20;
    int result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__stdcall*sub_44FCD0)(int a1, int a2), sub_44FCD0, 0x44fcd0);
DECL_FUNC(void (__stdcall*LockLobbySlots)(dialog *a1), LockLobbySlots, 0x44fd30);
DECL_FUNC(void (__cdecl*sub_44FEE0)(), sub_44FEE0, 0x44fee0);
void sub_44FF20(dialog *a1) {
    int address = 0x44ff20;
    __asm {
        mov eax, a1
        call address
    }
}
void sub_44FF30(dialog *a1) {
    int address = 0x44ff30;
    __asm {
        mov eax, a1
        call address
    }
}
DECL_FUNC(void (__fastcall*sub_44FF50)(int a1, int a2), sub_44FF50, 0x44ff50);
DECL_FUNC(void (*getPlayerCaps)(), getPlayerCaps, 0x450030);
DECL_FUNC(void (*sub_4500D0)(), sub_4500D0, 0x4500d0);
DECL_FUNC(int (*updateDownloadPercentages)(), updateDownloadPercentages, 0x450210);
void sub_4502F0(int a1) {
    int address = 0x4502f0;
    __asm {
        mov eax, a1
        call address
    }
}
DECL_FUNC(void (__fastcall*sub_450330)(dialog *dlg, int x, int y, rect *dst), sub_450330, 0x450330);
DECL_FUNC(void (__fastcall*sub_4503A0)(dialog *dlg, int x, int y, rect *dst), sub_4503A0, 0x4503a0);
int sub_4503D0(int result, int a2) {
    int address = 0x4503d0;
    int result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(bool (__fastcall*sub_4503F0)(dialog *dlg, dlgEvent *evt), sub_4503F0, 0x4503f0);
void sub_450420(dialog *a1) {
    int address = 0x450420;
    __asm {
        mov eax, a1
        call address
    }
}
DECL_FUNC(bool (__fastcall*sub_450470)(dialog *dlg, dlgEvent *evt), sub_450470, 0x450470);
DECL_FUNC(bool (__fastcall*sub_4504A0)(dialog *a1, dlgEvent *a2), sub_4504A0, 0x4504a0);
void sub_450560(dialog *a1, int a2) {
    int address = 0x450560;
    __asm {
        push dword ptr a2
        mov eax, a1
        call address
    }
}
void sub_450600(int a1, const char *a2, char a3) {
    int address = 0x450600;
    __asm {
        push dword ptr a3
        mov edx, a2
        mov eax, a1
        call address
    }
}
void sub_450650(__int16 a1, LobbySlot *a2, int a3) {
    int address = 0x450650;
    __asm {
        xor eax, eax
        push dword ptr a3
        mov ecx, a2
        mov ax, a1
        call address
    }
}
DECL_FUNC(int (__stdcall*createOwnerDropdown)(int a1, __int16 a2), createOwnerDropdown, 0x450740);
DECL_FUNC(int (__fastcall*sub_450A60)(dialog *dlg, dlgEvent *evt), sub_450A60, 0x450a60);
void CreateRaceDropdown(dialog *dlg, RaceId race) {
    int address = 0x450ab0;
    __asm {
        push dword ptr race
        mov eax, dlg
        call address
    }
}
void sub_450C00(dialog *a1) {
    int address = 0x450c00;
    __asm {
        mov eax, a1
        call address
    }
}
signed playerOwnerDropdownCommands(dialog *a1, unsigned __int8 a2) {
    int address = 0x450c50;
    signed result_;
    __asm {
        xor eax, eax
        xor ecx, ecx
        mov cl, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(bool (__fastcall*playerOwnerDropdownLoop)(dialog *dlg, dlgEvent *evt), playerOwnerDropdownLoop, 0x450d40);
DECL_FUNC(char (__stdcall*CreatePlayerOwnerDropdown)(dialog *a1, int a2, int a3, int a4, char a5, int a6), CreatePlayerOwnerDropdown, 0x450d90);
DECL_FUNC(int (*sub_451370)(), sub_451370, 0x451370);
void sub_4513A0(dialog *a1) {
    int address = 0x4513a0;
    __asm {
        mov eax, a1
        call address
    }
}
DECL_FUNC(void (__stdcall*playerOwnerDropdownCreate2)(dialog *a1), playerOwnerDropdownCreate2, 0x4513f0);
DECL_FUNC(void (__stdcall*dropdownUpdate)(LobbySlot *a1, int a2, int a3, char a4, int a5, int a6), dropdownUpdate, 0x451760);
void sub_451940(LobbySlot *a1, int a2, int a3, char a4) {
    int address = 0x451940;
    __asm {
        push dword ptr a4
        push dword ptr a3
        push dword ptr a2
        mov ebx, a1
        call address
    }
}
void sub_451AA0(LobbySlot *a1, int a2, int a3, int a4) {
    int address = 0x451aa0;
    __asm {
        push dword ptr a4
        push dword ptr a3
        push dword ptr a2
        mov eax, a1
        call address
    }
}
DECL_FUNC(void (__stdcall*sub_451D40)(int a1), sub_451D40, 0x451d40);
DECL_FUNC(int (__stdcall*sub_451FB0)(int a1), sub_451FB0, 0x451fb0);
DECL_FUNC(int (__stdcall*sub_452250)(dialog *lobby_dlg), sub_452250, 0x452250);
DECL_FUNC(int (*sub_452300)(), sub_452300, 0x452300);
DECL_FUNC(int (*sub_452310)(), sub_452310, 0x452310);
DECL_FUNC(int (*MakeGamePublic)(), MakeGamePublic, 0x452320);
DECL_FUNC(int (__thiscall*_swapPlayers)(_DWORD a1), _swapPlayers, 0x452350);
int sub_452370(unsigned __int8 a1, char a2) {
    int address = 0x452370;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov al, a1
        call address
        mov result_, eax
    }
    return result_;
}
int sub_4523C0(char a1) {
    int address = 0x4523c0;
    int result_;
    __asm {
        xor eax, eax
        xor ebx, ebx
        mov bl, a1
        call address
        mov result_, eax
    }
    return result_;
}
int sub_452410(int a1, char a2) {
    int address = 0x452410;
    int result_;
    __asm {
        xor eax, eax
        xor ebx, ebx
        mov bl, a2
        mov ecx, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__cdecl*_startGame)(), _startGame, 0x452460);
BOOL sub_452530(char *a1) {
    int address = 0x452530;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__thiscall*sub_452570)(signed int a1), sub_452570, 0x452570);
DECL_FUNC(void (__cdecl*sub_452590)(), sub_452590, 0x452590);
int sub_4525A0(int a1, int result) {
    int address = 0x4525a0;
    int result_;
    __asm {
        xor eax, eax
        mov eax, result
        mov ecx, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__stdcall*sub_4525C0)(char a1), sub_4525C0, 0x4525c0);
signed BanPlayerSlot(int a1) {
    int address = 0x4525e0;
    signed result_;
    __asm {
        xor eax, eax
        mov ebx, a1
        call address
        mov result_, eax
    }
    return result_;
}
int CloseSlot(int a1) {
    int address = 0x452680;
    int result_;
    __asm {
        xor eax, eax
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
int OpenSlot(int a1) {
    int address = 0x4526d0;
    int result_;
    __asm {
        xor eax, eax
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(signed (__stdcall*MakeComputerSlot)(int a1), MakeComputerSlot, 0x452720);
DECL_FUNC(BOOL (*sub_452900)(), sub_452900, 0x452900);
signed j_JoinNetworkGame(GameData *a1) {
    int address = 0x452a20;
    signed result_;
    __asm {
        xor eax, eax
        mov ebx, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed Begin_BNET(Char4 network_provider_id) {
    int address = 0x452a30;
    signed result_;
    __asm {
        xor eax, eax
        mov eax, network_provider_id
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_452A70)(), sub_452A70, 0x452a70);
DECL_FUNC(int (*sub_452A90)(), sub_452A90, 0x452a90);
DECL_FUNC(int (__stdcall*sub_452AB0)(int a1), sub_452AB0, 0x452ab0);
char * GetBattleNetOption(char *a1, BNetGateways *a2) {
    int address = 0x452af0;
    char * result_;
    __asm {
        xor eax, eax
        mov esi, a2
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_452BA0)(), sub_452BA0, 0x452ba0);
BNetGateways * sub_452BD0(int a1, BNetGateways *a2) {
    int address = 0x452bd0;
    BNetGateways * result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
char * OverwriteBNGatewayList(BNetGateways *a1) {
    int address = 0x452c40;
    char * result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(BNetGateways * (__stdcall*LoadDefaultGatewayList)(BNetGateways *a1), LoadDefaultGatewayList, 0x452ce0);
char * sub_452EC0(BNetGateways *a1) {
    int address = 0x452ec0;
    char * result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
__int32 sub_452F40(BNetGateways *a1, char *a2) {
    int address = 0x452f40;
    __int32 result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(BNetGateways * (__stdcall*sub_452F80)(BNetGateways *a1, int a2), sub_452F80, 0x452f80);
void LoadBNGatewayList(BNetGateways *a1) {
    int address = 0x453020;
    __asm {
        mov eax, a1
        call address
    }
}
DECL_FUNC(void * (*sub_453150)(), sub_453150, 0x453150);
DECL_FUNC(void * (*sub_453170)(), sub_453170, 0x453170);
DECL_FUNC(unsigned (*sub_4531A0)(), sub_4531A0, 0x4531a0);
char sub_4531F0(CUnit *a1) {
    int address = 0x4531f0;
    char result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, al
    }
    return result_;
}
void setRepulseAngle(CUnit *a1) {
    int address = 0x453300;
    __asm {
        mov esi, a1
        call address
    }
}
CUnit * removeRepulseTile(CUnit *result) {
    int address = 0x4533d0;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
signed sub_453420(CUnit *a1) {
    int address = 0x453420;
    signed result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int sub_4535A0(CUnit *a1, int a2) {
    int address = 0x4535a0;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__cdecl*sub_453680)(const void *a1, const void *a2), sub_453680, 0x453680);
DECL_FUNC(int (__cdecl*sortRules)(const void *a1, const void *a2), sortRules, 0x4536c0);
DECL_FUNC(int (*sub_453700)(), sub_453700, 0x453700);
unsigned sub_453710(int ebx0, int (__fastcall *a2)(unsigned int, int, int)) {
    int address = 0x453710;
    unsigned result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov ebx, ebx0
        call address
        mov result_, eax
    }
    return result_;
}
unsigned LeaderBoardSorting(int (__fastcall *ebx0)(unsigned int, int, int)) {
    int address = 0x453790;
    unsigned result_;
    __asm {
        xor eax, eax
        mov ebx, ebx0
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(unsigned (*sub_453800)(), sub_453800, 0x453800);
DECL_FUNC(int (*sub_453890)(), sub_453890, 0x453890);
DECL_FUNC(void (*updateLeaderboardSorting)(), updateLeaderboardSorting, 0x4538b0);
DECL_FUNC(int (__stdcall*sub_453AE0)(int a1, int a2), sub_453AE0, 0x453ae0);
int SBigCompareToBinary(unsigned int a1, int a2) {
    int address = 0x453b20;
    int result_;
    __asm {
        xor eax, eax
        mov edi, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int sub_453BA0(const void *a1, size_t a2, const void *a3, size_t size_) {
    int address = 0x453ba0;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr size_
        push dword ptr a3
        mov eax, a2
        mov ecx, a1
        call address
        mov result_, eax
    }
    return result_;
}
void sha1(void *this_, BYTE *edi0, int a3, int a4) {
    int address = 0x453bd0;
    __asm {
        push dword ptr a4
        push dword ptr a3
        mov edi, edi0
        mov ecx, this_
        call address
        add esp, 8
    }
}
DECL_FUNC(BOOL (__stdcall*parseLocalSBigBuffer)(int a1, void *a2, size_t a3, const void *str, size_t size_, const void *a6, size_t a7), parseLocalSBigBuffer, 0x453c60);
DECL_FUNC(void (__thiscall*refundTech75percent)(unsigned __int8 a1, Tech a2), refundTech75percent, 0x453d30);
int sub_453D90(unsigned __int8 a1, Tech tech) {
    int address = 0x453d90;
    int result_;
    __asm {
        xor eax, eax
        xor ecx, ecx
        mov cl, tech
        mov al, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(bool (__fastcall*UnitIsOfType)(CUnit *unit, UnitType unit_type), UnitIsOfType, 0x453dc0);
u8 * Unit_RefundPartialTechnology(CUnit *a1) {
    int address = 0x453dd0;
    u8 * result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
void Unit_RefundFullTechnology(int a1, CUnit *a2, int a3) {
    int address = 0x453e30;
    __asm {
        mov ebx, a3
        mov edx, a2
        mov ecx, a1
        call address
    }
}
int getUpgradeGasCost(unsigned __int8 a1, unsigned __int8 a2) {
    int address = 0x453ed0;
    int result_;
    __asm {
        xor eax, eax
        xor ebx, ebx
        mov bl, a2
        mov al, a1
        call address
        mov result_, eax
    }
    return result_;
}
int getUpgradeOreCost(unsigned __int8 a1, unsigned __int8 a2) {
    int address = 0x453f20;
    int result_;
    __asm {
        xor eax, eax
        xor ebx, ebx
        mov bl, a2
        mov al, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*getUpgradeTimeCost)(void), getUpgradeTimeCost, 0x453f70);
u8 getArmorCount(CUnit *a1) {
    int address = 0x453fc0;
    u8 result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
DECL_FUNC(bool (__fastcall*UnitIsUltralisk)(CUnit *unit, UnitType unit_type), UnitIsUltralisk, 0x454070);
DECL_FUNC(bool (__fastcall*UnitIsVulture)(CUnit *unit, UnitType unit_type), UnitIsVulture, 0x454090);
DECL_FUNC(int (__fastcall*refundUpgrade75percent)(unsigned __int8 a1, int a2, unsigned __int8 a3), refundUpgrade75percent, 0x4540b0);
int refundUpgradeFull(unsigned __int8 a1, unsigned __int8 a2) {
    int address = 0x454170;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov al, a1
        call address
        mov result_, eax
    }
    return result_;
}
void Unit_RefundPartialUpgrade(CUnit *a1, int a2) {
    int address = 0x454220;
    __asm {
        mov edx, a2
        mov esi, a1
        call address
    }
}
void Unit_RefundFullUpgrade(CUnit *a1) {
    int address = 0x454280;
    __asm {
        mov eax, a1
        call address
    }
}
void UpdateSpeed(CUnit *unit) {
    int address = 0x454310;
    __asm {
        mov eax, unit
        call address
    }
}
void sub_454360(CUnit *a1) {
    int address = 0x454360;
    __asm {
        mov eax, a1
        call address
    }
}
void ApplySpeedUpgradeFromUnitType(CUnit *a1) {
    int address = 0x454370;
    __asm {
        mov esi, a1
        call address
    }
}
void ApplySpeedUpgradeFromUpgradeType(__int16 a1, CUnit *unit) {
    int address = 0x454540;
    __asm {
        xor eax, eax
        push dword ptr unit
        mov ax, a1
        call address
    }
}
void orders_Upgrade(CUnit *unit) {
    int address = 0x4546a0;
    __asm {
        mov eax, unit
        call address
    }
}
void orders_ResearchTech(CUnit *unit) {
    int address = 0x4548b0;
    __asm {
        mov eax, unit
        call address
    }
}
signed BeginUpgrade(unsigned __int8 a1, int a2) {
    int address = 0x454a80;
    signed result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov al, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed BeginResearch(Tech tech, CUnit *a2) {
    int address = 0x454b70;
    signed result_;
    __asm {
        xor eax, eax
        mov edx, a2
        mov al, tech
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_454C80)(), sub_454C80, 0x454c80);
BOOL UnitIsIrradiatable(CUnit *a1) {
    int address = 0x454c90;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int sub_454CD0(int a1) {
    int address = 0x454cd0;
    int result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
void sub_454D00(CUnit *a1, unsigned int a2) {
    int address = 0x454d00;
    __asm {
        mov ecx, a2
        mov eax, a1
        call address
    }
}
void RemoveMaelstrom(CUnit *a1) {
    int address = 0x454d20;
    __asm {
        mov esi, a1
        call address
    }
}
void RemoveLockdown(CUnit *a1) {
    int address = 0x454d90;
    __asm {
        mov esi, a1
        call address
    }
}
void IrradiateHit(CUnit *target, CUnit *attacker, char attacking_player) {
    int address = 0x454e00;
    __asm {
        push dword ptr attacking_player
        push dword ptr attacker
        mov edi, target
        call address
    }
}
void ApplyIrradiate(CUnit *unit) {
    int address = 0x454e80;
    __asm {
        mov eax, unit
        call address
    }
}
void RemoveMatrixFrom(CUnit *a1, signed int damage) {
    int address = 0x454ed0;
    __asm {
        mov ecx, damage
        mov eax, a1
        call address
    }
}
void CreateDefensiveMatrix(CUnit *a1) {
    int address = 0x454f90;
    __asm {
        mov edi, a1
        call address
    }
}
void ApplyDefensiveMatrix(CUnit *a1) {
    int address = 0x455010;
    __asm {
        mov eax, a1
        call address
    }
}
DECL_FUNC(void (__stdcall*orders_DefensiveMatrix)(CUnit *a1), orders_DefensiveMatrix, 0x4550a0);
void OpticalFlareHit(CUnit *a1, char attacking_player) {
    int address = 0x455170;
    __asm {
        push dword ptr attacking_player
        mov eax, a1
        call address
    }
}
void RestoreHit(CUnit *a1) {
    int address = 0x455230;
    __asm {
        mov ebx, a1
        call address
    }
}
void LockdownHit(CUnit *a1, unsigned __int8 a2) {
    int address = 0x455380;
    __asm {
        push dword ptr a2
        mov edi, a1
        call address
    }
}
void SetMaelstromTimer(CUnit *a1, unsigned __int8 time) {
    int address = 0x4553f0;
    __asm {
        push dword ptr time
        mov edi, a1
        call address
    }
}
u8 sub_455460(CUnit *a1) {
    int address = 0x455460;
    u8 result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
int sub_455480(CUnit *a1) {
    int address = 0x455480;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void StimpackSFXRand(CUnit *unit) {
    int address = 0x4554a0;
    __asm {
        mov eax, unit
        call address
    }
}
void sub_455500(int a1, CUnit *a2) {
    int address = 0x455500;
    __asm {
        mov edi, a2
        mov eax, a1
        call address
    }
}
DECL_FUNC(int (__fastcall*irradiateUnitDamageProc)(CUnit *a1, CUnit *a2), irradiateUnitDamageProc, 0x455530);
DECL_FUNC(void (__thiscall*IrradiateDamageLoop)(CUnit *this_), IrradiateDamageLoop, 0x4555c0);
DECL_FUNC(_DWORD (__stdcall*OrderAcquire_Nothing)(_DWORD a1, _DWORD a2, _DWORD a3), OrderAcquire_Nothing, 0x455650);
signed CanRClickGround_maybe(CUnit *unit) {
    int address = 0x455660;
    signed result_;
    __asm {
        xor eax, eax
        mov eax, unit
        call address
        mov result_, eax
    }
    return result_;
}
BOOL DoesAcceptRclickCommands(CUnit *a1) {
    int address = 0x4556d0;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(char (__fastcall*getGenericUnitIdleOrder)(int a1, CUnit *a2), getGenericUnitIdleOrder, 0x455760);
signed OrderAcquire_genericRighClickHarvestProc(CUnit *a1, CUnit *a2) {
    int address = 0x4557c0;
    signed result_;
    __asm {
        xor eax, eax
        mov esi, a2
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(signed (__thiscall*OrderAcquire_genericReturnToIdleProc)(CUnit *unit, int a2, CUnit **a3, int a4), OrderAcquire_genericReturnToIdleProc, 0x455890);
DECL_FUNC(signed (__thiscall*OrderAcquire_genericIdleUnitProc)(CUnit *this_, int a2, int *a3, __int16 a4), OrderAcquire_genericIdleUnitProc, 0x455900);
DECL_FUNC(int (__thiscall*OrderAcquire_genericRighClickHarvestIdleProc)(CUnit *this_, int a2, int *a3, __int16 a4), OrderAcquire_genericRighClickHarvestIdleProc, 0x4559c0);
DECL_FUNC(signed (__stdcall*ShowRClickErrorIfNeeded)(CUnit *a1), ShowRClickErrorIfNeeded, 0x455a00);
DECL_FUNC(int (__thiscall*OrderAcquire_genericRightClickUnitProc)(CUnit *this_, int a2, CUnit **a3, __int16 a4), OrderAcquire_genericRightClickUnitProc, 0x455cc0);
DECL_FUNC(int (__thiscall*OrderAcquire_genericRightClickUnitProc2)(CUnit *this_, int a2, int a3, __int16 a4), OrderAcquire_genericRightClickUnitProc2, 0x455e00);
void sub_455F20(CUnit *a1, int a2, __int16 a3, __int16 a4, unsigned __int16 a5) {
    int address = 0x455f20;
    __asm {
        xor edi, edi
        push dword ptr a5
        push dword ptr a4
        mov di, a3
        mov ecx, a2
        mov eax, a1
        call address
    }
}
DECL_FUNC(void (__stdcall*sub_4560D0)(signed int a1, signed int a2, int a3, signed int a4, char a5), sub_4560D0, 0x4560d0);
void CMDACT_RightClick(dlgEvent *a1) {
    int address = 0x4563a0;
    __asm {
        mov eax, a1
        call address
    }
}
CThingy * sub_456490(int x, __int16 y, CUnit *unit) {
    int address = 0x456490;
    CThingy * result_;
    __asm {
        xor eax, eax
        xor edi, edi
        push dword ptr unit
        mov di, y
        mov eax, x
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__fastcall*input_Game_RightMouseClick)(dlgEvent *dlg), input_Game_RightMouseClick, 0x4564e0);
DECL_FUNC(void (*sub_456630)(), sub_456630, 0x456630);
DECL_FUNC(void (__cdecl*destroy_wirefram_grp)(), destroy_wirefram_grp, 0x456680);
char sub_4566B0(CUnit *a1) {
    int address = 0x4566b0;
    char result_;
    __asm {
        xor eax, eax
        mov edx, a1
        call address
        mov result_, al
    }
    return result_;
}
DECL_FUNC(int (__thiscall*sub_456730)(CUnit *this_), sub_456730, 0x456730);
int sub_4567C0(CUnit *a1) {
    int address = 0x4567c0;
    int result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (*sub_4568B0)(), sub_4568B0, 0x4568b0);
DECL_FUNC(void (__fastcall*statdata_UnitWireframeUpdate)(dialog *dlg, int x, int y, rect *dst), statdata_UnitWireframeUpdate, 0x4568f0);
dialog * sub_456A30(dialog *result) {
    int address = 0x456a30;
    dialog * result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__fastcall*statdata_UnitWireframeInteract)(dialog *a1, dlgEvent *a2), statdata_UnitWireframeInteract, 0x456a50);
DECL_FUNC(void (*load_WireframeGRP)(), load_WireframeGRP, 0x456a90);
DECL_FUNC(int (*sub_456AE0)(), sub_456AE0, 0x456ae0);
DECL_FUNC(u8 * (*ProgressBar_Destroy)(), ProgressBar_Destroy, 0x456b00);
DECL_FUNC(void (__fastcall*statdata_ProgressBarUpdate)(dialog *dlg, int x, int y, rect *dst), statdata_ProgressBarUpdate, 0x456b40);
char sub_456C10(char result) {
    int address = 0x456c10;
    char result_;
    __asm {
        xor eax, eax
        mov al, result
        call address
        mov result_, al
    }
    return result_;
}
DECL_FUNC(char (*sub_456C20)(), sub_456C20, 0x456c20);
signed sub_456C30(dialog *a1) {
    int address = 0x456c30;
    signed result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
char sub_456D30(dialog *dlg) {
    int address = 0x456d30;
    char result_;
    __asm {
        xor eax, eax
        mov edi, dlg
        call address
        mov result_, al
    }
    return result_;
}
DECL_FUNC(void (__thiscall*statdata_LabelUnknownUpdate)(dialog *dlg, int x, int y, rect *dst), statdata_LabelUnknownUpdate, 0x456e00);
DECL_FUNC(int (__fastcall*statdata_Unknown)(dialog *a1, dlgEvent *a2), statdata_Unknown, 0x456ec0);
DECL_FUNC(void (__cdecl*destroyStatdata)(), destroyStatdata, 0x456ef0);
DECL_FUNC(void (__fastcall*statdata_UnitWireframeSelectUpdate)(dialog *dlg, int x, int y, rect *dst), statdata_UnitWireframeSelectUpdate, 0x456f50);
DECL_FUNC(void (__fastcall*statdata_UnitWireframeTransUpdate)(dialog *dlg, int x, int y, rect *dst), statdata_UnitWireframeTransUpdate, 0x4570a0);
void sub_4571B0(dialog *a1) {
    int address = 0x4571b0;
    __asm {
        mov edi, a1
        call address
    }
}
void DLGsetProgressBarValue(dialog *a1, __int16 a2, __int16 a3) {
    int address = 0x457200;
    __asm {
        xor ecx, ecx
        push dword ptr a3
        mov cx, a2
        mov eax, a1
        call address
    }
}
void sub_457250(dialog *a1, __int16 a2, __int16 a3) {
    int address = 0x457250;
    __asm {
        xor ecx, ecx
        push dword ptr a3
        mov cx, a2
        mov eax, a1
        call address
    }
}
void sub_4572F0(dialog *a1) {
    int address = 0x4572f0;
    __asm {
        mov eax, a1
        call address
    }
}
void sub_457310(dialog *a1) {
    int address = 0x457310;
    __asm {
        mov eax, a1
        call address
    }
}
void CreateContextHelpFromDialog(dialog *a1, char *a2) {
    int address = 0x457350;
    __asm {
        push dword ptr a2
        mov eax, a1
        call address
        add esp, 4
    }
}
void sub_457390(int a1) {
    int address = 0x457390;
    __asm {
        mov eax, a1
        call address
    }
}
DECL_FUNC(void (__stdcall*CMDACT_CancelGeneric)(dialog *dlg), CMDACT_CancelGeneric, 0x4573a0);
DECL_FUNC(void (__fastcall*statdata_buttonUpdate)(dialog *dlg, int x, int y, rect *dst), statdata_buttonUpdate, 0x457480);
DECL_FUNC(void (__fastcall*statdata_iconOverlayUpdate)(dialog *dlg, int x, int y, rect *dst), statdata_iconOverlayUpdate, 0x4574e0);
DECL_FUNC(int (*sub_457540)(), sub_457540, 0x457540);
DECL_FUNC(int (*sub_457550)(), sub_457550, 0x457550);
DECL_FUNC(int (*sub_457560)(), sub_457560, 0x457560);
DECL_FUNC(int (*sub_457570)(), sub_457570, 0x457570);
DECL_FUNC(int (*sub_457580)(), sub_457580, 0x457580);
DECL_FUNC(int (*sub_457590)(), sub_457590, 0x457590);
void drawCancelUpgradeContextHelp(dialog *a1) {
    int address = 0x4575a0;
    __asm {
        mov ebx, a1
        call address
    }
}
DECL_FUNC(void (__stdcall*statdatalUserInteract)(dialog *a1), statdatalUserInteract, 0x4576a0);
void drawCancelUnitContextHelp(dialog *a1) {
    int address = 0x457b10;
    __asm {
        mov ebx, a1
        call address
    }
}
void drawUnloadUnitContextHelp(dialog *a1) {
    int address = 0x457c20;
    __asm {
        mov ebx, a1
        call address
    }
}
void * DlgButton_Create(dialog *a1) {
    int address = 0x457ca0;
    void * result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
void statdataMouseOverInteract(dialog *a1, dialog *a2) {
    int address = 0x457ce0;
    __asm {
        push dword ptr a2
        mov eax, a1
        call address
    }
}
void sub_457DE0(dialog *a1, struct dlgEvent *a2) {
    int address = 0x457de0;
    __asm {
        push dword ptr a2
        mov esi, a1
        call address
    }
}
void statdata_Destroy(dialog *a1, struct dlgEvent *a2) {
    int address = 0x457e40;
    __asm {
        mov ecx, a2
        mov eax, a1
        call address
    }
}
DECL_FUNC(int (__fastcall*statdata_UnitWireframeTransit)(dialog *dlg, dlgEvent *evn), statdata_UnitWireframeTransit, 0x457e90);
DECL_FUNC(int (__fastcall*statdata_buttonInteract)(dialog *a1, dlgEvent *a2), statdata_buttonInteract, 0x457f30);
DECL_FUNC(void (__cdecl*sub_457FE0)(), sub_457FE0, 0x457fe0);
void ProgressBar_Create(dialog *a1) {
    int address = 0x458050;
    __asm {
        mov eax, a1
        call address
    }
}
DECL_FUNC(void (*sub_458120)(), sub_458120, 0x458120);
DECL_FUNC(int (__fastcall*statdata_ProgressBarInteract)(dialog *dlg, dlgEvent *evt), statdata_ProgressBarInteract, 0x4581e0);
DECL_FUNC(void (__fastcall*StatusScreenButton)(dialog *a1, dialog *a2), StatusScreenButton, 0x458220);
DECL_FUNC(int (__fastcall*statdata_UnitWireframeSelection)(dialog *dlg, dlgEvent *evt), statdata_UnitWireframeSelection, 0x4583e0);
void statdata_extendedCtrlID(dialog *a1) {
    int address = 0x4584c0;
    __asm {
        mov eax, a1
        call address
    }
}
DECL_FUNC(int (__fastcall*statdata_dlg_Interact)(dialog *dlg, dlgEvent *evt), statdata_dlg_Interact, 0x4584f0);
DECL_FUNC(void (*load_Statdata_BIN)(), load_Statdata_BIN, 0x458570);
DECL_FUNC(void (*sub_4586E0)(), sub_4586E0, 0x4586e0);
DECL_FUNC(u8 * (*sub_4586F0)(), sub_4586F0, 0x4586f0);
DECL_FUNC(void (__fastcall*ConsoleDlgUpdateCB)(dialog *dlg, int x, int y, rect *dst), ConsoleDlgUpdateCB, 0x458730);
__int16 setDefaultTooltipInfo(__int16 a1, __int16 a2, __int16 a3, __int16 a4, __int16 a5, __int16 a6, __int16 a7, __int16 a8) {
    int address = 0x458800;
    __int16 result_;
    __asm {
        xor eax, eax
        xor edx, edx
        xor ecx, ecx
        push dword ptr a8
        push dword ptr a7
        push dword ptr a6
        push dword ptr a5
        push dword ptr a4
        mov cx, a3
        mov dx, a2
        mov ax, a1
        call address
        mov result_, ax
    }
    return result_;
}
int sub_458850(int result) {
    int address = 0x458850;
    int result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(BOOL (__fastcall*sub_4588C0)(dialog *this_, int a2), sub_4588C0, 0x4588c0);
DECL_FUNC(void (__fastcall*statbtn_Btn_Update)(dialog *dlg, int x, int y, rect *dst), statbtn_Btn_Update, 0x458900);
int statBtn_dlg_CharPress(dlgEvent *a1) {
    int address = 0x458b30;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void sub_458BB0(dialog *dlg) {
    int address = 0x458bb0;
    __asm {
        mov eax, dlg
        call address
    }
}
DECL_FUNC(void (__cdecl*updateButtonSetEx)(), updateButtonSetEx, 0x458bc0);
DECL_FUNC(void (__cdecl*destroy_statbtn_BIN)(), destroy_statbtn_BIN, 0x458cf0);
DECL_FUNC(void (*sub_458D50)(), sub_458D50, 0x458d50);
DECL_FUNC(void (__cdecl*updateButtonSet)(), updateButtonSet, 0x458de0);
void sub_458E70(dialog *a1) {
    int address = 0x458e70;
    __asm {
        mov eax, a1
        call address
    }
}
DECL_FUNC(void (__stdcall*sub_458E90)(int a1), sub_458E90, 0x458e90);
DECL_FUNC(signed (__stdcall*sub_458EF0)(signed int a1), sub_458EF0, 0x458ef0);
DECL_FUNC(void (__stdcall*CreateTooltip)(char *a1), CreateTooltip, 0x459030);
DECL_FUNC(void (__thiscall*CreateUpgradeLevelTooltip)(char *this_), CreateUpgradeLevelTooltip, 0x459150);
DECL_FUNC(void (*sub_4591D0)(), sub_4591D0, 0x4591d0);
DECL_FUNC(void (__cdecl*resetTooltipInfo)(), resetTooltipInfo, 0x459360);
void getTooltipInfo(dialog *a1, dialog *a2) {
    int address = 0x4593a0;
    __asm {
        push dword ptr a2
        mov eax, a1
        call address
    }
}
void sub_4596A0(dialog *a1) {
    int address = 0x4596a0;
    __asm {
        mov eax, a1
        call address
    }
}
DECL_FUNC(void (__cdecl*sub_459770)(), sub_459770, 0x459770);
void sub_4597C0(dialog *a1, struct dlgEvent *a2) {
    int address = 0x4597c0;
    __asm {
        push dword ptr a2
        mov esi, a1
        call address
    }
}
void statBtn_dlg_MouseMove(dialog *a1, struct dlgEvent *a2) {
    int address = 0x459860;
    __asm {
        mov ecx, a2
        mov eax, a1
        call address
    }
}
DECL_FUNC(int (__fastcall*statbtn_BIN_ReplayProgressbar)(dialog *dlg, dlgEvent *evt), statbtn_BIN_ReplayProgressbar, 0x459890);
DECL_FUNC(int (__fastcall*statbtn_Btn_Interact)(dialog *dlg, dlgEvent *evt), statbtn_Btn_Interact, 0x4598d0);
DECL_FUNC(void (*updateCurrentButtonset)(), updateCurrentButtonset, 0x4599a0);
void statbtn_BIN_CustomCtrlID(dialog *a1) {
    int address = 0x459ad0;
    __asm {
        mov eax, a1
        call address
    }
}
DECL_FUNC(void (__fastcall*BTNSACT_ChangeButtons)(int action_variable, bool is_shift_used), BTNSACT_ChangeButtons, 0x459af0);
DECL_FUNC(int (__fastcall*statbtn_DLG_Interact)(dialog *dlg, dlgEvent *evt), statbtn_DLG_Interact, 0x459b00);
DECL_FUNC(void (*load_statbtn_BIN)(), load_statbtn_BIN, 0x459b90);
void sub_459D90(DownloadListMaybe *result, int a2, int a3) {
    int address = 0x459d90;
    __asm {
        push dword ptr a3
        mov ecx, a2
        mov eax, result
        call address
    }
}
DownloadListMaybe * sub_459DC0(DownloadListMaybe *result) {
    int address = 0x459dc0;
    DownloadListMaybe * result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
unsigned sub_459E00(DownloadListMaybe *a1, unsigned int a2) {
    int address = 0x459e00;
    unsigned result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__stdcall*sub_459EC0)(int *a1, int a2, int a3), sub_459EC0, 0x459ec0);
int sub_459EF0(int result, char a2, int a3) {
    int address = 0x459ef0;
    int result_;
    __asm {
        xor eax, eax
        xor edx, edx
        push dword ptr a3
        mov dl, a2
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
char * SendMapNameData(MapDownload *a1, int a2) {
    int address = 0x459f30;
    char * result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
BOOL extensionIsValidMap(const char *a1) {
    int address = 0x459fb0;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DownloadListMaybe * sub_45A010(char a1, char a2) {
    int address = 0x45a010;
    DownloadListMaybe * result_;
    __asm {
        xor eax, eax
        xor ebx, ebx
        push dword ptr a2
        mov bl, a1
        call address
        mov result_, eax
    }
    return result_;
}
BOOL Download_maybe(_BYTE *a1) {
    int address = 0x45a050;
    BOOL result_;
    __asm {
        xor eax, eax
        mov ebx, a1
        call address
        mov result_, eax
    }
    return result_;
}
void sub_45A0B0(char a1) {
    int address = 0x45a0b0;
    __asm {
        xor ebx, ebx
        mov bl, a1
        call address
    }
}
int dataXFer_0x05(int a1, int a2) {
    int address = 0x45a190;
    int result_;
    __asm {
        xor eax, eax
        mov edi, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int dataXFer_0x03(int a1, char a2, int a3) {
    int address = 0x45a1f0;
    int result_;
    __asm {
        xor eax, eax
        xor ebx, ebx
        push dword ptr a3
        mov bl, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int dataXFer_0x02(int a1, int a2, char a3) {
    int address = 0x45a230;
    int result_;
    __asm {
        xor eax, eax
        xor ebx, ebx
        mov bl, a3
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
BOOL openMapFile(DownloadListMaybe *a1) {
    int address = 0x45a290;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
BOOL dataXFer_0x04(unsigned int a1, int a2, int a3) {
    int address = 0x45a390;
    BOOL result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int fd_user(char *a1, int a2, int a3) {
    int address = 0x45a4a0;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        mov ebx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__stdcall*sub_45A520)(int a1, int a2), sub_45A520, 0x45a520);
signed CreateMapDownloadString(size_t a1, const char *a2, int a3) {
    int address = 0x45a570;
    signed result_;
    __asm {
        xor eax, eax
        mov esi, a3
        mov edi, a2
        mov ebx, a1
        call address
        mov result_, eax
    }
    return result_;
}
int dataXFer_0x01(unsigned int eax0, int a2, int a3) {
    int address = 0x45a600;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        push dword ptr a2
        mov eax, eax0
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_45A840)(), sub_45A840, 0x45a840);
DECL_FUNC(int (*sub_45A860)(), sub_45A860, 0x45a860);
DECL_FUNC(int (*sub_45A890)(), sub_45A890, 0x45a890);
char sub_45A8B0(char a1, char a2) {
    int address = 0x45a8b0;
    char result_;
    __asm {
        xor eax, eax
        xor edx, edx
        mov dl, a2
        mov al, a1
        call address
        mov result_, al
    }
    return result_;
}
DECL_FUNC(char (__fastcall*sub_45A900)(int a1, char a2), sub_45A900, 0x45a900);
DECL_FUNC(int (*sub_45A920)(void), sub_45A920, 0x45a920);
DECL_FUNC(int (__fastcall*sub_45A950)(size_t size_, char *dest), sub_45A950, 0x45a950);
DECL_FUNC(int (__thiscall*sub_45A970)(char *source), sub_45A970, 0x45a970);
char sub_45A990(int a1) {
    int address = 0x45a990;
    char result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
DECL_FUNC(void (__fastcall*sub_45A9B0)(int a1, unsigned __int8 a2, char a3), sub_45A9B0, 0x45a9b0);
DECL_FUNC(_DWORD (__stdcall*sub_45AB20)(char a1, char a2), sub_45AB20, 0x45ab20);
DECL_FUNC(int (*sub_45ABA0)(), sub_45ABA0, 0x45aba0);
int sub_45ABE0(size_t size_, char *dest, int result) {
    int address = 0x45abe0;
    int result_;
    __asm {
        xor eax, eax
        mov eax, result
        mov edx, dest
        mov ecx, size_
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(signed (__thiscall*sub_45AC10)(u8 *this_), sub_45AC10, 0x45ac10);
DECL_FUNC(unsigned (*GetEmptiestTeam)(), GetEmptiestTeam, 0x45ad20);
DECL_FUNC(void (__cdecl*updatePlayerForce)(), updatePlayerForce, 0x45ad90);
DECL_FUNC(int (__fastcall*GetFreeSlotFromEmptiestTeam)(_DWORD a1, _DWORD a2), GetFreeSlotFromEmptiestTeam, 0x45ade0);
void sub_45AE20(int a1) {
    int address = 0x45ae20;
    __asm {
        mov ebx, a1
        call address
    }
}
BOOL isAIScriptNameValid(int player, int a2) {
    int address = 0x45aea0;
    BOOL result_;
    __asm {
        xor eax, eax
        mov esi, a2
        mov edx, player
        call address
        mov result_, eax
    }
    return result_;
}
struct_v4 * AI_RunAIScript(Location *a1, int a2, int a3, int a4) {
    int address = 0x45aef0;
    struct_v4 * result_;
    __asm {
        xor eax, eax
        push dword ptr a4
        push dword ptr a3
        push dword ptr a2
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__fastcall*AISCRIPT_Get_u32)(int a1, int a2), AISCRIPT_Get_u32, 0x45aff0);
DECL_FUNC(__int16 (__fastcall*AISCRIPT_Get_u16)(int a1, int a2), AISCRIPT_Get_u16, 0x45b010);
DECL_FUNC(char (__fastcall*AISCRIPT_Get_u8)(int a1, int a2), AISCRIPT_Get_u8, 0x45b030);
DECL_FUNC(int (*sub_45B050)(), sub_45B050, 0x45b050);
DECL_FUNC(int (*nullsub_24)(), nullsub_24, 0x45b070);
DECL_FUNC(void * (*sub_45B080)(), sub_45B080, 0x45b080);
CUnit * AI_GetNuclearSilo(int a1) {
    int address = 0x45b0d0;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(s32 (__fastcall*getStandardUnitCount)(UnitType a1, int a2, unsigned __int8 a3), getStandardUnitCount, 0x45b100);
int ParseAIScriptName(int a1, int *a2) {
    int address = 0x45b170;
    int result_;
    __asm {
        xor eax, eax
        mov esi, a2
        mov edx, a1
        call address
        mov result_, eax
    }
    return result_;
}
struct_v4 * sub_45B1D0(int a1, int a2, int a3) {
    int address = 0x45b1d0;
    struct_v4 * result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        mov edi, a2
        mov ebx, a1
        call address
        mov result_, eax
    }
    return result_;
}
CUnit * AI_FindSuitableUnit(int a1, unsigned int a2, __int16 a3) {
    int address = 0x45b210;
    CUnit * result_;
    __asm {
        xor eax, eax
        xor esi, esi
        mov si, a3
        mov edx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(_BYTE * (__stdcall*AI_GuardResources)(int a1, __int16 a2), AI_GuardResources, 0x45b260);
int ReadAIThreadData(FILE *a1, __int16 a2) {
    int address = 0x45b310;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int WriteAIThreadData(FILE *a1) {
    int address = 0x45b3a0;
    int result_;
    __asm {
        xor eax, eax
        mov ebx, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__stdcall*AI_ExpandAt)(int a1, int a2, int a3), AI_ExpandAt, 0x45b440);
int AI_Expand(int a1, int a2, int a3) {
    int address = 0x45b530;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        push dword ptr a2
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(_DWORD (__stdcall*AIScript_CreatePanicThread)(_DWORD a1, _DWORD a2, _DWORD a3), AIScript_CreatePanicThread, 0x45b590);
DECL_FUNC(void (*load_AIScript_BIN)(), load_AIScript_BIN, 0x45b5f0);
void AI_CreateNuke(CUnit *a1) {
    int address = 0x45b7a0;
    __asm {
        mov edi, a1
        call address
    }
}
void AI_StartShareTown(int player_id) {
    int address = 0x45b810;
    __asm {
        mov ebx, player_id
        call address
    }
}
DECL_FUNC(int (__stdcall*AIScript_RunScriptOpcodes)(int a1), AIScript_RunScriptOpcodes, 0x45b850);
DECL_FUNC(void (*AIScriptLoop)(void), AIScriptLoop, 0x45cbd0);
BOOL isValidMorph(UnitType a1) {
    int address = 0x45cc60;
    BOOL result_;
    __asm {
        xor eax, eax
        mov ax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*isRectOutOfScreen_fixup)(void), isRectOutOfScreen_fixup, 0x45cc90);
BOOL isMorphing(CUnit *unit) {
    int address = 0x45cd00;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, unit
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__stdcall*sub_45CD50)(int a1, int a2, int a3, int a4, int a5), sub_45CD50, 0x45cd50);
void updateNewUnitVision(UnitType a1, int pos_x, int pos_y) {
    int address = 0x45ce90;
    __asm {
        xor ecx, ecx
        push dword ptr pos_y
        push dword ptr pos_x
        mov cx, a1
        call address
    }
}
Order orders_DroneStartBuild(CUnit *a1) {
    int address = 0x45cf80;
    Order result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
DECL_FUNC(signed (__stdcall*sub_45D040)(CUnit *a1), sub_45D040, 0x45d040);
DECL_FUNC(void (__stdcall*orders_Morph2)(CUnit *a1), orders_Morph2, 0x45d0d0);
void DroneBuild_Execute(CUnit *a1) {
    int address = 0x45d2e0;
    __asm {
        mov eax, a1
        call address
    }
}
void ZergPlaceBuildingCntd(CUnit *a1) {
    int address = 0x45d410;
    __asm {
        mov eax, a1
        call address
    }
}
void orders_ZergBuildSelf(CUnit *unit) {
    int address = 0x45d500;
    __asm {
        mov eax, unit
        call address
    }
}
void DroneMorphExtractor(CUnit *a1) {
    int address = 0x45d790;
    __asm {
        mov eax, a1
        call address
    }
}
void DroneMorphStandard(CUnit *a1, UnitType a2) {
    int address = 0x45d890;
    __asm {
        push dword ptr a2
        mov eax, a1
        call address
    }
}
DECL_FUNC(CUnit * (__stdcall*ZergUnitBirth)(CUnit *a1), ZergUnitBirth, 0x45d910);
DECL_FUNC(void (__stdcall*ZergPlaceBuilding)(CUnit *a1), ZergPlaceBuilding, 0x45da40);
void orders_Build5(CUnit *a1) {
    int address = 0x45dc20;
    __asm {
        mov ebx, a1
        call address
    }
}
void orders_ZergBirth(CUnit *unit) {
    int address = 0x45dd60;
    __asm {
        mov eax, unit
        call address
    }
}
void orders_Morph1(CUnit *unit) {
    int address = 0x45dea0;
    __asm {
        mov eax, unit
        call address
    }
}
DECL_FUNC(void (__stdcall*orders_DroneBuild)(CUnit *unit), orders_DroneBuild, 0x45e090);
DECL_FUNC(void (*sub_45E310)(), sub_45E310, 0x45e310);
u16 setBuildingSelPortrait(UnitType unit_type) {
    int address = 0x45e320;
    u16 result_;
    __asm {
        xor eax, eax
        mov ax, unit_type
        call address
        mov result_, ax
    }
    return result_;
}
DECL_FUNC(u8 * (*statport_alloc)(), statport_alloc, 0x45e360);
int setLastEventPosition(int a1, int a2) {
    int address = 0x45e3a0;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_45E3E0)(), sub_45E3E0, 0x45e3e0);
__int16 sub_45E400(Bitmap *a1, int a2, char a3) {
    int address = 0x45e400;
    __int16 result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        mov ebx, a2
        mov edx, a1
        call address
        mov result_, ax
    }
    return result_;
}
unsigned rgbValue(int a1, int a2, int a3) {
    int address = 0x45e450;
    unsigned result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed sub_45E4C0(HANDLE video, int *esi0, int a3) {
    int address = 0x45e4c0;
    signed result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        mov esi, esi0
        mov ecx, video
        call address
        mov result_, eax
    }
    return result_;
}
BOOL sub_45E510(_DWORD *a1, int a2, char *filename, int arg4, int a5, int a6, int a7) {
    int address = 0x45e510;
    BOOL result_;
    __asm {
        xor eax, eax
        push dword ptr a7
        push dword ptr a6
        push dword ptr a5
        push dword ptr arg4
        push dword ptr filename
        mov edx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_45E560)(), sub_45E560, 0x45e560);
int sub_45E570(rect *a1, unsigned __int8 a2) {
    int address = 0x45e570;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__fastcall*GameTalkingPortrait_CB)(dialog *a1, __int16 timer_id), GameTalkingPortrait_CB, 0x45e610);
DECL_FUNC(void (__fastcall*statPortBtnUpdate)(dialog *dlg, int x, int y, rect *dst), statPortBtnUpdate, 0x45e650);
DECL_FUNC(void (__cdecl*clearSelectionPortrait)(), clearSelectionPortrait, 0x45e710);
void sub_45E770(dialog *dlg) {
    int address = 0x45e770;
    __asm {
        mov eax, dlg
        call address
    }
}
DECL_FUNC(void (__stdcall*displayIdlePortrait)(unsigned __int16 a1), displayIdlePortrait, 0x45e7a0);
DECL_FUNC(void (__stdcall*displayTalkingPortrait)(unsigned __int16 a1), displayTalkingPortrait, 0x45e8a0);
DECL_FUNC(void (*sub_45E9A0)(), sub_45E9A0, 0x45e9a0);
void sub_45E9C0(int a1) {
    int address = 0x45e9c0;
    __asm {
        mov eax, a1
        call address
    }
}
signed sub_45E9F0(dlgEvent *a1) {
    int address = 0x45e9f0;
    signed result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void displayUpdatePortrait(WORD a1, CUnit *a2, __int16 a3) {
    int address = 0x45ea30;
    __asm {
        xor eax, eax
        push dword ptr a3
        push dword ptr a2
        mov ax, a1
        call address
    }
}
void sub_45EB80(signed int a1) {
    int address = 0x45eb80;
    __asm {
        mov eax, a1
        call address
    }
}
DECL_FUNC(void (*updateSelectedUnitPortrait)(), updateSelectedUnitPortrait, 0x45ebc0);
DECL_FUNC(void (__fastcall*sub_45EC40)(dialog *a1, __int16 timer_id), sub_45EC40, 0x45ec40);
DECL_FUNC(void (*sub_45ED90)(), sub_45ED90, 0x45ed90);
signed DisplayTalkingPortrait_maybe(int a1, UnitType unit_type, int x, int y) {
    int address = 0x45edd0;
    signed result_;
    __asm {
        xor eax, eax
        push dword ptr y
        mov edi, x
        push dword ptr unit_type
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__fastcall*statPortBtnInteract)(dialog *dlg, dlgEvent *evt), statPortBtnInteract, 0x45ee90);
DECL_FUNC(void (__fastcall*sub_45EF50)(dialog *a1, __int16 a2), sub_45EF50, 0x45ef50);
void DoUnitEventNotify(CUnit *unit, char a2, int a3, int *a4, unsigned int a5) {
    int address = 0x45efe0;
    __asm {
        xor ebx, ebx
        push dword ptr a5
        push dword ptr a4
        mov edi, a3
        mov bl, a2
        mov eax, unit
        call address
    }
}
void statport_Buttonpress(dialog *dlg) {
    int address = 0x45f0b0;
    __asm {
        mov eax, dlg
        call address
    }
}
DECL_FUNC(int (__fastcall*statport_Dlg_Interact)(dialog *dlg, struct dlgEvent *evt), statport_Dlg_Interact, 0x45f290);
DECL_FUNC(void (*loadPortdata_BINDLG)(), loadPortdata_BINDLG, 0x45f320);
DECL_FUNC(char (*CommandAt)(), CommandAt, 0x45f7a0);
DECL_FUNC(void (*sub_45F7F0)(), sub_45F7F0, 0x45f7f0);
void IncreaseUnitCountsAtLocation(CUnit *result) {
    int address = 0x45f800;
    __asm {
        mov eax, result
        call address
    }
}
__int16 IncrementUnitCountForAllLoadedUnits(CUnit *a1) {
    int address = 0x45f870;
    __int16 result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, ax
    }
    return result_;
}
int isUnitAtHeight(CUnit *a1, char location_flags) {
    int address = 0x45f8d0;
    int result_;
    __asm {
        xor eax, eax
        xor esi, esi
        mov si, word ptr location_flags
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int KillRemoveUnits_Force(int eax0, int a2, int a3, int a4, int (__fastcall *a5)(signed int, int, int, int)) {
    int address = 0x45f930;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a5
        push dword ptr a4
        push dword ptr a3
        mov ebx, a2
        mov eax, eax0
        call address
        mov result_, eax
    }
    return result_;
}
int KillRemoveUnits_AllPlayers(int a1, int a2, int a3, int (__fastcall *a4)(_DWORD, _DWORD, _DWORD, _DWORD)) {
    int address = 0x45f9a0;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a4
        push dword ptr a3
        push dword ptr a2
        mov ebx, a1
        call address
        mov result_, eax
    }
    return result_;
}
int KillRemoveUnits_NeutralPlayers(int a1, int a2, int a3, int (__fastcall *a4)(_DWORD, _DWORD, _DWORD, _DWORD)) {
    int address = 0x45fa10;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a4
        push dword ptr a3
        push dword ptr a2
        mov ebx, a1
        call address
        mov result_, eax
    }
    return result_;
}
int KillRemoveUnits_Allies(int a1, int a2, int a3, int (__fastcall *a4)(_DWORD, _DWORD, _DWORD, _DWORD)) {
    int address = 0x45fa80;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a4
        push dword ptr a3
        push dword ptr a2
        mov ebx, a1
        call address
        mov result_, eax
    }
    return result_;
}
int KillRemoveUnits_Foes(int a1, int a2, int a3, int (__fastcall *a4)(_DWORD, _DWORD, _DWORD, _DWORD)) {
    int address = 0x45faf0;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a4
        push dword ptr a3
        push dword ptr a2
        mov ebx, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__stdcall*KillRemoveUnits_NonAlliedVictoryPlayers)(int arg0, int a2, int (__fastcall *a3)(unsigned int, int, int, int), int a4), KillRemoveUnits_NonAlliedVictoryPlayers, 0x45fb60);
int getForcePlayers(int eax0, int (__fastcall *a2)(int, int, struct_a3 *), int a3, struct_a3 *a4) {
    int address = 0x45fbe0;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a4
        push dword ptr a3
        mov ebx, a2
        mov eax, eax0
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__stdcall*GetAllPlayers)(int arg0, struct_a3 *a2, int (__fastcall *a3)(int, int, struct_a3 *)), GetAllPlayers, 0x45fc40);
DECL_FUNC(int (__stdcall*GetNeutralPlayers)(int arg0, struct_a3 *a2, int (__fastcall *a3)(int, int, struct_a3 *)), GetNeutralPlayers, 0x45fca0);
DECL_FUNC(int (__stdcall*GetAllies)(int arg0, struct_a3 *a2, int (__fastcall *a3)(int, int, struct_a3 *)), GetAllies, 0x45fd00);
DECL_FUNC(int (__stdcall*GetFoes)(int arg0, struct_a3 *a2, int (__fastcall *a3)(int, int, struct_a3 *)), GetFoes, 0x45fd60);
DECL_FUNC(int (__stdcall*GetNonAlliedVictoryPlayers)(int a1, struct_a3 *a2, int (__fastcall *a3)(_DWORD, _DWORD, struct_a3 *)), GetNonAlliedVictoryPlayers, 0x45fdd0);
DECL_FUNC(__int16 (__fastcall*sub_45FE40)(int a1, CUnit *a2), sub_45FE40, 0x45fe40);
DECL_FUNC(int (__fastcall*increaseHangerCountsAtLocation)(int a1, int a2), increaseHangerCountsAtLocation, 0x45fe80);
DECL_FUNC(int (__thiscall*isUnitOwnedByPlayerEx)(int player, CUnit *a2), isUnitOwnedByPlayerEx, 0x45fef0);
DECL_FUNC(int (__fastcall*Score)(_DWORD a1, _DWORD a2, struct_a3 *a3), Score, 0x45ffe0);
DECL_FUNC(int (__fastcall*Opponents)(_DWORD a1, _DWORD a2, struct_a3 *a3), Opponents, 0x460160);
DECL_FUNC(int (__fastcall*Deaths)(_DWORD a1, _DWORD a2, struct_a3 *a3), Deaths, 0x460380);
DECL_FUNC(int (__fastcall*Kill)(_DWORD a1, _DWORD a2, struct_a3 *a3), Kill, 0x4604a0);
DECL_FUNC(int (__fastcall*Accumulate)(_DWORD a1, _DWORD a2, struct_a3 *a3), Accumulate, 0x4605c0);
DECL_FUNC(int (__fastcall*Command)(_DWORD a1, _DWORD a2, struct_a3 *a3), Command, 0x4606b0);
DECL_FUNC(__int16 (__thiscall*IncreaseCompletedUnitCountsAtLocation)(CUnit *this_), IncreaseCompletedUnitCountsAtLocation, 0x460860);
DECL_FUNC(int (__fastcall*TrgBringProc)(CUnit *a1, int a2), TrgBringProc, 0x460980);
DECL_FUNC(unsigned (__fastcall*Bring)(int a1, char a2), Bring, 0x4609d0);
DECL_FUNC(int (*sub_460A80)(), sub_460A80, 0x460a80);
DECL_FUNC(void (__fastcall*sub_460A90)(dialog *a1), sub_460A90, 0x460a90);
int sub_460B00(int a1) {
    int address = 0x460b00;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int sub_460B20(dialog *a1) {
    int address = 0x460b20;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
dialog * sub_460BB0(dialog *a1) {
    int address = 0x460bb0;
    dialog * result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int spdDlgDestroy(dialog *a1, dlgEvent *a2) {
    int address = 0x460c30;
    int result_;
    __asm {
        xor eax, eax
        mov edi, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__thiscall*sub_460C80)(dialog *this_), sub_460C80, 0x460c80);
DECL_FUNC(bool (__fastcall*snd_SoundCheckbox)(dialog *dlg, dlgEvent *evt), snd_SoundCheckbox, 0x460cb0);
DECL_FUNC(bool (__fastcall*snd_SoundSlider)(dialog *dlg, dlgEvent *evt), snd_SoundSlider, 0x460d00);
void snd_dlg_UserCTRLID(dialog *a1) {
    int address = 0x460d40;
    __asm {
        mov eax, a1
        call address
    }
}
char spdDlgCreate(dialog *a1) {
    int address = 0x460d60;
    char result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
void load_Options_BIN(dialog *dlg) {
    int address = 0x460dd0;
    __asm {
        mov eax, dlg
        call address
    }
}
DECL_FUNC(int (__fastcall*snd_dlg_BINDLG_Main)(dialog *dlg, dlgEvent *evt), snd_dlg_BINDLG_Main, 0x460e20);
DECL_FUNC(void (*open_sound_options_menu)(), open_sound_options_menu, 0x460f10);
DECL_FUNC(int (*sub_460F20)(), sub_460F20, 0x460f20);
DECL_FUNC(void (__cdecl*lmissionDlgActivate)(), lmissionDlgActivate, 0x460f30);
DECL_FUNC(void (__cdecl*sub_460F70)(), sub_460F70, 0x460f70);
DECL_FUNC(void (__cdecl*wmissionDlgActivate)(), wmissionDlgActivate, 0x460fa0);
void lmissionDlgCreate(dialog *a1) {
    int address = 0x461020;
    __asm {
        mov eax, a1
        call address
    }
}
void sub_461160(dialog *dlg) {
    int address = 0x461160;
    __asm {
        mov eax, dlg
        call address
    }
}
DECL_FUNC(int (__fastcall*lmission_DLG_Interact)(dialog *dlg, dlgEvent *evt), lmission_DLG_Interact, 0x461430);
DECL_FUNC(int (__fastcall*wmission_BINDLG_Main)(dialog *dlg, dlgEvent *evt), wmission_BINDLG_Main, 0x461510);
DECL_FUNC(void (*open_lose_mission_dialog)(), open_lose_mission_dialog, 0x4615b0);
DECL_FUNC(int (*open_win_mission_dialog)(), open_win_mission_dialog, 0x461640);
DECL_FUNC(int (*nullsub_25)(), nullsub_25, 0x4616d0);
DECL_FUNC(int (*sub_4616E0)(), sub_4616E0, 0x4616e0);
DECL_FUNC(signed (__fastcall*sub_4616F0)(int a1, const char *a2), sub_4616F0, 0x4616f0);
DECL_FUNC(BOOL (*isSaveGameTimerReady)(), isSaveGameTimerReady, 0x461720);
DECL_FUNC(void (__cdecl*sub_461750)(), sub_461750, 0x461750);
int PrintfNetworkTblString(__int16 network_tbl_entry, char *buff, size_t size_, int a4) {
    int address = 0x461760;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a4
        mov esi, size_
        mov edi, buff
        mov ax, network_tbl_entry
        call address
        mov result_, eax
    }
    return result_;
}
TSAVEGAME * sub_4617C0(const char *a1) {
    int address = 0x4617c0;
    TSAVEGAME * result_;
    __asm {
        xor eax, eax
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__stdcall*SaveGame_Constructor_0)(int a1), SaveGame_Constructor_0, 0x461800);
dialog * sub_4618F0(dialog *result) {
    int address = 0x4618f0;
    dialog * result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
int CMDACT_LoadGame(char *source, int a2) {
    int address = 0x461940;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a2
        mov ecx, source
        call address
        mov result_, eax
    }
    return result_;
}
int sub_461980(char *a1) {
    int address = 0x461980;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void sub_4619A0(dialog *a1) {
    int address = 0x4619a0;
    __asm {
        mov eax, a1
        call address
    }
}
void DLG_loadsave_Act(dialog *dlg) {
    int address = 0x461a30;
    __asm {
        mov eax, dlg
        call address
    }
}
DECL_FUNC(void (__thiscall*sub_461A90)(dialog *this_), sub_461A90, 0x461a90);
int DLG_loadsave_Destroy(dialog *pDlg, dlgEvent *a2) {
    int address = 0x461ae0;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, pDlg
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(bool (__fastcall*loadSave_Delete)(dialog *dlg, dlgEvent *evt), loadSave_Delete, 0x461bb0);
void loadsave_editbox_onCharEvt(dlgEvent *a1, dialog *a2) {
    int address = 0x461c20;
    __asm {
        mov edi, a2
        mov eax, a1
        call address
    }
}
DECL_FUNC(bool (__fastcall*loadsave_EditBoxInteract)(dialog *dlg, dlgEvent *evt), loadsave_EditBoxInteract, 0x461d40);
void sub_461D80(dialog *a1) {
    int address = 0x461d80;
    __asm {
        mov edi, a1
        call address
    }
}
DECL_FUNC(bool (__fastcall*loadsave_ListBox)(dialog *dlg, dlgEvent *evt), loadsave_ListBox, 0x461e80);
char DLG_loadsave_Create(dialog *dlg, dlgEvent *a2) {
    int address = 0x461ed0;
    char result_;
    __asm {
        xor eax, eax
        mov eax, a2
        mov ecx, dlg
        call address
        mov result_, al
    }
    return result_;
}
DECL_FUNC(int (__fastcall*DLG_LoadGame_Interact)(dialog *dlg, dlgEvent *evt), DLG_LoadGame_Interact, 0x462060);
DECL_FUNC(int (__fastcall*open_savegame_menu)(__int16 _unused), open_savegame_menu, 0x4620e0);
DECL_FUNC(void (*LoadGame_DlgCreate)(), LoadGame_DlgCreate, 0x462100);
DECL_FUNC(signed (__fastcall*okBIN)(__int16 a1), okBIN, 0x462150);
DECL_FUNC(int (__fastcall*savegameBIN)(__int16 a1), savegameBIN, 0x4621f0);
void sub_4622A0(__int16 a1, int a2, int (__fastcall *a3)(__int16)) {
    int address = 0x4622a0;
    __asm {
        xor eax, eax
        push dword ptr a3
        push dword ptr a2
        mov ax, a1
        call address
    }
}
void dlg_loadsave_delete(dialog *dlg) {
    int address = 0x462310;
    __asm {
        mov eax, dlg
        call address
    }
}
void dlg_loadsave_overwrite(dialog *dlg) {
    int address = 0x4623c0;
    __asm {
        mov eax, dlg
        call address
    }
}
void DLG_Loadsave_Activate(dialog *dlg) {
    int address = 0x462510;
    __asm {
        mov eax, dlg
        call address
    }
}
DECL_FUNC(int (__fastcall*savegameBIN_DLG_Interact)(dialog *dlg, dlgEvent *evt), savegameBIN_DLG_Interact, 0x462580);
DECL_FUNC(void (__cdecl*savegameMenu)(), savegameMenu, 0x462600);
int * AI_CreateGuard(__int16 a1, int a2, __int16 a3, __int16 a4) {
    int address = 0x462670;
    int * result_;
    __asm {
        xor eax, eax
        xor edi, edi
        push dword ptr a4
        push dword ptr a3
        mov esi, a2
        mov di, a1
        call address
        mov result_, eax
    }
    return result_;
}
_DWORD * RemoveAllGuards(int a1) {
    int address = 0x4626e0;
    _DWORD * result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
int ** sub_462760(int a1, unsigned __int16 a2) {
    int address = 0x462760;
    int ** result_;
    __asm {
        xor eax, eax
        xor edx, edx
        mov dx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*nullsub_26)(), nullsub_26, 0x4627b0);
DECL_FUNC(int (*sub_4627C0)(), sub_4627C0, 0x4627c0);
DECL_FUNC(int (*sub_4627D0)(), sub_4627D0, 0x4627d0);
DECL_FUNC(int (*nullsub_27)(), nullsub_27, 0x4627e0);
int sub_4627F0(int a1, int a2, int a3) {
    int address = 0x4627f0;
    int result_;
    __asm {
        xor eax, eax
        mov edi, a3
        mov ebx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
_WORD * SetDesiredAIControllerDestination(CUnit *unit, __int16 x, __int16 y) {
    int address = 0x462830;
    _WORD * result_;
    __asm {
        xor eax, eax
        push dword ptr y
        push dword ptr x
        mov eax, unit
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_462860)(), sub_462860, 0x462860);
int sub_462880(int a1, int a2) {
    int address = 0x462880;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov ebx, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_462900)(), sub_462900, 0x462900);
DECL_FUNC(BOOL (__thiscall*IsAtHome)(CUnit *this_), IsAtHome, 0x462930);
DECL_FUNC(CUnit * (__stdcall*sub_462960)(CUnit *a1), sub_462960, 0x462960);
DECL_FUNC(void (__cdecl*initDetailFinder)(), initDetailFinder, 0x462a50);
int LoadUnitFinderData(FILE *a1) {
    int address = 0x462ac0;
    int result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
int WriteUnitFinderData(FILE *a1) {
    int address = 0x462bf0;
    int result_;
    __asm {
        xor eax, eax
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
int * AI_PlaceGuard(int a1, int location, int a3, __int16 unit_type) {
    int address = 0x462e70;
    int * result_;
    __asm {
        xor eax, eax
        push dword ptr unit_type
        mov ecx, a3
        mov eax, location
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed AI_Guard_AttackTarget_Proc(CUnit *a1, int a2) {
    int address = 0x462ea0;
    signed result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void sub_463040(CUnit *unit) {
    int address = 0x463040;
    __asm {
        mov eax, unit
        call address
    }
}
DECL_FUNC(int * (__stdcall*sub_4630C0)(int a1), sub_4630C0, 0x4630c0);
DECL_FUNC(int (*sub_4632F0)(), sub_4632F0, 0x4632f0);
UnitType getSiegeModeUnitType(UnitType result) {
    int address = 0x463310;
    UnitType result_;
    __asm {
        xor eax, eax
        mov ax, result
        call address
        mov result_, ax
    }
    return result_;
}
DECL_FUNC(CUnit * (__thiscall*findAddonOwner)(void *this_), findAddonOwner, 0x463330);
CUnit * GetLoadedSilo(CUnit *ghost, int a2, CUnit *ghost_) {
    int address = 0x463360;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov esi, ghost_
        mov edi, a2
        mov eax, ghost
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_4633B0)(), sub_4633B0, 0x4633b0);
void sub_4633D0(CUnit *a1) {
    int address = 0x4633d0;
    __asm {
        mov eax, a1
        call address
    }
}
CUnit * j_secondaryOrd_Cloak(CUnit *result) {
    int address = 0x463410;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_463420)(), sub_463420, 0x463420);
u8 setPathingFromUnitElevation(CUnit *a1) {
    int address = 0x463470;
    u8 result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
DECL_FUNC(int (*setGroundBuildingPathing)(void), setGroundBuildingPathing, 0x4634e0);
int AI_OrderHeal(CUnit *a1, CUnit *a2) {
    int address = 0x463530;
    int result_;
    __asm {
        xor eax, eax
        mov esi, a2
        mov ebx, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(signed (__fastcall*liftoffCheck)(CUnit *a1, CUnit *a2), liftoffCheck, 0x4635b0);
void orders_nuke_paint(CUnit *unit) {
    int address = 0x463610;
    __asm {
        mov eax, unit
        call address
    }
}
void BuildingLiftoffIfLandingInterrupted(int a1) {
    int address = 0x463640;
    __asm {
        mov eax, a1
        call address
    }
}
void orders_MedicHeal2(CUnit *unit) {
    int address = 0x463740;
    __asm {
        mov edi, unit
        call address
    }
}
char orderReturnToIdle(CUnit *a1) {
    int address = 0x463770;
    char result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, al
    }
    return result_;
}
DECL_FUNC(void (__stdcall*orders_HealMove)(CUnit *unit), orders_HealMove, 0x4637b0);
void orders_Medic(CUnit *a1) {
    int address = 0x463900;
    __asm {
        mov eax, a1
        call address
    }
}
BOOL sub_463A10(UnitType a1, CUnit *a2) {
    int address = 0x463a10;
    BOOL result_;
    __asm {
        xor eax, eax
        xor ebx, ebx
        push dword ptr a2
        mov bx, a1
        call address
        mov result_, eax
    }
    return result_;
}
void orders_lift_off(CUnit *unit) {
    int address = 0x463ac0;
    __asm {
        mov eax, unit
        call address
    }
}
ButtonState doMedicHeal(CUnit *a1, CUnit *a2) {
    int address = 0x463c40;
    ButtonState result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void orders_scanner(CUnit *unit) {
    int address = 0x463d30;
    __asm {
        mov eax, unit
        call address
    }
}
void completeAddon(CUnit *a1, CUnit *a2) {
    int address = 0x463d50;
    __asm {
        mov edi, a2
        mov eax, a1
        call address
    }
}
char CheckCreateAddon(CUnit *a1) {
    int address = 0x463dd0;
    char result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
void orders_vulture_mine(CUnit *unit) {
    int address = 0x463df0;
    __asm {
        mov eax, unit
        call address
    }
}
DECL_FUNC(signed (__fastcall*SiegeTank_SelfDestructProc)(CUnit *a1, CUnit *a2), SiegeTank_SelfDestructProc, 0x463f90);
DECL_FUNC(int (__fastcall*Proc_UnitSelfDestructingCB)(CUnit *a1, CUnit *a2), Proc_UnitSelfDestructingCB, 0x463fc0);
void orders_MedicHoldPosition(CUnit *unit) {
    int address = 0x464050;
    __asm {
        mov esi, unit
        call address
    }
}
void orders_MedicHeal1(CUnit *unit) {
    int address = 0x464180;
    __asm {
        mov eax, unit
        call address
    }
}
BOOL SiegeTank_UnderBuilding_GlitchPrevention(CUnit *a1) {
    int address = 0x464290;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(CUnit * (__thiscall*DestroyUnitsUnderLandingSite)(CUnit *this_), DestroyUnitsUnderLandingSite, 0x464300);
void orders_BuildingLand(CUnit *unit) {
    int address = 0x464360;
    __asm {
        mov eax, unit
        call address
    }
}
void orders_nuke_launch(CUnit *unit) {
    int address = 0x464730;
    __asm {
        mov eax, unit
        call address
    }
}
void bldgLiftoff(CUnit *a1) {
    int address = 0x464930;
    __asm {
        mov eax, a1
        call address
    }
}
void orders_BuildingLiftoff(CUnit *unit) {
    int address = 0x4649b0;
    __asm {
        mov esi, unit
        call address
    }
}
void orders_TankMode(CUnit *unit) {
    int address = 0x464ae0;
    __asm {
        mov eax, unit
        call address
    }
}
void orders_SiegeMode(CUnit *unit) {
    int address = 0x464bd0;
    __asm {
        mov edi, unit
        call address
    }
}
void orders_NukeTrack(CUnit *unit) {
    int address = 0x464d10;
    __asm {
        mov ebx, unit
        call address
    }
}
void orders_PlaceScanner(CUnit *a1) {
    int address = 0x464e40;
    __asm {
        mov eax, a1
        call address
    }
}
void orders_PlaceMine(CUnit *unit) {
    int address = 0x464fd0;
    __asm {
        mov eax, unit
        call address
    }
}
DECL_FUNC(_DWORD (__stdcall*sub_465200)(_DWORD a1, _DWORD a2), sub_465200, 0x465200);
DECL_FUNC(char (__fastcall*getHangerTrainCount)(int a1, int a2), getHangerTrainCount, 0x465270);
DECL_FUNC(int (*Unit__GetHangerUnitType)(void), Unit__GetHangerUnitType, 0x465330);
DECL_FUNC(int (__thiscall*convertCurrentOrderToCarrierReaverFightOrder)(_DWORD a1), convertCurrentOrderToCarrierReaverFightOrder, 0x465360);
DECL_FUNC(Order (__thiscall*convertCurrentOrderToCarrierReaverIdleOrder)(CUnit *this_), convertCurrentOrderToCarrierReaverIdleOrder, 0x465390);
DECL_FUNC(char (__thiscall*getMaxHangerSpace)(CUnit *this_), getMaxHangerSpace, 0x4653d0);
DECL_FUNC(int (__thiscall*unitIsCarrierReaverSecondaryOrderState2)(CUnit *this_), unitIsCarrierReaverSecondaryOrderState2, 0x465450);
DECL_FUNC(_DWORD (__stdcall*isDistanceGreaterThanPathDistanceToOrderTarget)(_DWORD a1), isDistanceGreaterThanPathDistanceToOrderTarget, 0x465480);
DECL_FUNC(void (__stdcall*orders_ReaverStop)(CUnit *a1), orders_ReaverStop, 0x4654b0);
void returnAllInterceptors(CUnit *a1) {
    int address = 0x4655f0;
    __asm {
        mov eax, a1
        call address
    }
}
void orders_ReaverAttack1(CUnit *a1) {
    int address = 0x465690;
    __asm {
        mov eax, a1
        call address
    }
}
void setInterceptorsOnStandby(CUnit *a1) {
    int address = 0x465780;
    __asm {
        mov edi, a1
        call address
    }
}
signed returnInterceptorIfCannotAttack(CUnit *a1) {
    int address = 0x465810;
    signed result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void orders_carrier_stop(CUnit *unit) {
    int address = 0x465910;
    __asm {
        mov eax, unit
        call address
    }
}
void orders_CarrierAttack1(CUnit *a1) {
    int address = 0x465950;
    __asm {
        mov eax, a1
        call address
    }
}
signed carrierReaverIdle(CUnit *a1, int a2, int a3) {
    int address = 0x465a60;
    signed result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int getNextStrafePosition(CUnit *a1, unsigned __int8 a2, UnitDimentions a3) {
    int address = 0x465d30;
    int result_;
    __asm {
        xor eax, eax
        xor ecx, ecx
        push dword ptr a3
        mov cl, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void orders_StrafeUnit2(CUnit *unit) {
    int address = 0x465e00;
    __asm {
        mov eax, unit
        call address
    }
}
void orders_StrafeUnit(CUnit *a1) {
    int address = 0x465f60;
    __asm {
        mov eax, a1
        call address
    }
}
char killAllHangerUnits(CUnit *a1) {
    int address = 0x466170;
    char result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, al
    }
    return result_;
}
void sub_466270(CUnit *a1, CUnit *a2) {
    int address = 0x466270;
    __asm {
        mov ecx, a2
        mov eax, a1
        call address
    }
}
void addHangerUnit(CUnit *a1, CUnit *a2) {
    int address = 0x466300;
    __asm {
        mov esi, a2
        mov edi, a1
        call address
    }
}
void orders_return(CUnit *unit) {
    int address = 0x466350;
    __asm {
        mov eax, unit
        call address
    }
}
CUnit * sub_466440(CUnit *a1) {
    int address = 0x466440;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
void orders_Reaver(CUnit *unit) {
    int address = 0x4665d0;
    __asm {
        mov edi, unit
        call address
    }
}
void orders_Carrier(CUnit *unit) {
    int address = 0x4666a0;
    __asm {
        mov edi, unit
        call address
    }
}
void orders_carrier_ignore2(CUnit *unit) {
    int address = 0x466720;
    __asm {
        mov eax, unit
        call address
    }
}
void secondaryOrd_TrainFighter(CUnit *a1) {
    int address = 0x466790;
    __asm {
        mov eax, a1
        call address
    }
}
DECL_FUNC(_DWORD (__stdcall*setRallyPosition)(__int16 a1, __int16 a2), setRallyPosition, 0x466910);
DECL_FUNC(int (__thiscall*decrementRemainingBuildTime)(_WORD *this_), decrementRemainingBuildTime, 0x466940);
DECL_FUNC(int (*sub_466990)(), sub_466990, 0x466990);
DECL_FUNC(unsigned (__fastcall*getQueuedUnitCount)(int a1, CUnit *a2), getQueuedUnitCount, 0x4669b0);
int getRemainingBuildTimePercentage(CUnit *a1) {
    int address = 0x4669e0;
    int result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__thiscall*sub_466A30)(CUnit *this_), sub_466A30, 0x466a30);
void refundQueueSlot(signed int a1, CUnit *a2) {
    int address = 0x466a70;
    __asm {
        mov edi, a2
        mov eax, a1
        call address
    }
}
DECL_FUNC(int (__thiscall*setRallyUnit)(_DWORD a1), setRallyUnit, 0x466b40);
BOOL AIGetQueuedCount(CUnit *a1, int a2) {
    int address = 0x466b70;
    BOOL result_;
    __asm {
        xor eax, eax
        mov edi, a2
        mov ecx, a1
        call address
        mov result_, eax
    }
    return result_;
}
int getRepairInfo(CUnit *a1, int a2, int a3, int a4) {
    int address = 0x466d10;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a4
        push dword ptr a3
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
char refundLastSlot(int a1) {
    int address = 0x466e40;
    char result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
int refundAllQueueSlots(CUnit *a1) {
    int address = 0x466e80;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed verifyResources(int a1, int a2, int a3, int a4) {
    int address = 0x466ee0;
    signed result_;
    __asm {
        xor eax, eax
        push dword ptr a4
        mov esi, a3
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__thiscall*orderNewUnitToFollowRallyDirective)(_DWORD a1), orderNewUnitToFollowRallyDirective, 0x466f50);
signed ord_repair_subtract(int a1, CUnit *a2) {
    int address = 0x466fb0;
    signed result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed sub_467030(CUnit *a1) {
    int address = 0x467030;
    signed result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void orders_ResetCollision1(CUnit *unit) {
    int address = 0x4671b0;
    __asm {
        mov eax, unit
        call address
    }
}
signed HasMoneyCanMake(int a1, CUnit *a2, UnitType a3) {
    int address = 0x467250;
    signed result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        mov edi, a2
        mov ecx, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed sub_4672F0(CUnit *a1, int a2, UnitType a3, char a4, int a5) {
    int address = 0x4672f0;
    signed result_;
    __asm {
        xor eax, eax
        push dword ptr a5
        push dword ptr a4
        push dword ptr a3
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void SetUnitHp(CUnit *unit, signed int a2) {
    int address = 0x467340;
    __asm {
        mov ecx, a2
        mov eax, unit
        call address
    }
}
char sub_4673C0(CUnit *a1, int a2) {
    int address = 0x4673c0;
    char result_;
    __asm {
        xor eax, eax
        mov edx, a2
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
void orders_Repair1(CUnit *unit) {
    int address = 0x4673d0;
    __asm {
        mov eax, unit
        call address
    }
}
void orders_TerranBuildSelf(CUnit *unit) {
    int address = 0x467760;
    __asm {
        mov eax, unit
        call address
    }
}
CUnit * CreateUnitOnGeyser(CUnit *a1, unsigned __int8 a2) {
    int address = 0x4678a0;
    CUnit * result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int buildingAddon(CUnit *a1, int a2, int a3) {
    int address = 0x4679a0;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        mov edx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void orders_SCVBuild2(CUnit *unit) {
    int address = 0x467a70;
    __asm {
        mov eax, unit
        call address
    }
}
DECL_FUNC(void (__stdcall*orders_SCVBuild)(CUnit *unit), orders_SCVBuild, 0x467fd0);
CUnit * attemptTrainHatchUnit(UnitType unit_type, CUnit *a2, int a3) {
    int address = 0x468200;
    CUnit * result_;
    __asm {
        xor eax, eax
        xor edi, edi
        push dword ptr a3
        mov esi, a2
        mov di, unit_type
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__thiscall*Base_CancelStructure)(CUnit *unit), Base_CancelStructure, 0x468280);
void sub_468670(CUnit *unit) {
    int address = 0x468670;
    __asm {
        mov eax, unit
        call address
    }
}
_DWORD * sub_4686D0(_DWORD *result, int a2) {
    int address = 0x4686d0;
    _DWORD * result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_468730)(), sub_468730, 0x468730);
_DWORD * sub_468770(int a1) {
    int address = 0x468770;
    _DWORD * result_;
    __asm {
        xor eax, eax
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_4687F0)(), sub_4687F0, 0x4687f0);
DECL_FUNC(int (*sub_468800)(), sub_468800, 0x468800);
void setResourceCount(CUnit *this_) {
    int address = 0x468830;
    __asm {
        mov ecx, this_
        call address
    }
}
BOOL unit_isMineralField(CUnit *a1) {
    int address = 0x468890;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
BOOL UnitIsGasBuilding(CUnit *a1) {
    int address = 0x4688b0;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
BOOL UnitIsResource(CUnit *unit) {
    int address = 0x4688e0;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, unit
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_468910)(), sub_468910, 0x468910);
DECL_FUNC(BOOL (__thiscall*unit_isGeyserUnitEx)(CUnit *this_, CUnit *a2), unit_isGeyserUnitEx, 0x468930);
CUnit * sub_468970(int a1) {
    int address = 0x468970;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov ebx, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_468A20)(), sub_468A20, 0x468a20);
DECL_FUNC(CUnit * (__thiscall*sub_468A60)(CUnit *this_), sub_468A60, 0x468a60);
void setGatheringFlags(CUnit *a1) {
    int address = 0x468aa0;
    __asm {
        mov eax, a1
        call address
    }
}
DECL_FUNC(BOOL (__stdcall*sub_468B00)(CUnit *a1, CUnit *a2, Position *a3, Position a4), sub_468B00, 0x468b00);
signed sub_468C70(CUnit *a1, CUnit *a2) {
    int address = 0x468c70;
    signed result_;
    __asm {
        xor eax, eax
        mov edi, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void sub_468D10(CUnit *a1, CUnit *a2) {
    int address = 0x468d10;
    __asm {
        mov ecx, a2
        mov eax, a1
        call address
    }
}
char sub_468DB0(CUnit *a1) {
    int address = 0x468db0;
    char result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, al
    }
    return result_;
}
CUnit * sub_468E40(CUnit *result, int a2) {
    int address = 0x468e40;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
void orders_HarvestOreInterrupted(CUnit *unit) {
    int address = 0x468e80;
    __asm {
        mov esi, unit
        call address
    }
}
void orders_HarvestWTF(CUnit *unit) {
    int address = 0x468ed0;
    __asm {
        mov eax, unit
        call address
    }
}
char sub_468EF0(CUnit *nextGatherer, CUnit *a2) {
    int address = 0x468ef0;
    char result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, nextGatherer
        call address
        mov result_, al
    }
    return result_;
}
void orders_CanHarvestMinerals(CUnit *a1) {
    int address = 0x468f60;
    __asm {
        mov eax, a1
        call address
    }
}
void orders_enter_gas(CUnit *unit) {
    int address = 0x469000;
    __asm {
        mov eax, unit
        call address
    }
}
void orders_return_resource(CUnit *unit) {
    int address = 0x4690c0;
    __asm {
        mov eax, unit
        call address
    }
}
void orders_MoveToHarvestMinerals(CUnit *unit) {
    int address = 0x469240;
    __asm {
        mov eax, unit
        call address
    }
}
void orders_harvest(CUnit *unit) {
    int address = 0x469500;
    __asm {
        mov eax, unit
        call address
    }
}
char CheckDepletedGas(CUnit *a1, char a2, int a3, int a4) {
    int address = 0x469650;
    char result_;
    __asm {
        xor eax, eax
        xor ecx, ecx
        mov ebx, a4
        mov edx, a3
        mov cl, a2
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
char sub_4696D0(CUnit *a1, CUnit *a2, int a3) {
    int address = 0x4696d0;
    char result_;
    __asm {
        xor eax, eax
        mov edx, a3
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
void orders_HarvestingMinerals(CUnit *a1) {
    int address = 0x4697c0;
    __asm {
        mov eax, a1
        call address
    }
}
void orders_EnterExitGas(CUnit *a1) {
    int address = 0x469980;
    __asm {
        mov eax, a1
        call address
    }
}
unsigned finderIdxFromValue_binary_search(int a1, UnitFinderData *a2, int a3) {
    int address = 0x469b00;
    unsigned result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        mov edi, a2
        mov edx, a1
        call address
        mov result_, eax
    }
    return result_;
}
BOOL isUnitInBoundsOfOtherUnit(int a1, int a2) {
    int address = 0x469b60;
    BOOL result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*nullsub_28)(), nullsub_28, 0x469be0);
DECL_FUNC(UnitDimentions * (*sub_469BF0)(), sub_469BF0, 0x469bf0);
int assignUnitSorting_Y(int result, int a2, int a3) {
    int address = 0x469c20;
    int result_;
    __asm {
        xor eax, eax
        mov ecx, a3
        mov edx, a2
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
int assignUnitSorting_X(int result, int a2, int a3) {
    int address = 0x469c90;
    int result_;
    __asm {
        xor eax, eax
        mov ecx, a3
        mov edx, a2
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
void * SortTopBottom(void *result, int a2, int a3) {
    int address = 0x469d00;
    void * result_;
    __asm {
        xor eax, eax
        mov edi, a3
        mov ebx, a2
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
void * sortLeftRight(void *result, signed int a2, UnitFinderData *a3) {
    int address = 0x469d70;
    void * result_;
    __asm {
        xor eax, eax
        mov edi, a3
        mov ebx, a2
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
char * setUnitSorting_Y(char *result, int a2, int a3) {
    int address = 0x469de0;
    char * result_;
    __asm {
        xor eax, eax
        mov edi, a3
        mov ebx, a2
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
void * setUnitSorting_X(void *result, UnitFinderData *a2, int a3) {
    int address = 0x469e50;
    void * result_;
    __asm {
        xor eax, eax
        mov edi, a3
        mov ebx, a2
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
void updateBuildingLandFog2(CUnit *unit, __int16 x, __int16 y) {
    int address = 0x469ec0;
    __asm {
        push dword ptr y
        push dword ptr x
        mov eax, unit
        call address
    }
}
void sub_469F40(CUnit *a1) {
    int address = 0x469f40;
    __asm {
        mov eax, a1
        call address
    }
}
void updateBuildingLandFog(CUnit *a1, __int16 x, __int16 y) {
    int address = 0x469f60;
    __asm {
        push dword ptr y
        push dword ptr x
        mov eax, a1
        call address
    }
}
void sub_469FE0(CUnit *a1) {
    int address = 0x469fe0;
    __asm {
        mov eax, a1
        call address
    }
}
int updateUnitSortingInfo(int result, CUnit *a2, int a3) {
    int address = 0x46a000;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        mov esi, a2
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
signed sortUnit(CUnit *a1) {
    int address = 0x46a300;
    signed result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
unsigned updateUnitOrderFinder(CUnit *a1) {
    int address = 0x46a3a0;
    unsigned result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
void updateUnitSorting(CUnit *a1) {
    int address = 0x46a560;
    __asm {
        mov eax, a1
        call address
    }
}
void sub_46A5A0(CUnit *a1) {
    int address = 0x46a5a0;
    __asm {
        mov eax, a1
        call address
    }
}
DECL_FUNC(int (__cdecl*UMHidden)(), UMHidden, 0x46a5e0);
DECL_FUNC(int (*sub_46A5F0)(), sub_46A5F0, 0x46a5f0);
CUnit * sub_46A600(CUnit *result) {
    int address = 0x46a600;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
CUnit * sub_46A620(CUnit *result, char a2) {
    int address = 0x46a620;
    CUnit * result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
int UMScoutFree(CUnit *a1) {
    int address = 0x46a630;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed UMAtMoveTarget(CUnit *a1) {
    int address = 0x46a640;
    signed result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int UMInitSeq(CUnit *a1) {
    int address = 0x46a690;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void UMFailedPath(CUnit *this_) {
    int address = 0x46a6b0;
    __asm {
        mov ecx, this_
        call address
    }
}
DECL_FUNC(int (__thiscall*sub_46A700)(CUnit *this_), sub_46A700, 0x46a700);
int sub_46A720(CUnit *a1) {
    int address = 0x46a720;
    int result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(char (__thiscall*sub_46A740)(CUnit *this_), sub_46A740, 0x46a740);
DECL_FUNC(int (*setArchonWarpPathing)(void), setArchonWarpPathing, 0x46a820);
signed UMForceMoveFree(CUnit *a1) {
    int address = 0x46a850;
    signed result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed UMDormant(CUnit *a1) {
    int address = 0x46a8d0;
    signed result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int DestinationAndCollisionCheck(CUnit *a1, int a2) {
    int address = 0x46a940;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed UMSlidePrep(CUnit *a1) {
    int address = 0x46aa20;
    signed result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed UMNewMoveTarget(CUnit *a1) {
    int address = 0x46aab0;
    signed result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed UMUIOrderDelay(CUnit *a1) {
    int address = 0x46aae0;
    signed result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(signed (__stdcall*UMScoutPath)(CUnit *unit), UMScoutPath, 0x46ab10);
signed UMFaceTarget(CUnit *a1) {
    int address = 0x46ac60;
    signed result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
int UMBunker(CUnit *unit) {
    int address = 0x46acf0;
    int result_;
    __asm {
        xor eax, eax
        mov eax, unit
        call address
        mov result_, eax
    }
    return result_;
}
int UMBldgTurret(CUnit *unit) {
    int address = 0x46ad40;
    int result_;
    __asm {
        xor eax, eax
        mov eax, unit
        call address
        mov result_, eax
    }
    return result_;
}
signed MoveUnit_Partial(CUnit *unit) {
    int address = 0x46ad90;
    signed result_;
    __asm {
        xor eax, eax
        mov eax, unit
        call address
        mov result_, eax
    }
    return result_;
}
signed UMTerrainSlide(CUnit *unit) {
    int address = 0x46ae20;
    signed result_;
    __asm {
        xor eax, eax
        mov esi, unit
        call address
        mov result_, eax
    }
    return result_;
}
signed UMFixTerrain(CUnit *a1) {
    int address = 0x46af00;
    signed result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed UMSlideFree(CUnit *a1) {
    int address = 0x46b000;
    signed result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed UMWaitFree(CUnit *a1) {
    int address = 0x46b220;
    signed result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int UMMoveToLegal(CUnit *a1) {
    int address = 0x46b360;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int UMFlyer(CUnit *a1) {
    int address = 0x46b400;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void sub_46B500(CUnit *a1) {
    int address = 0x46b500;
    __asm {
        mov eax, a1
        call address
    }
}
signed UMGetFree(CUnit *a1) {
    int address = 0x46b5b0;
    signed result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed UMLumpWannabe(CUnit *a1) {
    int address = 0x46b700;
    signed result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed UMAtRest(CUnit *a1) {
    int address = 0x46b790;
    signed result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed UMFollowPath(CUnit *a1) {
    int address = 0x46b950;
    signed result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int sub_46BBA0(CUnit *a1) {
    int address = 0x46bba0;
    int result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed UMRepathMovers(CUnit *unit) {
    int address = 0x46bbc0;
    signed result_;
    __asm {
        xor eax, eax
        mov eax, unit
        call address
        mov result_, eax
    }
    return result_;
}
signed UMRepath(CUnit *unit) {
    int address = 0x46bc30;
    signed result_;
    __asm {
        xor eax, eax
        mov eax, unit
        call address
        mov result_, eax
    }
    return result_;
}
signed UMTurnAndStart(CUnit *unit) {
    int address = 0x46bcc0;
    signed result_;
    __asm {
        xor eax, eax
        mov eax, unit
        call address
        mov result_, eax
    }
    return result_;
}
signed UMStartPath(CUnit *unit) {
    int address = 0x46bd90;
    signed result_;
    __asm {
        xor eax, eax
        mov esi, unit
        call address
        mov result_, eax
    }
    return result_;
}
signed UMCheckIllegal(CUnit *a1) {
    int address = 0x46bdf0;
    signed result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
int UMTurret(CUnit *unit) {
    int address = 0x46be80;
    int result_;
    __asm {
        xor eax, eax
        mov eax, unit
        call address
        mov result_, eax
    }
    return result_;
}
void SetMoveTarget_unit(CUnit *a1) {
    int address = 0x46bf00;
    __asm {
        mov eax, a1
        call address
    }
}
signed UMFixCollision(CUnit *a1) {
    int address = 0x46bf60;
    signed result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed UMRetryPath(CUnit *unit) {
    int address = 0x46c2d0;
    signed result_;
    __asm {
        xor eax, eax
        mov esi, unit
        call address
        mov result_, eax
    }
    return result_;
}
signed UMInitialize(CUnit *unit) {
    int address = 0x46c320;
    signed result_;
    __asm {
        xor eax, eax
        mov esi, unit
        call address
        mov result_, eax
    }
    return result_;
}
void Unit_ExecPathingState(CUnit *a1) {
    int address = 0x46c480;
    __asm {
        mov eax, a1
        call address
    }
}
DECL_FUNC(int (__fastcall*sub_46C6E0)(dialog *this_, int x, int y, rect *a4), sub_46C6E0, 0x46c6e0);
DECL_FUNC(void (__fastcall*waitLoop)(dialog *a1, __int16 a2), waitLoop, 0x46c750);
void sub_46C770(int a1) {
    int address = 0x46c770;
    __asm {
        mov eax, a1
        call address
    }
}
DECL_FUNC(signed (__stdcall*AddBriefingTrigger)(BriefingEntry *a1), AddBriefingTrigger, 0x46c790);
DECL_FUNC(void (__fastcall*BRF_RectLoop2)(dialog *dlg, __int16 timer_id), BRF_RectLoop2, 0x46c940);
DECL_FUNC(void (__fastcall*BRF_RectLoop1)(dialog *a1, __int16 a2), BRF_RectLoop1, 0x46c960);
DECL_FUNC(void (__fastcall*textScrollLoop)(dialog *a1, __int16 a2), textScrollLoop, 0x46c990);
DECL_FUNC(void (*CreateSkipTutorialButton)(), CreateSkipTutorialButton, 0x46c9c0);
DECL_FUNC(void (__fastcall*HidePortrait)(unsigned __int8 a1), HidePortrait, 0x46ca30);
DECL_FUNC(void (__stdcall*sub_46CA90)(dialog *a1), sub_46CA90, 0x46ca90);
DECL_FUNC(void (__stdcall*sub_46CBC0)(dialog *a1), sub_46CBC0, 0x46cbc0);
DECL_FUNC(void (*updateMissionObjectives)(), updateMissionObjectives, 0x46cd30);
void BRF_displayText(char *text, unsigned int a2) {
    int address = 0x46cdd0;
    __asm {
        push dword ptr a2
        mov eax, text
        call address
    }
}
DECL_FUNC(void (__fastcall*ShowPortrait)(unsigned __int8 a1, int a2, UnitType unit_type), ShowPortrait, 0x46cf30);
void briefingFramesCleanup(dialog *a1) {
    int address = 0x46cfd0;
    __asm {
        mov eax, a1
        call address
    }
}
DECL_FUNC(void (__fastcall*SpeakingPortrait)(unsigned __int8 a1, int a2, int a3), SpeakingPortrait, 0x46d040);
void BriefingStart(dialog *a1, int a2) {
    int address = 0x46d090;
    __asm {
        push dword ptr a2
        mov edi, a1
        call address
    }
}
int sub_46D160(dialog *dlg) {
    int address = 0x46d160;
    int result_;
    __asm {
        xor eax, eax
        mov eax, dlg
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__fastcall*MissionBriefingLoop)(dialog *dlg, __int16 a2), MissionBriefingLoop, 0x46d1b0);
DECL_FUNC(void (*sub_46D1F0)(), sub_46D1F0, 0x46d1f0);
DECL_FUNC(void (__stdcall*sub_46D200)(MusicTrack a1), sub_46D200, 0x46d200);
void sub_46D220(dialog *a1) {
    int address = 0x46d220;
    __asm {
        mov eax, a1
        call address
    }
}
DECL_FUNC(bool (__fastcall*sub_46D340)(dialog *this_), sub_46D340, 0x46d340);
void sub_46D3C0(dialog *dlg) {
    int address = 0x46d3c0;
    __asm {
        mov edi, dlg
        call address
    }
}
DECL_FUNC(__int16 * (*parseOrdersDatReqs)(), parseOrdersDatReqs, 0x46d450);
DECL_FUNC(void (__cdecl*parseTechUseData)(), parseTechUseData, 0x46d4c0);
DECL_FUNC(__int16 * (*parseTechResearchData)(), parseTechResearchData, 0x46d530);
DECL_FUNC(__int16 * (*parseUpgradeData)(), parseUpgradeData, 0x46d5a0);
ButtonState parseRequirementOpcodes(__int16 a1, CUnit *a2, Tech2 a3, int a4, int a5) {
    int address = 0x46d610;
    ButtonState result_;
    __asm {
        xor eax, eax
        push dword ptr a5
        push dword ptr a4
        push dword ptr a3
        mov esi, a2
        mov ax, a1
        call address
        mov result_, eax
    }
    return result_;
}
ButtonState OrderAllowed(CUnit *a1, unsigned __int16 order, int a3) {
    int address = 0x46dc20;
    ButtonState result_;
    __asm {
        xor eax, eax
        xor ebx, ebx
        push dword ptr a3
        mov bx, order
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
ButtonState CanUseTech(CUnit *unit, Tech2 tech_id, int player_id) {
    int address = 0x46dd80;
    ButtonState result_;
    __asm {
        xor eax, eax
        xor edi, edi
        push dword ptr player_id
        mov di, tech_id
        mov eax, unit
        call address
        mov result_, eax
    }
    return result_;
}
ButtonState ReasearchAllowed(Tech2 tech, int a2, CUnit *unit) {
    int address = 0x46de90;
    ButtonState result_;
    __asm {
        xor eax, eax
        xor ebx, ebx
        push dword ptr unit
        mov edi, a2
        mov bx, tech
        call address
        mov result_, eax
    }
    return result_;
}
ButtonState UpgradeAllowed(Tech2 tech, int player_id, CUnit *unit) {
    int address = 0x46dfc0;
    ButtonState result_;
    __asm {
        xor eax, eax
        xor ebx, ebx
        push dword ptr unit
        mov edi, player_id
        mov bx, tech
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_46E0E0)(), sub_46E0E0, 0x46e0e0);
int sub_46E0F0(int result) {
    int address = 0x46e0f0;
    int result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(unsigned (*parseUnitsDatReqs)(), parseUnitsDatReqs, 0x46e100);
__int16 TTBaseUnitType(int a1) {
    int address = 0x46e170;
    __int16 result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, ax
    }
    return result_;
}
ButtonState TTAllowed(UnitType unit_type, CUnit *a2, int player_id) {
    int address = 0x46e1c0;
    ButtonState result_;
    __asm {
        xor eax, eax
        push dword ptr player_id
        mov esi, a2
        mov ax, unit_type
        call address
        mov result_, eax
    }
    return result_;
}
unsigned CHK_PerformVCODcheck(PlayerInfo *lobby_players, unsigned int a2, int a3, signed int a4) {
    int address = 0x46e740;
    unsigned result_;
    __asm {
        xor eax, eax
        push dword ptr a4
        mov ebx, a3
        mov ecx, a2
        mov edx, lobby_players
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*nullsub_29)(), nullsub_29, 0x46e900);
DECL_FUNC(int (*nullsub_30)(), nullsub_30, 0x46e910);
DECL_FUNC(int (*sub_46E920)(), sub_46E920, 0x46e920);
DECL_FUNC(int (*sub_46E990)(), sub_46E990, 0x46e990);
DECL_FUNC(int (*nullsub_31)(), nullsub_31, 0x46ea10);
DECL_FUNC(int (*sub_46EA20)(), sub_46EA20, 0x46ea20);
DECL_FUNC(int (*nullsub_32)(), nullsub_32, 0x46ea60);
DECL_FUNC(signed (__stdcall*loadSaiPaths)(int a1), loadSaiPaths, 0x46ea70);
signed prepContourInfoForSaving(BYTE *a1) {
    int address = 0x46ec40;
    signed result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_46ED60)(), sub_46ED60, 0x46ed60);
signed unit_isUnselectable(__int16 a1) {
    int address = 0x46ed80;
    signed result_;
    __asm {
        xor eax, eax
        mov ax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(BOOL (*sub_46EE70)(), sub_46EE70, 0x46ee70);
DECL_FUNC(void (__cdecl*refreshDragSelectBox)(), refreshDragSelectBox, 0x46eeb0);
DECL_FUNC(void (__fastcall*input_dragSelect_MouseMove)(dlgEvent *this_), input_dragSelect_MouseMove, 0x46eef0);
DECL_FUNC(void (__cdecl*DisableDragSelect)(), DisableDragSelect, 0x46efa0);
void getTargettingErrorString(int a1, int a2, CUnit *a3) {
    int address = 0x46efe0;
    __asm {
        mov ecx, a3
        mov edx, a2
        mov eax, a1
        call address
    }
}
CUnit * sub_46F040(int a1, CUnit **a2, CUnit *a3, CUnit *a4) {
    int address = 0x46f040;
    CUnit * result_;
    __asm {
        xor eax, eax
        push dword ptr a4
        push dword ptr a3
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(signed (__stdcall*SortAllUnits)(CUnit **a1, CUnit **a2, CUnit *a3), SortAllUnits, 0x46f0f0);
int sub_46F290(CUnit **a1, CUnit **a2, int a3, CUnit *a4) {
    int address = 0x46f290;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a4
        push dword ptr a3
        push dword ptr a2
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
int sub_46F380(int a1, int a2, CUnit *a3) {
    int address = 0x46f380;
    int result_;
    __asm {
        xor eax, eax
        mov esi, a3
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(CUnit * (__stdcall*FindUnitAtPoint)(int x, int y), FindUnitAtPoint, 0x46f3a0);
void sub_46F5B0(int x, int y, CUnit *unit, signed int a4) {
    int address = 0x46f5b0;
    __asm {
        push dword ptr a4
        push dword ptr unit
        push dword ptr y
        push dword ptr x
        call address
    }
}
void UI_doSelectUnits_IfAltNotHeld(CUnit **a1, int a2, char a3, int a4) {
    int address = 0x46fa00;
    __asm {
        push dword ptr a4
        push dword ptr a3
        mov edi, a2
        mov ebx, a1
        call address
    }
}
DECL_FUNC(void (__stdcall*getSelectedUnitsInBox)(Box16 *box), getSelectedUnitsInBox, 0x46fa40);
DECL_FUNC(void (__fastcall*getSelectedUnitsAtPoint)(int a1, int a2), getSelectedUnitsAtPoint, 0x46fb40);
DECL_FUNC(void (__fastcall*input_dragSelect_MouseBtnUp)(dlgEvent *a1), input_dragSelect_MouseBtnUp, 0x46fea0);
DECL_FUNC(void (__fastcall*input_Game_LeftMouseClick)(dlgEvent *a1), input_Game_LeftMouseClick, 0x46ff70);
DECL_FUNC(void (__cdecl*BWFXN_drawDragSelBox)(), BWFXN_drawDragSelBox, 0x470040);
DECL_FUNC(int (*sub_4700A0)(), sub_4700A0, 0x4700a0);
DECL_FUNC(int (*sub_4700B0)(), sub_4700B0, 0x4700b0);
int sub_4700C0(int a1, unsigned __int8 a2, u8 a3) {
    int address = 0x4700c0;
    int result_;
    __asm {
        xor eax, eax
        xor edx, edx
        xor ecx, ecx
        mov cl, a3
        mov dl, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_470100)(), sub_470100, 0x470100);
DECL_FUNC(PlayerInfo * (*sub_470120)(), sub_470120, 0x470120);
DECL_FUNC(PlayerInfo * (*updatePlayerOwnerInternal)(), updatePlayerOwnerInternal, 0x470150);
void bootPlayer(int result, int a2) {
    int address = 0x470180;
    __asm {
        push dword ptr a2
        mov eax, result
        call address
        add esp, 4
    }
}
DECL_FUNC(char (__thiscall*ForceNameTransfer)(const char *this_, int a2), ForceNameTransfer, 0x4701a0);
DECL_FUNC(void (__thiscall*LOBSEND_0x50)(unsigned int playerID), LOBSEND_0x50, 0x470210);
void LOBSEND_DataRequest(int a1) {
    int address = 0x470250;
    __asm {
        mov eax, a1
        call address
    }
}
DECL_FUNC(void (__stdcall*LOBSEND_ForceNames)(unsigned int playerID), LOBSEND_ForceNames, 0x470290);
void LOBSEND_PlayerForceData(unsigned int a1) {
    int address = 0x470310;
    __asm {
        mov esi, a1
        call address
    }
}
DECL_FUNC(void (__stdcall*LOBSEND_SendMapData)(const void *a1, unsigned int a2, unsigned __int8 a3), LOBSEND_SendMapData, 0x470400);
void LOBSEND_BootPlayer(char a1, int a2, unsigned int a3) {
    int address = 0x470480;
    __asm {
        xor eax, eax
        mov esi, a3
        mov ecx, a2
        mov al, a1
        call address
    }
}
DECL_FUNC(void (__fastcall*lobbyChat_4D)(unsigned __int8 a1, int a2, int a3), lobbyChat_4D, 0x470520);
void LOBSEND_0x4D(unsigned __int8 a1, const char *a2) {
    int address = 0x4705d0;
    __asm {
        xor ebx, ebx
        push dword ptr a2
        mov bl, a1
        call address
    }
}
void lobbyChat_4C(int result, int a2) {
    int address = 0x4706d0;
    __asm {
        push dword ptr a2
        mov eax, result
        call address
    }
}
char onPlayerJoin(int a1, int a2) {
    int address = 0x470720;
    char result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
void BWFXN_SendLobbyCallTarget(const char *a1) {
    int address = 0x4707d0;
    __asm {
        mov edi, a1
        call address
    }
}
DECL_FUNC(int (__stdcall*playerForceDataTransfer)(int data, int net_player), playerForceDataTransfer, 0x470840);
DECL_FUNC(signed (*LobbyRecv)(), LobbyRecv, 0x470a30);
DECL_FUNC(__int16 (__thiscall*sub_470BB0)(_WORD *this_), sub_470BB0, 0x470bb0);
__int16 sub_470BC0(__int16 result) {
    int address = 0x470bc0;
    __int16 result_;
    __asm {
        xor eax, eax
        mov ax, result
        call address
        mov result_, ax
    }
    return result_;
}
DECL_FUNC(void (*sub_470BD0)(), sub_470BD0, 0x470bd0);
char * getPlayerName(unsigned __int8 player) {
    int address = 0x470be0;
    char * result_;
    __asm {
        xor eax, eax
        mov al, player
        call address
        mov result_, eax
    }
    return result_;
}
int getPlayerFlags(unsigned __int8 a1, _WORD *a2) {
    int address = 0x470c00;
    int result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov al, a1
        call address
        mov result_, eax
    }
    return result_;
}
int sub_470C30(unsigned __int8 a1, __int16 a2) {
    int address = 0x470c30;
    int result_;
    __asm {
        xor eax, eax
        xor ecx, ecx
        mov cx, a2
        mov al, a1
        call address
        mov result_, eax
    }
    return result_;
}
int sub_470C40(unsigned __int8 a1, _WORD *a2, _WORD *a3, _WORD *a4) {
    int address = 0x470c40;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a4
        push dword ptr a3
        mov edx, a2
        mov al, a1
        call address
        mov result_, eax
    }
    return result_;
}
BOOL sub_470C90(unsigned __int8 a1) {
    int address = 0x470c90;
    BOOL result_;
    __asm {
        xor eax, eax
        mov al, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*isValidSlot)(void), isValidSlot, 0x470cb0);
int sub_470CE0(unsigned __int8 a1) {
    int address = 0x470ce0;
    int result_;
    __asm {
        xor eax, eax
        mov al, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_470CF0)(), sub_470CF0, 0x470cf0);
DECL_FUNC(BOOL (__stdcall*SetPlayerData)(unsigned __int8 a1, __int16 a2, __int16 a3, __int16 a4), SetPlayerData, 0x470d10);
DECL_FUNC(_BYTE * (*sub_470D80)(), sub_470D80, 0x470d80);
DECL_FUNC(_BYTE * (__stdcall*swapPlayers)(char a1, char a2), swapPlayers, 0x470db0);
DECL_FUNC(_BYTE * (__stdcall*SetSlotOwner)(char a1, char a2), SetSlotOwner, 0x470df0);
_BYTE * sub_470E30(char a1) {
    int address = 0x470e30;
    _BYTE * result_;
    __asm {
        xor eax, eax
        xor ebx, ebx
        mov bl, a1
        call address
        mov result_, eax
    }
    return result_;
}
int sub_470E60(char a1) {
    int address = 0x470e60;
    int result_;
    __asm {
        xor eax, eax
        xor ebx, ebx
        mov bl, a1
        call address
        mov result_, eax
    }
    return result_;
}
_BYTE * sub_470EA0(unsigned __int8 a1, char a2) {
    int address = 0x470ea0;
    _BYTE * result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov al, a1
        call address
        mov result_, eax
    }
    return result_;
}
int createUnknownConfirmationBuffer(int player) {
    int address = 0x470ef0;
    int result_;
    __asm {
        xor eax, eax
        mov eax, player
        call address
        mov result_, eax
    }
    return result_;
}
_BYTE * createGameSlotModBuffer(PlayerInfo *a1) {
    int address = 0x470f90;
    _BYTE * result_;
    __asm {
        xor eax, eax
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
void createMapDownloadPercentBuffer(char a1) {
    int address = 0x471010;
    __asm {
        xor ebx, ebx
        mov bl, a1
        call address
    }
}
DECL_FUNC(_BYTE * (*sub_471050)(), sub_471050, 0x471050);
DECL_FUNC(char (*sub_471080)(), sub_471080, 0x471080);
char sub_471090(char result) {
    int address = 0x471090;
    char result_;
    __asm {
        xor eax, eax
        mov al, result
        call address
        mov result_, al
    }
    return result_;
}
DECL_FUNC(void (__cdecl*clearGameNextMenu)(), clearGameNextMenu, 0x4710b0);
DECL_FUNC(void (*sub_471260)(), sub_471260, 0x471260);
DECL_FUNC(int (*CreateGameInitBuffer)(), CreateGameInitBuffer, 0x471270);
DECL_FUNC(_BYTE * (__stdcall*RECV_raceChange)(int a1, int a2), RECV_raceChange, 0x471300);
void RECV_PlayerVersion(int a1, int a2) {
    int address = 0x4713e0;
    __asm {
        push dword ptr a2
        mov edx, a1
        call address
        add esp, 4
    }
}
void RECV_GameSlotMod(int a1, int a2) {
    int address = 0x471460;
    __asm {
        mov ecx, a2
        mov eax, a1
        call address
    }
}
void RECV_SlotChange(int a1, int a2) {
    int address = 0x471570;
    __asm {
        push dword ptr a2
        mov ebx, a1
        call address
    }
}
DECL_FUNC(char (__stdcall*RECV_ForceChangeUMS)(int a1, int a2), RECV_ForceChangeUMS, 0x471670);
DECL_FUNC(char (__thiscall*RECV_ForceChangeMelee)(int this_, int a2), RECV_ForceChangeMelee, 0x471750);
void sub_471840(int a1) {
    int address = 0x471840;
    __asm {
        mov eax, a1
        call address
    }
}
unsigned RECV_SwapPlayers(int a1, int a2) {
    int address = 0x471860;
    unsigned result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov ebx, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__cdecl*ProgressCountdown)(), ProgressCountdown, 0x4719d0);
DECL_FUNC(void (__cdecl*JoinGame)(), JoinGame, 0x471a50);
int sub_471CD0(int a1, int result) {
    int address = 0x471cd0;
    int result_;
    __asm {
        xor eax, eax
        mov eax, result
        mov ecx, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__fastcall*versionCheck)(int a1, char a2, int a3, int a4, int a5), versionCheck, 0x471d00);
DECL_FUNC(BOOL (__stdcall*createVersionBuffer)(__int16 net_player_flags, __int16 net_player_x4, __int16 protocol_version, char save_player_unique_id, char save_player_id, int save_hash, BOOL create), createVersionBuffer, 0x471fb0);
DECL_FUNC(void (__thiscall*RECV_StartGame)(int ecx0, int a2), RECV_StartGame, 0x472060);
void RECV_SetRandomSeed(signed int a1, struct_v2 *a2) {
    int address = 0x472110;
    __asm {
        mov edx, a2
        mov eax, a1
        call address
    }
}
DECL_FUNC(int (*sub_4721E0)(), sub_4721E0, 0x4721e0);
DECL_FUNC(int (__fastcall*replaceNewlines)(_DWORD a1, _DWORD a2), replaceNewlines, 0x472210);
DECL_FUNC(int (*hex_to_int)(), hex_to_int, 0x472260);
DECL_FUNC(int (__stdcall*sub_4722C0)(char *buff), sub_4722C0, 0x4722c0);
void sub_472300(char *a1, int a2, size_t a3) {
    int address = 0x472300;
    __asm {
        push dword ptr a3
        mov ebx, a2
        mov eax, a1
        call address
    }
}
DECL_FUNC(int (*sub_472500)(), sub_472500, 0x472500);
DECL_FUNC(int (__thiscall*sub_472570)(_DWORD a1), sub_472570, 0x472570);
DECL_FUNC(int (*sub_472720)(), sub_472720, 0x472720);
DECL_FUNC(int (*sub_472750)(), sub_472750, 0x472750);
void initializeProviderVersion(SNETPROGRAMDATA *a1) {
    int address = 0x472770;
    __asm {
        mov esi, a1
        call address
    }
}
int isPlayerBanned(const char *a1) {
    int address = 0x472800;
    int result_;
    __asm {
        xor eax, eax
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__stdcall*Ban_Constructor)(char *source), Ban_Constructor, 0x472840);
DECL_FUNC(void (*sub_4728E0)(), sub_4728E0, 0x4728e0);
DECL_FUNC(void (*sub_4728F0)(), sub_4728F0, 0x4728f0);
void dataXFer_0x06(DownloadListMaybe *result) {
    int address = 0x472900;
    __asm {
        mov eax, result
        call address
    }
}
int sub_472940(int a1) {
    int address = 0x472940;
    int result_;
    __asm {
        xor eax, eax
        mov ebx, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_4729E0)(), sub_4729E0, 0x4729e0);
DECL_FUNC(int (*sub_4729F0)(), sub_4729F0, 0x4729f0);
int dataXFer_0x00(int a1, char a2, int a3) {
    int address = 0x472a00;
    int result_;
    __asm {
        xor eax, eax
        xor ecx, ecx
        mov esi, a3
        mov cl, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int IsDownloadComplete(MapDownload *a1) {
    int address = 0x472a70;
    int result_;
    __asm {
        xor eax, eax
        mov edx, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(const char * (__stdcall*UserInfo_Constructor)(MapDownload *a1, int a2), UserInfo_Constructor, 0x472ab0);
_DWORD * sub_472BA0(MapDownload *a1, char a2) {
    int address = 0x472ba0;
    _DWORD * result_;
    __asm {
        xor eax, eax
        xor ecx, ecx
        mov cl, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(MapDownload ** (__stdcall*sub_472C10)(MapDownload **a1), sub_472C10, 0x472c10);
MapDownload * CreateMapDownload(char *a1) {
    int address = 0x472c90;
    MapDownload * result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_472D50)(), sub_472D50, 0x472d50);
DECL_FUNC(int (__cdecl*killTimerFunc)(), killTimerFunc, 0x472d60);
DECL_FUNC(void (__stdcall*TimerFunc)(HWND a1, UINT a2, UINT a3, DWORD a4), TimerFunc, 0x472db0);
DECL_FUNC(void (*SetTimerFunc)(), SetTimerFunc, 0x472e00);
void SetFogMask(int a1, int a2, int a3, int x, int y) {
    int address = 0x472e50;
    __asm {
        push dword ptr y
        push dword ptr x
        mov edi, a3
        mov ecx, a2
        mov eax, a1
        call address
    }
}
void AddFogMask(int a1, int a2, int some_flags_maybe, int x, int y) {
    int address = 0x472eb0;
    __asm {
        push dword ptr y
        push dword ptr x
        mov esi, some_flags_maybe
        mov edi, a2
        mov edx, a1
        call address
    }
}
DECL_FUNC(int (__fastcall*sub_472F00)(unsigned __int8 a1), sub_472F00, 0x472f00);
int sub_472F20(unsigned __int8 a1) {
    int address = 0x472f20;
    int result_;
    __asm {
        xor eax, eax
        mov al, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(BOOL (__fastcall*sub_472F40)(__int16 a1, __int16 a2, MegatileFlags a3, MegatileFlags a4), sub_472F40, 0x472f40);
BOOL getActiveTileFlag(__int16 x, __int16 y, MegatileFlags a3, MegatileFlags a4) {
    int address = 0x472f80;
    BOOL result_;
    __asm {
        xor eax, eax
        push dword ptr a4
        push dword ptr a3
        mov ax, y
        push dword ptr x
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(MegatileFlags (__fastcall*sub_472FD0)(__int16 a1, __int16 a2), sub_472FD0, 0x472fd0);
DECL_FUNC(int (*sub_472FF0)(), sub_472FF0, 0x472ff0);
int canPlaceCreepBuildingAt(unsigned __int8 player_id, __int16 a2, __int16 a3, int a4, int a5, int a6, int a7) {
    int address = 0x473010;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a7
        push dword ptr a6
        push dword ptr a5
        push dword ptr a4
        push dword ptr a3
        push dword ptr a2
        mov al, player_id
        call address
        mov result_, eax
    }
    return result_;
}
int canPlaceNydusBuildingAt(unsigned __int8 a1, __int16 a2, __int16 a3, int a4, int a5, int a6) {
    int address = 0x473150;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a6
        push dword ptr a5
        push dword ptr a4
        push dword ptr a3
        push dword ptr a2
        mov al, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed sub_473290(unsigned __int8 a1, int a2, __int16 a3, __int16 a4, __int16 a5) {
    int address = 0x473290;
    signed result_;
    __asm {
        xor eax, eax
        xor ecx, ecx
        push dword ptr a5
        push dword ptr a4
        push dword ptr a3
        mov ebx, a2
        mov cl, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed sub_4732C0(unsigned __int8 a1, int a2, __int16 a3, __int16 a4, __int16 a5) {
    int address = 0x4732c0;
    signed result_;
    __asm {
        xor eax, eax
        xor ecx, ecx
        push dword ptr a5
        push dword ptr a4
        push dword ptr a3
        mov edi, a2
        mov cl, a1
        call address
        mov result_, eax
    }
    return result_;
}
BOOL j_canUnitTypeFitAt(signed int a1, UnitType a2, __int16 a3) {
    int address = 0x4732f0;
    BOOL result_;
    __asm {
        xor eax, eax
        xor ebx, ebx
        xor edi, edi
        mov di, a3
        mov bx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed sub_473300(_DWORD *a1, int a2, int a3, int a4, char a5, char a6) {
    int address = 0x473300;
    signed result_;
    __asm {
        xor eax, eax
        push dword ptr a6
        push dword ptr a5
        push dword ptr a4
        push dword ptr a3
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
BOOL sub_473410(int a1, int a2, int a3) {
    int address = 0x473410;
    BOOL result_;
    __asm {
        xor eax, eax
        mov ecx, a3
        mov edx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__fastcall*UnitIsResourceContainer)(CUnit *a1, CUnit *a2), UnitIsResourceContainer, 0x473490);
CUnit * sub_4734B0(__int16 a1, __int16 a2, UnitType unit_type) {
    int address = 0x4734b0;
    CUnit * result_;
    __asm {
        xor eax, eax
        xor ecx, ecx
        push dword ptr unit_type
        mov cx, a2
        mov ax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(signed (__thiscall*IsAccessibleForHarvest)(CUnit *this_), IsAccessibleForHarvest, 0x473560);
int sub_473720(__int16 a1, int a2, int a3, unsigned __int8 a4, unsigned __int16 a5, int a6, int a7, char a8, char a9, int a10) {
    int address = 0x473720;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a10
        push dword ptr a9
        push dword ptr a8
        push dword ptr a7
        push dword ptr a6
        push dword ptr a5
        push dword ptr a4
        push dword ptr a3
        push dword ptr a2
        mov ax, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed canPlacePoweredBuildingAt(char a1, unsigned __int16 a2, __int16 a3, __int16 a4) {
    int address = 0x473920;
    signed result_;
    __asm {
        xor eax, eax
        xor esi, esi
        push dword ptr a4
        push dword ptr a3
        mov si, a2
        mov al, a1
        call address
        mov result_, eax
    }
    return result_;
}
int sub_473970(__int16 a1, __int16 a2) {
    int address = 0x473970;
    int result_;
    __asm {
        xor eax, eax
        xor ecx, ecx
        mov cx, a2
        mov ax, a1
        call address
        mov result_, eax
    }
    return result_;
}
BOOL PlaceBuildingResourceRestrictionCheck(int a1, __int16 a2, __int16 a3) {
    int address = 0x473990;
    BOOL result_;
    __asm {
        xor eax, eax
        xor edx, edx
        xor ecx, ecx
        mov cx, a3
        mov dx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int canPlaceStandardBuildingAt(unsigned __int16 a1, __int16 a2, __int16 a3, unsigned __int8 a4, int a5, int a6, int a7) {
    int address = 0x473a10;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a7
        push dword ptr a6
        push dword ptr a5
        push dword ptr a4
        push dword ptr a3
        push dword ptr a2
        mov ax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int sub_473BD0(unsigned __int16 a1, int a2, int a3, int a4, int a5) {
    int address = 0x473bd0;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a5
        push dword ptr a4
        push dword ptr a3
        mov edx, a2
        mov ax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__stdcall*vespeneGeyserPlacebox)(int a1, int a2, unsigned __int8 a3, int a4), vespeneGeyserPlacebox, 0x473db0);
int sub_473EF0(unsigned __int16 a1, __int16 a2, int a3, unsigned __int8 a4, int a5) {
    int address = 0x473ef0;
    int result_;
    __asm {
        xor eax, eax
        xor ebx, ebx
        xor edi, edi
        push dword ptr a5
        push dword ptr a4
        push dword ptr a3
        mov di, a2
        mov bx, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(signed (__stdcall*canBuildOnTileLocation)(CUnit *a1, int a2, int a3, int a4, UnitType a5, int a6, int a7, int a8, int a9), canBuildOnTileLocation, 0x473fb0);
signed sub_4741A0(__int16 a1, int a2, int a3, int a4, int a5) {
    int address = 0x4741a0;
    signed result_;
    __asm {
        xor eax, eax
        xor ebx, ebx
        push dword ptr a5
        push dword ptr a4
        push dword ptr a3
        push dword ptr a2
        mov bx, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__thiscall*AssignSecondaryOrderNoParam)(_DWORD a1), AssignSecondaryOrderNoParam, 0x474280);
DECL_FUNC(int (*sub_4742B0)(), sub_4742B0, 0x4742b0);
COrder * removeOrderFromUnitQueue(COrder *result, CUnit *a2) {
    int address = 0x4742d0;
    COrder * result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
void playSubunitIscript(CUnit *a1, Anims a2) {
    int address = 0x474380;
    __asm {
        push dword ptr a2
        mov ebx, a1
        call address
    }
}
DECL_FUNC(int (*sub_4743C0)(), sub_4743C0, 0x4743c0);
CUnit * setSecondaryOrder(CUnit *unit, Order order) {
    int address = 0x4743d0;
    CUnit * result_;
    __asm {
        xor eax, eax
        xor ecx, ecx
        mov cl, order
        mov eax, unit
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(COrder * (__fastcall*sub_474400)(CUnit *a1, Order order), sub_474400, 0x474400);
COrder * j_removeOrderFromUnitQueue(COrder *result, CUnit *a2) {
    int address = 0x4744c0;
    COrder * result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_4744D0)(void), sub_4744D0, 0x4744d0);
DECL_FUNC(int (*sub_4744F0)(), sub_4744F0, 0x4744f0);
signed sub_474500(CUnit *a1, UnitType unit_type) {
    int address = 0x474500;
    signed result_;
    __asm {
        xor eax, eax
        xor ecx, ecx
        mov cx, unit_type
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void unknownSpecialOrder(u16 a1, Order a2, COrder *a3, CUnit *a4, Position a5, CUnit *a6) {
    int address = 0x474540;
    __asm {
        xor edx, edx
        xor ebx, ebx
        push dword ptr a6
        push dword ptr a5
        mov esi, a4
        mov edi, a3
        mov bl, a2
        mov dx, a1
        call address
    }
}
void QueueOrderEx(Order a1, COrder *a2, CUnit *a3, u16 dx0, Position a5, CUnit *a6) {
    int address = 0x4745f0;
    __asm {
        xor ebx, ebx
        xor edx, edx
        push dword ptr a6
        push dword ptr a5
        mov dx, dx0
        mov esi, a3
        mov edi, a2
        mov bl, a1
        call address
    }
}
signed sub_4746D0(CUnit *a1, char a2, UnitType a3, int a4) {
    int address = 0x4746d0;
    signed result_;
    __asm {
        xor eax, eax
        xor edx, edx
        xor ecx, ecx
        mov edi, a4
        mov cx, a3
        mov dl, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void _orderSelfSpecial(Order a1, COrder *a2, CUnit *a3) {
    int address = 0x474760;
    __asm {
        xor ebx, ebx
        mov esi, a3
        mov edi, a2
        mov bl, a1
        call address
    }
}
void sub_474790(Order a1, COrder *a2, CUnit *a3, __int16 a4, __int16 a5) {
    int address = 0x474790;
    __asm {
        xor ebx, ebx
        push dword ptr a5
        push dword ptr a4
        mov esi, a3
        mov edi, a2
        mov bl, a1
        call address
    }
}
void sub_4747C0(Order a1, COrder *a2, CUnit *a3, Position a4, CUnit *a5) {
    int address = 0x4747c0;
    __asm {
        xor ebx, ebx
        push dword ptr a5
        push dword ptr a4
        mov esi, a3
        mov edi, a2
        mov bl, a1
        call address
    }
}
void sub_4747E0(CUnit *a1, Order a2, COrder *a3, CUnit *a4) {
    int address = 0x4747e0;
    __asm {
        xor ebx, ebx
        mov esi, a4
        mov edi, a3
        mov bl, a2
        mov ecx, a1
        call address
    }
}
void order(int a1, CUnit *a2, Order a3, Position a4, CUnit *a5, u16 a6) {
    int address = 0x474810;
    __asm {
        xor ecx, ecx
        push dword ptr a6
        push dword ptr a5
        push dword ptr a4
        mov cl, a3
        mov edx, a2
        mov eax, a1
        call address
    }
}
DECL_FUNC(void (__stdcall*sub_4748E0)(__int16 a1, __int16 a2), sub_4748E0, 0x4748e0);
void sub_474910(Order a1, COrder *a2, CUnit *a3, u16 a4, u16 a5, u16 a6) {
    int address = 0x474910;
    __asm {
        xor ebx, ebx
        push dword ptr a6
        push dword ptr a5
        push dword ptr a4
        mov esi, a3
        mov edi, a2
        mov bl, a1
        call address
    }
}
void sub_474940(CUnit *a1, Order a2, COrder *a3, CUnit *a4) {
    int address = 0x474940;
    __asm {
        xor ebx, ebx
        mov esi, a4
        mov edi, a3
        mov bl, a2
        mov eax, a1
        call address
    }
}
void sub_474980(Order a1, COrder *a2, CUnit *a3, Position a4, CUnit *a5) {
    int address = 0x474980;
    __asm {
        xor ebx, ebx
        push dword ptr a5
        push dword ptr a4
        mov esi, a3
        mov edi, a2
        mov bl, a1
        call address
    }
}
void QueueOrder(Order order_id, COrder *order, CUnit *unit) {
    int address = 0x4749a0;
    __asm {
        xor ebx, ebx
        mov esi, unit
        mov edi, order
        mov bl, order_id
        call address
    }
}
void sub_4749D0(Order a1, CUnit *a2) {
    int address = 0x4749d0;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov al, a1
        call address
    }
}
void sub_474A20(Order a1, __int16 a2, __int16 a3, CUnit *a4) {
    int address = 0x474a20;
    __asm {
        xor eax, eax
        xor edx, edx
        xor ecx, ecx
        push dword ptr a4
        mov cx, a3
        mov dx, a2
        mov al, a1
        call address
    }
}
void moreOrdersFML(CUnit *a1, CUnit *a2, Order a3) {
    int address = 0x474a70;
    __asm {
        xor ecx, ecx
        mov cl, a3
        mov edx, a2
        mov eax, a1
        call address
    }
}
void sub_474AF0(Order a1, CUnit *a2, Position a3, CUnit *a4) {
    int address = 0x474af0;
    __asm {
        xor eax, eax
        push dword ptr a4
        push dword ptr a3
        mov ecx, a2
        mov al, a1
        call address
    }
}
void orderImmediate(CUnit *unit, Order order) {
    int address = 0x474b40;
    __asm {
        xor eax, eax
        mov al, order
        mov ecx, unit
        call address
    }
}
void queueNewOrder(COrder *result, __int16 a2, __int16 a3, CUnit *a4, Order a5, CUnit *a6, u16 a7, Position a8, CUnit *a9) {
    int address = 0x474b90;
    __asm {
        xor edx, edx
        xor ecx, ecx
        push dword ptr a9
        push dword ptr a8
        push dword ptr a7
        push dword ptr a6
        push dword ptr a5
        push dword ptr a4
        mov cx, a3
        mov dx, a2
        mov eax, result
        call address
    }
}
void orderInterrupt(CUnit *unit, Order order_id, Position a3, CUnit *a4) {
    int address = 0x474c30;
    __asm {
        push dword ptr a4
        push dword ptr a3
        push dword ptr order_id
        mov esi, unit
        call address
    }
}
DECL_FUNC(void (__stdcall*doOrder)(CUnit *a1, Order order_id, __int16 x, __int16 y, int a5), doOrder, 0x474c70);
DECL_FUNC(Order (__stdcall*sub_474CB0)(CUnit *a1, Order order_id, u16 a3, __int16 pos_x, __int16 pos_y, int a6), sub_474CB0, 0x474cb0);
void _order(CUnit *unit, Order order_id, Position a3, CUnit *a4, int a5) {
    int address = 0x474cf0;
    __asm {
        push dword ptr a5
        push dword ptr a4
        push dword ptr a3
        push dword ptr order_id
        mov edx, unit
        call address
        add esp, 16
    }
}
void issueQueuedOrderTarget(CUnit *a1, CUnit *a2, Order order_id, int a4) {
    int address = 0x474d10;
    __asm {
        push dword ptr a4
        push dword ptr order_id
        push dword ptr a2
        mov eax, a1
        call address
    }
}
DECL_FUNC(void (__fastcall*__order)(Order order_id, CUnit *a2, int a3), __order, 0x474d60);
signed isOrderValid(char a1, CUnit *a2, CUnit *a3, int a4) {
    int address = 0x474d90;
    signed result_;
    __asm {
        xor eax, eax
        push dword ptr a4
        mov esi, a3
        mov ebx, a2
        mov al, a1
        call address
        mov result_, eax
    }
    return result_;
}
void sub_474FB0(CUnit *a1, Order order_id, u16 a3, __int16 pos_x, __int16 pos_y) {
    int address = 0x474fb0;
    __asm {
        push dword ptr pos_y
        push dword ptr pos_x
        push dword ptr a3
        push dword ptr order_id
        mov esi, a1
        call address
    }
}
DECL_FUNC(void (__thiscall*PrepareForNextOrderFunc)(CUnit *this_), PrepareForNextOrderFunc, 0x475000);
void sub_475220(CUnit *a1, Order order_id, Position position, CUnit *a4, u16 a5) {
    int address = 0x475220;
    __asm {
        push dword ptr a5
        push dword ptr a4
        push dword ptr position
        push dword ptr order_id
        mov esi, a1
        call address
    }
}
void OrderToPos(CUnit *a1, Order order_id, __int16 pos_x, __int16 pos_y) {
    int address = 0x475260;
    __asm {
        push dword ptr pos_y
        push dword ptr pos_x
        push dword ptr order_id
        mov esi, a1
        call address
    }
}
void UnitOrderTo(CUnit *unit, CUnit *target, Order order_id) {
    int address = 0x4752b0;
    __asm {
        push dword ptr order_id
        mov eax, target
        mov esi, unit
        call address
    }
}
void orderComputer_cl(CUnit *unit, Order order_id) {
    int address = 0x475310;
    __asm {
        xor ecx, ecx
        mov cl, order_id
        mov esi, unit
        call address
    }
}
void sub_475350(CUnit *a1, __int16 a2, __int16 a3) {
    int address = 0x475350;
    __asm {
        push dword ptr a3
        push dword ptr a2
        mov eax, a1
        call address
    }
}
DECL_FUNC(void (__thiscall*toIdle)(CUnit *this_), toIdle, 0x4753a0);
void ISCRIPT_NoBrkCodeEnd(CUnit *a1) {
    int address = 0x4753e0;
    __asm {
        mov eax, a1
        call address
    }
}
void actUnitReturnToIdle(CUnit *a1) {
    int address = 0x475420;
    __asm {
        mov eax, a1
        call address
    }
}
void OrderQueuedCommand(__int16 a1, __int16 a2, Order a3, COrder *a4, CUnit *a5, CUnit *a6, u16 a7, Position a8, CUnit *a9) {
    int address = 0x475470;
    __asm {
        xor eax, eax
        xor edx, edx
        xor ecx, ecx
        push dword ptr a9
        push dword ptr a8
        push dword ptr a7
        push dword ptr a6
        push dword ptr a5
        mov edi, a4
        mov cl, a3
        mov dx, a2
        mov ax, a1
        call address
    }
}
void ExecuteQueuedOrder(__int16 a1, __int16 a2, u16 a3, CUnit *a4, COrder *a5, int a6, Order order, CUnit *a8, Position a9, CUnit *a10) {
    int address = 0x4754f0;
    __asm {
        xor eax, eax
        xor edx, edx
        xor ebx, ebx
        push dword ptr a10
        push dword ptr a9
        push dword ptr a8
        push dword ptr order
        push dword ptr a6
        push dword ptr a5
        mov esi, a4
        mov bx, a3
        mov dx, a2
        mov ax, a1
        call address
    }
}
void sub_4756B0(Order a1, u16 a2, CUnit *a3, int a4, __int16 a5, __int16 a6) {
    int address = 0x4756b0;
    __asm {
        xor edx, edx
        xor ebx, ebx
        push dword ptr a6
        push dword ptr a5
        push dword ptr a4
        mov esi, a3
        mov bx, a2
        mov dl, a1
        call address
    }
}
void sub_4756E0(CUnit *a1, CUnit *a2, int a3, Order a4) {
    int address = 0x4756e0;
    __asm {
        push dword ptr a4
        push dword ptr a3
        mov esi, a2
        mov edx, a1
        call address
    }
}
void RemoveUnit(CUnit *unit) {
    int address = 0x475710;
    __asm {
        mov eax, unit
        call address
    }
}
DECL_FUNC(void (*nullsub_33)(), nullsub_33, 0x475800);
DECL_FUNC(int (*nullsub_34)(), nullsub_34, 0x475810);
BOOL UnitIsInvincible(UnitType unit_type) {
    int address = 0x475820;
    BOOL result_;
    __asm {
        xor eax, eax
        mov ax, unit_type
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(WeaponType (__thiscall*UnitGetAirWeapon)(CUnit *this_), UnitGetAirWeapon, 0x475840);
int getUnitMaxWpnRange(CUnit *a1, WeaponType weapon_type) {
    int address = 0x475870;
    int result_;
    __asm {
        xor eax, eax
        xor ebx, ebx
        mov bl, weapon_type
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__fastcall*incrementUnitKillCount)(CUnit *a1), incrementUnitKillCount, 0x4759c0);
int sub_4759F0(CUnit *a1) {
    int address = 0x4759f0;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_475A00)(), sub_475A00, 0x475a00);
BOOL hasGrndWeaponGraphic(CUnit *a1) {
    int address = 0x475a10;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
BOOL unitHasNoMainOrderType(CUnit *a1) {
    int address = 0x475a50;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_475A70)(), sub_475A70, 0x475a70);
DECL_FUNC(WeaponType (__thiscall*getGroundWeaponType)(CUnit *this_), getGroundWeaponType, 0x475a90);
DECL_FUNC(WeaponType (__thiscall*UnitGetGrndWeapon)(CUnit *this_), UnitGetGrndWeapon, 0x475ad0);
DECL_FUNC(int (*sub_475AF0)(), sub_475AF0, 0x475af0);
DECL_FUNC(int (*sub_475B40)(), sub_475B40, 0x475b40);
int orders_Guard(CUnit *a1) {
    int address = 0x475b90;
    int result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
BOOL unitIsPositionInAttackAngle(int a1, int a2, CUnit *a3, unsigned __int8 a4) {
    int address = 0x475be0;
    BOOL result_;
    __asm {
        xor eax, eax
        push dword ptr a4
        mov esi, a3
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
BOOL unitCanAttackGroundType(UnitType unit_type, CUnit *a2) {
    int address = 0x475c80;
    BOOL result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov ax, unit_type
        call address
        mov result_, eax
    }
    return result_;
}
int CanWeaponTargetUnit(WeaponType weaponId, CUnit *target, CUnit *attacker) {
    int address = 0x475ce0;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr attacker
        mov edx, target
        mov al, weaponId
        call address
        mov result_, eax
    }
    return result_;
}
unsigned getUpgradedWpnCooldown(WeaponType a1, CUnit *a2) {
    int address = 0x475dc0;
    unsigned result_;
    __asm {
        xor eax, eax
        mov esi, a2
        mov al, a1
        call address
        mov result_, eax
    }
    return result_;
}
int getUpgradedDamageAmtForGUI(int weapon_type, CUnit *a2) {
    int address = 0x475e40;
    int result_;
    __asm {
        xor eax, eax
        mov esi, a2
        mov edx, weapon_type
        call address
        mov result_, eax
    }
    return result_;
}
int getUnitDamageBonus(CUnit *a1, WeaponType weapon_type) {
    int address = 0x475ec0;
    int result_;
    __asm {
        xor eax, eax
        xor edx, edx
        mov dl, weapon_type
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int getDamageAmtForGUI(CUnit *a1, int weapon_type) {
    int address = 0x475f10;
    int result_;
    __asm {
        xor eax, eax
        mov ecx, weapon_type
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
char sub_475F50(CUnit *a1, unsigned int a2, unsigned int a3) {
    int address = 0x475f50;
    char result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        push dword ptr a2
        mov esi, a1
        call address
        mov result_, al
    }
    return result_;
}
char GetUnitAckRangeUpgrade(CUnit *a1) {
    int address = 0x476000;
    char result_;
    __asm {
        xor eax, eax
        mov edx, a1
        call address
        mov result_, al
    }
    return result_;
}
DECL_FUNC(BOOL (__thiscall*AI_UnitCanAttack)(CUnit *this_), AI_UnitCanAttack, 0x476180);
int getUnitMissChance(CUnit *a1) {
    int address = 0x476210;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__stdcall*sub_4762C0)(CUnit *unit, int *x, int *y), sub_4762C0, 0x4762c0);
BOOL isTargetWithinMinMovementRange(CUnit *a1, unsigned int a2, CUnit *a3) {
    int address = 0x4763d0;
    BOOL result_;
    __asm {
        xor eax, eax
        mov edi, a3
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
BOOL isUnitTargetOutOfMaxRange(CUnit *a1, CUnit *a2) {
    int address = 0x476430;
    BOOL result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
BOOL isUnitTargetInsideMinRange(CUnit *unit, CUnit *target) {
    int address = 0x4764d0;
    BOOL result_;
    __asm {
        xor eax, eax
        mov esi, target
        mov eax, unit
        call address
        mov result_, eax
    }
    return result_;
}
void IgnoreAllScriptAndGotoIdle(CUnit *a1) {
    int address = 0x476550;
    __asm {
        mov esi, a1
        call address
    }
}
unsigned weaponBehaviourCanHitTargetCheck(CUnit *target, CUnit *attacker) {
    int address = 0x4765b0;
    unsigned result_;
    __asm {
        xor eax, eax
        mov ecx, attacker
        mov eax, target
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_476610)(void), sub_476610, 0x476610);
signed IsReadyToAttack(CUnit *a1, WeaponType weapon_type) {
    int address = 0x476640;
    signed result_;
    __asm {
        xor eax, eax
        push dword ptr weapon_type
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_4766F0)(), sub_4766F0, 0x4766f0);
BOOL unitCanAttackTarget(CUnit *a1, CUnit *a2, int a3) {
    int address = 0x476730;
    BOOL result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        mov esi, a2
        mov ebx, a1
        call address
        mov result_, eax
    }
    return result_;
}
BOOL isUnitInWeaponRange(CUnit *a1, CUnit *a2) {
    int address = 0x476870;
    BOOL result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
BOOL isBunkerBusy(int a1, CUnit *a2) {
    int address = 0x476930;
    BOOL result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
BOOL IsBetterTarget_maybe(CUnit *old_target, CUnit *unit, CUnit *new_target) {
    int address = 0x4769d0;
    BOOL result_;
    __asm {
        xor eax, eax
        mov edi, new_target
        mov ecx, unit
        mov eax, old_target
        call address
        mov result_, eax
    }
    return result_;
}
__int64 sub_476A50(CUnit *a1, CUnit *a2){ throw "not implemented"; }

BOOL sub_476C50(CUnit *a1, CUnit *a2) {
    int address = 0x476c50;
    BOOL result_;
    __asm {
        xor eax, eax
        mov esi, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed doWeaponIscript(CUnit *a1, WeaponType a2, int a3, Anims a4) {
    int address = 0x476c90;
    signed result_;
    __asm {
        xor eax, eax
        xor ebx, ebx
        push dword ptr a4
        mov edi, a3
        mov bl, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void sub_476D30(CUnit *a1) {
    int address = 0x476d30;
    __asm {
        mov edi, a1
        call address
    }
}
void AskForHelp(CUnit *enemy, CUnit *unit) {
    int address = 0x476e60;
    __asm {
        mov esi, unit
        mov eax, enemy
        call address
    }
}
CUnit * getWeaponBeginIscript(CUnit *result, Anims a2) {
    int address = 0x476ed0;
    CUnit * result_;
    __asm {
        xor eax, eax
        xor edx, edx
        mov dl, a2
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
void orders_tower_guard(CUnit *unit) {
    int address = 0x476f50;
    __asm {
        mov eax, unit
        call address
    }
}
void SetAttackTarget(CUnit *a1, CUnit *a2, int a3, int a4) {
    int address = 0x476fc0;
    __asm {
        push dword ptr a4
        push dword ptr a3
        mov edi, a2
        mov eax, a1
        call address
    }
}
int sub_4770E0(CUnit *unit) {
    int address = 0x4770e0;
    int result_;
    __asm {
        xor eax, eax
        mov eax, unit
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(signed (__thiscall*AI_AggressiveUnitTask)(CUnit *this_, int a2, int a3, signed int a4), AI_AggressiveUnitTask, 0x477160);
void orders_guard_play(CUnit *unit) {
    int address = 0x4774a0;
    __asm {
        mov eax, unit
        call address
    }
}
DECL_FUNC(void (__stdcall*holdPositionProc)(CUnit *a1), holdPositionProc, 0x477510);
void ReactToHit(CUnit *attacker, CUnit *target) {
    int address = 0x4776c0;
    __asm {
        mov ecx, target
        mov eax, attacker
        call address
    }
}
void orders_TurretGuard(CUnit *unit) {
    int address = 0x4777f0;
    __asm {
        mov eax, unit
        call address
    }
}
char sub_477820(CUnit *a1, Order a2) {
    int address = 0x477820;
    char result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
void orders_guard_post(CUnit *unit) {
    int address = 0x4778e0;
    __asm {
        mov eax, unit
        call address
    }
}
void orders_TurretAttack(CUnit *unit) {
    int address = 0x477980;
    __asm {
        mov eax, unit
        call address
    }
}
void orders_AttackFixedRange(CUnit *unit) {
    int address = 0x477d00;
    __asm {
        mov eax, unit
        call address
    }
}
u8 sub_477F10(CUnit *a1, CUnit *a2) {
    int address = 0x477f10;
    u8 result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
void appyBunkerWeaponAnimation(CUnit *a1) {
    int address = 0x477fd0;
    __asm {
        mov eax, a1
        call address
    }
}
void orders_Patrol(CUnit *unit) {
    int address = 0x4780f0;
    __asm {
        mov eax, unit
        call address
    }
}
BOOL sub_478370(CUnit *a1, Order a2) {
    int address = 0x478370;
    BOOL result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void orders_comp_return(CUnit *unit) {
    int address = 0x478490;
    __asm {
        mov eax, unit
        call address
    }
}
signed OrderAttackBehaviour(CUnit *unit) {
    int address = 0x478540;
    signed result_;
    __asm {
        xor eax, eax
        mov eax, unit
        call address
        mov result_, eax
    }
    return result_;
}
void orders_SapUnit(CUnit *a1) {
    int address = 0x4788e0;
    __asm {
        mov eax, a1
        call address
    }
}
void orders_SapLocation(CUnit *unit) {
    int address = 0x478a40;
    __asm {
        mov eax, unit
        call address
    }
}
int attackApplyCooldown(CUnit *unit) {
    int address = 0x478b40;
    int result_;
    __asm {
        xor eax, eax
        mov eax, unit
        call address
        mov result_, eax
    }
    return result_;
}
void orders_hold_position(CUnit *unit) {
    int address = 0x478d10;
    __asm {
        mov eax, unit
        call address
    }
}
void orders_AttackMoveEP(CUnit *a1) {
    int address = 0x478de0;
    __asm {
        mov eax, a1
        call address
    }
}
void orders_HarassMove(CUnit *unit) {
    int address = 0x478ec0;
    __asm {
        mov eax, unit
        call address
    }
}
char orders_AttackMove(CUnit *a1) {
    int address = 0x479040;
    char result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, al
    }
    return result_;
}
void orders_tower_attack(CUnit *unit) {
    int address = 0x479150;
    __asm {
        mov eax, unit
        call address
    }
}
DECL_FUNC(void (__stdcall*orders_NukeGround)(CUnit *a1), orders_NukeGround, 0x479200);
void orders_nuke_unit(CUnit *unit) {
    int address = 0x479410;
    __asm {
        mov eax, unit
        call address
    }
}
DECL_FUNC(void (__stdcall*BWFXN_KillUnitTarget)(CUnit *unit), BWFXN_KillUnitTarget, 0x479480);
void DoWeaponHit(CUnit *target, CUnit *attacker, int show_attacker) {
    int address = 0x4795d0;
    __asm {
        push dword ptr show_attacker
        push dword ptr attacker
        mov ebx, target
        call address
    }
}
int attackOverlayAndNotify(CUnit *a1, CUnit *a2, unsigned __int8 weapon_type, char a4) {
    int address = 0x479730;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a4
        push dword ptr weapon_type
        mov esi, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void DamageUnitHp(s32 a1, CUnit *a2, CUnit *a3, int player_id, int a5) {
    int address = 0x4797b0;
    __asm {
        push dword ptr a5
        push dword ptr player_id
        push dword ptr a3
        mov ecx, a2
        mov eax, a1
        call address
    }
}
void DoWeaponDamage(unsigned int result, CUnit *a2, WeaponType weapon_type, unsigned int a4, char a5, CUnit *a6, int a7) {
    int address = 0x479930;
    __asm {
        push dword ptr a7
        push dword ptr a6
        push dword ptr a5
        push dword ptr a4
        push dword ptr weapon_type
        mov edi, a2
        mov eax, result
        call address
    }
}
int WeaponBulletShot(CBullet *bullet, CUnit *target, unsigned int dmg_divide) {
    int address = 0x479ae0;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr dmg_divide
        mov eax, target
        mov edx, bullet
        call address
        mov result_, eax
    }
    return result_;
}
void ISCRIPT_AttackMelee(CUnit *unit) {
    int address = 0x479b40;
    __asm {
        mov eax, unit
        call address
    }
}
CUnit * orders_AttackUnit(CUnit *a1) {
    int address = 0x479bd0;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
void ISCRIPT_UseWeapon(CUnit *unit, WeaponType weapon_type) {
    int address = 0x479c30;
    __asm {
        push dword ptr weapon_type
        mov esi, unit
        call address
    }
}
void FireUnitWeapon(CUnit *unit, WeaponType weapon_id) {
    int address = 0x479c90;
    __asm {
        push dword ptr weapon_id
        mov esi, unit
        call address
    }
}
void ISCRIPT_CastSpell(CUnit *unit, WeaponType weapon_id) {
    int address = 0x479d40;
    __asm {
        xor ebx, ebx
        mov bl, weapon_id
        mov eax, unit
        call address
    }
}
void ISCRIPT_AttackWith(CUnit *attacker, u8 is_ground_weapon) {
    int address = 0x479d60;
    __asm {
        push dword ptr is_ground_weapon
        mov eax, attacker
        call address
    }
}
DECL_FUNC(int (__stdcall*sub_479DD0)(__int16 a1, __int16 a2), sub_479DD0, 0x479dd0);
DECL_FUNC(int (__stdcall*sub_479E00)(__int16 a1, __int16 a2), sub_479E00, 0x479e00);
DECL_FUNC(int (*sub_479E30)(), sub_479E30, 0x479e30);
DECL_FUNC(int (*nullsub_35)(), nullsub_35, 0x479e50);
DECL_FUNC(bool * (__thiscall*minorUnpackSharedSaveData)(CBullet *bullet), minorUnpackSharedSaveData, 0x479e60);
int minorPackSharedSaveData(CBullet *a1) {
    int address = 0x479ec0;
    int result_;
    __asm {
        xor eax, eax
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__stdcall*sub_479F70)(int a1, int a2), sub_479F70, 0x479f70);
int unitOrderMoveToTargetUnitResetOrderState(int result, char a2, int a3) {
    int address = 0x479fa0;
    int result_;
    __asm {
        xor eax, eax
        xor edx, edx
        mov ecx, a3
        mov dl, a2
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__thiscall*unitOrderMoveToTargetUnit)(_DWORD a1), unitOrderMoveToTargetUnit, 0x479fe0);
CSprite * sub_47A010(char a1, __int16 a2, char player_id, CUnit *unit, FlingyID flingy_id, int a6) {
    int address = 0x47a010;
    CSprite * result_;
    __asm {
        xor eax, eax
        xor edx, edx
        xor ebx, ebx
        push dword ptr a6
        push dword ptr flingy_id
        mov esi, unit
        mov bl, player_id
        mov dx, a2
        mov al, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*nullsub_36)(), nullsub_36, 0x47a060);
void image_Insert(CImage *result, CImage **a2, CImage *a3) {
    int address = 0x47a070;
    __asm {
        mov ecx, a3
        mov edx, a2
        mov eax, result
        call address
    }
}
DECL_FUNC(int (*sub_47A090)(), sub_47A090, 0x47a090);
DECL_FUNC(int (*sub_47A0B0)(), sub_47A0B0, 0x47a0b0);
DECL_FUNC(int (*sub_47A0F0)(), sub_47A0F0, 0x47a0f0);
int sub_47A120(int result, int a2, unsigned __int16 a3, int a4) {
    int address = 0x47a120;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a4
        push dword ptr a3
        push dword ptr a2
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(signed (__stdcall*sub_47A350)(int a1, int a2, int a3, signed int a4, int a5), sub_47A350, 0x47a350);
DECL_FUNC(signed (__stdcall*sub_47A4E0)(int a1, int a2, int a3, signed int a4, int a5), sub_47A4E0, 0x47a4e0);
DECL_FUNC(_DWORD (__stdcall*sub_47A670)(_DWORD a1), sub_47A670, 0x47a670);
DECL_FUNC(_DWORD (__stdcall*sub_47A6E0)(_DWORD a1), sub_47A6E0, 0x47a6e0);
DECL_FUNC(_DWORD (__stdcall*sub_47A750)(_DWORD a1), sub_47A750, 0x47a750);
DECL_FUNC(char * (__fastcall*sub_47A7C0)(int a1), sub_47A7C0, 0x47a7c0);
DECL_FUNC(char * (__fastcall*sub_47A7E0)(int a1), sub_47A7E0, 0x47a7e0);
DECL_FUNC(char * (__fastcall*sub_47A800)(int a1), sub_47A800, 0x47a800);
DECL_FUNC(unsigned (__fastcall*imageRenderFxn11_0)(int a1, int a2, int a3, int a4, CUnit *a5), imageRenderFxn11_0, 0x47a820);
DECL_FUNC(void (*sub_47AAC0)(), sub_47AAC0, 0x47aac0);
DECL_FUNC(int (__stdcall*sub_47AAF0)(int a1), sub_47AAF0, 0x47aaf0);
void sub_47AB40(LO_Header **a1, signed int a2) {
    int address = 0x47ab40;
    __asm {
        push dword ptr a2
        mov edi, a1
        call address
    }
}
DECL_FUNC(int (*sub_47ABB0)(), sub_47ABB0, 0x47abb0);
grpHead * readImageFile_lowMem(int *grp_file_arr, unsigned __int16 *images_tbl, int image_id, grpHead **a4, LPOVERLAPPED a5, _DWORD *a6) {
    int address = 0x47abe0;
    grpHead * result_;
    __asm {
        xor eax, eax
        push dword ptr a6
        push dword ptr a5
        push dword ptr a4
        mov ecx, image_id
        mov edx, images_tbl
        mov eax, grp_file_arr
        call address
        mov result_, eax
    }
    return result_;
}
void * readImageFile(int *overlay_index, unsigned __int16 *a2, int image_id, HANDLE hFile, LPOVERLAPPED a5, _DWORD *a6) {
    int address = 0x47acf0;
    void * result_;
    __asm {
        xor eax, eax
        push dword ptr a6
        push dword ptr a5
        push dword ptr hFile
        mov ecx, image_id
        mov edx, a2
        mov eax, overlay_index
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__stdcall*loadImagesData_lowMem)(grpHead **a1, int *a2, u16 *images_tbl, int a4, LPOVERLAPPED a5, void *a6), loadImagesData_lowMem, 0x47ae30);
DECL_FUNC(void (__stdcall*loadImagesData)(LO_Header **a1, int *a2, unsigned __int16 *images_tbl, int a4, LPOVERLAPPED a5, _DWORD *a6), loadImagesData, 0x47af30);
BOOL unit_isRefineryUnit(UnitType unit_type) {
    int address = 0x47afe0;
    BOOL result_;
    __asm {
        xor eax, eax
        mov ax, unit_type
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_47B000)(), sub_47B000, 0x47b000);
DECL_FUNC(int (*sub_47B030)(), sub_47B030, 0x47b030);
DECL_FUNC(int (*unitIsFloorTrap)(void), unitIsFloorTrap, 0x47b070);
DECL_FUNC(const char * (__fastcall*getUnitNameStatString)(UnitType unit_type), getUnitNameStatString, 0x47b090);
DECL_FUNC(int (*sub_47B0F0)(), sub_47B0F0, 0x47b0f0);
DECL_FUNC(int (*sub_47B120)(), sub_47B120, 0x47b120);
char unitGetRace(CUnit *a1) {
    int address = 0x47b150;
    char result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
u32 UpdateHPGain(CUnit *a1) {
    int address = 0x47b180;
    u32 result_;
    __asm {
        xor eax, eax
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
int CUnitToUnitID(CUnit *a1) {
    int address = 0x47b1d0;
    int result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
CUnit * unitIDtoUnitMemFast(CUnit *a1) {
    int address = 0x47b210;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__thiscall*unitIDtoCUnit)(_DWORD a1), unitIDtoCUnit, 0x47b230);
UnitType getLastQueueSlotType(CUnit *a1) {
    int address = 0x47b270;
    UnitType result_;
    __asm {
        xor eax, eax
        mov edx, a1
        call address
        mov result_, ax
    }
    return result_;
}
DECL_FUNC(int (*sub_47B2C0)(), sub_47B2C0, 0x47b2c0);
BOOL Unit_IsFactoryBuilding(CUnit *unit) {
    int address = 0x47b2e0;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, unit
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__stdcall*increaseUpgradeLevel)(int a1, unsigned __int16 a2, unsigned __int8 a3, unsigned __int8 a4), increaseUpgradeLevel, 0x47b340);
DECL_FUNC(int (__stdcall*researchTech)(int a1, unsigned __int16 a2, char a3, unsigned __int8 a4), researchTech, 0x47b3c0);
BOOL BWFXN_IsCritter(CUnit *a1) {
    int address = 0x47b450;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
BOOL UnitIsRescuableOrUnknown0(CUnit *a1) {
    int address = 0x47b490;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
__int16 Thg2SpecialDIsableUnit(CUnit *a1) {
    int address = 0x47b4b0;
    __int16 result_;
    __asm {
        xor eax, eax
        mov edi, a1
        call address
        mov result_, ax
    }
    return result_;
}
DECL_FUNC(const char * (__thiscall*UnitGetName)(CUnit *this_), UnitGetName, 0x47b5a0);
unsigned GetModifiedUnitSpeed(unsigned int result, CUnit *a2) {
    int address = 0x47b5f0;
    unsigned result_;
    __asm {
        xor eax, eax
        mov edx, a2
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_47B660)(), sub_47B660, 0x47b660);
char updateBuildingConstructShieldsAmount(CUnit *a1) {
    int address = 0x47b6a0;
    char result_;
    __asm {
        xor eax, eax
        mov ebx, a1
        call address
        mov result_, al
    }
    return result_;
}
char hasOverlay(CUnit *a1) {
    int address = 0x47b720;
    char result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
DECL_FUNC(BOOL (__fastcall*unitIsEnemy)(CUnit *a1, int a2), unitIsEnemy, 0x47b740);
DECL_FUNC(BOOL (__thiscall*unit_IsStandardAndMovable)(CUnit *unit), unit_IsStandardAndMovable, 0x47b770);
int unitLurkerIsNotIdle(CUnit *a1) {
    int address = 0x47b810;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(unsigned (__thiscall*getModifiedUnitTurnRadius)(CUnit *this_), getModifiedUnitTurnRadius, 0x47b850);
DECL_FUNC(unsigned (__thiscall*getModifiedUnitAcceleration)(CUnit *this_), getModifiedUnitAcceleration, 0x47b8a0);
unsigned GetUnitSpeed(CUnit *unit) {
    int address = 0x47b8f0;
    unsigned result_;
    __asm {
        xor eax, eax
        mov edx, unit
        call address
        mov result_, eax
    }
    return result_;
}
BOOL isUnitEnemyOf(CUnit *unit, CUnit *target_unit) {
    int address = 0x47b910;
    BOOL result_;
    __asm {
        xor eax, eax
        mov ecx, target_unit
        mov eax, unit
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(signed (__stdcall*ApplyAllUnitSpeedUpgradesProc)(CUnit *a1, char a2, char a3, int a4), ApplyAllUnitSpeedUpgradesProc, 0x47b940);
void DisableDoodadState(CUnit *a1) {
    int address = 0x47b960;
    __asm {
        mov eax, a1
        call address
    }
}
void EnableDoodadState(CUnit *a1) {
    int address = 0x47ba00;
    __asm {
        mov eax, a1
        call address
    }
}
void orders_WatchTarget(CUnit *a1) {
    int address = 0x47bab0;
    __asm {
        mov eax, a1
        call address
    }
}
void orders_stop(CUnit *unit) {
    int address = 0x47bba0;
    __asm {
        mov eax, unit
        call address
    }
}
void ToggleDoodadState(CUnit *a1) {
    int address = 0x47bc10;
    __asm {
        mov eax, a1
        call address
    }
}
void orders_CloseDoor(CUnit *a1) {
    int address = 0x47bc50;
    __asm {
        mov esi, a1
        call address
    }
}
void orders_OpenDoor(CUnit *a1) {
    int address = 0x47bcd0;
    __asm {
        mov esi, a1
        call address
    }
}
void orders_disable_doodad(CUnit *unit) {
    int address = 0x47bd60;
    __asm {
        mov eax, unit
        call address
    }
}
void orders_enable_doodad(CUnit *unit) {
    int address = 0x47be80;
    __asm {
        mov eax, unit
        call address
    }
}
void sub_47BF80(CUnit *unit) {
    int address = 0x47bf80;
    __asm {
        mov eax, unit
        call address
    }
}
void orders_HideTrap(CUnit *unit) {
    int address = 0x47c0a0;
    __asm {
        mov eax, unit
        call address
    }
}
void orders_RevealTrap(CUnit *unit) {
    int address = 0x47c1b0;
    __asm {
        mov eax, unit
        call address
    }
}
void orders_JunkYardDog(CUnit *a1) {
    int address = 0x47c210;
    __asm {
        mov eax, a1
        call address
    }
}
void orders_Critter(CUnit *unit) {
    int address = 0x47c3c0;
    __asm {
        mov eax, unit
        call address
    }
}
void orders_StayInRange(CUnit *a1) {
    int address = 0x47c4f0;
    __asm {
        mov eax, a1
        call address
    }
}
void orders_follow(CUnit *unit) {
    int address = 0x47c7b0;
    __asm {
        mov eax, unit
        call address
    }
}
void orders_ignore(CUnit *unit) {
    int address = 0x47c950;
    __asm {
        mov eax, unit
        call address
    }
}
void GiveAllUnitPropertiesToPlayerAndMakeIdle(CUnit *a1, int a2) {
    int address = 0x47c9f0;
    __asm {
        push dword ptr a2
        mov eax, a1
        call address
    }
}
void GiveUnitToNeutral(CUnit *a1) {
    int address = 0x47cb90;
    __asm {
        mov esi, a1
        call address
    }
}
DECL_FUNC(int (*nullsub_37)(), nullsub_37, 0x47cc10);
DECL_FUNC(int (*sub_47CC20)(), sub_47CC20, 0x47cc20);
DECL_FUNC(int (*sub_47CC30)(), sub_47CC30, 0x47cc30);
DECL_FUNC(int (*sub_47CC40)(), sub_47CC40, 0x47cc40);
DECL_FUNC(void (*CMDACT_GameHash)(), CMDACT_GameHash, 0x47cc50);
DECL_FUNC(char (*saveMinimapCounts)(), saveMinimapCounts, 0x47ccb0);
BOOL GameHash(int a1, _BYTE *a2) {
    int address = 0x47ccd0;
    BOOL result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*CreateResourcesHash)(void), CreateResourcesHash, 0x47cd70);
DECL_FUNC(int (*sub_47CDA0)(), sub_47CDA0, 0x47cda0);
BOOL CMD_GameHash(int a1) {
    int address = 0x47cdd0;
    BOOL result_;
    __asm {
        xor eax, eax
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*CreateMaskHash)(), CreateMaskHash, 0x47ce20);
DECL_FUNC(int (*sub_47CE90)(), sub_47CE90, 0x47ce90);
DECL_FUNC(unsigned (*CreateUnitsHash)(), CreateUnitsHash, 0x47ced0);
unsigned CreateHash(unsigned __int8 a1) {
    int address = 0x47cf10;
    unsigned result_;
    __asm {
        xor eax, eax
        mov al, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(unsigned (*UpdateGameHash)(), UpdateGameHash, 0x47cfc0);
DECL_FUNC(unsigned (*resetGameValues)(), resetGameValues, 0x47d070);
DECL_FUNC(int (*nullsub_38)(), nullsub_38, 0x47d100);
DECL_FUNC(void (*nullsub_39)(), nullsub_39, 0x47d110);
DECL_FUNC(int (*nullsub_40)(), nullsub_40, 0x47d120);
DECL_FUNC(int (*nullsub_41)(), nullsub_41, 0x47d130);
DECL_FUNC(void (*nullsub_42)(), nullsub_42, 0x47d140);
DECL_FUNC(int (*nullsub_43)(), nullsub_43, 0x47d150);
DECL_FUNC(void (*nullsub_2)(), nullsub_2, 0x47d160);
DECL_FUNC(void * (__thiscall*sub_47D170)(void *this_, int a2), sub_47D170, 0x47d170);
int sub_47D180(int result) {
    int address = 0x47d180;
    int result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
int sub_47D190(int result) {
    int address = 0x47d190;
    int result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(unsigned (__fastcall*sub_47D1B0)(__int16 a1, __int16 a2), sub_47D1B0, 0x47d1b0);
DECL_FUNC(unsigned (__fastcall*sub_47D1E0)(int a1, __int16 a2), sub_47D1E0, 0x47d1e0);
DECL_FUNC(int (__stdcall*isTileVisible)(int a1, int a2), isTileVisible, 0x47d230);
DECL_FUNC(__int32 (__stdcall*isCreepCovered)(int a1, int a2), isCreepCovered, 0x47d290);
DECL_FUNC(int (__fastcall*sub_47D2C0)(int a1, int a2), sub_47D2C0, 0x47d2c0);
DECL_FUNC(int (*sub_47D300)(), sub_47D300, 0x47d300);
int sub_47D320(int result) {
    int address = 0x47d320;
    int result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
int sub_47D370(int result) {
    int address = 0x47d370;
    int result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__fastcall*sub_47D3C0)(int *this_), sub_47D3C0, 0x47d3c0);
int * sub_47D400(int *result) {
    int address = 0x47d400;
    int * result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__thiscall*sub_47D460)(int *this_), sub_47D460, 0x47d460);
DECL_FUNC(unsigned (*sub_47D500)(), sub_47D500, 0x47d500);
int sub_47D540(int a1, int a2) {
    int address = 0x47d540;
    int result_;
    __asm {
        xor eax, eax
        mov edi, a2
        mov ebx, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__thiscall*sub_47D5F0)(int this_), sub_47D5F0, 0x47d5f0);
DECL_FUNC(__int16 * (*sub_47D660)(), sub_47D660, 0x47d660);
BOOL sub_47D730(unsigned int a1, unsigned int a2) {
    int address = 0x47d730;
    BOOL result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__stdcall*sub_47D770)(CUnit *a1), sub_47D770, 0x47d770);
DECL_FUNC(int (__stdcall*sub_47D860)(int a1, int a2, CUnit *a3), sub_47D860, 0x47d860);
char sub_47D920(RECT *a1) {
    int address = 0x47d920;
    char result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
int LoadDisappearingCreepChunk(FILE *a1) {
    int address = 0x47d9d0;
    int result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
BOOL SaveDisappearingCreepChunk(FILE *a1) {
    int address = 0x47da80;
    BOOL result_;
    __asm {
        xor eax, eax
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(char (__stdcall*RecheckSurrondingCreepDisappearance)(int x, int y), RecheckSurrondingCreepDisappearance, 0x47dc10);
int sub_47DD60(unsigned int a1, unsigned int a2) {
    int address = 0x47dd60;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov ebx, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed sub_47DE40(int a1, int a2, int eax0, UnitType a4) {
    int address = 0x47de40;
    signed result_;
    __asm {
        xor eax, eax
        push dword ptr a4
        mov eax, eax0
        mov edx, a2
        mov ecx, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(signed (__stdcall*sub_47DF90)(CUnit *a1), sub_47DF90, 0x47df90);
DECL_FUNC(signed (__stdcall*sub_47E100)(CUnit *a1), sub_47E100, 0x47e100);
DECL_FUNC(void (__stdcall*sub_47E2D0)(int x, int y, int a3, TileID a4, RECT *a5), sub_47E2D0, 0x47e2d0);
DECL_FUNC(unsigned (*InitializeRandomizerInfo)(), InitializeRandomizerInfo, 0x47e410);
DECL_FUNC(int (__thiscall*sub_47E440)(dialog *this_), sub_47E440, 0x47e440);
DECL_FUNC(void (__fastcall*sub_47E480)(dialog *a1, int a2), sub_47E480, 0x47e480);
DECL_FUNC(void (__fastcall*sub_47E590)(dialog *dlg, int x, int y, rect *dst), sub_47E590, 0x47e590);
void * sub_47E630(dialog *a1, dlgEvent *a2) {
    int address = 0x47e630;
    void * result_;
    __asm {
        xor eax, eax
        mov edi, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void sub_47E690(dialog *dlg) {
    int address = 0x47e690;
    __asm {
        mov eax, dlg
        call address
    }
}
DECL_FUNC(unsigned (__fastcall*tips_PrevNext)(dialog *a1, dlgEvent *a2), tips_PrevNext, 0x47e6d0);
DECL_FUNC(bool (__fastcall*tips_ShowAtStartup)(dialog *dlg, dlgEvent *evt), tips_ShowAtStartup, 0x47e770);
void tips_BinDLG_CustomCtrlID(dialog *a1) {
    int address = 0x47e7b0;
    __asm {
        mov eax, a1
        call address
    }
}
DECL_FUNC(int (__fastcall*tips_dialog_main)(dialog *dlg, dlgEvent *evt), tips_dialog_main, 0x47e9a0);
void open_tips_dialog(int a1) {
    int address = 0x47ea30;
    __asm {
        mov eax, a1
        call address
    }
}
DECL_FUNC(int (*sub_47EA50)(), sub_47EA50, 0x47ea50);
DECL_FUNC(_DWORD (__stdcall*sub_47EA60)(_DWORD a1, _DWORD a2), sub_47EA60, 0x47ea60);
int GetScrollSpeed(int *a1) {
    int address = 0x47eab0;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(char (*CenterCursorGameScreen)(), CenterCursorGameScreen, 0x47eb30);
void assignCenterViewProc(int a1, int a2, void (*a3)(void)) {
    int address = 0x47eb70;
    __asm {
        push dword ptr a3
        mov ecx, a2
        mov eax, a1
        call address
    }
}
DECL_FUNC(char (*sub_47EBB0)(), sub_47EBB0, 0x47ebb0);
DECL_FUNC(void * (*sub_47EBC0)(), sub_47EBC0, 0x47ebc0);
DECL_FUNC(int (*refreshStars)(), refreshStars, 0x47ebf0);
DECL_FUNC(int (*drawStars)(), drawStars, 0x47ee20);
void getScreenMoveState(_DWORD *vertical_delta, _DWORD *horizontal_delta) {
    int address = 0x47ef80;
    __asm {
        mov ecx, horizontal_delta
        mov eax, vertical_delta
        call address
    }
}
DECL_FUNC(void (__cdecl*PollInput)(), PollInput, 0x47f0e0);
DECL_FUNC(void (*loadParallaxStarGfx)(), loadParallaxStarGfx, 0x47f2c0);
DECL_FUNC(int (__thiscall*getLastWhisperPlayerIDIfStrEqual)(size_t a1, char *a2, int a3), getLastWhisperPlayerIDIfStrEqual, 0x47f440);
DECL_FUNC(int (__fastcall*verifyChatCommand)(size_t a1, char *a2, int a3, int a4), verifyChatCommand, 0x47f4d0);
DECL_FUNC(void (*sub_47F580)(), sub_47F580, 0x47f580);
DECL_FUNC(void (__cdecl*LeagueChatFilter)(), LeagueChatFilter, 0x47f590);
DECL_FUNC(char (__stdcall*AUTBNETMESSAGE)(const char *a1), AUTBNETMESSAGE, 0x47f670);
DECL_FUNC(void (__stdcall*BWFXN_GlobalPrintText)(s_evt *evt), BWFXN_GlobalPrintText, 0x47f750);
void sendWhisper(int result, const char *a2) {
    int address = 0x47f7a0;
    __asm {
        push dword ptr a2
        mov eax, result
        call address
    }
}
DECL_FUNC(signed (__stdcall*chatCommandFilter)(char *text), chatCommandFilter, 0x47f8f0);
DECL_FUNC(char * (*maskSomething0)(), maskSomething0, 0x47fc50);
DECL_FUNC(int (*maskSomething2)(), maskSomething2, 0x47fe10);
DECL_FUNC(int (__fastcall*fogGraphicSomething)(int a1, int a2, int a3, int a4, int a5), fogGraphicSomething, 0x47ff10);
DECL_FUNC(int (__fastcall*fogGraphicSomething_0)(_BYTE *a1, int a2), fogGraphicSomething_0, 0x480000);
DECL_FUNC(void (__thiscall*ResetFogSomething)(_DWORD *this_), ResetFogSomething, 0x4800a0);
DECL_FUNC(u32 (__fastcall*gndSightCB_Edge)(int megatile_x, int megatile_y, SightStruct *a3, MegatileFlags *a4, MegatileFlags a5, int a6), gndSightCB_Edge, 0x480110);
DECL_FUNC(int (__fastcall*gndSightCB_Inside)(int a1, int a2, SightStruct *a3, MegatileFlags *a4, unsigned int a5, MegatileFlags a6), gndSightCB_Inside, 0x480200);
DECL_FUNC(MegatileFlags * (__fastcall*airSightCB_Edge)(int megatile_x, int megatile_y, SightStruct *a3, MegatileFlags *a4, int a5, int a6), airSightCB_Edge, 0x4802a0);
DECL_FUNC(int (__fastcall*airSightCB_Inside)(int a1, int a2, SightStruct *a3, MegatileFlags *a4, unsigned int a5, MegatileFlags a6), airSightCB_Inside, 0x480310);
DECL_FUNC(void (__cdecl*DestroyFogSightData)(), DestroyFogSightData, 0x480350);
DECL_FUNC(MegatileFlags * (*sub_480410)(), sub_480410, 0x480410);
DECL_FUNC(int (*sub_480430)(), sub_480430, 0x480430);
DECL_FUNC(int (*j_maskSomething2)(), j_maskSomething2, 0x4804c0);
DECL_FUNC(int (*maskSomething1)(), maskSomething1, 0x4804d0);
DECL_FUNC(char * (*sub_4805D0)(), sub_4805D0, 0x4805d0);
void updateFog(int result, signed int a2, signed int a3, signed int a4) {
    int address = 0x4805f0;
    __asm {
        push dword ptr a4
        push dword ptr a3
        mov edx, a2
        mov eax, result
        call address
    }
}
int revealSightAtLocation(int sight_range, unsigned int vision_mask, signed int x, signed int y, int reveal_from_air) {
    int address = 0x4806f0;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr reveal_from_air
        push dword ptr y
        push dword ptr x
        mov ecx, vision_mask
        mov eax, sight_range
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(char (*sub_4807F0)(), sub_4807F0, 0x4807f0);
DECL_FUNC(void (__cdecl*RemoveFoWCheat)(), RemoveFoWCheat, 0x480880);
void updateAllFog(int a1) {
    int address = 0x4808e0;
    __asm {
        mov eax, a1
        call address
    }
}
DECL_FUNC(void (__cdecl*sub_480960)(), sub_480960, 0x480960);
DECL_FUNC(_DWORD (__stdcall*GetKeyRandomizerSequence)(_DWORD a1), GetKeyRandomizerSequence, 0x480a40);
DECL_FUNC(void (__fastcall*saveColorSettings)(bool exit_code), saveColorSettings, 0x480a90);
DECL_FUNC(int (__thiscall*sub_480AE0)(dialog *this_), sub_480AE0, 0x480ae0);
DECL_FUNC(int (*sub_480B20)(), sub_480B20, 0x480b20);
DECL_FUNC(unsigned (__fastcall*sub_480B30)(dialog *a1, dialog *a2), sub_480B30, 0x480b30);
void sub_480B90(dialog *dlg) {
    int address = 0x480b90;
    __asm {
        mov eax, dlg
        call address
    }
}
int sub_480BD0(dialog *a1) {
    int address = 0x480bd0;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (*loadColorSettings)(), loadColorSettings, 0x480c20);
void video_Cancel(dialog *a1, dlgEvent *a2) {
    int address = 0x480d00;
    __asm {
        mov edi, a2
        mov eax, a1
        call address
    }
}
DECL_FUNC(int (__fastcall*video_PortraitRadioBtns)(dialog *dlg, dlgEvent *evt), video_PortraitRadioBtns, 0x480d50);
DECL_FUNC(int (__fastcall*video_CCyclingCheckbox)(dialog *dlg, dlgEvent *evt), video_CCyclingCheckbox, 0x480d90);
DECL_FUNC(int (__fastcall*video_GammaSlider)(dialog *dlg, dlgEvent *evt), video_GammaSlider, 0x480e10);
void video_CustomCTRLID(dialog *a1) {
    int address = 0x480e50;
    __asm {
        mov eax, a1
        call address
    }
}
void video_Main(dialog *a1) {
    int address = 0x480e70;
    __asm {
        mov eax, a1
        call address
    }
}
void video_OK(dialog *dlg) {
    int address = 0x480ee0;
    __asm {
        mov eax, dlg
        call address
    }
}
DECL_FUNC(int (__fastcall*video_BINDLG_Main)(dialog *dlg, dlgEvent *evt), video_BINDLG_Main, 0x480f90);
DECL_FUNC(void (__cdecl*open_video_options_menu)(), open_video_options_menu, 0x481060);
DECL_FUNC(void (__fastcall*DestroyHelpContext)(bool exit_code), DestroyHelpContext, 0x4810a0);
DECL_FUNC(void (__fastcall*ContextHelpUpdateProc)(int a1, int a2, Bitmap *pSurface, bounds *pBounds), ContextHelpUpdateProc, 0x4810f0);
DECL_FUNC(int (__stdcall*sub_481160)(Bitmap *a1), sub_481160, 0x481160);
DECL_FUNC(int (__stdcall*BitContextHelpSurface)(Bitmap *a1), BitContextHelpSurface, 0x4811e0);
DECL_FUNC(int (__fastcall*sub_481260)(int a1, __int16 a2, Bitmap *a3, __int16 a4), sub_481260, 0x481260);
DECL_FUNC(int (*sub_481310)(), sub_481310, 0x481310);
DECL_FUNC(Bitmap * (*sub_481320)(), sub_481320, 0x481320);
DECL_FUNC(void (__cdecl*CreateHelpContext)(), CreateHelpContext, 0x481330);
void refreshSelectionScreenEx(WORD *a1) {
    int address = 0x4813d0;
    __asm {
        mov edi, a1
        call address
    }
}
DECL_FUNC(void (__cdecl*refreshSelectionScreen)(), refreshSelectionScreen, 0x481480);
void CreateContextHelp(int a1, int a2, char *a3) {
    int address = 0x481510;
    __asm {
        push dword ptr a3
        push dword ptr a2
        mov eax, a1
        call address
    }
}
DECL_FUNC(int (*sub_481690)(), sub_481690, 0x481690);
void md5_ctx_init(int a1, int a2) {
    int address = 0x4816b0;
    __asm {
        push dword ptr a2
        mov eax, a1
        call address
    }
}
int DecryptKey(int a1, int a2, unsigned int a3) {
    int address = 0x4818c0;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__fastcall*SaveCPUThrottleOption)(bool exit_code), SaveCPUThrottleOption, 0x481ae0);
DECL_FUNC(int (__thiscall*speedOptnsScreenScrollSliders)(int this_), speedOptnsScreenScrollSliders, 0x481b00);
void createUpdateSpdOptionsScrollers(dialog *a1) {
    int address = 0x481b80;
    __asm {
        mov eax, a1
        call address
    }
}
DECL_FUNC(int (*sub_481CF0)(), sub_481CF0, 0x481cf0);
bool destroySpdDlg(dialog *a1, dlgEvent *a2) {
    int address = 0x481d30;
    bool result_;
    __asm {
        xor eax, eax
        mov edi, a2
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
DECL_FUNC(bool (__fastcall*spd_speedSlider)(dialog *dlg, struct dlgEvent *evt), spd_speedSlider, 0x481d80);
DECL_FUNC(bool (__fastcall*spd_CPUThrottleCheckbox)(dialog *dlg, dlgEvent *evt), spd_CPUThrottleCheckbox, 0x481de0);
void sub_481E60(dialog *a1) {
    int address = 0x481e60;
    __asm {
        mov eax, a1
        call address
    }
}
char copyOptionsInfoToDialog(dialog *a1) {
    int address = 0x481e80;
    char result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
void change_speed_options(dialog *a1) {
    int address = 0x481ef0;
    __asm {
        mov eax, a1
        call address
    }
}
DECL_FUNC(int (__fastcall*spd_dlg_Interact)(dialog *dlg, dlgEvent *evt), spd_dlg_Interact, 0x481fa0);
DECL_FUNC(void (*open_speed_options_menu)(), open_speed_options_menu, 0x482070);
void SAI_PathCreate_Sub3_1_1_0_0(SAI_Paths *a1, int x, int y, UnknownPathRelated *result) {
    int address = 0x482090;
    __asm {
        mov eax, result
        mov ecx, y
        mov ebx, x
        push dword ptr a1
        call address
    }
}
void SAI_PathCreate_Sub3_1_1_1(SAI_Paths *a1, SaiRegion *a2) {
    int address = 0x4821a0;
    __asm {
        push dword ptr a2
        mov eax, a1
        call address
    }
}
DECL_FUNC(void (__stdcall*SAI_PathCreate_Sub3_1_1_0)(SAI_Paths *sai_paths, int a2, SaiRegion *a3), SAI_PathCreate_Sub3_1_1_0, 0x482290);
void SAI_PathCreate_Sub3_1_1(SAI_Paths *a1) {
    int address = 0x482850;
    __asm {
        mov esi, a1
        call address
    }
}
BOOL sub_482890(int a1, int a2, int a3, int a4) {
    int address = 0x482890;
    BOOL result_;
    __asm {
        xor eax, eax
        push dword ptr a4
        mov esi, a3
        mov ecx, a2
        mov edx, a1
        call address
        mov result_, eax
    }
    return result_;
}
void SAI_PathCreate_Sub3_1_0(SAI_Paths *a1) {
    int address = 0x482900;
    __asm {
        mov edi, a1
        call address
    }
}
__int16 * sub_482A80(__int16 *result) {
    int address = 0x482a80;
    __int16 * result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
void SAI_PathCreate_Sub3_0_2(int a1, SAI_Paths *a2, rect *a3, SaiAccessabilityFlags a4) {
    int address = 0x482ae0;
    __asm {
        push dword ptr a4
        push dword ptr a3
        push dword ptr a2
        mov edx, a1
        call address
    }
}
void SAI_PathCreate_Sub3_0_1(__int16 a1, rect *a2, SAI_Paths *a3) {
    int address = 0x482c60;
    __asm {
        xor ebx, ebx
        push dword ptr a3
        mov esi, a2
        mov bx, a1
        call address
    }
}
int sub_482CC0(int a1, __int16 *a2) {
    int address = 0x482cc0;
    int result_;
    __asm {
        xor eax, eax
        mov edi, a2
        mov edx, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__fastcall*SAI_PathCreate_Sub3_1_2_0)(SAI_Paths *a1, SaiRegion *a2, int a3), SAI_PathCreate_Sub3_1_2_0, 0x482d30);
int SAI_CreateRegionGroupings(SAI_Paths *a1) {
    int address = 0x482da0;
    int result_;
    __asm {
        xor eax, eax
        mov ebx, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__stdcall*SAI_PathCreate_Sub3_2)(SAI_Paths *a1), SAI_PathCreate_Sub3_2, 0x482e10);
DECL_FUNC(void (__stdcall*SAI_PathCreate_Sub3_3)(SAI_Paths *a1), SAI_PathCreate_Sub3_3, 0x483030);
unsigned SAI_PathCreate_Sub5(SaiRegion *a1) {
    int address = 0x483160;
    unsigned result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__cdecl*FreeSAI_Paths)(), FreeSAI_Paths, 0x483200);
DECL_FUNC(void (__cdecl*AllocateSAI_Paths)(), AllocateSAI_Paths, 0x483230);
DECL_FUNC(void (__cdecl*SAI_PathCreate_Sub3_4)(), SAI_PathCreate_Sub3_4, 0x483260);
void SAI_PathCreate_Sub3_0_0(int a1, int a2, SAI_Paths *a3, rect *a4, __int16 a5) {
    int address = 0x483960;
    __asm {
        push dword ptr a5
        push dword ptr a4
        push dword ptr a3
        mov edx, a2
        mov eax, a1
        call address
    }
}
void SAI_PathCreate_Sub3_1(int a1, SAI_Paths *a2) {
    int address = 0x483b50;
    __asm {
        mov ecx, a2
        mov eax, a1
        call address
    }
}
unsigned sub_483BD0(int *a1) {
    int address = 0x483bd0;
    unsigned result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__thiscall*CreateUIUnreachableRegion)(SAI_Paths *paths), CreateUIUnreachableRegion, 0x483c00);
void SAI_PathCreate_Sub1(MegatileFlags *a1) {
    int address = 0x483d20;
    __asm {
        mov eax, a1
        call address
    }
}
DECL_FUNC(void (__cdecl*freeSaiPaths)(), freeSaiPaths, 0x483dd0);
int SAI_PathCreate_Sub3_0(SAI_Paths *a1, Position a2, MapSize size_) {
    int address = 0x483e30;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr size_
        push dword ptr a2
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
int SAI_PathCreate_Sub3(PathCreateRelated *a1, SAI_Paths *a2) {
    int address = 0x484210;
    int result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__stdcall*SAI_PathCreate)(MegatileFlags *a1), SAI_PathCreate, 0x484290);
DECL_FUNC(void (__fastcall*nullsub_3)(dlgEvent *a1), nullsub_3, 0x484350);
int saveScreenLocation(int result) {
    int address = 0x484360;
    int result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__fastcall*input_Game_LeftMouseBtnDwn)(dlgEvent *a1), input_Game_LeftMouseBtnDwn, 0x484380);
DECL_FUNC(void (__fastcall*_input_Game_Idle)(dlgEvent *this_), _input_Game_Idle, 0x484390);
DECL_FUNC(void (__fastcall*input_Game_MiddleMouseBtnUp)(dlgEvent *a1), input_Game_MiddleMouseBtnUp, 0x4843a0);
void resetGameInputProcs(CursorType a1) {
    int address = 0x4843f0;
    __asm {
        push dword ptr a1
        call address
    }
}
DECL_FUNC(void (__thiscall*input_MiddleBtnScreenMove_MouseMove)(dlgEvent *a1), input_MiddleBtnScreenMove_MouseMove, 0x484460);
char recallScreenLocation(int a1) {
    int address = 0x484500;
    char result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
DECL_FUNC(void (__fastcall*input_Game_MiddleMouseBtnDwn)(dlgEvent *a1), input_Game_MiddleMouseBtnDwn, 0x484520);
DECL_FUNC(void (__fastcall*input_standardSysHotkeys)(dlgEvent *this_), input_standardSysHotkeys, 0x484590);
DECL_FUNC(void (__fastcall*input_targetOrder_RightMouseClick)(dlgEvent *a1), input_targetOrder_RightMouseClick, 0x4845f0);
DECL_FUNC(void (__fastcall*input_placeBuilding_RightMouseClick)(dlgEvent *a1), input_placeBuilding_RightMouseClick, 0x484600);
DECL_FUNC(void (__fastcall*input_Game_RightMouseBtnDwn)(dlgEvent *a1), input_Game_RightMouseBtnDwn, 0x484620);
DECL_FUNC(void (__fastcall*input_Game_UserKeyPress)(dlgEvent *a1), input_Game_UserKeyPress, 0x4846b0);
DECL_FUNC(void (__fastcall*CMDACT_Hotkey)(dlgEvent *event), CMDACT_Hotkey, 0x4846e0);
DECL_FUNC(void (*SetInGameInputProcs)(), SetInGameInputProcs, 0x484cc0);
DECL_FUNC(void (*sub_484D90)(), sub_484D90, 0x484d90);
signed getPlayerCountInForce(char a1) {
    int address = 0x484dc0;
    signed result_;
    __asm {
        xor eax, eax
        xor ebx, ebx
        mov bl, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__fastcall*sub_484DF0)(_DWORD a1, _DWORD a2), sub_484DF0, 0x484df0);
DECL_FUNC(int (*sub_484E20)(), sub_484E20, 0x484e20);
DECL_FUNC(int (*sub_484E50)(), sub_484E50, 0x484e50);
DECL_FUNC(int (*sub_484E80)(), sub_484E80, 0x484e80);
char sub_484E90(char a1) {
    int address = 0x484e90;
    char result_;
    __asm {
        xor eax, eax
        mov al, a1
        call address
        mov result_, al
    }
    return result_;
}
DECL_FUNC(int (*sub_484EF0)(void), sub_484EF0, 0x484ef0);
DECL_FUNC(int (*sub_484F20)(void), sub_484F20, 0x484f20);
DECL_FUNC(BOOL (__cdecl*gameIsTeamGame)(), gameIsTeamGame, 0x484f50);
DECL_FUNC(_DWORD (__stdcall*GetMainPlayerForTeam)(char a1), GetMainPlayerForTeam, 0x484f70);
char getOpenObsPlayerCount(char a1) {
    int address = 0x484fc0;
    char result_;
    __asm {
        xor eax, eax
        xor ebx, ebx
        mov bl, a1
        call address
        mov result_, al
    }
    return result_;
}
unsigned getNextActivePlayer(unsigned int *a1) {
    int address = 0x484ff0;
    unsigned result_;
    __asm {
        xor eax, eax
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
const char * getTeamString(unsigned __int8 a1) {
    int address = 0x4850f0;
    const char * result_;
    __asm {
        xor eax, eax
        mov al, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_485130)(), sub_485130, 0x485130);
DECL_FUNC(int (*randomizeTeamGame)(), randomizeTeamGame, 0x485160);
DECL_FUNC(char (*sub_4855E0)(), sub_4855E0, 0x4855e0);
DECL_FUNC(u8 (*illegalTeamCheck)(), illegalTeamCheck, 0x485710);
char sub_4857B0(char a1, unsigned __int8 a2) {
    int address = 0x4857b0;
    char result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov al, a1
        call address
        mov result_, al
    }
    return result_;
}
DECL_FUNC(int (*sub_485820)(), sub_485820, 0x485820);
DECL_FUNC(int (*sub_485860)(), sub_485860, 0x485860);
DECL_FUNC(int (*sub_4858B0)(), sub_4858B0, 0x4858b0);
DECL_FUNC(void (*sub_485900)(), sub_485900, 0x485900);
DECL_FUNC(int (*sub_485920)(), sub_485920, 0x485920);
DECL_FUNC(int (*sub_485930)(), sub_485930, 0x485930);
int isStringValid(unsigned int a1, unsigned int a2, int a3, const char *a4, int a5) {
    int address = 0x485980;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a5
        push dword ptr a4
        mov ebx, a3
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__cdecl*BWFXN_sendTurn)(), BWFXN_sendTurn, 0x485a40);
DECL_FUNC(void (*GameKeepAlive)(), GameKeepAlive, 0x485aa0);
void newGame(int is_in_game) {
    int address = 0x485bb0;
    __asm {
        mov eax, is_in_game
        call address
    }
}
DECL_FUNC(void (__fastcall*BWFXN_QueueCommand)(const void *buffer, unsigned int buffer_size_), BWFXN_QueueCommand, 0x485bd0);
void sub_485C70(int a1, int a2) {
    int address = 0x485c70;
    __asm {
        mov esi, a2
        mov ecx, a1
        call address
    }
}
DECL_FUNC(void (*sub_485CC0)(), sub_485CC0, 0x485cc0);
DECL_FUNC(void (__stdcall*CMDACT_set_latency)(char a1), CMDACT_set_latency, 0x485ce0);
DECL_FUNC(int (__fastcall*SendTextMessage)(unsigned int a1, int edx0, int a3, int a4, int a5), SendTextMessage, 0x485d10);
void CMDRECV_SetLatency(int a1) {
    int address = 0x485e60;
    __asm {
        mov eax, a1
        call address
    }
}
DECL_FUNC(int (__fastcall*SendTextMessagePrivate)(int a1, int a2, unsigned int a3), SendTextMessagePrivate, 0x485f30);
DECL_FUNC(int (__fastcall*SendTextMessagePublic)(int a1, int a2, unsigned int a3), SendTextMessagePublic, 0x485f50);
DECL_FUNC(void (__cdecl*RecvMessage)(), RecvMessage, 0x485f70);
void LOBBYCLASS2_RECV(int a1, int a2, int a3) {
    int address = 0x486040;
    __asm {
        push dword ptr a3
        push dword ptr a2
        mov eax, a1
        call address
    }
}
DECL_FUNC(void (__cdecl*Cls2RecvFrom)(), Cls2RecvFrom, 0x486530);
DECL_FUNC(BOOL (*RecvSaveTurns)(), RecvSaveTurns, 0x486580);
void Game_RECV(u8 *a1, int a2, int a3) {
    int address = 0x4865d0;
    __asm {
        push dword ptr a3
        push dword ptr a2
        mov eax, a1
        call address
    }
}
DECL_FUNC(void (*ParseGameRecvInfo)(), ParseGameRecvInfo, 0x486f50);
DECL_FUNC(int (__cdecl*gameLoopTurns)(), gameLoopTurns, 0x487070);
DECL_FUNC(void (__cdecl*replayLoop)(), replayLoop, 0x487100);
BOOL BriefingLoopTurns(int *a1) {
    int address = 0x487250;
    BOOL result_;
    __asm {
        xor eax, eax
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*nullsub_44)(), nullsub_44, 0x4872a0);
DECL_FUNC(CThingy * (*sub_4872B0)(), sub_4872B0, 0x4872b0);
DECL_FUNC(void (*sub_4872C0)(), sub_4872C0, 0x4872c0);
DECL_FUNC(int (__thiscall*isValid)(void *a1), isValid, 0x4872d0);
DECL_FUNC(int (__thiscall*isNull)(void *a1), isNull, 0x4872e0);
DECL_FUNC(int (*sub_4872F0)(), sub_4872F0, 0x4872f0);
DECL_FUNC(int (*sub_487310)(), sub_487310, 0x487310);
int sub_487320(int result) {
    int address = 0x487320;
    int result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
unsigned sub_487330(unsigned int result) {
    int address = 0x487330;
    unsigned result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_487340)(), sub_487340, 0x487340);
int sub_487350(int result, CThingy *a2, int a3) {
    int address = 0x487350;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        mov edx, a2
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
unsigned sub_4873E0(unsigned int *a1, CThingy *a2, unsigned int a3) {
    int address = 0x4873e0;
    unsigned result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        mov esi, a2
        mov ecx, a1
        call address
        mov result_, eax
    }
    return result_;
}
int * initializeThingyArray(unsigned __int16 count, CThingy **a2, CThingy **a3, CThingy *a4, int (__thiscall *a5)(void *)) {
    int address = 0x487470;
    int * result_;
    __asm {
        xor eax, eax
        push dword ptr a5
        push dword ptr a4
        push dword ptr a3
        push dword ptr a2
        mov ax, count
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(unsigned (*packThingyData)(), packThingyData, 0x487540);
DECL_FUNC(void (__cdecl*unpackThingyData)(), unpackThingyData, 0x4875f0);
DECL_FUNC(BOOL (__stdcall*sub_487690)(CThingy *a1), sub_487690, 0x487690);
bool isThingyOnMap(signed int a1, signed int a2, CThingy *a3) {
    int address = 0x4877b0;
    bool result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
void sub_4878F0(CThingy *a1) {
    int address = 0x4878f0;
    __asm {
        mov esi, a1
        call address
    }
}
DECL_FUNC(void (__cdecl*initializeThingyArrays)(), initializeThingyArrays, 0x487990);
CThingy * sub_487A10(int a1, int a2) {
    int address = 0x487a10;
    CThingy * result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov ebx, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__fastcall*sub_487A90)(CUnit *a1, CUnit *a2), sub_487A90, 0x487a90);
DECL_FUNC(CThingy * (__stdcall*getPlacementRestrictionsFromSpriteID)(int a1, int a2, int a3), getPlacementRestrictionsFromSpriteID, 0x487b00);
DECL_FUNC(CThingy * (__stdcall*sub_487C70)(int a1, int a2, int a3, int a4), sub_487C70, 0x487c70);
int CThingyIsVisible(int a1, CThingy *a2) {
    int address = 0x487cf0;
    int result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void sub_487D90(CThingy *a1) {
    int address = 0x487d90;
    __asm {
        mov edi, a1
        call address
    }
}
DECL_FUNC(int (*readThingyArray)(FILE *file, CThingy *a2, int a3), readThingyArray, 0x487db0);
DECL_FUNC(BOOL (__stdcall*writeThingys)(FILE *file, CThingy *a2, __int16 a3), writeThingys, 0x487ec0);
CUnit * sub_487FD0(__int16 a1, __int16 a2, unsigned __int16 a3) {
    int address = 0x487fd0;
    CUnit * result_;
    __asm {
        xor eax, eax
        xor ecx, ecx
        push dword ptr a3
        mov cx, a2
        mov ax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void sub_488020(CThingy *a1) {
    int address = 0x488020;
    __asm {
        mov edi, a1
        call address
    }
}
signed ReadThingyArrays(FILE *file) {
    int address = 0x488100;
    signed result_;
    __asm {
        xor eax, eax
        mov esi, file
        call address
        mov result_, eax
    }
    return result_;
}
BOOL sub_488140(FILE *a1) {
    int address = 0x488140;
    BOOL result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__cdecl*BWFXN_drawAllThingys)(), BWFXN_drawAllThingys, 0x488180);
BOOL sub_4881E0(char player_id, int a2, int position_x, CThingy *a4, unsigned __int16 position_y) {
    int address = 0x4881e0;
    BOOL result_;
    __asm {
        xor eax, eax
        push dword ptr position_y
        mov esi, a4
        mov ecx, position_x
        mov edx, a2
        mov al, player_id
        call address
        mov result_, eax
    }
    return result_;
}
CThingy * CreateThingy(int sprite_id, int position_x, unsigned __int16 position_y, char player_id) {
    int address = 0x488210;
    CThingy * result_;
    __asm {
        xor eax, eax
        xor edi, edi
        push dword ptr player_id
        mov di, position_y
        push dword ptr position_x
        push dword ptr sprite_id
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(char (*sub_488310)(), sub_488310, 0x488310);
void sub_488350(CThingy *a1) {
    int address = 0x488350;
    __asm {
        mov ebx, a1
        call address
    }
}
DECL_FUNC(CThingy * (__stdcall*sub_488410)(__int16 a1, CSprite *a2), sub_488410, 0x488410);
DECL_FUNC(void (*updateThingys)(), updateThingys, 0x488510);
DECL_FUNC(void (__cdecl*InitializeThingyArray)(), InitializeThingyArray, 0x488550);
void GroundAttackInit(__int16 x, __int16 y) {
    int address = 0x488660;
    __asm {
        xor ecx, ecx
        xor eax, eax
        mov ax, y
        mov cx, x
        call address
    }
}
u8 sub_4886E0(int a1) {
    int address = 0x4886e0;
    u8 result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
DECL_FUNC(BYTE (__thiscall*sub_4886F0)(void *this_), sub_4886F0, 0x4886f0);
BOOL sub_488710(int a1) {
    int address = 0x488710;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_488750)(), sub_488750, 0x488750);
DECL_FUNC(BOOL (*isSinglePaused)(), isSinglePaused, 0x488760);
DECL_FUNC(int (*BWFXN_IsPaused)(), BWFXN_IsPaused, 0x488780);
DECL_FUNC(void (__stdcall*TickCountSomething)(int a1), TickCountSomething, 0x488790);
DECL_FUNC(void (*PauseGame_maybe)(void), PauseGame_maybe, 0x488800);
int sub_488880(unsigned __int16 a1, unsigned __int8 a2) {
    int address = 0x488880;
    int result_;
    __asm {
        xor eax, eax
        xor ecx, ecx
        mov cl, a2
        mov ax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int sub_4888A0(unsigned __int16 a1, unsigned __int8 a2) {
    int address = 0x4888a0;
    int result_;
    __asm {
        xor eax, eax
        xor ecx, ecx
        mov cl, a2
        mov ax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int getSuppliesUsed(unsigned __int8 a1, unsigned __int8 a2) {
    int address = 0x4888c0;
    int result_;
    __asm {
        xor eax, eax
        xor ecx, ecx
        mov cl, a2
        mov al, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__thiscall*getSuppliesAvailable)(_DWORD a1), getSuppliesAvailable, 0x488900);
char sub_488960(unsigned __int16 a1) {
    int address = 0x488960;
    char result_;
    __asm {
        xor eax, eax
        mov ax, a1
        call address
        mov result_, al
    }
    return result_;
}
s32 getSuppliesMax(unsigned __int16 a1, unsigned __int8 a2) {
    int address = 0x488990;
    s32 result_;
    __asm {
        xor eax, eax
        xor ecx, ecx
        mov cl, a2
        mov ax, a1
        call address
        mov result_, eax
    }
    return result_;
}
unsigned getSuppliesRemaining(unsigned __int8 a1, unsigned __int16 a2) {
    int address = 0x4889d0;
    unsigned result_;
    __asm {
        xor eax, eax
        xor ebx, ebx
        xor edi, edi
        mov di, a2
        mov bl, a1
        call address
        mov result_, eax
    }
    return result_;
}
void incrementUnitDeathScores(unsigned int player_id, CUnit *a2) {
    int address = 0x488af0;
    __asm {
        mov edi, a2
        mov edx, player_id
        call address
    }
}
void incrementUnitScores(CUnit *a1, int a2) {
    int address = 0x488bf0;
    __asm {
        push dword ptr a2
        mov eax, a1
        call address
    }
}
void incrementUnitScoresEx(int a1, CUnit *a2, int a3) {
    int address = 0x488d50;
    __asm {
        push dword ptr a3
        mov edi, a2
        mov ecx, a1
        call address
    }
}
__int16 sub_488F50(CUnit *a1) {
    int address = 0x488f50;
    __int16 result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, ax
    }
    return result_;
}
__int16 sub_488F60(CUnit *a1) {
    int address = 0x488f60;
    __int16 result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, ax
    }
    return result_;
}
DECL_FUNC(void (__cdecl*InitializeUnitCounts)(), InitializeUnitCounts, 0x488f90);
DECL_FUNC(int (*nullsub_45)(), nullsub_45, 0x4890d0);
DECL_FUNC(int (*nullsub_46)(), nullsub_46, 0x4890e0);
DECL_FUNC(Location * (*sub_4890F0)(), sub_4890F0, 0x4890f0);
DECL_FUNC(void (*sub_489100)(), sub_489100, 0x489100);
DECL_FUNC(void (*sub_489110)(), sub_489110, 0x489110);
DECL_FUNC(void (*sub_489120)(), sub_489120, 0x489120);
char ExecuteTriggerActions(TriggerListEntry *a1) {
    int address = 0x489130;
    char result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, al
    }
    return result_;
}
signed ExecuteTriggerConditions(TriggerListEntry *a1) {
    int address = 0x489200;
    signed result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(DWORD (*sub_489250)(), sub_489250, 0x489250);
DECL_FUNC(TriggerListEntry * (*sub_489270)(), sub_489270, 0x489270);
DECL_FUNC(TriggerListEntry * (*sub_489280)(), sub_489280, 0x489280);
DECL_FUNC(TriggerListEntry * (*sub_489290)(), sub_489290, 0x489290);
DECL_FUNC(TriggerListEntry * (*sub_4892A0)(), sub_4892A0, 0x4892a0);
DECL_FUNC(TriggerListEntry * (*sub_4892B0)(), sub_4892B0, 0x4892b0);
DECL_FUNC(void (*sub_4892C0)(), sub_4892C0, 0x4892c0);
DECL_FUNC(int (*sub_4892D0)(), sub_4892D0, 0x4892d0);
DECL_FUNC(int (*sub_4892E0)(), sub_4892E0, 0x4892e0);
int sub_4892F0(int result, int a2) {
    int address = 0x4892f0;
    int result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
EndgameState GetEndgameState(int player) {
    int address = 0x489300;
    EndgameState result_;
    __asm {
        xor eax, eax
        mov eax, player
        call address
        mov result_, al
    }
    return result_;
}
void SetEndgameState(int player, EndgameState new_endgame_state) {
    int address = 0x489310;
    __asm {
        xor edx, edx
        mov dl, new_endgame_state
        mov eax, player
        call address
    }
}
int sub_489330(int result) {
    int address = 0x489330;
    int result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
BOOL isPlayerIDValidForScoreChange(unsigned __int8 a1) {
    int address = 0x489350;
    BOOL result_;
    __asm {
        xor eax, eax
        mov al, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*nullsub_47)(), nullsub_47, 0x489390);
DECL_FUNC(void (*sub_4893A0)(), sub_4893A0, 0x4893a0);
DECL_FUNC(int (*resetTriggerProperties)(void), resetTriggerProperties, 0x4893c0);
DECL_FUNC(void (*sub_489410)(), sub_489410, 0x489410);
DECL_FUNC(int (*TimerTick)(), TimerTick, 0x489430);
void executeGameTrigger(TriggerList *a1) {
    int address = 0x489450;
    __asm {
        mov eax, a1
        call address
    }
}
DECL_FUNC(void (*defCenterViewProc)(void), defCenterViewProc, 0x4894a0);
DECL_FUNC(signed (__stdcall*AddGameTrigger)(Trigger *a1), AddGameTrigger, 0x4894c0);
DECL_FUNC(unsigned (*setTriggerPlayerActivityState)(), setTriggerPlayerActivityState, 0x489790);
DECL_FUNC(int (__stdcall*ReadTriggerNodeData)(FILE *a1), ReadTriggerNodeData, 0x4897e0);
DECL_FUNC(int (__stdcall*WriteTriggerData)(FILE *a1), WriteTriggerData, 0x4899d0);
DECL_FUNC(int (*initializeTriggerInfo)(), initializeTriggerInfo, 0x489b30);
DECL_FUNC(void (*UpdateCountdownTimer)(), UpdateCountdownTimer, 0x489c30);
void countdownTimersExecute(unsigned int a1) {
    int address = 0x489cc0;
    __asm {
        mov edx, a1
        call address
    }
}
DECL_FUNC(void (__cdecl*keyPress_Escape)(), keyPress_Escape, 0x489da0);
DECL_FUNC(void (__fastcall*AnnouncePlayerEliminated)(int a1), AnnouncePlayerEliminated, 0x489e80);
dlgEvent * ApplyPlayerLeftRoutine(unsigned __int8 a1) {
    int address = 0x489fc0;
    dlgEvent * result_;
    __asm {
        xor eax, eax
        mov al, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(dlgEvent * (__stdcall*Game_PlayerDropped)(int a1), Game_PlayerDropped, 0x48a180);
DECL_FUNC(dlgEvent * (__stdcall*Game_PlayerLeft)(int a1), Game_PlayerLeft, 0x48a1c0);
DECL_FUNC(void (*endgameCheck)(), endgameCheck, 0x48a200);
DECL_FUNC(void (__cdecl*load_endmission)(), load_endmission, 0x48a410);
DECL_FUNC(void (__stdcall*BWFXN_ExecuteGameTriggers)(signed int dwMillisecondsPerFrame), BWFXN_ExecuteGameTriggers, 0x48a460);
CBullet * sub_48A530(CBullet *result) {
    int address = 0x48a530;
    CBullet * result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_48A550)(), sub_48A550, 0x48a550);
void BulletBehaviour_Instant(CBullet *bullet) {
    int address = 0x48a560;
    __asm {
        mov eax, bullet
        call address
    }
}
DECL_FUNC(void (__thiscall*j_BulletBehaviour_ReAssign)(CBullet *a1), j_BulletBehaviour_ReAssign, 0x48a600);
DECL_FUNC(int (*sub_48A610)(), sub_48A610, 0x48a610);
DECL_FUNC(int (*sub_48A650)(), sub_48A650, 0x48a650);
DECL_FUNC(void (*sub_48A670)(), sub_48A670, 0x48a670);
DECL_FUNC(int (*nullsub_48)(), nullsub_48, 0x48a680);
DECL_FUNC(void (__cdecl*InitializeBulletArray)(), InitializeBulletArray, 0x48a690);
DECL_FUNC(int (*nullsub_49)(), nullsub_49, 0x48a710);
DECL_FUNC(CBullet * (*reorderBulletArrayReferences)(), reorderBulletArrayReferences, 0x48a720);
DECL_FUNC(char * (__thiscall*unpackBulletData)(CBullet *bullet, char *a2), unpackBulletData, 0x48a8d0);
int packBulletData(CBullet *a1, int a2) {
    int address = 0x48a9a0;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void assignWpnData(CBullet *result, BulletState a2) {
    int address = 0x48aa80;
    __asm {
        xor edx, edx
        mov dl, a2
        mov eax, result
        call address
    }
}
DECL_FUNC(CBullet * (__thiscall*BWFXN_clearUnitTarget)(CUnit *this_), BWFXN_clearUnitTarget, 0x48aac0);
signed ReadBulletData(FILE *a1) {
    int address = 0x48ab00;
    signed result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed ReadBulletDataEx(FILE *a1) {
    int address = 0x48abd0;
    signed result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
char * sub_48ACA0(int a1) {
    int address = 0x48aca0;
    char * result_;
    __asm {
        xor eax, eax
        mov ebx, a1
        call address
        mov result_, eax
    }
    return result_;
}
int GetUnitBulletDamage(CUnit *a1, CBullet *a2) {
    int address = 0x48acd0;
    int result_;
    __asm {
        xor eax, eax
        mov edx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(BOOL (__thiscall*isUnitDistanceWithin)(CUnit *this_, CBullet *a2, unsigned int splash_radius), isUnitDistanceWithin, 0x48adb0);
DECL_FUNC(signed (__fastcall*ReadBulletsArray)(int a1, FILE *a2, unsigned __int16 a3), ReadBulletsArray, 0x48ae40);
DECL_FUNC(int (__stdcall*WriteBullets)(FILE *file), WriteBullets, 0x48aeb0);
DECL_FUNC(BOOL (__thiscall*FindNextBounceTargetProc)(CUnit *this_), FindNextBounceTargetProc, 0x48afd0);
DECL_FUNC(signed (__fastcall*AirSplashProc)(CUnit *a1, CBullet *a2), AirSplashProc, 0x48b150);
CUnit * FindNextBounceTarget(CBullet *a1) {
    int address = 0x48b1e0;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void ProgressBulletMovement(CBullet *bullet) {
    int address = 0x48b250;
    __asm {
        mov eax, bullet
        call address
    }
}
void BulletBehaviour_Bounce(CBullet *bullet) {
    int address = 0x48b2d0;
    __asm {
        mov edi, bullet
        call address
    }
}
void BulletBehaviour_Fly(CBullet *bullet) {
    int address = 0x48b3b0;
    __asm {
        mov eax, bullet
        call address
    }
}
void BulletBehaviour_Area(CBullet *a1) {
    int address = 0x48b440;
    __asm {
        mov eax, a1
        call address
    }
}
void BulletBehaviour_Follow(CBullet *a1) {
    int address = 0x48b500;
    __asm {
        mov eax, a1
        call address
    }
}
int Splash(CBullet *a1, CUnit *a2) {
    int address = 0x48b570;
    int result_;
    __asm {
        xor eax, eax
        mov esi, a2
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__fastcall*SplashProc)(CUnit *a1, CBullet *a2), SplashProc, 0x48b680);
DECL_FUNC(int (__fastcall*AirSplashProc2)(CUnit *a1, CBullet *a2), AirSplashProc2, 0x48b730);
DECL_FUNC(int (__fastcall*LurkerSplashProc)(CUnit *a1, CBullet *a2), LurkerSplashProc, 0x48b750);
DECL_FUNC(void (__stdcall*CBullet_Damage)(CBullet *a1), CBullet_Damage, 0x48b770);
DECL_FUNC(void (__thiscall*BulletBehaviour_Persist)(CBullet *this_), BulletBehaviour_Persist, 0x48bc70);
void ProgressBulletState(CBullet *bullet) {
    int address = 0x48bcf0;
    __asm {
        mov eax, bullet
        call address
    }
}
void BulletBehaviour_ReAssign(CBullet *a1) {
    int address = 0x48bd50;
    __asm {
        mov ecx, a1
        call address
    }
}
signed InitializeBullet(CUnit *unit, __int16 a2, char player_id, CBullet *bullet, int weapon_type, int a6, int a7) {
    int address = 0x48bec0;
    signed result_;
    __asm {
        xor eax, eax
        xor edx, edx
        xor ecx, ecx
        push dword ptr a7
        push dword ptr a6
        push dword ptr weapon_type
        push dword ptr bullet
        mov cl, player_id
        mov dx, a2
        mov eax, unit
        call address
        mov result_, eax
    }
    return result_;
}
CBullet * CreateBullet(CUnit *a1, WeaponType weapon_id, int a3, __int16 a4, char a5, int a6) {
    int address = 0x48c260;
    CBullet * result_;
    __asm {
        xor eax, eax
        xor ecx, ecx
        push dword ptr a6
        push dword ptr a5
        push dword ptr a4
        push dword ptr a3
        mov cl, weapon_id
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__cdecl*ImageDrawingBulletDrawing)(), ImageDrawingBulletDrawing, 0x48c3d0);
int sub_48C4A0(int result) {
    int address = 0x48c4a0;
    int result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
int sub_48C4B0(int result) {
    int address = 0x48c4b0;
    int result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
COrder * sub_48C4D0(COrder *result) {
    int address = 0x48c4d0;
    COrder * result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(COrder * (__fastcall*createOrder)(Order a1, u16 a2, Position a3, struct CUnit *a4), createOrder, 0x48c510);
DECL_FUNC(void (__cdecl*InitializeOrderArray)(), InitializeOrderArray, 0x48c590);
DECL_FUNC(BOOL (*sub_48C720)(), sub_48C720, 0x48c720);
DECL_FUNC(int (*nullsub_50)(), nullsub_50, 0x48c730);
DECL_FUNC(int (*sub_48C740)(), sub_48C740, 0x48c740);
DECL_FUNC(COrder ** (*unpackOrderData)(), unpackOrderData, 0x48c770);
DECL_FUNC(int (*packOrderData)(void), packOrderData, 0x48c7d0);
signed ReadOrdersArray(FILE *a1) {
    int address = 0x48c870;
    signed result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
size_t WriteOrders(FILE *savegame_file) {
    int address = 0x48c910;
    size_t result_;
    __asm {
        xor eax, eax
        mov esi, savegame_file
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(char (*sub_48C9F0)(), sub_48C9F0, 0x48c9f0);
DECL_FUNC(void (*sub_48CA00)(), sub_48CA00, 0x48ca00);
DECL_FUNC(void (__cdecl*CancelTargetOrder)(), CancelTargetOrder, 0x48ca10);
DECL_FUNC(char (__stdcall*sub_48CA90)(int a1, __int16 a2), sub_48CA90, 0x48ca90);
DECL_FUNC(char (__stdcall*sub_48CAC0)(int a1), sub_48CAC0, 0x48cac0);
DECL_FUNC(void (*j_CancelTargetOrder)(), j_CancelTargetOrder, 0x48cae0);
void issueTriTargetOrder(char a1, Order order, char a3) {
    int address = 0x48caf0;
    __asm {
        xor ecx, ecx
        xor eax, eax
        xor edx, edx
        mov dl, a3
        mov al, order
        mov cl, a1
        call address
    }
}
DECL_FUNC(u8 (*sub_48CB50)(), sub_48CB50, 0x48cb50);
DECL_FUNC(int (*nullsub_51)(), nullsub_51, 0x48cb70);
void updateTextDisplay(signed int line_number) {
    int address = 0x48cb80;
    __asm {
        mov eax, line_number
        call address
    }
}
DECL_FUNC(void (__cdecl*refreshGameTextIfCounterActive)(), refreshGameTextIfCounterActive, 0x48cc70);
void setUnitStatTxtErrorMsg(const char *message) {
    int address = 0x48ccb0;
    __asm {
        mov eax, message
        call address
    }
}
DECL_FUNC(void (__cdecl*refreshGameTextIfFlagIsSet)(), refreshGameTextIfFlagIsSet, 0x48ccf0);
void PrintText(const char *text, Color color, int tick_count, char flags) {
    int address = 0x48cd30;
    __asm {
        push dword ptr flags
        push dword ptr tick_count
        push dword ptr color
        mov eax, text
        call address
    }
}
DECL_FUNC(void (*resetTextAndLineData)(), resetTextAndLineData, 0x48ce90);
void showStatTxtToPlayer(char *result, int player) {
    int address = 0x48cf00;
    __asm {
        mov ecx, player
        mov eax, result
        call address
    }
}
void createTextMessageWithTimer(const char *text_message, int display_time) {
    int address = 0x48cf20;
    __asm {
        push dword ptr display_time
        mov esi, text_message
        call address
    }
}
DECL_FUNC(void (*sub_48CF40)(), sub_48CF40, 0x48cf40);
DECL_FUNC(void (*BWFXN_DrawHighTarget)(), BWFXN_DrawHighTarget, 0x48cf60);
void InfoMessage(int timeout_ms, const char *text) {
    int address = 0x48d0c0;
    __asm {
        mov edi, text
        mov eax, timeout_ms
        call address
    }
}
void display_error(const char *error_message, Color color) {
    int address = 0x48d140;
    __asm {
        push dword ptr color
        mov esi, error_message
        call address
    }
}
void BWFXN_PrintText(int player, char *string, int replay_recorded_message) {
    int address = 0x48d1c0;
    __asm {
        push dword ptr replay_recorded_message
        push dword ptr string
        mov eax, player
        call address
    }
}
DECL_FUNC(void * (*freePlaceboxBuffer)(), freePlaceboxBuffer, 0x48d560);
DECL_FUNC(int (*sub_48D5A0)(), sub_48D5A0, 0x48d5a0);
DECL_FUNC(int (*sub_48D5B0)(), sub_48D5B0, 0x48d5b0);
DECL_FUNC(void (__stdcall*placebuildingUpdateProc)(Bitmap *a1, WORD *arg4), placebuildingUpdateProc, 0x48d5c0);
signed InitPlacementBoxPos_maybe(int a1) {
    int address = 0x48d660;
    signed result_;
    __asm {
        xor eax, eax
        mov edx, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(WORD * (*sub_48D700)(), sub_48D700, 0x48d700);
int getUnitPlaceboxSize(UnitType a1, int a2, int a3) {
    int address = 0x48d750;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        mov edi, a2
        mov ax, a1
        call address
        mov result_, eax
    }
    return result_;
}
char sub_48D7B0(int a1) {
    int address = 0x48d7b0;
    char result_;
    __asm {
        xor eax, eax
        mov edx, a1
        call address
        mov result_, al
    }
    return result_;
}
int sub_48D7F0(int a1, int a2) {
    int address = 0x48d7f0;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (*sub_48D910)(), sub_48D910, 0x48d910);
int placeBuildingMsg(int a1) {
    int address = 0x48d930;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(BYTE (*refreshLayer3And4)(), refreshLayer3And4, 0x48d9a0);
char sub_48DA30(UnitType a1) {
    int address = 0x48da30;
    char result_;
    __asm {
        xor eax, eax
        mov ax, a1
        call address
        mov result_, al
    }
    return result_;
}
DECL_FUNC(int (__stdcall*sub_48DAF0)(int a1, UnitType a2), sub_48DAF0, 0x48daf0);
BOOL CMDRECV_PlaceBuildingAllowed(CUnit *a1, UnitType ax0, unsigned __int8 a3) {
    int address = 0x48dbd0;
    BOOL result_;
    __asm {
        xor eax, eax
        xor edx, edx
        mov dl, a3
        mov ax, ax0
        mov ecx, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(CUnit * (__stdcall*sub_48DCD0)(int a1), sub_48DCD0, 0x48dcd0);
DECL_FUNC(int (*UpdatePlacementStateForPlacementBox_maybe)(), UpdatePlacementStateForPlacementBox_maybe, 0x48dce0);
DECL_FUNC(BOOL (*_PlaceBuildingAllowed)(), _PlaceBuildingAllowed, 0x48dda0);
DECL_FUNC(char (__fastcall*refreshScreen)(), refreshScreen, 0x48ddc0);
void sub_48DE70(CUnit *a1, Order a2, int a3, UnitType a4) {
    int address = 0x48de70;
    __asm {
        push dword ptr a4
        push dword ptr a3
        push dword ptr a2
        mov eax, a1
        call address
    }
}
BOOL sub_48DFF0(CUnit *a1) {
    int address = 0x48dff0;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__stdcall*cmdRECV_PlaceBuildingNormal)(__int64 a1, int unit_type), cmdRECV_PlaceBuildingNormal, 0x48e010);
DECL_FUNC(void (__stdcall*cmdRECV_PlaceBuildingAddon)(__int64 a1, int a2), cmdRECV_PlaceBuildingAddon, 0x48e0a0);
int cmdRECV_PlaceBuilding(unsigned __int16 a1, int a2, int a3) {
    int address = 0x48e190;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        mov ecx, a2
        mov ax, a1
        call address
        mov result_, eax
    }
    return result_;
}
CUnit * placebuildingRefineryCheck(CUnit *result) {
    int address = 0x48e1e0;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__stdcall*doPlacebuildingChecking)(CUnit *a1), doPlacebuildingChecking, 0x48e210);
DECL_FUNC(void (*refreshPlaceBuildingLocation)(), refreshPlaceBuildingLocation, 0x48e310);
DECL_FUNC(void (*placebuildingRefineryProc)(), placebuildingRefineryProc, 0x48e430);
DECL_FUNC(void (__cdecl*placebuildingNormalProc)(), placebuildingNormalProc, 0x48e490);
void input_placeBuilding_Click_Notify(BYTE *a1, UnitType *a2, char a3) {
    int address = 0x48e4e0;
    __asm {
        push dword ptr a3
        mov esi, a2
        mov eax, a1
        call address
    }
}
DECL_FUNC(void (*sub_48E5A0)(), sub_48E5A0, 0x48e5a0);
DECL_FUNC(void (__fastcall*input_placeBuilding_LeftMouseClick)(dlgEvent *event), input_placeBuilding_LeftMouseClick, 0x48e5d0);
DECL_FUNC(void (__stdcall*sub_48E640)(char a1), sub_48E640, 0x48e640);
DECL_FUNC(void (*pracebuildingProc)(), pracebuildingProc, 0x48e6e0);
char issuePlacebuildingOrder(UnitType a1, char a2) {
    int address = 0x48e730;
    char result_;
    __asm {
        xor eax, eax
        xor esi, esi
        push dword ptr a2
        mov si, a1
        call address
        mov result_, al
    }
    return result_;
}
int getSfxPanFromXDistance(signed int a1) {
    int address = 0x48e850;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_48E8C0)(), sub_48E8C0, 0x48e8c0);
int getSfxVolumeFromScreenDistance(__int16 x, __int16 y) {
    int address = 0x48e8d0;
    int result_;
    __asm {
        xor eax, eax
        xor ecx, ecx
        mov ax, y
        mov cx, x
        call address
        mov result_, eax
    }
    return result_;
}
SfxData rndGetSfxBetween(SfxData a1, SfxData a2) {
    int address = 0x48e940;
    SfxData result_;
    __asm {
        xor eax, eax
        mov esi, a2
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__fastcall*input_Game_Idle)(dlgEvent *this_), input_Game_Idle, 0x48e980);
DECL_FUNC(int (__fastcall*resetUnitAttackNotifyTimer)(CUnit *a1, CUnit *a2), resetUnitAttackNotifyTimer, 0x48e9f0);
DECL_FUNC(unsigned (__fastcall*sub_48EA00)(SfxData a1), sub_48EA00, 0x48ea00);
SfxData getUnitPissSfxOrBldgWhatSfx(UnitType unit_type, int a2) {
    int address = 0x48ea20;
    SfxData result_;
    __asm {
        xor eax, eax
        mov edx, a2
        mov ax, unit_type
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(SfxData (__fastcall*GetRndYesSfx)(UnitType a1), GetRndYesSfx, 0x48eab0);
CUnit * resetAllUnitAttackNotifyTimersInRange(int a1) {
    int address = 0x48eae0;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
BOOL unitCanPlaySFX(int a1) {
    int address = 0x48eb30;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(char (*sub_48EB90)(), sub_48EB90, 0x48eb90);
DECL_FUNC(BOOL (*MuteUnitSpeech_maybe)(), MuteUnitSpeech_maybe, 0x48ebc0);
void PlaySoundAtPos(SfxData sfx, points a2, int a3, int a4) {
    int address = 0x48ec10;
    __asm {
        push dword ptr a4
        push dword ptr a3
        push dword ptr a2
        mov ebx, sfx
        call address
        add esp, 12
    }
}
int PlaySound(SfxData sfxId, CUnit *sourceUnit, int a3, signed int a4) {
    int address = 0x48ed50;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a4
        push dword ptr a3
        mov esi, sourceUnit
        mov ebx, sfxId
        call address
        mov result_, eax
    }
    return result_;
}
void ShowErrorMessageWithSfx(int playerId, __int16 statTxtId, SfxData sfxId) {
    int address = 0x48ee30;
    __asm {
        xor edi, edi
        mov esi, sfxId
        mov di, statTxtId
        mov ebx, playerId
        call address
    }
}
int sub_48EEF0(int a1) {
    int address = 0x48eef0;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void get_statTxt_Str_0(const char *a1, CUnit *unit, int a3) {
    int address = 0x48ef30;
    __asm {
        mov ecx, a3
        mov edx, unit
        mov eax, a1
        call address
    }
}
void playBuildPlacementSound_0(unsigned __int16 a1) {
    int address = 0x48eff0;
    __asm {
        xor eax, eax
        mov ax, a1
        call address
    }
}
void playUpgradeCompleteSound(CUnit *a1) {
    int address = 0x48f070;
    __asm {
        mov esi, a1
        call address
    }
}
void playResearchCompleteSound(CUnit *a1) {
    int address = 0x48f150;
    __asm {
        mov esi, a1
        call address
    }
}
DECL_FUNC(void (__stdcall*doAttackNotifyEvent)(CUnit *a1), doAttackNotifyEvent, 0x48f230);
void PlayBuildingCompleteSound(CUnit *a1) {
    int address = 0x48f310;
    __asm {
        mov eax, a1
        call address
    }
}
void playMorphingCompleteSound(CUnit *a1) {
    int address = 0x48f440;
    __asm {
        mov eax, a1
        call address
    }
}
void PlayWorkerActionSound(CUnit *a1) {
    int address = 0x48f4d0;
    __asm {
        mov eax, a1
        call address
    }
}
void playBuildingLandSound(CUnit *a1) {
    int address = 0x48f5a0;
    __asm {
        mov eax, a1
        call address
    }
}
void playBuildPlacementSound(CUnit *a1) {
    int address = 0x48f630;
    __asm {
        mov eax, a1
        call address
    }
}
void PlayWorkerErrorSound(CUnit *unit, int a2) {
    int address = 0x48f6c0;
    __asm {
        push dword ptr a2
        mov eax, unit
        call address
    }
}
void SetWorkerError(CUnit *a1, int a2) {
    int address = 0x48f7b0;
    __asm {
        push dword ptr a2
        mov eax, a1
        call address
    }
}
void PlayBuildingLiftoffSound(CUnit *a1) {
    int address = 0x48f8a0;
    __asm {
        mov eax, a1
        call address
    }
}
DECL_FUNC(void (__stdcall*selectBuildingSFX)(CUnit *a1), selectBuildingSFX, 0x48f910);
DECL_FUNC(void (__stdcall*LoadRaceSFX)(char a1), LoadRaceSFX, 0x48fb40);
signed prepareMessageTeamFilter(signed int result) {
    int address = 0x48fc70;
    signed result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(signed (*prepareMessageAllyFilter)(), prepareMessageAllyFilter, 0x48fdb0);
void msgfltr_OK(dialog *result) {
    int address = 0x48ff10;
    __asm {
        mov eax, result
        call address
    }
}
DECL_FUNC(unsigned (__stdcall*sub_490000)(int arg0), sub_490000, 0x490000);
int sub_4900A0(dialog *a1, int a2) {
    int address = 0x4900a0;
    int result_;
    __asm {
        xor eax, eax
        mov edi, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
dlgEvent * sub_4900C0(dialog *a1, int player_id) {
    int address = 0x4900c0;
    dlgEvent * result_;
    __asm {
        xor eax, eax
        mov edi, player_id
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
char sub_490110(dialog *a1) {
    int address = 0x490110;
    char result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
void sub_4901A0(dialog *a1, int player_id) {
    int address = 0x4901a0;
    __asm {
        mov edi, player_id
        mov eax, a1
        call address
    }
}
DECL_FUNC(void (__fastcall*cbForceEntryUpdateFxn)(dialog *dlg, int x, int y, rect *dst), cbForceEntryUpdateFxn, 0x4901f0);
void updateForceNamesAndCallbacks(dialog *a1, int player_id) {
    int address = 0x490250;
    __asm {
        mov edx, player_id
        mov eax, a1
        call address
    }
}
DECL_FUNC(unsigned (__thiscall*sub_490300)(dialog *this_), sub_490300, 0x490300);
DECL_FUNC(void (__thiscall*sub_490570)(dialog *this_), sub_490570, 0x490570);
DECL_FUNC(bool (__fastcall*allyfltr_VisionBox)(dialog *dlg, dlgEvent *evt), allyfltr_VisionBox, 0x490850);
char sub_4908E0(struct dlgEvent *a1, dialog *a2) {
    int address = 0x4908e0;
    char result_;
    __asm {
        xor eax, eax
        mov esi, a2
        mov edx, a1
        call address
        mov result_, al
    }
    return result_;
}
DECL_FUNC(bool (__fastcall*allyfltr_AllianceBox)(dialog *dlg, dlgEvent *evt), allyfltr_AllianceBox, 0x490960);
DECL_FUNC(bool (__fastcall*msgfltr_SendToText)(dialog *dlg, struct dlgEvent *evt), msgfltr_SendToText, 0x490a10);
u8 sub_490A50(dialog *a1) {
    int address = 0x490a50;
    u8 result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
DECL_FUNC(bool (__fastcall*allyfltr_AllyVictoryBox)(dialog *dlg, dlgEvent *evt), allyfltr_AllyVictoryBox, 0x490c40);
void AllyFltr_CustomCtrlID(dialog *a1) {
    int address = 0x490d70;
    __asm {
        mov ebx, a1
        call address
    }
}
DECL_FUNC(int (__fastcall*msgfltr_EditBox)(dialog *dlg, struct dlgEvent *evt), msgfltr_EditBox, 0x490e10);
void msgfltr_MainBox(dialog *a1) {
    int address = 0x490e40;
    __asm {
        mov eax, a1
        call address
    }
}
void sub_490E70(dialog *a1) {
    int address = 0x490e70;
    __asm {
        mov eax, a1
        call address
    }
}
void sub_490E90(dialog *a1) {
    int address = 0x490e90;
    __asm {
        mov eax, a1
        call address
    }
}
DECL_FUNC(int (__fastcall*msgfltr_Main)(dialog *dlg, dlgEvent *evt), msgfltr_Main, 0x490ef0);
DECL_FUNC(void (*sub_490FC0)(), sub_490FC0, 0x490fc0);
void CMDACT_AllyVisionPair(dialog *a1) {
    int address = 0x490fe0;
    __asm {
        mov ebx, a1
        call address
    }
}
DECL_FUNC(int (__fastcall*allyFltr_Main)(dialog *dlg, dlgEvent *evt), allyFltr_Main, 0x491310);
DECL_FUNC(void (__cdecl*MinimapControl_ShowAllianceDialog)(), MinimapControl_ShowAllianceDialog, 0x4913d0);
DECL_FUNC(void (*sub_491450)(), sub_491450, 0x491450);
CUnit * Unit__SpendEnergy(CUnit *result, __int16 energy) {
    int address = 0x491460;
    CUnit * result_;
    __asm {
        xor eax, eax
        push dword ptr energy
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(BOOL (__stdcall*Unit__HasEnergy)(int a1, unsigned __int16 a2), Unit__HasEnergy, 0x491480);
signed getSpecialOrderErrorStatstring(int tech, UnitType unit_type) {
    int address = 0x4914b0;
    signed result_;
    __asm {
        xor eax, eax
        push dword ptr unit_type
        mov eax, tech
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_491520)(), sub_491520, 0x491520);
signed InitializeBurrowedUnitsLinkedListRef(FILE *a1) {
    int address = 0x491570;
    signed result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__stdcall*writeBurrowedUnitIndex)(FILE *a1), writeBurrowedUnitIndex, 0x4915c0);
DECL_FUNC(int (*sub_491670)(), sub_491670, 0x491670);
DECL_FUNC(int (*sub_4916A0)(), sub_4916A0, 0x4916a0);
DECL_FUNC(signed (__thiscall*IsUnitCloaking)(CUnit *this_), IsUnitCloaking, 0x4916e0);
void secondaryOrd_Cloak(CUnit *result) {
    int address = 0x491790;
    __asm {
        mov eax, result
        call address
    }
}
BOOL unitHasStatusEffect(CUnit *a1) {
    int address = 0x491810;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed BWFXN_GetMaxEnergy(CUnit *a1) {
    int address = 0x491870;
    signed result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void sub_491A30(CUnit *a1) {
    int address = 0x491a30;
    __asm {
        mov eax, a1
        call address
    }
}
Tech getCloakingTech(CUnit *a1) {
    int address = 0x491a50;
    Tech result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
signed getCloakingSomething(CUnit *a1) {
    int address = 0x491a90;
    signed result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(BOOL (__fastcall*sub_491AE0)(int a1, CUnit *a2), sub_491AE0, 0x491ae0);
void ApplyCloakingOrder(CUnit *result) {
    int address = 0x491b30;
    __asm {
        mov eax, result
        call address
    }
}
DECL_FUNC(int (*sub_491BF0)(), sub_491BF0, 0x491bf0);
DECL_FUNC(int (*GetDarkArchonEnergy)(void), GetDarkArchonEnergy, 0x491c00);
void secondaryOrd_CloakNearbyUnits(CUnit *a1) {
    int address = 0x491c20;
    __asm {
        mov edi, a1
        call address
    }
}
int CanCastOrderedSpellNow(CUnit *a1) {
    int address = 0x491db0;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
__int16 getTargetUnitAbilityErrorStatString(CUnit *a1, char player_id, int tech) {
    int address = 0x491e80;
    __int16 result_;
    __asm {
        xor eax, eax
        xor ebx, ebx
        push dword ptr tech
        mov bl, player_id
        mov eax, a1
        call address
        mov result_, ax
    }
    return result_;
}
BOOL getOrderTargetErrorString(Tech2 tech, CUnit *a2, UnitType a3, CUnit *a4, __int16 a5, int a6, int a7) {
    int address = 0x492020;
    BOOL result_;
    __asm {
        xor eax, eax
        xor edx, edx
        xor esi, esi
        push dword ptr a7
        push dword ptr a6
        push dword ptr a5
        push dword ptr a4
        mov si, a3
        mov edi, a2
        mov dx, tech
        call address
        mov result_, eax
    }
    return result_;
}
signed canCastSpell_0(CUnit *a1) {
    int address = 0x492140;
    signed result_;
    __asm {
        xor eax, eax
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
char RemoveOverlaysBetween(unsigned int a1, CUnit *a2, unsigned int a3) {
    int address = 0x492370;
    char result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        mov ebx, a2
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
signed SpellOrder_MoveTowardsTarget(int range, CUnit *a2) {
    int address = 0x492450;
    signed result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, range
        call address
        mov result_, eax
    }
    return result_;
}
int OrderedSpell_ProgressMoving(CUnit *a1, int a2) {
    int address = 0x492620;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed SpellOrder(int default_error_str, CUnit *a2, Tech2 tech, int a4, int a5) {
    int address = 0x4926d0;
    signed result_;
    __asm {
        xor eax, eax
        push dword ptr a5
        push dword ptr a4
        push dword ptr tech
        mov ebx, a2
        mov eax, default_error_str
        call address
        mov result_, eax
    }
    return result_;
}
void orders_Spell(CUnit *a1) {
    int address = 0x492850;
    __asm {
        mov eax, a1
        call address
    }
}
void EMPShockwaveHit(__int16 x, __int16 y, CUnit *attacker) {
    int address = 0x492ba0;
    __asm {
        xor ecx, ecx
        xor eax, eax
        push dword ptr attacker
        mov ax, y
        mov cx, x
        call address
    }
}
void FreezeUnit(CUnit *a1) {
    int address = 0x492cc0;
    __asm {
        mov eax, a1
        call address
    }
}
void ApplyUnitEffects(CUnit *a1) {
    int address = 0x492da0;
    __asm {
        mov eax, a1
        call address
    }
}
void sub_492E80(int a1, CUnit *a2) {
    int address = 0x492e80;
    __asm {
        mov ebx, a2
        mov eax, a1
        call address
    }
}
DECL_FUNC(void (*updateBurrowingCloakingUnits)(), updateBurrowingCloakingUnits, 0x492eb0);
void updateUnitStatusTimers(CUnit *unit) {
    int address = 0x492f70;
    __asm {
        mov eax, unit
        call address
    }
}
CUnit * removeFromPsiProviderList(CUnit *result) {
    int address = 0x493100;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
BOOL sub_493160(int a1) {
    int address = 0x493160;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__thiscall*MergeUnitStatusEffects)(_DWORD a1), MergeUnitStatusEffects, 0x493180);
DECL_FUNC(void * (*sub_493290)(), sub_493290, 0x493290);
DECL_FUNC(void (*sub_4932C0)(), sub_4932C0, 0x4932c0);
void secondaryOrd_ShieldBatteryRecharging(CUnit *a1) {
    int address = 0x4932d0;
    __asm {
        mov edi, a1
        call address
    }
}
DECL_FUNC(void (*initializePsiFieldData)(void), initializePsiFieldData, 0x493360);
CheatFlags ApplyRechargeShields(int a1, int a2) {
    int address = 0x4934b0;
    CheatFlags result_;
    __asm {
        xor eax, eax
        mov ebx, a2
        mov ecx, a1
        call address
        mov result_, eax
    }
    return result_;
}
BOOL unitCanRechargeShields(CUnit *a1, CUnit *a2) {
    int address = 0x493520;
    BOOL result_;
    __asm {
        xor eax, eax
        mov edi, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(CUnit * (*RemoveAllPylonAuras)(), RemoveAllPylonAuras, 0x4935f0);
DECL_FUNC(void (*createPylonAura)(), createPylonAura, 0x493640);
signed unitHasPower(unsigned __int16 a1, int a2, int a3, char a4) {
    int address = 0x4936b0;
    signed result_;
    __asm {
        xor eax, eax
        push dword ptr a4
        push dword ptr a3
        push dword ptr a2
        mov ax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__cdecl*updateUnitPower)(), updateUnitPower, 0x493790);
DECL_FUNC(int (__fastcall*orderAllMoveToRechargeShieldsProc)(CUnit *a1, CUnit *a2), orderAllMoveToRechargeShieldsProc, 0x493900);
void Orders_HarvestInterrupt(CUnit *unit) {
    int address = 0x493920;
    __asm {
        mov edi, unit
        call address
    }
}
void orders_RechargeShields2(CUnit *a1) {
    int address = 0x493990;
    __asm {
        mov eax, a1
        call address
    }
}
void orders_cloakNearbyUnits(CUnit *unit) {
    int address = 0x493a80;
    __asm {
        mov esi, unit
        call address
    }
}
void orders_CompletingArchonSummon(CUnit *unit) {
    int address = 0x493b10;
    __asm {
        mov esi, unit
        call address
    }
}
DECL_FUNC(CSprite * (__thiscall*sub_493BF0)(CUnit *this_), sub_493BF0, 0x493bf0);
char PrepareUnitMoveClearRefs(CUnit *unit, bool hideUnit) {
    int address = 0x493ca0;
    char result_;
    __asm {
        xor eax, eax
        push dword ptr hideUnit
        mov edi, unit
        call address
        mov result_, al
    }
    return result_;
}
void orders_RechargeShields1(CUnit *unit) {
    int address = 0x493dd0;
    __asm {
        mov edi, unit
        call address
    }
}
void orders_InitPsiProvider(CUnit *a1) {
    int address = 0x493f70;
    __asm {
        mov eax, a1
        call address
    }
}
DECL_FUNC(void (*CreateAllPylonAuras)(), CreateAllPylonAuras, 0x494030);
DECL_FUNC(void (*hideAllPsiFields)(), hideAllPsiFields, 0x494100);
void RefreshRevealUnitAfterMove(CUnit *unit) {
    int address = 0x494160;
    __asm {
        mov eax, unit
        call address
    }
}
void doRecallMoveUnit(CUnit *unit, CUnit *a2) {
    int address = 0x4942d0;
    __asm {
        push dword ptr a2
        mov ebx, unit
        call address
    }
}
DECL_FUNC(int (__fastcall*recallUnitsCB)(CUnit *a1, CUnit *a2), recallUnitsCB, 0x494400);
DECL_FUNC(void (__stdcall*orders_Recall)(CUnit *a1), orders_Recall, 0x494470);
void orders_WarpingDarkArchon(CUnit *unit) {
    int address = 0x494690;
    __asm {
        mov eax, unit
        call address
    }
}
void orders_WarpingArchon(CUnit *unit) {
    int address = 0x4948b0;
    __asm {
        mov eax, unit
        call address
    }
}
DECL_FUNC(int (*nullsub_52)(), nullsub_52, 0x494ab0);
DECL_FUNC(int (*sub_494AC0)(), sub_494AC0, 0x494ac0);
DECL_FUNC(int (*sub_494AE0)(), sub_494AE0, 0x494ae0);
int sub_494B10(int result, int a2, int *a3, int *a4) {
    int address = 0x494b10;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a4
        mov esi, a3
        mov ecx, a2
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_494B40)(), sub_494B40, 0x494b40);
void AttackFlyToTarget(CBullet *bullet, int x, int y) {
    int address = 0x494b70;
    __asm {
        mov ecx, y
        mov edx, x
        mov eax, bullet
        call address
    }
}
DECL_FUNC(int (__fastcall*setSecondaryWaypoint)(_DWORD a1, _DWORD a2), setSecondaryWaypoint, 0x494bb0);
unsigned sub_494BD0(int direction, char a2) {
    int address = 0x494bd0;
    unsigned result_;
    __asm {
        xor eax, eax
        xor ecx, ecx
        mov cl, a2
        mov eax, direction
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_494BF0)(), sub_494BF0, 0x494bf0);
int arctangent(int slope) {
    int address = 0x494c10;
    int result_;
    __asm {
        xor eax, eax
        mov eax, slope
        call address
        mov result_, eax
    }
    return result_;
}
char * sub_494C60(char *result) {
    int address = 0x494c60;
    char * result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
char ** sub_494C70(char **result, int a2) {
    int address = 0x494c70;
    char ** result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
int packFlingyData(unsigned int *a1, int a2) {
    int address = 0x494ce0;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(unsigned (*initializeFlingyArray)(), initializeFlingyArray, 0x494da0);
DECL_FUNC(int (*sub_494ED0)(), sub_494ED0, 0x494ed0);
DECL_FUNC(int (*sub_494F20)(), sub_494F20, 0x494f20);
DECL_FUNC(void (__fastcall*sub_494F60)(CFlingy *a1, s32 a2), sub_494F60, 0x494f60);
DECL_FUNC(s32 (__thiscall*getFlingyHaltDistance)(CFlingy *this_), getFlingyHaltDistance, 0x494f90);
DECL_FUNC(int (__thiscall*sub_494FE0)(CUnit *this_), sub_494FE0, 0x494fe0);
void ProgressMovementFlag(CUnit *result) {
    int address = 0x495080;
    __asm {
        mov eax, result
        call address
    }
}
CUnit * Unit_MatchVelocityWithDirection(CUnit *result) {
    int address = 0x495100;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
CUnit * SetUnitMovementSpeed(CUnit *result, int a2) {
    int address = 0x4951c0;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov edx, a2
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_495200)(), sub_495200, 0x495200);
CBullet * ChangeMovePos(CBullet *result, int y, int x) {
    int address = 0x495240;
    CBullet * result_;
    __asm {
        xor eax, eax
        mov esi, x
        mov ecx, y
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_495290)(), sub_495290, 0x495290);
DECL_FUNC(int (*sub_4952C0)(), sub_4952C0, 0x4952c0);
signed GetAngle(int x_start, int y_start, int x_end, int y_end) {
    int address = 0x495300;
    signed result_;
    __asm {
        xor eax, eax
        mov eax, y_end
        mov ecx, x_end
        push dword ptr y_start
        mov edx, x_start
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__cdecl*CleanupFlingyDat)(), CleanupFlingyDat, 0x495350);
int packUnpackFlingyData(int a1) {
    int address = 0x495370;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
CBullet * sub_495400(CUnit *a1, CUnit *a2) {
    int address = 0x495400;
    CBullet * result_;
    __asm {
        xor eax, eax
        mov edi, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void sub_495580(CUnit *a1) {
    int address = 0x495580;
    __asm {
        mov esi, a1
        call address
    }
}
void sub_495590(CFlingy *a1, int x, int y) {
    int address = 0x495590;
    __asm {
        mov ecx, y
        mov edx, x
        mov eax, a1
        call address
    }
}
void AppearOnTarget(signed __int16 y, __int16 x, CFlingy *flingy) {
    int address = 0x4955c0;
    __asm {
        xor ecx, ecx
        xor edx, edx
        mov eax, flingy
        mov dx, x
        mov cx, y
        call address
    }
}
CFlingy * uflunstableRandomize(CFlingy *result) {
    int address = 0x4955f0;
    CFlingy * result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
s32 sub_4956C0(CUnit *a1) {
    int address = 0x4956c0;
    s32 result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
void setResourceGatheringFlags(int a1) {
    int address = 0x4957a0;
    __asm {
        mov esi, a1
        call address
    }
}
CUnit * Unit_AssignNextWP(CUnit *a1) {
    int address = 0x495840;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
void sub_4958C0(CFlingy *flingy) {
    int address = 0x4958c0;
    __asm {
        mov esi, flingy
        call address
    }
}
s32 sub_495980(unsigned __int8 a1, int a2, CUnit *a3) {
    int address = 0x495980;
    s32 result_;
    __asm {
        xor eax, eax
        mov ecx, a3
        mov edx, a2
        mov al, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_495A10)(), sub_495A10, 0x495a10);
DECL_FUNC(int (__stdcall*ReadFlingyArray)(FILE *a1), ReadFlingyArray, 0x495a50);
DECL_FUNC(int (__stdcall*WriteFlingys)(FILE *file), WriteFlingys, 0x495b50);
void sub_495CB0(CFlingy *a1) {
    int address = 0x495cb0;
    __asm {
        mov esi, a1
        call address
    }
}
void sub_495E80(unsigned __int8 a1, CUnit *a2) {
    int address = 0x495e80;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov al, a1
        call address
    }
}
void sub_495EE0(CUnit *a1) {
    int address = 0x495ee0;
    __asm {
        mov eax, a1
        call address
    }
}
void turnUnit(CUnit *unit, char direction) {
    int address = 0x495f20;
    __asm {
        xor ebx, ebx
        mov bl, direction
        mov eax, unit
        call address
    }
}
void sub_495F90(CUnit *a1) {
    int address = 0x495f90;
    __asm {
        mov eax, a1
        call address
    }
}
DECL_FUNC(signed (__stdcall*sub_496030)(CUnit *a1), sub_496030, 0x496030);
DECL_FUNC(char (__thiscall*sub_496140)(CUnit *this_), sub_496140, 0x496140);
void turn_unit_left(CUnit *unit, char a2) {
    int address = 0x496170;
    __asm {
        xor ecx, ecx
        mov cl, a2
        mov eax, unit
        call address
    }
}
void turn_unit_right(CUnit *unit, char a2) {
    int address = 0x496190;
    __asm {
        xor edx, edx
        mov dl, a2
        mov eax, unit
        call address
    }
}
void sub_4961B0(CUnit *unit) {
    int address = 0x4961b0;
    __asm {
        mov eax, unit
        call address
    }
}
void UpdateImage(CUnit *unit) {
    int address = 0x4961f0;
    __asm {
        mov edi, unit
        call address
    }
}
DECL_FUNC(void (*UpdateImages)(), UpdateImages, 0x496330);
CSprite * sub_496360(int flingyID, __int16 a2, int position_y, CFlingy *a4, char a5, char a6) {
    int address = 0x496360;
    CSprite * result_;
    __asm {
        xor eax, eax
        xor edx, edx
        push dword ptr a6
        push dword ptr a5
        push dword ptr a4
        mov ecx, position_y
        mov dx, a2
        mov eax, flingyID
        call address
        mov result_, eax
    }
    return result_;
}
CFlingy * ISCRIPT_CreateFlingy(char a1, __int16 a2, int a3, FlingyID flingy_id) {
    int address = 0x496460;
    CFlingy * result_;
    __asm {
        xor eax, eax
        xor edx, edx
        push dword ptr flingy_id
        mov ecx, a3
        mov dx, a2
        mov al, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__cdecl*InitializeFlingyDat)(), InitializeFlingyDat, 0x496520);
DECL_FUNC(char (__fastcall*sub_496560)(int a1), sub_496560, 0x496560);
DECL_FUNC(void (__cdecl*sub_4965A0)(), sub_4965A0, 0x4965a0);
BYTE * sub_4965D0(unsigned __int8 a1, int a2) {
    int address = 0x4965d0;
    BYTE * result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov al, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_4967A0)(), sub_4967A0, 0x4967a0);
DECL_FUNC(void (__fastcall*centerviewUnitGroup)(unsigned __int8 a1), centerviewUnitGroup, 0x4967e0);
DECL_FUNC(__int16 (__stdcall*sub_496940)(unsigned __int8 a1), sub_496940, 0x496940);
DECL_FUNC(void (__stdcall*selectUnitGroup)(unsigned __int8 index), selectUnitGroup, 0x496b40);
DECL_FUNC(int (__stdcall*selectSingleUnitFromID)(int a1), selectSingleUnitFromID, 0x496d30);
void sub_496E90(unsigned __int8 a1) {
    int address = 0x496e90;
    __asm {
        xor ebx, ebx
        mov bl, a1
        call address
    }
}
DECL_FUNC(int (*nullsub_53)(), nullsub_53, 0x496ea0);
DECL_FUNC(unsigned (__thiscall*sub_496EB0)(void *this_), sub_496EB0, 0x496eb0);
DECL_FUNC(int (*sub_496ED0)(), sub_496ED0, 0x496ed0);
DECL_FUNC(int (__stdcall*sub_496EE0)(int a1, int a2), sub_496EE0, 0x496ee0);
DECL_FUNC(int (__thiscall*clearUnitSprites)(_DWORD a1), clearUnitSprites, 0x496f00);
int sub_496F80(int a1) {
    int address = 0x496f80;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int sub_496FB0(int result) {
    int address = 0x496fb0;
    int result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
int * sub_496FC0(void *a1, char *a2, int *a3) {
    int address = 0x496fc0;
    int * result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (*EnableVisibilityHashUpdate)(), EnableVisibilityHashUpdate, 0x496ff0);
int isImageRefreshable(CImage *a1) {
    int address = 0x497000;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
char refreshImage(CImage *a1) {
    int address = 0x4970a0;
    char result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
DECL_FUNC(char (__stdcall*sub_4970F0)(__int16 *a1), sub_4970F0, 0x4970f0);
DECL_FUNC(void (__cdecl*createUnitBuildingSpriteValidityArray)(), createUnitBuildingSpriteValidityArray, 0x497110);
DECL_FUNC(unsigned (*initializeSpriteArray)(), initializeSpriteArray, 0x497230);
CSprite * unpackSpriteData(CSprite *sprite) {
    int address = 0x497310;
    CSprite * result_;
    __asm {
        xor eax, eax
        mov eax, sprite
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__thiscall*packSpriteData)(CSprite *this_), packSpriteData, 0x497380);
DECL_FUNC(int (__thiscall*sub_497400)(int this_), sub_497400, 0x497400);
void setAllImageGroupFlagsPal11(CSprite *sprite) {
    int address = 0x497430;
    __asm {
        mov eax, sprite
        call address
    }
}
CImage * getSpriteUnderlay(CSprite *a1, unsigned int a2, unsigned int a3) {
    int address = 0x497460;
    CImage * result_;
    __asm {
        xor eax, eax
        mov esi, a3
        mov edx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void refreshAllVisibleImagesAtScreenPosition(CSprite *a1, char a2) {
    int address = 0x497480;
    __asm {
        push dword ptr a2
        mov ebx, a1
        call address
    }
}
char refreshGrpImage(int a1) {
    int address = 0x497530;
    char result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
char removeSelectionCircleFromSprite(CSprite *a1) {
    int address = 0x497590;
    char result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
DECL_FUNC(char (__thiscall*removeSelectionCircle)(CSprite *this_), removeSelectionCircle, 0x4975d0);
char removeSelectionCircleAndHPBar(CSprite *a1) {
    int address = 0x497620;
    char result_;
    __asm {
        xor eax, eax
        mov edi, a1
        call address
        mov result_, al
    }
    return result_;
}
char sub_497690(int a1) {
    int address = 0x497690;
    char result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
int sub_4976A0(int a1) {
    int address = 0x4976a0;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int sub_4976B0(int a1) {
    int address = 0x4976b0;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
char refreshAllVisibleSprites(CSprite *a1) {
    int address = 0x4976c0;
    char result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
void refreshCarryableSprite(CSprite *sprite) {
    int address = 0x497750;
    __asm {
        mov eax, sprite
        call address
    }
}
int getSpriteRect(int a1, _DWORD *a2) {
    int address = 0x4977c0;
    int result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void playIdleIscript(CSprite *a1) {
    int address = 0x497880;
    __asm {
        mov eax, a1
        call address
    }
}
void spriteToIscriptLoop(CSprite *a1) {
    int address = 0x497920;
    __asm {
        mov esi, a1
        call address
    }
}
void sub_497A10(CSprite *sprite, __int16 x, __int16 y) {
    int address = 0x497a10;
    __asm {
        xor ebx, ebx
        xor edi, edi
        mov di, y
        mov bx, x
        mov ecx, sprite
        call address
    }
}
int sub_497B20(int result, char a2) {
    int address = 0x497b20;
    int result_;
    __asm {
        xor eax, eax
        xor ecx, ecx
        mov cl, a2
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
void SpriteDestructor(CSprite *sprite) {
    int address = 0x497b40;
    __asm {
        mov edi, sprite
        call address
    }
}
int sub_497C10(int a1) {
    int address = 0x497c10;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void UpdateVisibilityHash(int a1) {
    int address = 0x497c30;
    __asm {
        mov ebx, a1
        call address
    }
}
void drawImage(CImage *image) {
    int address = 0x497ce0;
    __asm {
        mov esi, image
        call address
    }
}
DECL_FUNC(void (__cdecl*CleanupSpritesDat)(), CleanupSpritesDat, 0x497d60);
DECL_FUNC(int * (__thiscall*sub_497D80)(void *this_), sub_497D80, 0x497d80);
DECL_FUNC(void (*sub_497DA0)(), sub_497DA0, 0x497da0);
CImage * setSpriteColoringData(CSprite *a1, unsigned __int8 a2) {
    int address = 0x497dc0;
    CImage * result_;
    __asm {
        xor eax, eax
        xor ebx, ebx
        mov bl, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed sub_497E10(CSprite *a1, int a2, int a3) {
    int address = 0x497e10;
    signed result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
CImage * updateSpriteFlagOnPalette(CSprite *a1) {
    int address = 0x497e80;
    CImage * result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void makeSpriteVisible(CSprite *a1) {
    int address = 0x497ed0;
    __asm {
        mov eax, a1
        call address
    }
}
char sub_497F80(CSprite *a1) {
    int address = 0x497f80;
    char result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
char sub_497FA0(CSprite *a1) {
    int address = 0x497fa0;
    char result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
void sub_497FD0(char a1, CSprite *a2, unsigned __int8 a3, char a4) {
    int address = 0x497fd0;
    __asm {
        xor eax, eax
        push dword ptr a4
        push dword ptr a3
        mov esi, a2
        mov al, a1
        call address
        add esp, 8
    }
}
CImage * sub_4980F0(CSprite *a1) {
    int address = 0x4980f0;
    CImage * result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
void Sprite_SetVerticalOffset(CSprite *sprite, char a2) {
    int address = 0x498150;
    __asm {
        xor ecx, ecx
        mov cl, a2
        mov eax, sprite
        call address
    }
}
char sub_498170(CSprite *a1) {
    int address = 0x498170;
    char result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
CImage * updateCarryableSpriteFlag(CSprite *a1) {
    int address = 0x4981b0;
    CImage * result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__stdcall*sub_498220)(int a1, int a2), sub_498220, 0x498220);
int sub_498260(int *a1, int a2, int *a3) {
    int address = 0x498260;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        mov edi, a2
        mov edx, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__stdcall*DoVisibilityUpdate)(int a1, unsigned int a2), DoVisibilityUpdate, 0x4982d0);
char refreshSpriteData(CSprite *result) {
    int address = 0x4983a0;
    char result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, al
    }
    return result_;
}
CImage * sub_498450(int a1) {
    int address = 0x498450;
    CImage * result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void unknownColorShiftSomething(u8 result, char a2) {
    int address = 0x498470;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov al, result
        call address
    }
}
DECL_FUNC(int (__stdcall*ReadSpritesArray)(FILE *a1), ReadSpritesArray, 0x498570);
DECL_FUNC(BOOL (__stdcall*writeSprites)(FILE *file), writeSprites, 0x498740);
DECL_FUNC(int (*RemoveAllSelectionCircles)(), RemoveAllSelectionCircles, 0x4989a0);
void sub_498A10(CSprite *a1) {
    int address = 0x498a10;
    __asm {
        mov eax, a1
        call address
    }
}
void UpdateSpriteImagesForCloak(CSprite *a1) {
    int address = 0x498a90;
    __asm {
        mov edi, a1
        call address
    }
}
void sub_498B20(CSprite *result, char a2) {
    int address = 0x498b20;
    __asm {
        push dword ptr a2
        mov eax, result
        call address
        add esp, 4
    }
}
void sub_498B50(CSprite *a1, unsigned __int8 a2) {
    int address = 0x498b50;
    __asm {
        push dword ptr a2
        mov eax, a1
        call address
    }
}
void SetAllSpriteImageOverlaysDirection(CSprite *a1, unsigned __int8 direction) {
    int address = 0x498c30;
    __asm {
        xor edi, edi
        mov di, word ptr direction
        mov eax, a1
        call address
    }
}
void drawSprite(CSprite *a1) {
    int address = 0x498c50;
    __asm {
        mov eax, a1
        call address
    }
}
void refreshImageRange(int result, unsigned int a2) {
    int address = 0x498cb0;
    __asm {
        mov ebx, a2
        mov eax, result
        call address
    }
}
DECL_FUNC(void (*BWFXN_updateImageData)(), BWFXN_updateImageData, 0x498cf0);
DECL_FUNC(void (__cdecl*BWFXN_drawAllSprites)(), BWFXN_drawAllSprites, 0x498d40);
void sub_498D70(CSprite *a1, int esi0, char a3, char a4, int a5) {
    int address = 0x498d70;
    __asm {
        push dword ptr a5
        push dword ptr a4
        push dword ptr a3
        mov esi, esi0
        mov eax, a1
        call address
        add esp, 12
    }
}
CImage * CreateImageOverlay(CSprite *a1, int esi0, char a3, char a4, int a5) {
    int address = 0x498e00;
    CImage * result_;
    __asm {
        xor eax, eax
        push dword ptr a5
        push dword ptr a4
        push dword ptr a3
        mov esi, esi0
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void CreateOverlay(CSprite *a1, int esi0, char a3, char a4, int a5) {
    int address = 0x498ea0;
    __asm {
        push dword ptr a5
        push dword ptr a4
        push dword ptr a3
        mov esi, esi0
        mov eax, a1
        call address
        add esp, 12
    }
}
CImage * sub_498F40(CSprite *a1, int a2, char a3, char a4, unsigned int a5) {
    int address = 0x498f40;
    CImage * result_;
    __asm {
        xor eax, eax
        push dword ptr a5
        push dword ptr a4
        push dword ptr a3
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed initSpriteData(unsigned __int16 x, unsigned __int16 y, int sprite_id, char player_id, CSprite *sprite) {
    int address = 0x499030;
    signed result_;
    __asm {
        xor eax, eax
        xor edi, edi
        xor ecx, ecx
        push dword ptr sprite
        mov cl, player_id
        mov edx, sprite_id
        mov di, y
        mov ax, x
        call address
        mov result_, eax
    }
    return result_;
}
CSprite * createSprite(int sprite_id, int position_x, unsigned __int16 position_y, char player_id) {
    int address = 0x4990f0;
    CSprite * result_;
    __asm {
        xor eax, eax
        xor edi, edi
        push dword ptr player_id
        mov di, position_y
        push dword ptr position_x
        push dword ptr sprite_id
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(CSprite * (__stdcall*sub_499210)(CSprite *a1), sub_499210, 0x499210);
CImage * sub_499380(CSprite *a1, int a2) {
    int address = 0x499380;
    CImage * result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__stdcall*CreateDamageOverlay)(CSprite *a1), CreateDamageOverlay, 0x4993c0);
DECL_FUNC(void (__stdcall*CreateBuildingFlames)(CSprite *a1), CreateBuildingFlames, 0x499580);
int CreateSpriteEx(int result, CSprite *a2, unsigned __int8 a3, int a4, int a5, char a6) {
    int address = 0x499660;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a6
        push dword ptr a5
        push dword ptr a4
        push dword ptr a3
        mov ebx, a2
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
void sub_499730(CSprite *a1) {
    int address = 0x499730;
    __asm {
        mov esi, a1
        call address
    }
}
char sub_4997A0(int a1, CSprite *a2, int a3) {
    int address = 0x4997a0;
    char result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        mov esi, a2
        mov ecx, a1
        call address
        mov result_, al
    }
    return result_;
}
int CreateLandingDustOverlays(CSprite *a1) {
    int address = 0x4997e0;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int CreateLiftoffDustOverlays(CSprite *a1) {
    int address = 0x499820;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void sub_499860(CImage *a1, CSprite *a2) {
    int address = 0x499860;
    __asm {
        mov ecx, a2
        mov eax, a1
        call address
    }
}
DECL_FUNC(void (__cdecl*InitializeSpriteArray)(), InitializeSpriteArray, 0x499900);
DECL_FUNC(_DWORD (__stdcall*CreateDashedSelection)(_DWORD a1), CreateDashedSelection, 0x499a10);
DECL_FUNC(void (__cdecl*CreateAllSelectionCircles)(), CreateAllSelectionCircles, 0x499a60);
void ReplaceSpriteOverlayImage(CSprite *a1, int a2, char a3) {
    int address = 0x499bb0;
    __asm {
        push dword ptr a3
        push dword ptr a2
        mov eax, a1
        call address
    }
}
DECL_FUNC(void (__thiscall*playSpriteIscript)(CSprite *sprite, Anims animation, int a3), playSpriteIscript, 0x499d00);
DECL_FUNC(unsigned (*sub_499D40)(), sub_499D40, 0x499d40);
size_t GameResultText(int *a1, char **player_names, const char *a3, const char *a4) {
    int address = 0x499d50;
    size_t result_;
    __asm {
        xor eax, eax
        push dword ptr a4
        push dword ptr a3
        push dword ptr player_names
        mov ebx, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(unsigned (*sub_499E00)(), sub_499E00, 0x499e00);
DECL_FUNC(char * (*GetLeagueTimestamp)(), GetLeagueTimestamp, 0x499e20);
int createLeagueFile(char *a1) {
    int address = 0x499ec0;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__stdcall*StoreString)(char *source), StoreString, 0x49a040);
DECL_FUNC(void * (*sub_49A060)(), sub_49A060, 0x49a060);
BOOL IsHumanPlayerOnSameTeam(int a1) {
    int address = 0x49a110;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int sub_49A170(CUnit *a1, int player) {
    int address = 0x49a170;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr player
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*nullsub_54)(), nullsub_54, 0x49a260);
signed isRgnIdNeighbor(unsigned __int16 a1, __int16 a2) {
    int address = 0x49a270;
    signed result_;
    __asm {
        xor eax, eax
        xor esi, esi
        mov si, a2
        mov ax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*isSelectedUnitGroupEnabled)(), isSelectedUnitGroupEnabled, 0x49a2c0);
DECL_FUNC(int (*sub_49A320)(), sub_49A320, 0x49a320);
BOOL compareUnitRank(CUnit *a1, CUnit *a2) {
    int address = 0x49a350;
    BOOL result_;
    __asm {
        xor eax, eax
        mov esi, a2
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed sub_49A410(CUnit *a1, Order a2) {
    int address = 0x49a410;
    signed result_;
    __asm {
        xor eax, eax
        xor edx, edx
        mov dl, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed sub_49A480(Order a1, CUnit *a2) {
    int address = 0x49a480;
    signed result_;
    __asm {
        xor eax, eax
        xor edx, edx
        mov esi, a2
        mov dl, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__stdcall*GetFormationMovementTarget)(CUnit *unit, int a2), GetFormationMovementTarget, 0x49a500);
char sub_49A740(int a1) {
    int address = 0x49a740;
    char result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
signed sub_49A7F0(CUnit *a1) {
    int address = 0x49a7f0;
    signed result_;
    __asm {
        xor eax, eax
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(CUnit * (__cdecl*GetActivePlayerNextSelectionFunc)(), GetActivePlayerNextSelectionFunc, 0x49a850);
DECL_FUNC(CUnit * (*sub_49A8B0)(), sub_49A8B0, 0x49a8b0);
char PrepareFormationMovement(int a1, char a2) {
    int address = 0x49a8c0;
    char result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov edi, a1
        call address
        mov result_, al
    }
    return result_;
}
DECL_FUNC(char (__stdcall*sub_49AB00)(__int16 a1, __int16 a2, CUnit *a3, __int16 a4, Order a5, char a6), sub_49AB00, 0x49ab00);
void CreateNewUnitSelectionsFromList(CUnit **a1, int unit_count) {
    int address = 0x49ae40;
    __asm {
        push dword ptr unit_count
        mov eax, a1
        call address
    }
}
DECL_FUNC(signed (__stdcall*selectMultipleUnitsFromUnitList)(int a1, CUnit **a2, char a3, int a4), selectMultipleUnitsFromUnitList, 0x49aef0);
int sub_49AF80(int a1, int a2, CUnit *a3) {
    int address = 0x49af80;
    int result_;
    __asm {
        xor eax, eax
        mov esi, a3
        mov edi, a2
        mov ebx, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__stdcall*sub_49AFE0)(char a1), sub_49AFE0, 0x49afe0);
DECL_FUNC(int (*sub_49B010)(), sub_49B010, 0x49b010);
DECL_FUNC(int (*sub_49B020)(), sub_49B020, 0x49b020);
DECL_FUNC(int (__fastcall*sub_49B030)(int a1), sub_49B030, 0x49b030);
unsigned sub_49B050(unsigned int result) {
    int address = 0x49b050;
    unsigned result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(signed (*sub_49B060)(), sub_49B060, 0x49b060);
unsigned getColourID(unsigned int result) {
    int address = 0x49b0e0;
    unsigned result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
int setPlayerColours(int result, char *a2) {
    int address = 0x49b130;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_49B1C0)(), sub_49B1C0, 0x49b1c0);
Order sub_49B1E0(CUnit *a1) {
    int address = 0x49b1e0;
    Order result_;
    __asm {
        xor eax, eax
        mov edi, a1
        call address
        mov result_, al
    }
    return result_;
}
unsigned sub_49B280(CUnit *a1) {
    int address = 0x49b280;
    unsigned result_;
    __asm {
        xor eax, eax
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
char AI_CloakUnit(CUnit *a1) {
    int address = 0x49b2b0;
    char result_;
    __asm {
        xor eax, eax
        mov edi, a1
        call address
        mov result_, al
    }
    return result_;
}
DECL_FUNC(int (__stdcall*sub_49B320)(char a1), sub_49B320, 0x49b320);
DECL_FUNC(void * (__stdcall*RandomizePlayerColours)(void *a1), RandomizePlayerColours, 0x49b360);
unsigned sub_49B410(CUnit *a1) {
    int address = 0x49b410;
    unsigned result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
void DoCloak(CUnit *a1, SfxData sfx_id) {
    int address = 0x49b440;
    __asm {
        mov ebx, sfx_id
        mov eax, a1
        call address
    }
}
DECL_FUNC(void (*initializePlayerColours)(), initializePlayerColours, 0x49b500);
void PlaySoundFromDirect(CUnit *a1, SfxData sfx_id) {
    int address = 0x49b5b0;
    __asm {
        mov ecx, sfx_id
        mov eax, a1
        call address
    }
}
DECL_FUNC(u8 (*sub_49B690)(), sub_49B690, 0x49b690);
DECL_FUNC(u8 (*setAlliance)(), setAlliance, 0x49b870);
BOOL sub_49B8D0(int *a1, int *a2, int *a3, int *a4) {
    int address = 0x49b8d0;
    BOOL result_;
    __asm {
        xor eax, eax
        push dword ptr a4
        push dword ptr a3
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void drawMegatileImageData(int megatile, int framebuf_position, int x, int y) {
    int address = 0x49b9f0;
    __asm {
        push dword ptr y
        push dword ptr x
        mov edi, framebuf_position
        mov ebx, megatile
        call address
        add esp, 8
    }
}
DECL_FUNC(int (*sub_49BB50)(), sub_49BB50, 0x49bb50);
DECL_FUNC(int (*sub_49BB90)(), sub_49BB90, 0x49bb90);
DECL_FUNC(int (__stdcall*sub_49BC20)(int x, int y, int a3, int a4), sub_49BC20, 0x49bc20);
unsigned UpdateTileCacheOnXScreenMovement(unsigned int a1, _WORD *a2, unsigned int a3) {
    int address = 0x49bd40;
    unsigned result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
unsigned UpdateTileCacheOnYScreenMovement(int a1, _WORD *a2, unsigned int a3) {
    int address = 0x49be20;
    unsigned result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_49BF20)(), sub_49BF20, 0x49bf20);
DECL_FUNC(unsigned (__thiscall*sub_49BF70)(void *this_), sub_49BF70, 0x49bf70);
DECL_FUNC(unsigned (__fastcall*sub_49BFA0)(int a1), sub_49BFA0, 0x49bfa0);
DECL_FUNC(char (*BWFXN_UpdateScreenPosition)(), BWFXN_UpdateScreenPosition, 0x49bfd0);
signed moveToXScrIncrease(int a1) {
    int address = 0x49c0c0;
    signed result_;
    __asm {
        xor eax, eax
        mov edx, a1
        call address
        mov result_, eax
    }
    return result_;
}
int moveToXScrDecrease(int a1) {
    int address = 0x49c1a0;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int moveToYScrIncrease(int a1) {
    int address = 0x49c280;
    int result_;
    __asm {
        xor eax, eax
        mov edx, a1
        call address
        mov result_, eax
    }
    return result_;
}
int moveToYScrDecrease(int a1) {
    int address = 0x49c360;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
char BWFXN_MoveScreen(unsigned int a1, unsigned int a2) {
    int address = 0x49c440;
    char result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
DECL_FUNC(void (__cdecl*updateActiveTileInfo)(), updateActiveTileInfo, 0x49c4c0);
void drawScreenRowTiles(__int16 *a1, TileID *a2, MegatileFlags *a3, int a4, int a5) {
    int address = 0x49c620;
    __asm {
        push dword ptr a5
        push dword ptr a4
        push dword ptr a3
        push dword ptr a2
        mov eax, a1
        call address
    }
}
DECL_FUNC(void (__cdecl*BWFXN_drawMapTiles)(), BWFXN_drawMapTiles, 0x49c780);
int sub_49C870(unsigned __int16 a1) {
    int address = 0x49c870;
    int result_;
    __asm {
        xor eax, eax
        mov ax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int sub_49C890(unsigned __int16 a1, int a2) {
    int address = 0x49c890;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov ax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int getRegionNeighborsFromId(unsigned __int16 a1, int a2) {
    int address = 0x49c8c0;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov ax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_49C8F0)(), sub_49C8F0, 0x49c8f0);
int sub_49C900(int result, unsigned __int16 a2) {
    int address = 0x49c900;
    int result_;
    __asm {
        xor eax, eax
        xor edx, edx
        mov dx, a2
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
u16 sub_49C930(unsigned __int16 a1) {
    int address = 0x49c930;
    u16 result_;
    __asm {
        xor eax, eax
        mov ax, a1
        call address
        mov result_, ax
    }
    return result_;
}
BOOL sub_49C950(unsigned __int16 a1) {
    int address = 0x49c950;
    BOOL result_;
    __asm {
        xor eax, eax
        mov ax, a1
        call address
        mov result_, eax
    }
    return result_;
}
BOOL sub_49C980(unsigned __int16 a1) {
    int address = 0x49c980;
    BOOL result_;
    __asm {
        xor eax, eax
        mov ax, a1
        call address
        mov result_, eax
    }
    return result_;
}
u16 SAI_GetRegionIdFromPx(__int16 y, __int16 x) {
    int address = 0x49c9a0;
    u16 result_;
    __asm {
        xor eax, eax
        push dword ptr x
        mov ax, y
        call address
        mov result_, ax
    }
    return result_;
}
unsigned GetRegionIdAtPosEx(signed int y, signed int x) {
    int address = 0x49c9f0;
    unsigned result_;
    __asm {
        xor eax, eax
        mov edi, x
        mov ecx, y
        call address
        mov result_, eax
    }
    return result_;
}
int getRegionCenterFromId(unsigned __int16 a1, int a2) {
    int address = 0x49ca70;
    int result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov ax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int getRegionCenterFromId2(unsigned __int16 a1, int a2, int a3) {
    int address = 0x49caa0;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        push dword ptr a2
        mov ax, a1
        call address
        mov result_, eax
    }
    return result_;
}
BOOL sub_49CAE0(signed int a1, signed int a2) {
    int address = 0x49cae0;
    BOOL result_;
    __asm {
        xor eax, eax
        mov edi, a2
        mov ecx, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (*sub_49CB10)(), sub_49CB10, 0x49cb10);
unsigned getRegionIdFromUnit(CUnit *a1) {
    int address = 0x49cb40;
    unsigned result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
BOOL HasPathToPos(CUnit *a1, signed int y, signed int x) {
    int address = 0x49cb60;
    BOOL result_;
    __asm {
        xor eax, eax
        push dword ptr x
        push dword ptr y
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
BOOL HasPathToTarget(CUnit *a1, CUnit *a2) {
    int address = 0x49cbb0;
    BOOL result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(signed (*sub_49CC10)(), sub_49CC10, 0x49cc10);
DECL_FUNC(int (*sub_49CC30)(), sub_49CC30, 0x49cc30);
DECL_FUNC(void (__cdecl*savePlayerSlotTypesAndRace)(), savePlayerSlotTypesAndRace, 0x49cc40);
BOOL sub_49CCA0(__int16 *a1) {
    int address = 0x49cca0;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__fastcall*airTrainingProc)(CUnit *a1, CUnit *a2), airTrainingProc, 0x49cce0);
signed sub_49CDC0(__int16 a1, __int16 a2, CUnit *a3, int a4, __int16 a5, __int16 a6, int a7) {
    int address = 0x49cdc0;
    signed result_;
    __asm {
        xor eax, eax
        xor edx, edx
        push dword ptr a7
        push dword ptr a6
        push dword ptr a5
        push dword ptr a4
        push dword ptr a3
        mov dx, a2
        mov ax, a1
        call address
        mov result_, eax
    }
    return result_;
}
bool CheckUnitCollisionPos(__int16 *move_area, CUnit *unit, Position *inPos, Position *outPos, bool hideErrorMsg, int flags) {
    int address = 0x49d3e0;
    bool result_;
    __asm {
        xor eax, eax
        push dword ptr flags
        push dword ptr hideErrorMsg
        push dword ptr outPos
        push dword ptr inPos
        push dword ptr unit
        mov eax, move_area
        call address
        mov result_, al
    }
    return result_;
}
DECL_FUNC(int (__thiscall*SelfDestructCB)(CUnit *this_), SelfDestructCB, 0x49d640);
__int16 sub_49D660(CUnit *a1) {
    int address = 0x49d660;
    __int16 result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, ax
    }
    return result_;
}
DECL_FUNC(void (__stdcall*CreateInitialOverlord)(unsigned __int8 player_index), CreateInitialOverlord, 0x49d6c0);
void CreateInitialMeleeWorker(RaceId race, unsigned __int8 player_index) {
    int address = 0x49d760;
    __asm {
        xor eax, eax
        push dword ptr player_index
        mov al, race
        call address
    }
}
void CreateInitialMeleeBuildings(RaceId race, unsigned __int8 player_index) {
    int address = 0x49d7c0;
    __asm {
        xor eax, eax
        push dword ptr player_index
        mov al, race
        call address
    }
}
DECL_FUNC(void (__cdecl*CreateInitialTeamMeleeUnits)(), CreateInitialTeamMeleeUnits, 0x49d8e0);
DECL_FUNC(void (__cdecl*CreateInitialMeleeUnits)(), CreateInitialMeleeUnits, 0x49da40);
CUnit * sub_49DC20(CUnit *result) {
    int address = 0x49dc20;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
CUnit * sub_49DC60(CUnit *result) {
    int address = 0x49dc60;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
CUnit * CListPushBackUsedUnitEntry(CUnit *result) {
    int address = 0x49dca0;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
CUnit * CListPushBackHiddenUnitEntry(CUnit *result) {
    int address = 0x49dce0;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
CUnit * sub_49DD20(CUnit *result) {
    int address = 0x49dd20;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
CUnit * sub_49DD60(CUnit *result) {
    int address = 0x49dd60;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
CUnit * sub_49DDB0(CUnit *result) {
    int address = 0x49ddb0;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
CUnit * CListRemoveEmptyUnitEntry(CUnit *result) {
    int address = 0x49de00;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
CUnit * CListRemoveHiddenUnitEntry(CUnit *result) {
    int address = 0x49de50;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
CUnit * CListRemoveUsedUnitEntry(CUnit *result) {
    int address = 0x49dea0;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__stdcall*get_zero)(int a1, int a2, int a3), get_zero, 0x49def0);
CUnit * GetFirstPlayerUnit(int player_id) {
    int address = 0x49df00;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov eax, player_id
        call address
        mov result_, eax
    }
    return result_;
}
BOOL isUnitTypeAtPositionInBounds(unsigned __int16 a1, int a2, int a3) {
    int address = 0x49df10;
    BOOL result_;
    __asm {
        xor eax, eax
        mov ecx, a3
        mov edx, a2
        mov ax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(CUnit * (*sub_49DF70)(), sub_49DF70, 0x49df70);
DECL_FUNC(CUnit * (*sub_49DF80)(), sub_49DF80, 0x49df80);
DECL_FUNC(CUnit * (*sub_49DF90)(), sub_49DF90, 0x49df90);
DECL_FUNC(CUnit * (*sub_49DFA0)(), sub_49DFA0, 0x49dfa0);
CUnit * sub_49DFB0(unsigned __int8 a1) {
    int address = 0x49dfb0;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov al, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(CUnit * (*sub_49DFC0)(), sub_49DFC0, 0x49dfc0);
DECL_FUNC(CUnit * (*sub_49DFD0)(), sub_49DFD0, 0x49dfd0);
DECL_FUNC(CUnit * (*sub_49DFE0)(), sub_49DFE0, 0x49dfe0);
DECL_FUNC(CUnit * (*sub_49DFF0)(), sub_49DFF0, 0x49dff0);
DECL_FUNC(CUnit * (*sub_49E000)(), sub_49E000, 0x49e000);
DECL_FUNC(unsigned (*ReassignTargetAcquisitionRange)(), ReassignTargetAcquisitionRange, 0x49e010);
u16 GetOrderEnergyCost(Order order) {
    int address = 0x49e1c0;
    u16 result_;
    __asm {
        xor eax, eax
        mov al, order
        call address
        mov result_, ax
    }
    return result_;
}
DECL_FUNC(CUnit * (*sub_49E1E0)(), sub_49E1E0, 0x49e1e0);
CUnit * InitializeEmptyUnitsLinkedListRef(int a1) {
    int address = 0x49e1f0;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(CUnit * (*sub_49E260)(), sub_49E260, 0x49e260);
CUnit * sub_49E290(CUnit *result) {
    int address = 0x49e290;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
CUnit * sub_49E2D0(CUnit *result) {
    int address = 0x49e2d0;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(DatLoad * (*uselessIterateUnitsAndOrdersDatLoadTables)(), uselessIterateUnitsAndOrdersDatLoadTables, 0x49e300);
CUnit * removeUnitFromList(CUnit *a1) {
    int address = 0x49e340;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
void sub_49E3F0(CUnit *result) {
    int address = 0x49e3f0;
    __asm {
        mov eax, result
        call address
    }
}
DECL_FUNC(void (__fastcall*sub_49E4E0)(CUnit *a1, char player_id), sub_49E4E0, 0x49e4e0);
DECL_FUNC(void (__stdcall*displayLastNetError)(unsigned __int8 player_id), displayLastNetError, 0x49e530);
DECL_FUNC(COrder * (__thiscall*sub_49E590)(CUnit *this_, CUnit *a2), sub_49E590, 0x49e590);
DECL_FUNC(_DWORD (__stdcall*ReadUnitDataInfo)(FILE *a1, _DWORD a2), ReadUnitDataInfo, 0x49e6c0);
DECL_FUNC(signed (__stdcall*ReadUnitDataInfoEx)(FILE *a1, int a2), ReadUnitDataInfoEx, 0x49e790);
int sub_49E8A0(int result, CUnit *a2) {
    int address = 0x49e8a0;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
signed ReadUnitsArray(FILE *a1, unsigned __int16 a2) {
    int address = 0x49e910;
    signed result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov ebx, a1
        call address
        mov result_, eax
    }
    return result_;
}
void selectNewGUIUnitPortrait(CUnit *a1, CSprite *a2) {
    int address = 0x49eb70;
    __asm {
        push dword ptr a2
        mov edi, a1
        call address
    }
}
signed sub_49EC30(CUnit *a1) {
    int address = 0x49ec30;
    signed result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed sub_49ECF0(CUnit *a1, __int16 a2, UnitType unit_type, int a4, char a5) {
    int address = 0x49ecf0;
    signed result_;
    __asm {
        xor eax, eax
        xor edx, edx
        push dword ptr a5
        push dword ptr a4
        push dword ptr unit_type
        mov dx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int sub_49EF90(CUnit *a1) {
    int address = 0x49ef90;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(char (__thiscall*GiveUnit)(CUnit *this_, int player_id, int a3), GiveUnit, 0x49efa0);
int sub_49F170(CUnit *a1, UnitType a2) {
    int address = 0x49f170;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__cdecl*resetOrdersUnitsDAT)(), resetOrdersUnitsDAT, 0x49f380);
void UnitDestructor_SpecialCases(CUnit *a1) {
    int address = 0x49f4a0;
    __asm {
        mov eax, a1
        call address
    }
}
void sub_49F6A0(CUnit *a1, UnitType a2) {
    int address = 0x49f6a0;
    __asm {
        push dword ptr a2
        mov edi, a1
        call address
    }
}
void sub_49F7A0(CUnit *a1) {
    int address = 0x49f7a0;
    __asm {
        mov eax, a1
        call address
    }
}
void sub_49F860(CUnit *a1, UnitType a2) {
    int address = 0x49f860;
    __asm {
        push dword ptr a2
        mov eax, a1
        call address
    }
}
void updateUnitStrengthAndApplyDefaultOrders(CUnit *a1) {
    int address = 0x49fa40;
    __asm {
        mov eax, a1
        call address
    }
}
void sub_49FD00(CUnit *result) {
    int address = 0x49fd00;
    __asm {
        mov eax, result
        call address
    }
}
char killAllLoadedUnits(CUnit *a1) {
    int address = 0x49fdd0;
    char result_;
    __asm {
        xor eax, eax
        mov ebx, a1
        call address
        mov result_, al
    }
    return result_;
}
void replaceUnitWithType(CUnit *a1, UnitType a2) {
    int address = 0x49fed0;
    __asm {
        push dword ptr a2
        mov eax, a1
        call address
        add esp, 4
    }
}
signed sub_4A0080(CUnit *a1) {
    int address = 0x4a0080;
    signed result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void updateUnitStatsFinishBuilding(CUnit *a1) {
    int address = 0x4a01f0;
    __asm {
        mov eax, a1
        call address
    }
}
signed InitializeUnitBase(UnitType a1, CUnit *a2, int a3, __int16 a4, int a5) {
    int address = 0x4a0320;
    signed result_;
    __asm {
        xor eax, eax
        push dword ptr a5
        push dword ptr a4
        push dword ptr a3
        mov ecx, a2
        mov ax, a1
        call address
        mov result_, eax
    }
    return result_;
}
CUnit * UnitConstructor(UnitType unit_type, int position_x, int position_y, int player_id) {
    int address = 0x4a06c0;
    CUnit * result_;
    __asm {
        xor eax, eax
        xor edi, edi
        push dword ptr player_id
        mov edx, position_y
        mov esi, position_x
        mov di, unit_type
        call address
        mov result_, eax
    }
    return result_;
}
void _UnitDestructor(CUnit *a1) {
    int address = 0x4a0740;
    __asm {
        mov eax, a1
        call address
    }
}
int Init_AI_UnitData(CUnit *a1) {
    int address = 0x4a0960;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__thiscall*UnitDestructor)(CUnit *this_), UnitDestructor, 0x4a0990);
CUnit * CreateUnit(UnitType unit_type, int position_x, int position_y, int player_id) {
    int address = 0x4a09d0;
    CUnit * result_;
    __asm {
        xor eax, eax
        xor ecx, ecx
        push dword ptr player_id
        push dword ptr position_y
        mov eax, position_x
        mov cx, unit_type
        call address
        mov result_, eax
    }
    return result_;
}
CUnit * AI_CreateUnit(signed int a1, int a2, int a3, int a4) {
    int address = 0x4a0ad0;
    CUnit * result_;
    __asm {
        xor eax, eax
        push dword ptr a4
        push dword ptr a3
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (*sub_4A0E10)(), sub_4A0E10, 0x4a0e10);
int AI_Alliance(__int16 *a1, int a2, unsigned __int8 a3) {
    int address = 0x4a0e20;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        mov esi, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(AiCaptain * (*sub_4A0EB0)(), sub_4A0EB0, 0x4a0eb0);
DECL_FUNC(CUnit * (__fastcall*getClosestEnemyUnitToRegionPlayer)(int a1, int a2, int a3, int a4, int a5), getClosestEnemyUnitToRegionPlayer, 0x4a0ec0);
CUnit * getClosestEnemyUnitToRegionAll(void *this_, signed int eax0, int a3) {
    int address = 0x4a0f90;
    CUnit * result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        mov eax, eax0
        mov ecx, this_
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(signed (__fastcall*sub_4A1060)(int a1, int a2, unsigned __int16 a3), sub_4A1060, 0x4a1060);
DECL_FUNC(int (*sub_4A10A0)(), sub_4A10A0, 0x4a10a0);
DECL_FUNC(int (*sub_4A10B0)(), sub_4A10B0, 0x4a10b0);
signed sub_4A10C0(CUnit *a1) {
    int address = 0x4a10c0;
    signed result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (*j_calculateUnitStrengths)(), j_calculateUnitStrengths, 0x4a10e0);
BOOL SaveWriteAIData(FILE *a1) {
    int address = 0x4a10f0;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
unsigned isTargetAIControlled(CUnit *a1, CUnit *a2) {
    int address = 0x4a1140;
    unsigned result_;
    __asm {
        xor eax, eax
        mov esi, a2
        mov ecx, a1
        call address
        mov result_, eax
    }
    return result_;
}
BOOL LoadGameAI(FILE *a1, unsigned __int16 a2) {
    int address = 0x4a1180;
    BOOL result_;
    __asm {
        xor eax, eax
        xor edi, edi
        mov di, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
bool CanCastSpellOrder(CUnit *unit, Tech2 tech_id, Order order_id) {
    int address = 0x4a11e0;
    bool result_;
    __asm {
        xor eax, eax
        xor edi, edi
        push dword ptr order_id
        mov di, tech_id
        mov eax, unit
        call address
        mov result_, al
    }
    return result_;
}
void AI_DecloakAfterNuke(CUnit *a1) {
    int address = 0x4a1240;
    __asm {
        mov esi, a1
        call address
    }
}
bool AiCastSpellOrder(CUnit *unit, CUnit *target, Order order, u8 aiActionFlag) {
    int address = 0x4a1290;
    bool result_;
    __asm {
        xor eax, eax
        xor ebx, ebx
        mov bl, aiActionFlag
        mov al, order
        mov edi, target
        mov ecx, unit
        call address
        mov result_, al
    }
    return result_;
}
void sub_4A12C0(CUnit *unit) {
    int address = 0x4a12c0;
    __asm {
        mov eax, unit
        call address
    }
}
void sub_4A1340(CUnit *unit) {
    int address = 0x4a1340;
    __asm {
        mov eax, unit
        call address
    }
}
DECL_FUNC(void (*sub_4A13B0)(), sub_4A13B0, 0x4a13b0);
signed AI_CastSpellBehaviour(CUnit *a1, int unknown_flag) {
    int address = 0x4a13c0;
    signed result_;
    __asm {
        xor eax, eax
        push dword ptr unknown_flag
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void orders_Neutral(CUnit *a1) {
    int address = 0x4a1c20;
    __asm {
        mov edi, a1
        call address
    }
}
void orders_AIPatrol(CUnit *a1) {
    int address = 0x4a1d80;
    __asm {
        mov esi, a1
        call address
    }
}
DECL_FUNC(void (__fastcall*RemoveAIControl)(CUnit *a1, int a2), RemoveAIControl, 0x4a1e50);
DECL_FUNC(void (__cdecl*GameInitAI)(), GameInitAI, 0x4a1ea0);
void orders_RescuePassive(CUnit *a1) {
    int address = 0x4a1ef0;
    __asm {
        mov eax, a1
        call address
    }
}
DECL_FUNC(void (__fastcall*AI_SwitchRescue)(int a1, int a2), AI_SwitchRescue, 0x4a2130);
DECL_FUNC(int (*sub_4A2370)(), sub_4A2370, 0x4a2370);
char AI_Move_DT(CSprite *a1, int a2, int a3) {
    int address = 0x4a2380;
    char result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
signed AI_UnitBehaviour(CUnit *a1) {
    int address = 0x4a2450;
    signed result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void AI_TrainingUnit(CUnit *a1, CUnit *a2) {
    int address = 0x4a2830;
    __asm {
        mov ecx, a2
        mov eax, a1
        call address
    }
}
void orders_comp_ai(CUnit *unit) {
    int address = 0x4a28b0;
    __asm {
        mov eax, unit
        call address
    }
}
DECL_FUNC(char (*sub_4A2AF0)(), sub_4A2AF0, 0x4a2af0);
DECL_FUNC(void (*AI_Loop)(), AI_Loop, 0x4a2b00);
DECL_FUNC(unsigned (*sub_4A2B20)(), sub_4A2B20, 0x4a2b20);
DECL_FUNC(DWORD (*sub_4A2B60)(), sub_4A2B60, 0x4a2b60);
DECL_FUNC(int (__stdcall*sub_4A2B90)(int a1), sub_4A2B90, 0x4a2b90);
int sub_4A2BC0(int result) {
    int address = 0x4a2bc0;
    int result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__cdecl*TickCounterDestroy)(), TickCounterDestroy, 0x4a2bd0);
DECL_FUNC(void (*TickCounterInit)(void), TickCounterInit, 0x4a2bf0);
void randomizePlayerValues(unsigned int a1, const void *a2) {
    int address = 0x4a2c20;
    __asm {
        push dword ptr a2
        mov ebx, a1
        call address
    }
}
DECL_FUNC(unsigned (*getElapsedGameTimeSeconds)(), getElapsedGameTimeSeconds, 0x4a2ca0);
void updateDropCountdownTimerTxt(dialog *a1) {
    int address = 0x4a2cf0;
    __asm {
        mov ebx, a1
        call address
    }
}
DECL_FUNC(void (*sub_4A2D40)(), sub_4A2D40, 0x4a2d40);
DECL_FUNC(void (*UpdateNetTimeoutPlayers)(), UpdateNetTimeoutPlayers, 0x4a2d60);
DECL_FUNC(void (*updateCountdownDropTimer)(), updateCountdownDropTimer, 0x4a2f80);
DECL_FUNC(int (*GetPlayerNames)(), GetPlayerNames, 0x4a3010);
DECL_FUNC(int (*j_GetPlayerNames)(), j_GetPlayerNames, 0x4a3130);
DECL_FUNC(int (*sub_4A3140)(), sub_4A3140, 0x4a3140);
DECL_FUNC(void (*dropTimerProc)(), dropTimerProc, 0x4a3150);
DECL_FUNC(int (__fastcall*Timeout_BINDLG)(dialog *dlg, struct dlgEvent *evt), Timeout_BINDLG, 0x4a3250);
DECL_FUNC(void (__cdecl*loadTimeoutDlg)(), loadTimeoutDlg, 0x4a3320);
DECL_FUNC(void (__cdecl*timeoutProcDropdown)(), timeoutProcDropdown, 0x4a3380);
DECL_FUNC(void (__stdcall*MinimapPing_maybe)(unsigned __int16 pos_x, unsigned __int16 pos_y, char a3), MinimapPing_maybe, 0x4a34c0);
DECL_FUNC(void (__fastcall*MiniMapUpdate)(dialog *dlg, int x, int y, rect *dst), MiniMapUpdate, 0x4a3570);
DECL_FUNC(void (__cdecl*CreateMinimapSurface)(), CreateMinimapSurface, 0x4a3720);
DECL_FUNC(void (*sub_4A3790)(), sub_4A3790, 0x4a3790);
__int16 sub_4A37A0(int a1, int a2, int a3, int a4, int a5) {
    int address = 0x4a37a0;
    __int16 result_;
    __asm {
        xor eax, eax
        push dword ptr a5
        push dword ptr a4
        mov ecx, a3
        mov edx, a2
        mov eax, a1
        call address
        mov result_, ax
    }
    return result_;
}
DECL_FUNC(u8 (*sub_4A3870)(), sub_4A3870, 0x4a3870);
DECL_FUNC(int (*sub_4A39D0)(), sub_4A39D0, 0x4a39d0);
DECL_FUNC(_BYTE * (__thiscall*sub_4A39E0)(_BYTE *this_, _BYTE *a2), sub_4A39E0, 0x4a39e0);
DECL_FUNC(void (__cdecl*sub_4A3A00)(), sub_4A3A00, 0x4a3a00);
DECL_FUNC(void (__cdecl*minimapVisionUpdate_192_256)(), minimapVisionUpdate_192_256, 0x4a3a40);
DECL_FUNC(void (__cdecl*minimapVisionUpdate_96_128)(), minimapVisionUpdate_96_128, 0x4a3b30);
DECL_FUNC(void (__cdecl*minimapVisionUpdate_64)(), minimapVisionUpdate_64, 0x4a3c00);
char sub_4A3D40(__int16 a1, int a2) {
    int address = 0x4a3d40;
    char result_;
    __asm {
        xor eax, eax
        mov edx, a2
        mov ax, a1
        call address
        mov result_, al
    }
    return result_;
}
void getMinimapCursorPos(int *x, int *y) {
    int address = 0x4a3d70;
    __asm {
        mov ecx, y
        mov eax, x
        call address
    }
}
BOOL sub_4A3E00(unsigned __int16 a1) {
    int address = 0x4a3e00;
    BOOL result_;
    __asm {
        xor eax, eax
        mov ax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void killMinimapPreviewDlg(dialog *a1) {
    int address = 0x4a3e20;
    __asm {
        mov eax, a1
        call address
    }
}
void minimapGameResetMouseInput(dialog *dlg) {
    int address = 0x4a3eb0;
    __asm {
        mov edx, dlg
        call address
    }
}
DECL_FUNC(void (__fastcall*MinimapImageUpdate)(dialog *dlg, int x, int y, rect *dst), MinimapImageUpdate, 0x4a3ee0);
void drawUnitBox(char color, unsigned int x, unsigned int y, unsigned __int8 a4, unsigned __int8 a5, char a6) {
    int address = 0x4a3fd0;
    __asm {
        xor ecx, ecx
        push dword ptr a6
        push dword ptr a5
        push dword ptr a4
        push dword ptr y
        mov eax, x
        mov cl, color
        call address
    }
}
DECL_FUNC(void (__cdecl*sub_4A4150)(), sub_4A4150, 0x4a4150);
DECL_FUNC(void (__cdecl*minimapSurfaceUpdate_192_256)(), minimapSurfaceUpdate_192_256, 0x4a41b0);
DECL_FUNC(void (__cdecl*minimapSurfaceUpdate_96_128)(), minimapSurfaceUpdate_96_128, 0x4a4240);
DECL_FUNC(void (__cdecl*minimapSurfaceUpdate_64)(), minimapSurfaceUpdate_64, 0x4a42b0);
DECL_FUNC(void (__cdecl*setMapSizeConstants)(), setMapSizeConstants, 0x4a4400);
DECL_FUNC(void (__fastcall*drawMinimapUnitBox)(int player_id), drawMinimapUnitBox, 0x4a4650);
DECL_FUNC(void (__fastcall*drawMinimapUnitBox2)(int player), drawMinimapUnitBox2, 0x4a47b0);
void drawAllMinimapUnitBoxes(int a1) {
    int address = 0x4a48e0;
    __asm {
        mov eax, a1
        call address
    }
}
BOOL sub_4A49F0(CUnit *a1) {
    int address = 0x4a49f0;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__fastcall*updateMinimapPositioninfoProc)(dialog *a1, __int16 a2), updateMinimapPositioninfoProc, 0x4a4a70);
DECL_FUNC(void (*drawAllMinimapBoxes)(), drawAllMinimapBoxes, 0x4a4ac0);
DECL_FUNC(void (__thiscall*drawShowHideTerrainContextHelp)(dialog *this_), drawShowHideTerrainContextHelp, 0x4a4c40);
void sub_4A4CA0(char a1) {
    int address = 0x4a4ca0;
    __asm {
        xor eax, eax
        mov al, a1
        call address
    }
}
DECL_FUNC(void (*sub_4A4CB4)(), sub_4A4CB4, 0x4a4cb4);
void minimapGameUpdate(dialog *dlg) {
    int address = 0x4a4ce0;
    __asm {
        mov esi, dlg
        call address
    }
}
void minimapGameMouseUpdate(dialog *dlg) {
    int address = 0x4a4d20;
    __asm {
        mov edi, dlg
        call address
    }
}
DECL_FUNC(void (__fastcall*Minimap_TimerRefresh)(dialog *dlg, __int16 timer_id), Minimap_TimerRefresh, 0x4a4e00);
DECL_FUNC(void (__fastcall*updateMinimapSurfaceInfoProc)(dialog *a1, __int16 a2), updateMinimapSurfaceInfoProc, 0x4a4e40);
DECL_FUNC(void (__fastcall*updateMinimapSurfaceInfo2Proc)(dialog *dlg, __int16 a2), updateMinimapSurfaceInfo2Proc, 0x4a4f10);
DECL_FUNC(void (__fastcall*playerInfoSomethingTvBProc)(dialog *a1, __int16 a2), playerInfoSomethingTvBProc, 0x4a4fe0);
DECL_FUNC(void (__thiscall*drawStatLBBtnsContextHelp)(dialog *this_), drawStatLBBtnsContextHelp, 0x4a5110);
DECL_FUNC(void (*sub_4A51D0)(), sub_4A51D0, 0x4a51d0);
DECL_FUNC(void (*nullsub_70)(), nullsub_70, 0x4a51fd);
DECL_FUNC(void (*minimapPreviewUpdateState)(), minimapPreviewUpdateState, 0x4a5200);
void Minimap_InitVisionButton(dialog *a1) {
    int address = 0x4a5230;
    __asm {
        mov eax, a1
        call address
    }
}
DECL_FUNC(void (__stdcall*MinimapGameRightclickEventMoveto)(dialog *dlg), MinimapGameRightclickEventMoveto, 0x4a5310);
void MinimapGameClickEvent(dialog *dlg, dlgEvent *event) {
    int address = 0x4a53c0;
    __asm {
        mov eax, event
        mov ecx, dlg
        call address
    }
}
void minimapPreviewMouseUpdate(dialog *a1, struct dlgEvent *a2) {
    int address = 0x4a5440;
    __asm {
        mov ecx, a2
        mov eax, a1
        call address
    }
}
void minimap_dlg_MouseMove(dialog *a1, struct dlgEvent *a2) {
    int address = 0x4a5490;
    __asm {
        push dword ptr a2
        mov esi, a1
        call address
    }
}
void minimap_dlg_Activate(dialog *a1) {
    int address = 0x4a54f0;
    __asm {
        mov esi, a1
        call address
    }
}
DECL_FUNC(int (__fastcall*MinimapButton_EventHandler)(dialog *a1, dlgEvent *a2), MinimapButton_EventHandler, 0x4a5570);
void MinimapGameTargetOrder(dlgEvent *event) {
    int address = 0x4a55f0;
    __asm {
        mov eax, event
        call address
    }
}
DECL_FUNC(int (__fastcall*MinimapImageInteract)(dialog *dlg, dlgEvent *evt), MinimapImageInteract, 0x4a5650);
void updateMinimapPreviewDlg(dialog *a1) {
    int address = 0x4a5770;
    __asm {
        mov eax, a1
        call address
    }
}
DECL_FUNC(int (__fastcall*MiniMapPreviewInteract)(dialog *dlg, dlgEvent *evt), MiniMapPreviewInteract, 0x4a5900);
DECL_FUNC(void (*load_gluMinimap)(), load_gluMinimap, 0x4a5a80);
DECL_FUNC(void (*load_MinimapPreview)(), load_MinimapPreview, 0x4a5d10);
DECL_FUNC(char (*sub_4A5E30)(), sub_4A5E30, 0x4a5e30);
BOOL getArchiveName(HANDLE a1) {
    int address = 0x4a5e70;
    BOOL result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*getMusicVolume)(), getMusicVolume, 0x4a5ef0);
signed sub_4A5F10(signed int result) {
    int address = 0x4a5f10;
    signed result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__cdecl*stopMusic)(), stopMusic, 0x4a5f50);
DECL_FUNC(void (__stdcall*FadeMusicProc)(HWND a1, UINT a2, UINT a3, DWORD a4), FadeMusicProc, 0x4a6030);
DECL_FUNC(char (*sub_4A60D0)(), sub_4A60D0, 0x4a60d0);
DECL_FUNC(char (*sub_4A6100)(), sub_4A6100, 0x4a6100);
void PlayMusic(MusicTrack a1) {
    int address = 0x4a6140;
    __asm {
        mov edi, a1
        call address
    }
}
DECL_FUNC(void (*playNextMusic)(), playNextMusic, 0x4a6250);
DECL_FUNC(void (*playRadioFreeZerg)(), playRadioFreeZerg, 0x4a62b0);
void DLGMusicFade(MusicTrack music_track) {
    int address = 0x4a6310;
    __asm {
        mov eax, music_track
        call address
    }
}
DECL_FUNC(void (*sub_4A6390)(), sub_4A6390, 0x4a6390);
struct_v4_1 * sub_4A63A0(int a1, int a2, int a3, int a4) {
    int address = 0x4a63a0;
    struct_v4_1 * result_;
    __asm {
        xor eax, eax
        push dword ptr a4
        push dword ptr a3
        push dword ptr a2
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
int sub_4A6470(const char *a1) {
    int address = 0x4a6470;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void * LoadRecentMapsRegistry(int *a1) {
    int address = 0x4a6490;
    void * result_;
    __asm {
        xor eax, eax
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
int GetMapNameOrdering(const char *filename, char *other) {
    int address = 0x4a6510;
    int result_;
    __asm {
        xor eax, eax
        mov esi, other
        mov edi, filename
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__cdecl*sub_4A6580)(), sub_4A6580, 0x4a6580);
ListNode * mapEntry_Append(MapDirEntry *a1) {
    int address = 0x4a6660;
    ListNode * result_;
    __asm {
        xor eax, eax
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__stdcall*mapEntryAdd)(MapDirEntry *entry), mapEntryAdd, 0x4a66c0);
DECL_FUNC(void (*cleanupBNListboxData)(), cleanupBNListboxData, 0x4a6770);
signed sub_4A68D0(GameData *a1, unsigned __int8 game_speed) {
    int address = 0x4a68d0;
    signed result_;
    __asm {
        xor eax, eax
        push dword ptr game_speed
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(MapDirEntry * (__thiscall*sub_4A6A00)(MapDirEntry *this_), sub_4A6A00, 0x4a6a00);
MapDirEntry * findMapVectorEntryFromFullPath(const char *a1) {
    int address = 0x4a6a30;
    MapDirEntry * result_;
    __asm {
        xor eax, eax
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
MapDirEntry * AddFileToMapDirListing(const char *a1, const char *a2, MapDirEntryFlags flags) {
    int address = 0x4a6a70;
    MapDirEntry * result_;
    __asm {
        xor eax, eax
        push dword ptr flags
        mov ebx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int * AddDirectoryToMapDirListing(const char *a1, const char *source) {
    int address = 0x4a6b60;
    int * result_;
    __asm {
        xor eax, eax
        push dword ptr source
        mov ebx, a1
        call address
        mov result_, eax
    }
    return result_;
}
LRESULT GetMapDirListIndex(const char *filename, LRESULT (__stdcall *a2)(LPARAM a1, LPARAM lParam, char a3)) {
    int address = 0x4a6cb0;
    LRESULT result_;
    __asm {
        xor eax, eax
        mov esi, a2
        mov eax, filename
        call address
        mov result_, eax
    }
    return result_;
}
int GetMapDirEntryInformation(MapDirEntry *entry, struct_a2 *a2) {
    int address = 0x4a6dd0;
    int result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, entry
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(char * (*LoadRecentMapsCombobox)(), LoadRecentMapsCombobox, 0x4a6ee0);
void fileExt(const char *a1, int ebx0, MapDirEntryFlags flags) {
    int address = 0x4a7050;
    __asm {
        push dword ptr flags
        mov ebx, ebx0
        mov edi, a1
        call address
    }
}
MapDirEntry * save_Recent_Map_Data(MapDirEntry *result) {
    int address = 0x4a7210;
    MapDirEntry * result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
int getMapListEntryCount(int (__stdcall *callback)(MapDirEntry *, char *, MapDirEntryFlags), int a2, char *a3, char *a4) {
    int address = 0x4a73c0;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a4
        push dword ptr a3
        push dword ptr a2
        mov eax, callback
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__stdcall*sub_4A7540)(MapDirEntry *a1), sub_4A7540, 0x4a7540);
void FullyLoadMapDirEntry(MapDirEntry *map_dir_entry) {
    int address = 0x4a7740;
    __asm {
        mov eax, map_dir_entry
        call address
    }
}
void sub_4A79D0(MapDirEntry *a1) {
    int address = 0x4a79d0;
    __asm {
        mov esi, a1
        call address
    }
}
void LoadReplayMapDirEntry(MapDirEntry *replay) {
    int address = 0x4a7c30;
    __asm {
        mov eax, replay
        call address
    }
}
DECL_FUNC(void (__stdcall*sub_4A7F50)(HWND a1, UINT a2, UINT a3, DWORD a4), sub_4A7F50, 0x4a7f50);
void sub_4A7FC0(MapDirEntry *a1) {
    int address = 0x4a7fc0;
    __asm {
        mov edi, a1
        call address
    }
}
unsigned sub_4A8050(MapDirEntry *a1, char *source, int a3, unsigned int a4, unsigned __int8 a5, char *dest) {
    int address = 0x4a8050;
    unsigned result_;
    __asm {
        xor eax, eax
        push dword ptr dest
        push dword ptr a5
        push dword ptr a4
        push dword ptr a3
        push dword ptr source
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
unsigned LoadScenarioSingle(char *a1, int a2, const char *a3, unsigned __int8 game_speed) {
    int address = 0x4a8590;
    unsigned result_;
    __asm {
        xor eax, eax
        push dword ptr game_speed
        mov esi, a3
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
BYTE sub_4A8710(char *a1, char *source) {
    int address = 0x4a8710;
    BYTE result_;
    __asm {
        xor eax, eax
        push dword ptr source
        mov esi, a1
        call address
        mov result_, al
    }
    return result_;
}
int sub_4A8760(DWORD a1, CHAR *a2) {
    int address = 0x4a8760;
    int result_;
    __asm {
        xor eax, eax
        mov esi, a2
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
int sub_4A8790(DWORD a1, CHAR *a2, char *a3) {
    int address = 0x4a8790;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        mov esi, a2
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
int sub_4A87F0(DWORD a1, CHAR *a2) {
    int address = 0x4a87f0;
    int result_;
    __asm {
        xor eax, eax
        mov esi, a2
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
BOOL sub_4A8850(char *a1) {
    int address = 0x4a8850;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
FILE * CreateCharacterFile(CharacterData *a1) {
    int address = 0x4a8880;
    FILE * result_;
    __asm {
        xor eax, eax
        mov ebx, a1
        call address
        mov result_, eax
    }
    return result_;
}
int LoadCharacterData(CharacterData *character_data, char *source) {
    int address = 0x4a8940;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr source
        mov ebx, character_data
        call address
        mov result_, eax
    }
    return result_;
}
FILE * verifyCharacterFile(CharacterData *a1, const char *player_name) {
    int address = 0x4a8a40;
    FILE * result_;
    __asm {
        xor eax, eax
        mov esi, player_name
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(HANDLE (__stdcall*enumFiles)(void (__stdcall *a1)(_DWORD)), enumFiles, 0x4a8ab0);
unsigned sub_4A8B70(byte *a1, unsigned int a2) {
    int address = 0x4a8b70;
    unsigned result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int getPlayerForce(unsigned __int8 player_id) {
    int address = 0x4a8b90;
    int result_;
    __asm {
        xor eax, eax
        mov al, player_id
        call address
        mov result_, eax
    }
    return result_;
}
int sub_4A8BB0(int result) {
    int address = 0x4a8bb0;
    int result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_4A8BC0)(), sub_4A8BC0, 0x4a8bc0);
BOOL sub_4A8BD0(char a1) {
    int address = 0x4a8bd0;
    BOOL result_;
    __asm {
        xor eax, eax
        mov al, a1
        call address
        mov result_, eax
    }
    return result_;
}
BOOL sub_4A8BF0(char a1) {
    int address = 0x4a8bf0;
    BOOL result_;
    __asm {
        xor eax, eax
        mov al, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(BOOL (__fastcall*sub_4A8C10)(char a1), sub_4A8C10, 0x4a8c10);
BOOL sub_4A8C20(char a1) {
    int address = 0x4a8c20;
    BOOL result_;
    __asm {
        xor eax, eax
        mov al, a1
        call address
        mov result_, eax
    }
    return result_;
}
BOOL sub_4A8C40(char a1) {
    int address = 0x4a8c40;
    BOOL result_;
    __asm {
        xor eax, eax
        mov al, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(BOOL (__fastcall*sub_4A8C60)(char a1), sub_4A8C60, 0x4a8c60);
DECL_FUNC(int (*sub_4A8C70)(), sub_4A8C70, 0x4a8c70);
unsigned sub_4A8CA0(unsigned __int8 a1) {
    int address = 0x4a8ca0;
    unsigned result_;
    __asm {
        xor eax, eax
        mov al, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*getOpenSlotCount)(), getOpenSlotCount, 0x4a8cd0);
DECL_FUNC(char (*getNumOpenSlots)(), getNumOpenSlots, 0x4a8cf0);
DECL_FUNC(char (*getComputerSlotCount)(), getComputerSlotCount, 0x4a8d10);
void initializeSlots(int player_id) {
    int address = 0x4a8d40;
    __asm {
        mov esi, player_id
        call address
    }
}
_DWORD * sub_4A8DB0(_DWORD *result) {
    int address = 0x4a8db0;
    _DWORD * result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(char (*setAllValidPlayerOwnersToOpen)(), setAllValidPlayerOwnersToOpen, 0x4a8de0);
BOOL sub_4A8E10(char a1) {
    int address = 0x4a8e10;
    BOOL result_;
    __asm {
        xor eax, eax
        mov al, a1
        call address
        mov result_, eax
    }
    return result_;
}
BOOL sub_4A8E30(char a1) {
    int address = 0x4a8e30;
    BOOL result_;
    __asm {
        xor eax, eax
        mov al, a1
        call address
        mov result_, eax
    }
    return result_;
}
char sub_4A8E50(int a1, int a2, int a3) {
    int address = 0x4a8e50;
    char result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
char sub_4A8F30(int a1, int a2, int a3) {
    int address = 0x4a8f30;
    char result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
int sub_4A9010(int a1, int a2) {
    int address = 0x4a9010;
    int result_;
    __asm {
        xor eax, eax
        mov edx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void sub_4A9130(unsigned __int8 a1, unsigned __int8 a2) {
    int address = 0x4a9130;
    __asm {
        xor ebx, ebx
        push dword ptr a2
        mov bl, a1
        call address
        add esp, 4
    }
}
DECL_FUNC(void (__cdecl*sub_4A91E0)(), sub_4A91E0, 0x4a91e0);
DECL_FUNC(char (*getTotalValidSlotCount)(), getTotalValidSlotCount, 0x4a9210);
DECL_FUNC(void (__cdecl*InitializeLoadedGameSlots)(), InitializeLoadedGameSlots, 0x4a9250);
int GetRandomRace(int a1, int a2) {
    int address = 0x4a94c0;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov ebx, a1
        call address
        mov result_, eax
    }
    return result_;
}
void randomizePlayerPositions(int *a1) {
    int address = 0x4a95d0;
    __asm {
        mov eax, a1
        call address
    }
}
DECL_FUNC(signed (*sub_4A99C0)(), sub_4A99C0, 0x4a99c0);
DECL_FUNC(int (*sub_4A9A10)(), sub_4A9A10, 0x4a9a10);
DECL_FUNC(void (__cdecl*BWFXN_RandomizePlayerRaces)(), BWFXN_RandomizePlayerRaces, 0x4a9a30);
DECL_FUNC(signed (*randomizeForces)(), randomizeForces, 0x4a9c90);
DECL_FUNC(void (__cdecl*RandomizeSlotsForcesColors)(), RandomizeSlotsForcesColors, 0x4a9d80);
DECL_FUNC(unsigned (*sub_4AA190)(), sub_4AA190, 0x4aa190);
DECL_FUNC(PlayerType * (*sub_4AA4B0)(), sub_4AA4B0, 0x4aa4b0);
DECL_FUNC(char (*sub_4AA620)(), sub_4AA620, 0x4aa620);
DECL_FUNC(int (*sub_4AA880)(), sub_4AA880, 0x4aa880);
DECL_FUNC(BOOL (*sub_4AA890)(), sub_4AA890, 0x4aa890);
DECL_FUNC(BOOL (*sub_4AA8A0)(), sub_4AA8A0, 0x4aa8a0);
DECL_FUNC(BOOL (*sub_4AA8B0)(), sub_4AA8B0, 0x4aa8b0);
DECL_FUNC(BOOL (*sub_4AA8C0)(), sub_4AA8C0, 0x4aa8c0);
DECL_FUNC(BOOL (*sub_4AA8D0)(), sub_4AA8D0, 0x4aa8d0);
BOOL sub_4AA8E0(GameData *a1) {
    int address = 0x4aa8e0;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(BOOL (*sub_4AA900)(), sub_4AA900, 0x4aa900);
DECL_FUNC(int (*sub_4AA910)(), sub_4AA910, 0x4aa910);
DECL_FUNC(BOOL (*sub_4AA920)(), sub_4AA920, 0x4aa920);
DECL_FUNC(char * (__fastcall*sub_4AA930)(int a1, char a2), sub_4AA930, 0x4aa930);
DECL_FUNC(struct_a4 * (__fastcall*sub_4AA960)(int a1, char a2), sub_4AA960, 0x4aa960);
BOOL sub_4AA990(unsigned __int8 a1) {
    int address = 0x4aa990;
    BOOL result_;
    __asm {
        xor eax, eax
        mov al, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(BOOL (*isGameTypeSpecial)(), isGameTypeSpecial, 0x4aa9b0);
DECL_FUNC(BOOL (*IsLeagueGametype)(), IsLeagueGametype, 0x4aa9d0);
BOOL sub_4AA9F0(char a1, char a2) {
    int address = 0x4aa9f0;
    BOOL result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov al, a1
        call address
        mov result_, eax
    }
    return result_;
}
BOOL IsScenarioGame(GameData *a1) {
    int address = 0x4aaa10;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(BOOL (*sub_4AAA40)(), sub_4AAA40, 0x4aaa40);
DECL_FUNC(BOOL (*sub_4AAA50)(), sub_4AAA50, 0x4aaa50);
DECL_FUNC(BOOL (*sub_4AAA60)(), sub_4AAA60, 0x4aaa60);
DECL_FUNC(BOOL (*sub_4AAA70)(), sub_4AAA70, 0x4aaa70);
DECL_FUNC(BOOL (*sub_4AAA80)(), sub_4AAA80, 0x4aaa80);
DECL_FUNC(BOOL (*sub_4AAA90)(), sub_4AAA90, 0x4aaa90);
DECL_FUNC(BOOL (*sub_4AAAA0)(), sub_4AAAA0, 0x4aaaa0);
BOOL sub_4AAAB0(char a1, unsigned __int8 a2, unsigned int a3) {
    int address = 0x4aaab0;
    BOOL result_;
    __asm {
        xor eax, eax
        xor ebx, ebx
        mov esi, a3
        mov bl, a2
        mov al, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(BOOL (*sub_4AABA0)(), sub_4AABA0, 0x4aaba0);
DECL_FUNC(signed (*sub_4AABB0)(), sub_4AABB0, 0x4aabb0);
DECL_FUNC(BOOL (*sub_4AABD0)(), sub_4AABD0, 0x4aabd0);
DECL_FUNC(char * (*sub_4AABF0)(), sub_4AABF0, 0x4aabf0);
struct_a4 * sub_4AAC60(char a1, __int16 variation_id, GameType template_id) {
    int address = 0x4aac60;
    struct_a4 * result_;
    __asm {
        xor eax, eax
        xor edx, edx
        xor ecx, ecx
        xor ebx, ebx
        mov bl, template_id
        mov cx, variation_id
        mov dl, a1
        call address
        mov result_, eax
    }
    return result_;
}
GotFileValues * sub_4AAC90(__int16 a1, char a2, char a3) {
    int address = 0x4aac90;
    GotFileValues * result_;
    __asm {
        xor eax, eax
        xor ecx, ecx
        xor edx, edx
        xor ebx, ebx
        mov bl, a3
        mov dl, a2
        mov cx, a1
        call address
        mov result_, eax
    }
    return result_;
}
GotFileValues * sub_4AACC0(char a1, int (__stdcall *a2)(_DWORD, _DWORD, _DWORD, _DWORD), char a3) {
    int address = 0x4aacc0;
    GotFileValues * result_;
    __asm {
        xor eax, eax
        xor ebx, ebx
        push dword ptr a3
        mov edi, a2
        mov bl, a1
        call address
        mov result_, eax
    }
    return result_;
}
LRESULT sub_4AAD00(int (__stdcall *a1)(LPARAM lParam, int, int, int)) {
    int address = 0x4aad00;
    LRESULT result_;
    __asm {
        xor eax, eax
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(char * (__fastcall*getGameTypeString)(int a1, const void *a2), getGameTypeString, 0x4aad40);
DECL_FUNC(int (__thiscall*sub_4AAD80)(unsigned __int8 *this_), sub_4AAD80, 0x4aad80);
DECL_FUNC(int (__thiscall*sub_4AADA0)(GotFileValues *this_), sub_4AADA0, 0x4aada0);
signed sub_4AADF0(GotFileValues *got_template_values, char *template_label, char a3, TemplateConstructor template_constructor, char *template_name, struct_a4 *a6) {
    int address = 0x4aadf0;
    signed result_;
    __asm {
        xor eax, eax
        xor ecx, ecx
        push dword ptr a6
        push dword ptr template_name
        push dword ptr template_constructor
        mov cl, a3
        mov edx, template_label
        mov eax, got_template_values
        call address
        mov result_, eax
    }
    return result_;
}
int sub_4AAE20(char *a1, unsigned int *a2, _BYTE **a3, unsigned int a4) {
    int address = 0x4aae20;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a4
        push dword ptr a3
        mov edi, a2
        mov ebx, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__stdcall*eventSetGameType)(s_evt *evt), eventSetGameType, 0x4aaea0);
DECL_FUNC(BOOL (*sub_4AAF30)(), sub_4AAF30, 0x4aaf30);
BOOL sub_4AAF50(char a1, __int16 a2, GameType template_id) {
    int address = 0x4aaf50;
    BOOL result_;
    __asm {
        xor eax, eax
        xor edx, edx
        xor ecx, ecx
        xor ebx, ebx
        mov bl, template_id
        mov cx, a2
        mov dl, a1
        call address
        mov result_, eax
    }
    return result_;
}
BOOL sub_4AAFA0(char a1, __int16 a2, char a3) {
    int address = 0x4aafa0;
    BOOL result_;
    __asm {
        xor eax, eax
        xor edx, edx
        xor ecx, ecx
        xor ebx, ebx
        mov bl, a3
        mov cx, a2
        mov dl, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(BOOL (__thiscall*sub_4AAFF0)(int this_), sub_4AAFF0, 0x4aaff0);
int sub_4AB050(int a1, int a2) {
    int address = 0x4ab050;
    int result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__fastcall*DestroyGameTemplates)(bool exit_code), DestroyGameTemplates, 0x4ab0a0);
DECL_FUNC(char * (__fastcall*sub_4AB0B0)(char a1, char a2), sub_4AB0B0, 0x4ab0b0);
DECL_FUNC(char * (__fastcall*sub_4AB0E0)(char a1, char a2), sub_4AB0E0, 0x4ab0e0);
DECL_FUNC(signed (*sub_4AB110)(), sub_4AB110, 0x4ab110);
DECL_FUNC(void (__stdcall*Template_Constructor)(char *template_name, char *template_label, GotFileValues *got_file_values, struct_a4 *a4), Template_Constructor, 0x4ab150);
DECL_FUNC(void (*beginComputerAIScriptExecution)(), beginComputerAIScriptExecution, 0x4ab230);
DECL_FUNC(int (__stdcall*sub_4AB310)(int *a1, int a2), sub_4AB310, 0x4ab310);
DECL_FUNC(BOOL (__fastcall*IsBNetGame)(int a1, _BYTE *a2, int a3), IsBNetGame, 0x4ab5b0);
DECL_FUNC(int (__stdcall*loadTRGFile)(const char *a1), loadTRGFile, 0x4ab620);
int sub_4AB6C0(GotFileValues *a1, size_t a2, int a3, char *buff) {
    int address = 0x4ab6c0;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr buff
        mov ecx, a3
        mov edx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
GotFileValues * readTemplate(char *template_name, char *got_template_name, char *got_template_label) {
    int address = 0x4ab750;
    GotFileValues * result_;
    __asm {
        xor eax, eax
        push dword ptr got_template_label
        push dword ptr got_template_name
        mov eax, template_name
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(GotFileValues * (*InitUseMapSettingsTemplate)(), InitUseMapSettingsTemplate, 0x4ab840);
DECL_FUNC(signed (__stdcall*LoadGameTemplates)(TemplateConstructor template_constructor), LoadGameTemplates, 0x4ab860);
DECL_FUNC(signed (*sub_4AB970)(), sub_4AB970, 0x4ab970);
void CTFCreateFlagBeacon(int a1) {
    int address = 0x4ab980;
    __asm {
        mov edi, a1
        call address
    }
}
DECL_FUNC(void (__cdecl*sub_4ABA20)(), sub_4ABA20, 0x4aba20);
DECL_FUNC(signed (*chooseTRGTemplate)(), chooseTRGTemplate, 0x4abaf0);
int sub_4ABC90(int a1, LPCSTR lpszString, int nFit, int a4) {
    int address = 0x4abc90;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a4
        push dword ptr nFit
        push dword ptr lpszString
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__stdcall*sub_4ABF50)(HGDIOBJ h), sub_4ABF50, 0x4abf50);
signed BNLoadImage(const char *fileName, int *eax0, char *a3, HWND hWnd, HRGN a5, int a6, int a7, int a8, int a9) {
    int address = 0x4abfe0;
    signed result_;
    __asm {
        xor eax, eax
        push dword ptr a9
        push dword ptr a8
        push dword ptr a7
        push dword ptr a6
        push dword ptr a5
        push dword ptr hWnd
        mov ebx, a3
        mov eax, eax0
        mov ecx, fileName
        call address
        mov result_, eax
    }
    return result_;
}
int BNStringToData(const char *a1, unsigned __int32 *a2, unsigned __int32 *a3, unsigned __int32 *a4, _DWORD *a5, unsigned __int32 *a6, _DWORD *a7) {
    int address = 0x4ac110;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a7
        push dword ptr a6
        push dword ptr a5
        push dword ptr a4
        mov ebx, a3
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
char * sub_4AC250(int a1, unsigned int *a2, int a3, wchar_t *a4) {
    int address = 0x4ac250;
    char * result_;
    __asm {
        xor eax, eax
        push dword ptr a4
        push dword ptr a3
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(BOOL (*sub_4AC2E0)(), sub_4AC2E0, 0x4ac2e0);
DECL_FUNC(BOOL (__stdcall*BattleGetCursor)(int a1, int a2, int a3, unsigned int a4, int a5), BattleGetCursor, 0x4ac300);
DECL_FUNC(BOOL (__stdcall*BattleGetResource)(int a1, unsigned int a2, int size_, void *buffer, int buffersize_, int width, int height, int depth), BattleGetResource, 0x4ac380);
DECL_FUNC(int (*sub_4ACD30)(), sub_4ACD30, 0x4acd30);
ListNode * DrawTextConstructor(ListNode **a1, HDC hdc) {
    int address = 0x4acd50;
    ListNode * result_;
    __asm {
        xor eax, eax
        push dword ptr hdc
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (*sub_4ACE20)(), sub_4ACE20, 0x4ace20);
int createFont(int result) {
    int address = 0x4ace70;
    int result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_4ACF20)(), sub_4ACF20, 0x4acf20);
char * __SDlgDialogBoxIndirectParam(unsigned int a1, HWND hWndParent, LPVOID lpParam, LPARAM lParam) {
    int address = 0x4acf80;
    char * result_;
    __asm {
        xor eax, eax
        push dword ptr lParam
        push dword ptr lpParam
        push dword ptr hWndParent
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
char * sub_4AD040(unsigned __int16 a1, int a2, int a3) {
    int address = 0x4ad040;
    char * result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        mov ebx, a2
        mov ax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__stdcall*BattlePlaySound)(int a1, int a2, int a3), BattlePlaySound, 0x4ad0b0);
DECL_FUNC(void (__stdcall*sub_4AD0E0)(LPCSTR lpText, LPCSTR lpCaption), sub_4AD0E0, 0x4ad0e0);
DECL_FUNC(void * (*sub_4AD110)(), sub_4AD110, 0x4ad110);
DECL_FUNC(void * (*sub_4AD140)(), sub_4AD140, 0x4ad140);
char * initializeProviderStruct(SNETUIDATA *a1) {
    int address = 0x4ad190;
    char * result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__cdecl*SelectGame)(), SelectGame, 0x4ad230);
DECL_FUNC(void (__cdecl*loadMenu_gluBNRes)(), loadMenu_gluBNRes, 0x4ad330);
DECL_FUNC(int (__thiscall*sub_4AD390)(dialog *this_), sub_4AD390, 0x4ad390);
DECL_FUNC(u8 (__thiscall*sub_4AD3E0)(dialog *this_), sub_4AD3E0, 0x4ad3e0);
DECL_FUNC(int (__thiscall*sub_4AD400)(int this_), sub_4AD400, 0x4ad400);
dialog * sub_4AD440(dialog *result) {
    int address = 0x4ad440;
    dialog * result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
int gluCustmHasComputerPlayerMaybe(dialog *dlg) {
    int address = 0x4ad460;
    int result_;
    __asm {
        xor eax, eax
        mov eax, dlg
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(BOOL (*sub_4AD560)(), sub_4AD560, 0x4ad560);
signed sub_4AD5B0(dialog *a1) {
    int address = 0x4ad5b0;
    signed result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void sub_4AD640(dialog *a1) {
    int address = 0x4ad640;
    __asm {
        mov eax, a1
        call address
    }
}
DECL_FUNC(void (__fastcall*gluCustm_ListboxEntryUpdate)(struct dialog *dlg, u8 selectedIndex, rect *dstRect, int x, int y), gluCustm_ListboxEntryUpdate, 0x4ad6b0);
void gluCustmSinglePlayerInitRaces(dialog *a1) {
    int address = 0x4ad850;
    __asm {
        mov eax, a1
        call address
    }
}
DECL_FUNC(void (__stdcall*HideShowDlgCallback)(int a1, dialog *a2, int a3), HideShowDlgCallback, 0x4ad950);
DECL_FUNC(void (__fastcall*gluCustm_UpdateCB)(dialog *dlg, int x, int y, rect *dst), gluCustm_UpdateCB, 0x4ad980);
void gluCustm_UpdateMapFolderDisplay(const char *a1) {
    int address = 0x4ada80;
    __asm {
        mov eax, a1
        call address
    }
}
void gluCustm_initSwish(dialog *dlg) {
    int address = 0x4adac0;
    __asm {
        mov eax, dlg
        call address
    }
}
DECL_FUNC(void (*sub_4ADB10)(), sub_4ADB10, 0x4adb10);
void sub_4ADD90(int a1, dialog *player_type_dropdown) {
    int address = 0x4add90;
    __asm {
        mov ecx, player_type_dropdown
        mov eax, a1
        call address
    }
}
DECL_FUNC(dialog * (__thiscall*sub_4ADEA0)(void *this_, char *a2, int a3, _BYTE *a4, int a5), sub_4ADEA0, 0x4adea0);
DECL_FUNC(int (__stdcall*AddMapToList_CB)(MapDirEntry *a1, char *a2, MapDirEntryFlags a3), AddMapToList_CB, 0x4adee0);
void gluCustm_raceDropdown(dialog *a1) {
    int address = 0x4adf20;
    __asm {
        mov eax, a1
        call address
    }
}
DECL_FUNC(void (__fastcall*gluCustmInitPlayerTypes)(dialog *dlg, __int16 dx0), gluCustmInitPlayerTypes, 0x4adfe0);
DECL_FUNC(void (*sub_4AE1E0)(), sub_4AE1E0, 0x4ae1e0);
DECL_FUNC(dialog * (__stdcall*sub_4AE1F0)(int a1, int a2, GotFileValues *a3, int a4), sub_4AE1F0, 0x4ae1f0);
void sub_4AE250(dialog *result) {
    int address = 0x4ae250;
    __asm {
        mov eax, result
        call address
    }
}
DECL_FUNC(int (*sub_4AE320)(), sub_4AE320, 0x4ae320);
BOOL sub_4AE3C0(dialog *a1) {
    int address = 0x4ae3c0;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__stdcall*sub_4AE420)(int arg0, dialog *a2, char *string), sub_4AE420, 0x4ae420);
void sub_4AE640(dlgEvent *a1, dialog *a2) {
    int address = 0x4ae640;
    __asm {
        mov esi, a2
        mov edx, a1
        call address
    }
}
void gluCustm_typeDropdown(dialog *a1) {
    int address = 0x4ae660;
    __asm {
        mov eax, a1
        call address
    }
}
DECL_FUNC(int (__fastcall*gluCustm_SubType)(dialog *dlg, dlgEvent *evt), gluCustm_SubType, 0x4ae710);
void sub_4AE790(dialog *a1) {
    int address = 0x4ae790;
    __asm {
        mov eax, a1
        call address
    }
}
DECL_FUNC(void (__stdcall*sub_4AE830)(int a1), sub_4AE830, 0x4ae830);
DECL_FUNC(int (__fastcall*gluCreate_GameSpeed_Slider)(dialog *dlg, dlgEvent *evt), gluCreate_GameSpeed_Slider, 0x4ae860);
struct_v4_1 * SingleMakeCreateGameDialog(dialog *dlg) {
    int address = 0x4ae920;
    struct_v4_1 * result_;
    __asm {
        xor eax, eax
        mov eax, dlg
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__fastcall*gluCustm_RaceSlot)(dialog *dlg, dlgEvent *evt), gluCustm_RaceSlot, 0x4aed40);
DECL_FUNC(int (__fastcall*gluCustm_PlayerSlot)(dialog *dlg, dlgEvent *evt), gluCustm_PlayerSlot, 0x4aed80);
DECL_FUNC(int (__fastcall*gluCustm_Player1)(dialog *dlg, dlgEvent *evt), gluCustm_Player1, 0x4aede0);
DECL_FUNC(signed (*gluCustmSinglePlayerInit)(), gluCustmSinglePlayerInit, 0x4aee40);
void sub_4AEEB0(int a1, dialog *a2) {
    int address = 0x4aeeb0;
    __asm {
        mov ecx, a2
        mov eax, a1
        call address
    }
}
DECL_FUNC(void (__stdcall*sub_4AEED0)(dialog *a1), sub_4AEED0, 0x4aeed0);
DECL_FUNC(int (__fastcall*gluCustm_FileListbox_Main)(dialog *dlg, dlgEvent *evt), gluCustm_FileListbox_Main, 0x4af020);
DECL_FUNC(void (__cdecl*InitGlueMapListBox)(), InitGlueMapListBox, 0x4af100);
DECL_FUNC(signed (*gluCustmLoadMapFromList)(), gluCustmLoadMapFromList, 0x4af1b0);
void sub_4AF400(dialog *a1) {
    int address = 0x4af400;
    __asm {
        mov eax, a1
        call address
    }
}
DECL_FUNC(int (__fastcall*gluCustm_GameType)(dialog *dlg, dlgEvent *evt), gluCustm_GameType, 0x4af490);
BYTE gluCustm_CustomCtrl_InitializeChildren(dialog *a1) {
    int address = 0x4af510;
    BYTE result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
DECL_FUNC(int (__fastcall*gluCustm_Interact)(dialog *dlg, struct dlgEvent *evt), gluCustm_Interact, 0x4af5c0);
void loadMenu_gluCustm(int is_multiplayer) {
    int address = 0x4af6d0;
    __asm {
        mov eax, is_multiplayer
        call address
    }
}
DECL_FUNC(int (__stdcall*sub_4AF8E0)(char *source, int a2, int a3, int a4, int (*a5)(void)), sub_4AF8E0, 0x4af8e0);
DECL_FUNC(int (__stdcall*joinModemGame)(char *gameName), joinModemGame, 0x4af920);
DECL_FUNC(int (__stdcall*Device_Constructor)(DWORD a1, DWORD a2, DWORD a3, DWORD a4), Device_Constructor, 0x4af970);
DECL_FUNC(BOOL (__fastcall*InitializeDevice)(int a1, int a2, int arg0, int a4, const void *a5), InitializeDevice, 0x4afa30);
DECL_FUNC(int (__fastcall*callback)(DWORD a1, DWORD a2, DWORD a3), callback, 0x4afa90);
DECL_FUNC(void (__thiscall*sub_4AFAD0)(dialog *this_), sub_4AFAD0, 0x4afad0);
Timer * sub_4AFB60(dialog *a1) {
    int address = 0x4afb60;
    Timer * result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__fastcall*sub_4AFBF0)(dialog *dlg, int x, int y, rect *dst), sub_4AFBF0, 0x4afbf0);
DECL_FUNC(void (__thiscall*sub_4AFC60)(dialog *this_, dialog *a2), sub_4AFC60, 0x4afc60);
void sub_4AFD80(dialog *a1) {
    int address = 0x4afd80;
    __asm {
        mov eax, a1
        call address
    }
}
u8 sub_4AFE30(dialog *a1) {
    int address = 0x4afe30;
    u8 result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
void sub_4AFEA0(dialog *a1, dialog *a2) {
    int address = 0x4afea0;
    __asm {
        mov edi, a2
        mov eax, a1
        call address
    }
}
void sub_4AFF50(dlgEvent *a1, dialog *a2) {
    int address = 0x4aff50;
    __asm {
        mov esi, a2
        mov ebx, a1
        call address
    }
}
int sub_4B0010(dialog *a1) {
    int address = 0x4b0010;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void gluModemList_CustomCtrlID(dialog *a1) {
    int address = 0x4b0070;
    __asm {
        mov esi, a1
        call address
    }
}
DECL_FUNC(void (__fastcall*sub_4B0140)(dialog *dlg, __int16 timer_id), sub_4B0140, 0x4b0140);
void gluModemStatus_CustomCtrlID(dialog *a1) {
    int address = 0x4b01f0;
    __asm {
        mov esi, a1
        call address
    }
}
void gluModemEntry_CustomCtrlID(dialog *a1) {
    int address = 0x4b02f0;
    __asm {
        mov esi, a1
        call address
    }
}
DECL_FUNC(bool (__fastcall*sub_4B03C0)(dialog *dlg, dlgEvent *a2), sub_4B03C0, 0x4b03c0);
void gluModem_CustomCtrlID(dialog *a1) {
    int address = 0x4b0410;
    __asm {
        mov esi, a1
        call address
    }
}
DECL_FUNC(bool (__fastcall*gluModemList_Main)(dialog *dlg, struct dlgEvent *evt), gluModemList_Main, 0x4b0440);
DECL_FUNC(int (__fastcall*gluModemStatus_Main)(dialog *dlg, dlgEvent *evt), gluModemStatus_Main, 0x4b04d0);
DECL_FUNC(void (__stdcall*PhoneNumber_Constructor)(dialog *a1), PhoneNumber_Constructor, 0x4b0560);
void sub_4B07C0(dialog *a1) {
    int address = 0x4b07c0;
    __asm {
        mov eax, a1
        call address
    }
}
DialogFlags sub_4B0970(dialog *a1) {
    int address = 0x4b0970;
    DialogFlags result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int sub_4B0AC0(dialog *a1) {
    int address = 0x4b0ac0;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void sub_4B0AE0(dialog *a1) {
    int address = 0x4b0ae0;
    __asm {
        mov edi, a1
        call address
    }
}
DECL_FUNC(void (*load_gluATZoneList)(), load_gluATZoneList, 0x4b0c60);
DECL_FUNC(void (*load_gluModemList)(), load_gluModemList, 0x4b0dc0);
DECL_FUNC(int (__fastcall*gluModemEntry_loop)(dialog *dlg, dlgEvent *evt), gluModemEntry_loop, 0x4b0f20);
int InitializeModem(SNETPLAYERDATA *a1, SNETUIDATA *a2, SNETPROGRAMDATA *eax0, Char4 a4) {
    int address = 0x4b0fb0;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a4
        mov eax, eax0
        mov esi, a2
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__stdcall*load_gluModemStatus)(dialog *a1), load_gluModemStatus, 0x4b1060);
void DeleteGluModemEntry(dialog *a1) {
    int address = 0x4b1310;
    __asm {
        mov edi, a1
        call address
    }
}
DECL_FUNC(void (__stdcall*load_gluModemEntry)(int a1), load_gluModemEntry, 0x4b13a0);
DECL_FUNC(void (__stdcall*AU_PHONENUMBER)(dialog *arg0), AU_PHONENUMBER, 0x4b14d0);
DECL_FUNC(int (__fastcall*gluModem_Main)(dialog *dlg, struct dlgEvent *evt), gluModem_Main, 0x4b1820);
DECL_FUNC(void (*loadMenu_gluModem)(), loadMenu_gluModem, 0x4b19c0);
bool sub_4B1B30(const void *a1, const void *a2) {
    int address = 0x4b1b30;
    bool result_;
    __asm {
        xor eax, eax
        mov edx, a2
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
signed verifyCheatCode(const void *a1, CheatFlags *game_cheats) {
    int address = 0x4b1b50;
    signed result_;
    __asm {
        xor eax, eax
        mov edx, game_cheats
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed campaignTypeCheatStrings(const char *a1) {
    int address = 0x4b1dc0;
    signed result_;
    __asm {
        xor eax, eax
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
__int64 * makeCheatHash(const char *cheat, __int64 *a2) {
    int address = 0x4b1ee0;
    __int64 * result_;
    __asm {
        xor eax, eax
        mov edi, a2
        mov edx, cheat
        call address
        mov result_, eax
    }
    return result_;
}
void cheatActivation(CheatFlags cheat_flags, const char *player_name) {
    int address = 0x4b1fa0;
    __asm {
        push dword ptr player_name
        mov eax, cheat_flags
        call address
        add esp, 4
    }
}
signed radioFreeZergCheat(const void *a1, CheatFlags *cheat_flags) {
    int address = 0x4b2350;
    signed result_;
    __asm {
        xor eax, eax
        push dword ptr cheat_flags
        mov edx, a1
        call address
        mov result_, eax
        add esp, 4
    }
    return result_;
}
BOOL CommandLineCheatCompare(CheatFlags *game_cheats, const char *a2) {
    int address = 0x4b23e0;
    BOOL result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov ebx, game_cheats
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__fastcall*sub_4B24B0)(dialog *a1, dlgEvent *a2), sub_4B24B0, 0x4b24b0);
DECL_FUNC(void (__fastcall*gluCmpgnBtn_UpdateTimer)(dialog *a1, __int16 a2), gluCmpgnBtn_UpdateTimer, 0x4b2500);
DECL_FUNC(void (__fastcall*gluCmpgnBtn_InitTimer)(dialog *dlg, __int16 timer_id), gluCmpgnBtn_InitTimer, 0x4b2570);
DECL_FUNC(void (__fastcall*gluCmpgnBtn_BtnLightupUpdate)(dialog *dlg, int x, int y, rect *dst), gluCmpgnBtn_BtnLightupUpdate, 0x4b25a0);
DECL_FUNC(int (__fastcall*gluCmpgn_CampaignButton)(dialog *dlg, dlgEvent *evt), gluCmpgn_CampaignButton, 0x4b25e0);
void gluCmpgn_CustomCtrlID(dialog *dlg) {
    int address = 0x4b26b0;
    __asm {
        mov esi, dlg
        call address
    }
}
DECL_FUNC(void (*sub_4B26E0)(), sub_4B26E0, 0x4b26e0);
BOOL sub_4B27A0(int race) {
    int address = 0x4b27a0;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, race
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(signed (__stdcall*sub_4B2810)(dialog *a1), sub_4B2810, 0x4b2810);
DECL_FUNC(int (__fastcall*gluCmpgn_Main)(dialog *dlg, dlgEvent *evt), gluCmpgn_Main, 0x4b28b0);
DECL_FUNC(void (*loadMenu_gluCmpgn)(), loadMenu_gluCmpgn, 0x4b2930);
BOOL sub_4B2A50(int a1) {
    int address = 0x4b2a50;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__fastcall*resourceScoreCalc)(struc_59A0F0 *a1, int a2), resourceScoreCalc, 0x4b2a90);
DECL_FUNC(void (__fastcall*structureScoreCalc)(struc_59A0F0 *a1, int a2), structureScoreCalc, 0x4b2af0);
DECL_FUNC(void (__fastcall*unitScoreCalc)(struc_59A0F0 *a1, int player_id), unitScoreCalc, 0x4b2b30);
DECL_FUNC(void (__fastcall*overallScoreCalc)(struc_59A0F0 *a1, int player_id), overallScoreCalc, 0x4b2b70);
DECL_FUNC(int (__thiscall*sub_4B2BD0)(struc_59A0F0 *this_), sub_4B2BD0, 0x4b2bd0);
void sub_4B2D10(int result) {
    int address = 0x4b2d10;
    __asm {
        mov eax, result
        call address
    }
}
DECL_FUNC(u8 * (__stdcall*sub_4B2D20)(int a1, int a2), sub_4B2D20, 0x4b2d20);
BOOL sub_4B2D50(int a1) {
    int address = 0x4b2d50;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
BOOL sub_4B2DA0(int a1) {
    int address = 0x4b2da0;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(char (__thiscall*sub_4B2DE0)(void *this_, char a2), sub_4B2DE0, 0x4b2de0);
DECL_FUNC(int (*sub_4B2DF0)(), sub_4B2DF0, 0x4b2df0);
int sub_4B2FC0(size_t format_length, char *format, unsigned int a3) {
    int address = 0x4b2fc0;
    int result_;
    __asm {
        xor eax, eax
        mov ecx, a3
        mov edx, format
        mov eax, format_length
        call address
        mov result_, eax
    }
    return result_;
}
BOOL sub_4B30A0(dialog *dlg) {
    int address = 0x4b30a0;
    BOOL result_;
    __asm {
        xor eax, eax
        mov edi, dlg
        call address
        mov result_, eax
    }
    return result_;
}
int sub_4B3140(_DWORD *a1, int a2) {
    int address = 0x4b3140;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__fastcall*sub_4B31C0)(struc_59A0F0 *a1, struct_v0 *a2, int a3, void (__fastcall *a4)(struc_59A0F0 *, _DWORD)), sub_4B31C0, 0x4b31c0);
DECL_FUNC(int (__stdcall*endgameData)(char *a1, size_t a2, char *buff, size_t a4), endgameData, 0x4b3220);
DECL_FUNC(int (__stdcall*sub_4B34D0)(struc_59A0F0 *a1, int a2), sub_4B34D0, 0x4b34d0);
int sub_4B3600(dialog *a1, int a2, int a3, int a4) {
    int address = 0x4b3600;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a4
        push dword ptr a3
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__fastcall*DLG_GlueScoreFillEnd)(dialog *a1, __int16 a2), DLG_GlueScoreFillEnd, 0x4b3670);
DECL_FUNC(void (__thiscall*sub_4B3820)(dialog *this_, int a2, int a3), sub_4B3820, 0x4b3820);
DECL_FUNC(void (__fastcall*sub_4B38A0)(dialog *dlg, int x, int y, rect *dst), sub_4B38A0, 0x4b38a0);
DECL_FUNC(void (__fastcall*sub_4B3A40)(dialog *dlg, int x, int y, rect *dst), sub_4B3A40, 0x4b3a40);
DECL_FUNC(void (__fastcall*sub_4B3B80)(dialog *dlg, int x, int y, rect *dst), sub_4B3B80, 0x4b3b80);
DECL_FUNC(void (__stdcall*sub_4B3BC0)(dialog *a1), sub_4B3BC0, 0x4b3bc0);
DECL_FUNC(int (__fastcall*gluScore_PlayerRaceIcon)(dialog *dlg, dlgEvent *evt), gluScore_PlayerRaceIcon, 0x4b3fd0);
DECL_FUNC(int (__fastcall*gluScore_PlayerScoreTotal)(dialog *dlg, dlgEvent *evt), gluScore_PlayerScoreTotal, 0x4b4160);
int sub_4B42D0(dialog *a1) {
    int address = 0x4b42d0;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void DLG_GlueScoreFill(dialog *a1) {
    int address = 0x4b43f0;
    __asm {
        mov eax, a1
        call address
    }
}
void sub_4B4520(dialog *a1) {
    int address = 0x4b4520;
    __asm {
        mov edi, a1
        call address
    }
}
int sub_4B4600(dialog *a1) {
    int address = 0x4b4600;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__fastcall*gluScore_Tab)(dialog *dlg, dlgEvent *evt), gluScore_Tab, 0x4b47c0);
DECL_FUNC(int (__fastcall*gluScore_SaveReplay)(dialog *dlg, dlgEvent *evt), gluScore_SaveReplay, 0x4b4960);
void gluScore_CustomCtrlID(dialog *dlg) {
    int address = 0x4b4a00;
    __asm {
        mov esi, dlg
        call address
    }
}
DECL_FUNC(int (__fastcall*gluScore_Main)(dialog *dlg, struct dlgEvent *evt), gluScore_Main, 0x4b4a30);
DECL_FUNC(void (*loadMenu_gluScore)(), loadMenu_gluScore, 0x4b4af0);
DECL_FUNC(bool (__fastcall*sub_4B4E20)(dialog *dlg, struct dlgEvent *evt), sub_4B4E20, 0x4b4e20);
DECL_FUNC(void (__fastcall*sub_4B4E70)(dialog *a1, __int16 a2), sub_4B4E70, 0x4b4e70);
DECL_FUNC(void (__fastcall*sub_4B4EE0)(dialog *a1, __int16 a2), sub_4B4EE0, 0x4b4ee0);
DECL_FUNC(void (__fastcall*sub_4B4F10)(dialog *dlg, int x, int y, rect *dst), sub_4B4F10, 0x4b4f10);
DECL_FUNC(int (__fastcall*gluExpCmpgn_CampaignButton)(dialog *dlg, dlgEvent *evt), gluExpCmpgn_CampaignButton, 0x4b4f50);
void gluExpCmpgn_CustomCtrlID(dialog *a1) {
    int address = 0x4b5020;
    __asm {
        mov esi, a1
        call address
    }
}
DECL_FUNC(void (__cdecl*sub_4B5050)(), sub_4B5050, 0x4b5050);
BOOL sub_4B5110(int race) {
    int address = 0x4b5110;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, race
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(signed (__stdcall*sub_4B5180)(dialog *a1), sub_4B5180, 0x4b5180);
DECL_FUNC(int (__fastcall*gluExpCmpgn_Main)(dialog *dlg, struct dlgEvent *evt), gluExpCmpgn_Main, 0x4b5220);
DECL_FUNC(void (*loadMenu_gluExpCmpgn)(), loadMenu_gluExpCmpgn, 0x4b52a0);
DECL_FUNC(void (*sub_4B53C0)(), sub_4B53C0, 0x4b53c0);
char sub_4B53D0(unsigned __int8 *a1, int a2) {
    int address = 0x4b53d0;
    char result_;
    __asm {
        xor eax, eax
        mov esi, a2
        mov ecx, a1
        call address
        mov result_, al
    }
    return result_;
}
DECL_FUNC(void (__fastcall*LoadPCXFromResource)(const char *fileName, Bitmap *a2, PALETTEENTRY *palette, const char *source_filename, int source_line), LoadPCXFromResource, 0x4b5450);
DECL_FUNC(HRSRC (__fastcall*sub_4B5500)(LPCSTR lpName, void *a2, int amount, int a4, int a5), sub_4B5500, 0x4b5500);
char sub_4B55A0(__int16 *a1, int a2) {
    int address = 0x4b55a0;
    char result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
void sub_4B5640(dialog *a1) {
    int address = 0x4b5640;
    __asm {
        mov esi, a1
        call address
    }
}
DECL_FUNC(void (*sub_4B5770)(), sub_4B5770, 0x4b5770);
DECL_FUNC(void (__fastcall*sub_4B5790)(dialog *dlg, int x, int y, rect *dst), sub_4B5790, 0x4b5790);
dialog * sub_4B57B0(dialog *a1) {
    int address = 0x4b57b0;
    dialog * result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__fastcall*gluOK_Dlg_Interact_CB)(dialog *dlg, struct dlgEvent *evt), gluOK_Dlg_Interact_CB, 0x4b5920);
void sub_4B59A0(const char *a1) {
    int address = 0x4b59a0;
    __asm {
        mov eax, a1
        call address
    }
}
bool sub_4B5B20(const char *a1) {
    int address = 0x4b5b20;
    bool result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
void sub_4B5CC0(const char *error_message, const char *a2) {
    int address = 0x4b5cc0;
    __asm {
        mov eax, a2
        mov ecx, error_message
        call address
    }
}
DECL_FUNC(int (__thiscall*sub_4B5E80)(void *this_), sub_4B5E80, 0x4b5e80);
DECL_FUNC(void (*sub_4B5EB0)(), sub_4B5EB0, 0x4b5eb0);
DECL_FUNC(int (__thiscall*sub_4B5EC0)(int this_), sub_4B5EC0, 0x4b5ec0);
DECL_FUNC(int (__thiscall*sub_4B5EF0)(dialog *this_), sub_4B5EF0, 0x4b5ef0);
DECL_FUNC(void (__stdcall*SaveGame_Constructor)(int a1), SaveGame_Constructor, 0x4b6010);
int sub_4B6180(dialog *a1) {
    int address = 0x4b6180;
    int result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
int sub_4B61C0(dialog *a1) {
    int address = 0x4b61c0;
    int result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (*DeleteSavedGame)(), DeleteSavedGame, 0x4b62a0);
DECL_FUNC(int (__fastcall*gluLoad_List)(dialog *dlg, dlgEvent *evt), gluLoad_List, 0x4b6340);
void gluLoad_CustomCtrlID(dialog *dlg) {
    int address = 0x4b63e0;
    __asm {
        mov esi, dlg
        call address
    }
}
DECL_FUNC(int (__fastcall*gluLoad_Main)(dialog *dlg, struct dlgEvent *evt), gluLoad_Main, 0x4b6410);
DECL_FUNC(void (__cdecl*loadMenu_gluLoad)(), loadMenu_gluLoad, 0x4b6490);
BOOL sub_4B6530(CampaignMenuEntry *a1, unsigned int a2) {
    int address = 0x4b6530;
    BOOL result_;
    __asm {
        xor eax, eax
        mov esi, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void gluHist_Activate(dialog *result) {
    int address = 0x4b6570;
    __asm {
        mov eax, result
        call address
    }
}
int sub_4B65D0(dialog *a1) {
    int address = 0x4b65d0;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
char sub_4B6610(char *a1, signed int a2) {
    int address = 0x4b6610;
    char result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
DECL_FUNC(dialog * (*sub_4B6640)(), sub_4B6640, 0x4b6640);
dialog * sub_4B6650(dialog *result, int a2) {
    int address = 0x4b6650;
    dialog * result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
void sub_4B6660(dialog *a1) {
    int address = 0x4b6660;
    __asm {
        mov esi, a1
        call address
    }
}
DECL_FUNC(void (*sub_4B67A0)(), sub_4B67A0, 0x4b67a0);
int sub_4B67D0(dialog *a1) {
    int address = 0x4b67d0;
    int result_;
    __asm {
        xor eax, eax
        mov ebx, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__fastcall*sub_4B67F0)(dialog *dlg, int x, int y, rect *dst), sub_4B67F0, 0x4b67f0);
void sub_4B6810(dialog *a1) {
    int address = 0x4b6810;
    __asm {
        mov edi, a1
        call address
    }
}
void sub_4B68C0(dialog *a1) {
    int address = 0x4b68c0;
    __asm {
        mov eax, a1
        call address
    }
}
void gluHist_Create(dialog *dlg) {
    int address = 0x4b6930;
    __asm {
        mov eax, dlg
        call address
    }
}
void sub_4B6A20(dialog *a1) {
    int address = 0x4b6a20;
    __asm {
        mov esi, a1
        call address
    }
}
void sub_4B6B10(dialog *a1, struct dlgEvent *evt) {
    int address = 0x4b6b10;
    __asm {
        push dword ptr evt
        mov esi, a1
        call address
    }
}
DECL_FUNC(bool (__fastcall*sub_4B6C30)(dialog *dlg, dlgEvent *a2), sub_4B6C30, 0x4b6c30);
void sub_4B6C70(dialog *dlg) {
    int address = 0x4b6c70;
    __asm {
        mov esi, dlg
        call address
    }
}
DECL_FUNC(int (__fastcall*gluPEdit_Main)(dialog *dlg, struct dlgEvent *evt), gluPEdit_Main, 0x4b6cc0);
DECL_FUNC(int (__fastcall*Popup_Main)(dialog *dlg, struct dlgEvent *evt), Popup_Main, 0x4b6d60);
DECL_FUNC(int (__fastcall*gluHist_Interact)(dialog *dlg, struct dlgEvent *evt), gluHist_Interact, 0x4b6e10);
DECL_FUNC(bool (__stdcall*BWFXN_gluPEdit_MBox)(char *text, char *dest, size_t size_, char *restricted), BWFXN_gluPEdit_MBox, 0x4b6e50);
void BWFXN_gluPOK_MBox(const char *a1) {
    int address = 0x4b7180;
    __asm {
        mov eax, a1
        call address
    }
}
int BWFXN_gluPOKCancel_MBox(const char *a1) {
    int address = 0x4b73b0;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__cdecl*load_gluGameMode_BINDLG)(), load_gluGameMode_BINDLG, 0x4b75e0);
CampaignMenuEntry * loadmenu_GluHist(int a1, CampaignMenuEntry *menu_entries) {
    int address = 0x4b7820;
    CampaignMenuEntry * result_;
    __asm {
        xor eax, eax
        mov ecx, menu_entries
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void load_gluPOKSplitBINDLG(const char *a1, const char *a2) {
    int address = 0x4b7a70;
    __asm {
        mov ecx, a2
        mov eax, a1
        call address
    }
}
DECL_FUNC(_DWORD * (*sub_4B7C90)(), sub_4B7C90, 0x4b7c90);
DECL_FUNC(int (__fastcall*sub_4B7CB0)(int a1, const char *a2), sub_4B7CB0, 0x4b7cb0);
DECL_FUNC(void (__cdecl*sub_4B7D10)(), sub_4B7D10, 0x4b7d10);
DECL_FUNC(int (__thiscall*sub_4B7DA0)(dialog *this_), sub_4B7DA0, 0x4b7da0);
DECL_FUNC(void (*sub_4B7DE0)(), sub_4B7DE0, 0x4b7de0);
DECL_FUNC(void (*DestroyGameNodes)(), DestroyGameNodes, 0x4b7df0);
DialogFlags sub_4B7E10(dialog *dlg) {
    int address = 0x4b7e10;
    DialogFlags result_;
    __asm {
        xor eax, eax
        mov eax, dlg
        call address
        mov result_, eax
    }
    return result_;
}
void sub_4B7E60(dialog *a1, int a2) {
    int address = 0x4b7e60;
    __asm {
        mov ecx, a2
        mov eax, a1
        call address
    }
}
DECL_FUNC(int (__fastcall*gluJoin_MapStatsLabel)(dialog *a1, dlgEvent *a2), gluJoin_MapStatsLabel, 0x4b7ef0);
DECL_FUNC(int (__stdcall*GameNode_Destructor_0)(int a1, dialog *a2), GameNode_Destructor_0, 0x4b7f50);
DECL_FUNC(void (__stdcall*updateDLGSpeedSetting)(dialog *a1), updateDLGSpeedSetting, 0x4b8090);
void sub_4B8340(dialog *a1) {
    int address = 0x4b8340;
    __asm {
        mov eax, a1
        call address
    }
}
void sub_4B8460(dialog *a1) {
    int address = 0x4b8460;
    __asm {
        mov esi, a1
        call address
    }
}
DECL_FUNC(int (__fastcall*gluJoin_Listbox)(dialog *dlg, dlgEvent *evt), gluJoin_Listbox, 0x4b84a0);
void gluJoin_CustomCtrlID(dialog *dlg) {
    int address = 0x4b8560;
    __asm {
        mov esi, dlg
        call address
    }
}
DECL_FUNC(int (__fastcall*gluJoin_Main)(dialog *dlg, struct dlgEvent *evt), gluJoin_Main, 0x4b8590);
DECL_FUNC(void (*loadMenu_gluJoin)(), loadMenu_gluJoin, 0x4b86c0);
void bootReason(unsigned __int8 a1) {
    int address = 0x4b8870;
    __asm {
        xor eax, eax
        mov al, a1
        call address
    }
}
DECL_FUNC(void (*sub_4B8920)(), sub_4B8920, 0x4b8920);
DECL_FUNC(void (*sub_4B8930)(), sub_4B8930, 0x4b8930);
DECL_FUNC(int (__fastcall*gluChat_Button)(dialog *a1, dlgEvent *a2), gluChat_Button, 0x4b8940);
int sub_4B8970(int result) {
    int address = 0x4b8970;
    int result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (*sub_4B8990)(), sub_4B8990, 0x4b8990);
DECL_FUNC(void (*sub_4B89A0)(), sub_4B89A0, 0x4b89a0);
void updateMinimapPreviewDisplayOffOn(int a1, dialog *a2, int a3) {
    int address = 0x4b89f0;
    __asm {
        push dword ptr a3
        mov edi, a2
        mov ebx, a1
        call address
    }
}
void updatePasswordDisplay(dialog *a1) {
    int address = 0x4b8c80;
    __asm {
        mov eax, a1
        call address
    }
}
void * sub_4B8D70(dialog *a1) {
    int address = 0x4b8d70;
    void * result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void sub_4B8D90(dialog *a1) {
    int address = 0x4b8d90;
    __asm {
        mov edi, a1
        call address
    }
}
char gluChat_Textbox_onCharEvent(dlgEvent *a1, dialog *a2) {
    int address = 0x4b8de0;
    char result_;
    __asm {
        xor eax, eax
        mov edi, a2
        mov ebx, a1
        call address
        mov result_, al
    }
    return result_;
}
DECL_FUNC(int (__fastcall*gluChat_GameStatsLabel)(dialog *dlg, dlgEvent *evt), gluChat_GameStatsLabel, 0x4b8e70);
DECL_FUNC(int (__fastcall*gluChat_Textbox_Interact)(dialog *a1, dlgEvent *a2), gluChat_Textbox_Interact, 0x4b8ed0);
void sub_4B8F10(const char *a1, int a2) {
    int address = 0x4b8f10;
    __asm {
        push dword ptr a2
        mov eax, a1
        call address
    }
}
void gluChat_Listbox_Create(dialog *a1) {
    int address = 0x4b9170;
    __asm {
        mov eax, a1
        call address
    }
}
void printLobbyString(unsigned int a1, char *source) {
    int address = 0x4b91c0;
    __asm {
        push dword ptr source
        mov eax, a1
        call address
    }
}
DECL_FUNC(void (*sub_4B92F0)(), sub_4B92F0, 0x4b92f0);
DECL_FUNC(void (__stdcall*DLG_GlueCountdown)(unsigned __int8 a1), DLG_GlueCountdown, 0x4b9300);
DECL_FUNC(void (__stdcall*sub_4B9480)(dialog *dlg), sub_4B9480, 0x4b9480);
DECL_FUNC(int (__fastcall*gluChat_Listbox_Interact)(dialog *dlg, dlgEvent *evt), gluChat_Listbox_Interact, 0x4b96a0);
int BootPlayerMessageBox(int a1) {
    int address = 0x4b9730;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void gluChat_init(dialog *a1) {
    int address = 0x4b9770;
    __asm {
        mov edi, a1
        call address
    }
}
void gluChat_CustomCtrlID(dialog *a1) {
    int address = 0x4b9810;
    __asm {
        mov eax, a1
        call address
    }
}
int getErrorStringPair(GluAllTblEntry a1, int a2) {
    int address = 0x4b9830;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov ax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (*SendLobbyMessage)(), SendLobbyMessage, 0x4b98d0);
signed gluChat_controlActivation(signed int last_control_id, dialog *dlg) {
    int address = 0x4b9910;
    signed result_;
    __asm {
        xor eax, eax
        mov ecx, dlg
        mov eax, last_control_id
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__fastcall*MinimapPreviewProc)(dialog *a1, __int16 timer_id), MinimapPreviewProc, 0x4b9a50);
DECL_FUNC(void (__stdcall*gluChat_HoverMinimapPreview)(dialog *dlg), gluChat_HoverMinimapPreview, 0x4b9ac0);
DECL_FUNC(bool (__fastcall*sub_4B9B10)(dialog *lobby_dlg), sub_4B9B10, 0x4b9b10);
DECL_FUNC(void (__cdecl*sub_4B9BF0)(dialog *a1), sub_4B9BF0, 0x4b9bf0);
DECL_FUNC(int (__fastcall*gluChat_Main)(dialog *dlg, struct dlgEvent *evt), gluChat_Main, 0x4b9c20);
DECL_FUNC(void (*loadMenu_gluChat)(), loadMenu_gluChat, 0x4b9e70);
const void * sub_4BA0A0(const void *result) {
    int address = 0x4ba0a0;
    const void * result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_4BA0C0)(), sub_4BA0C0, 0x4ba0c0);
void sub_4BA0E0(const char *a1) {
    int address = 0x4ba0e0;
    __asm {
        mov esi, a1
        call address
    }
}
DECL_FUNC(void (*get_tFontGam_PCX_0)(), get_tFontGam_PCX_0, 0x4ba120);
DECL_FUNC(void (*get_tFontGam_PCX)(), get_tFontGam_PCX, 0x4ba160);
BOOL DlgPszTextMemFree(dialog *a1, __int16 a2) {
    int address = 0x4ba1a0;
    BOOL result_;
    __asm {
        xor eax, eax
        xor ecx, ecx
        mov cx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void * sub_4BA1F0(int a1, __int16 a2, int amount) {
    int address = 0x4ba1f0;
    void * result_;
    __asm {
        xor eax, eax
        xor ecx, ecx
        push dword ptr amount
        mov cx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int sub_4BA240(int a1) {
    int address = 0x4ba240;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(TPROVIDER * (__thiscall*sub_4BA290)(dialog *this_), sub_4BA290, 0x4ba290);
DECL_FUNC(void (*sub_4BA320)(), sub_4BA320, 0x4ba320);
void DestroyProviderList(dialog *a1) {
    int address = 0x4ba330;
    __asm {
        mov esi, a1
        call address
    }
}
void sub_4BA370(dialog *a1, size_t a2, __int16 a3, const char *a4) {
    int address = 0x4ba370;
    __asm {
        xor ecx, ecx
        mov edi, a4
        mov cx, a3
        mov edx, a2
        mov eax, a1
        call address
    }
}
DECL_FUNC(void (__fastcall*sub_4BA3C0)(dialog *a1, u8 a2, rect *a3, int a4, int a5), sub_4BA3C0, 0x4ba3c0);
void ListBNGateways(dialog *dlg) {
    int address = 0x4ba530;
    __asm {
        mov eax, dlg
        call address
    }
}
void sub_4BA600(dialog *a1) {
    int address = 0x4ba600;
    __asm {
        mov eax, a1
        call address
    }
}
DECL_FUNC(int (__stdcall*Provider_Constructor)(int a1, char *a2, char *source, int a4), Provider_Constructor, 0x4ba610);
DECL_FUNC(int (__fastcall*GatewayListProc)(dialog *dlg, dlgEvent *evt), GatewayListProc, 0x4ba740);
void selConn_connectionList_setSelection(dialog *a1) {
    int address = 0x4ba7e0;
    __asm {
        mov ebx, a1
        call address
    }
}
void InitNetProviders(dialog *dlg) {
    int address = 0x4baa80;
    __asm {
        mov eax, dlg
        call address
    }
}
signed getGameList(dialog *dlg) {
    int address = 0x4bab10;
    signed result_;
    __asm {
        xor eax, eax
        mov eax, dlg
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__stdcall*selConn_connectionList_Create)(dialog *a1), selConn_connectionList_Create, 0x4bacb0);
DECL_FUNC(int (__fastcall*selConn_ConnectionList_Interact)(dialog *dlg, dlgEvent *evt), selConn_ConnectionList_Interact, 0x4bad10);
void ConnSel_InitChildren(dialog *a1) {
    int address = 0x4bad70;
    __asm {
        mov edi, a1
        call address
    }
}
DECL_FUNC(int (__cdecl*BeginBNET)(), BeginBNET, 0x4bade0);
DECL_FUNC(int (__fastcall*ConnSel_Interact)(dialog *dlg, struct dlgEvent *evt), ConnSel_Interact, 0x4bae20);
DECL_FUNC(void (*loadMenu_gluConn)(), loadMenu_gluConn, 0x4baf30);
DECL_FUNC(void (*sub_4BB0A0)(), sub_4BB0A0, 0x4bb0a0);
void packetErrHandle(DWORD last_error, int a2, char *a3, int a4, int a5) {
    int address = 0x4bb0b0;
    __asm {
        push dword ptr a5
        push dword ptr a4
        push dword ptr a3
        push dword ptr a2
        mov eax, last_error
        call address
    }
}
DECL_FUNC(BOOL (*sub_4BB110)(), sub_4BB110, 0x4bb110);
DECL_FUNC(void (__fastcall*sub_4BB170)(int a1, char *a2, int a3, int a4), sub_4BB170, 0x4bb170);
int sub_4BB1A0(const char *string, int a2, const char *a3, int a4) {
    int address = 0x4bb1a0;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a4
        mov ebx, a3
        mov eax, a2
        mov ecx, string
        call address
        mov result_, eax
    }
    return result_;
}
int sub_4BB260(BYTE **data, int *senderplayerid, int *a3) {
    int address = 0x4bb260;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a3
        mov edx, senderplayerid
        mov ecx, data
        call address
        mov result_, eax
    }
    return result_;
}
void sub_4BB2A0(char *data, unsigned int a2) {
    int address = 0x4bb2a0;
    __asm {
        mov eax, a2
        mov ecx, data
        call address
    }
}
void sendMessage_Fast(char *data, unsigned int playerID, unsigned int a3) {
    int address = 0x4bb2d0;
    __asm {
        mov eax, a3
        mov edx, playerID
        mov ecx, data
        call address
    }
}
void doNetTBLError(int a1, const char *error_message, char *file_name, int a4) {
    int address = 0x4bb300;
    __asm {
        push dword ptr a4
        mov ecx, file_name
        mov edx, error_message
        mov eax, a1
        call address
    }
}
DECL_FUNC(void (__fastcall*BigPacketError)(int a1, const CHAR *a2, char *a3, int a4, int a5), BigPacketError, 0x4bb430);
DECL_FUNC(void (__cdecl*sub_4BB4B0)(), sub_4BB4B0, 0x4bb4b0);
int ReceiveTurns(unsigned int *arraydatabytes, char **arraydata, DWORD *a3, int a4, int arraysize_) {
    int address = 0x4bb530;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr arraysize_
        push dword ptr a4
        mov eax, a3
        mov edx, arraydata
        mov ecx, arraydatabytes
        call address
        mov result_, eax
    }
    return result_;
}
signed CreateSoundBuffer(AudioVideoInitializationError *a1) {
    int address = 0x4bb5a0;
    signed result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed SetCooperativeLevel(HWND a1, AudioVideoInitializationError *a2) {
    int address = 0x4bb600;
    signed result_;
    __asm {
        xor eax, eax
        mov esi, a2
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed DSoundCreate(AudioVideoInitializationError *a1) {
    int address = 0x4bb640;
    signed result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed sub_4BB6E0(AudioVideoInitializationError *a1) {
    int address = 0x4bb6e0;
    signed result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
int sub_4BB720(SfxData a1) {
    int address = 0x4bb720;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(char (*sub_4BB730)(), sub_4BB730, 0x4bb730);
DECL_FUNC(signed (__stdcall*sub_4BB740)(char a1), sub_4BB740, 0x4bb740);
DWORD sub_4BB890(struct_5 *a1) {
    int address = 0x4bb890;
    DWORD result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
void sub_4BB8E0(SfxData a1) {
    int address = 0x4bb8e0;
    __asm {
        mov ebx, a1
        call address
    }
}
DECL_FUNC(IDirectSoundBuffer * (*sub_4BB990)(), sub_4BB990, 0x4bb990);
DECL_FUNC(_DWORD (__stdcall*parseSection)(_DWORD a1), parseSection, 0x4bb9b0);
DECL_FUNC(BOOL (*sub_4BBA00)(), sub_4BBA00, 0x4bba00);
int sub_4BBA20(int a1, int a2) {
    int address = 0x4bba20;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__fastcall*sfxdata_cleanup)(bool exit_code), sfxdata_cleanup, 0x4bba50);
DECL_FUNC(HRESULT (*SetAudioFormat)(), SetAudioFormat, 0x4bba90);
signed sub_4BBAF0(struct_5 *a1, int a2, int a3, SfxData sfx_id, UnitType unit_type, char sfxdata_flags_2, char a7, char sfxdata_flags_1) {
    int address = 0x4bbaf0;
    signed result_;
    __asm {
        xor eax, eax
        push dword ptr sfxdata_flags_1
        push dword ptr a7
        push dword ptr sfxdata_flags_2
        push dword ptr unit_type
        push dword ptr sfx_id
        push dword ptr a3
        push dword ptr a2
        mov ebx, a1
        call address
        mov result_, eax
    }
    return result_;
}
void sub_4BBC00(int a1) {
    int address = 0x4bbc00;
    __asm {
        mov eax, a1
        call address
    }
}
DECL_FUNC(HRESULT (*sub_4BBCF0)(), sub_4BBCF0, 0x4bbcf0);
void * parseWaveFile(_DWORD *a1, unsigned int *a2, WAVEFORMATEX *a3) {
    int address = 0x4bbd80;
    void * result_;
    __asm {
        xor eax, eax
        mov esi, a3
        mov edi, a2
        mov ecx, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (*sub_4BBE40)(), sub_4BBE40, 0x4bbe40);
DECL_FUNC(void (__cdecl*PlayBriefingWAVBegin)(), PlayBriefingWAVBegin, 0x4bbe50);
signed sub_4BBEB0(SfxData a1, int a2, int a3, UnitType a4) {
    int address = 0x4bbeb0;
    signed result_;
    __asm {
        xor eax, eax
        push dword ptr a4
        push dword ptr a3
        push dword ptr a2
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__cdecl*stopSounds)(), stopSounds, 0x4bbf50);
signed PlayTransmissionLocation(SfxData a1, int a2, int a3, CUnit *a4) {
    int address = 0x4bbfd0;
    signed result_;
    __asm {
        xor eax, eax
        push dword ptr a4
        push dword ptr a3
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (*stopAllSound)(void), stopAllSound, 0x4bc100);
DECL_FUNC(void (__cdecl*muteSfx)(), muteSfx, 0x4bc110);
DECL_FUNC(void (__cdecl*BWFXN_DSoundDestroy)(), BWFXN_DSoundDestroy, 0x4bc180);
DECL_FUNC(signed (__stdcall*_PlayTransmissionLocation)(SfxData a1, int a2, int a3, CUnit *a4), _PlayTransmissionLocation, 0x4bc270);
DECL_FUNC(void (__stdcall*playSoundId)(SfxData a1), playSoundId, 0x4bc2c0);
void j_DLGMusicFade(MusicTrack a1) {
    int address = 0x4bc310;
    __asm {
        mov eax, a1
        call address
    }
}
void muteBgm(RegistryOptions *a1) {
    int address = 0x4bc320;
    __asm {
        mov esi, a1
        call address
    }
}
DECL_FUNC(void (*sub_4BC410)(), sub_4BC410, 0x4bc410);
DECL_FUNC(void (*initVolume)(), initVolume, 0x4bc450);
void PlayWavByFilename_maybe(const char *a1) {
    int address = 0x4bc490;
    __asm {
        mov eax, a1
        call address
    }
}
void sub_4BC5E0(SfxData a1) {
    int address = 0x4bc5e0;
    __asm {
        mov eax, a1
        call address
    }
}
DECL_FUNC(unsigned (__stdcall*DSoundThread)(void *a1), DSoundThread, 0x4bc620);
IDirectSoundBuffer * LoadSoundProc(char *a1, struct_5 *a2) {
    int address = 0x4bc8c0;
    IDirectSoundBuffer * result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__cdecl*LoadSfx)(), LoadSfx, 0x4bc9f0);
IDirectSoundBuffer * sub_4BCA30(SfxData a1, struct_5 *a2) {
    int address = 0x4bca30;
    IDirectSoundBuffer * result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void sub_4BCA80(SfxData a1) {
    int address = 0x4bca80;
    __asm {
        mov edi, a1
        call address
    }
}
DECL_FUNC(void (__cdecl*LoadBtnSfxFile)(), LoadBtnSfxFile, 0x4bcb20);
BOOL DSoundInit(AudioVideoInitializationError *a1, HWND a2) {
    int address = 0x4bcb70;
    BOOL result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void playsound_init_UI(u16 *a1) {
    int address = 0x4bccf0;
    __asm {
        mov eax, a1
        call address
    }
}
void sub_4BCD70(PALETTEENTRY *a1) {
    int address = 0x4bcd70;
    __asm {
        mov eax, a1
        call address
    }
}
DECL_FUNC(void (__cdecl*blitTileCacheOnRefresh)(), blitTileCacheOnRefresh, 0x4bcdc0);
DECL_FUNC(void (__cdecl*sub_4BCEA0)(), sub_4BCEA0, 0x4bcea0);
DECL_FUNC(int (*GenerateMegatileDefaultFlags)(), GenerateMegatileDefaultFlags, 0x4bcf50);
DECL_FUNC(void (*nullsub_55)(), nullsub_55, 0x4bd0b0);
const char * get_chk_String(__int16 a1) {
    int address = 0x4bd0c0;
    const char * result_;
    __asm {
        xor eax, eax
        xor edx, edx
        mov dx, a1
        call address
        mov result_, eax
    }
    return result_;
}
unsigned GetGroundHeightAtPos(signed int x, signed int y) {
    int address = 0x4bd0f0;
    unsigned result_;
    __asm {
        xor eax, eax
        mov eax, y
        mov ecx, x
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__cdecl*DestroyMapData)(), DestroyMapData, 0x4bd190);
DECL_FUNC(char (*RefreshLayer5)(), RefreshLayer5, 0x4bd350);
DECL_FUNC(void (__cdecl*sub_4BD3A0)(), sub_4BD3A0, 0x4bd3a0);
DECL_FUNC(unsigned (*InitialSetScreenToStartLocation)(), InitialSetScreenToStartLocation, 0x4bd3f0);
char sub_4BD4B0(int a1, int a2) {
    int address = 0x4bd4b0;
    char result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
DECL_FUNC(void (__fastcall*input_targetOrder_LeftMouseClick)(dlgEvent *a1), input_targetOrder_LeftMouseClick, 0x4bd500);
DECL_FUNC(void (__fastcall*DrawGameProc)(int a1, int a2, Bitmap *a3, bounds *a4), DrawGameProc, 0x4bd580);
DECL_FUNC(void (__cdecl*InitializeGameLayer)(), InitializeGameLayer, 0x4bd630);
DECL_FUNC(void (*initMapData)(), initMapData, 0x4bd6f0);
DECL_FUNC(void * (*sub_4BDB00)(), sub_4BDB00, 0x4bdb00);
DECL_FUNC(int (__thiscall*sub_4BDB30)(PALETTEENTRY *this_, PALETTEENTRY a2), sub_4BDB30, 0x4bdb30);
DECL_FUNC(unsigned (*sub_4BDD40)(), sub_4BDD40, 0x4bdd40);
DECL_FUNC(void * (*sub_4BDD60)(), sub_4BDD60, 0x4bdd60);
DECL_FUNC(void (__stdcall*sub_4BDDD0)(const char *tileset_name), sub_4BDDD0, 0x4bddd0);
DECL_FUNC(void (__stdcall*loadColorShiftTilesetImages)(const char *tileset_name), loadColorShiftTilesetImages, 0x4bde60);
BOOL sub_4BDF40(void *a1) {
    int address = 0x4bdf40;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_4BDF70)(), sub_4BDF70, 0x4bdf70);
DECL_FUNC(grpFrame * (*sub_4BDF80)(), sub_4BDF80, 0x4bdf80);
DECL_FUNC(void (__fastcall*cursorUpdateProc)(int a1, int a2, Bitmap *a3, bounds *a4), cursorUpdateProc, 0x4bdfa0);
DECL_FUNC(signed (*cursorRefresh)(), cursorRefresh, 0x4be060);
DECL_FUNC(BYTE (*RefreshCursor_0)(), RefreshCursor_0, 0x4be0b0);
DECL_FUNC(void (__cdecl*sub_4BE100)(), sub_4BE100, 0x4be100);
DECL_FUNC(void (__cdecl*drawCursor)(), drawCursor, 0x4be120);
DECL_FUNC(void (__fastcall*updateCursorImage)(int a1, int a2, Bitmap *a3), updateCursorImage, 0x4be1a0);
void setCursor(grpHead *a1) {
    int address = 0x4be1e0;
    __asm {
        mov eax, a1
        call address
    }
}
DECL_FUNC(void (*sub_4BE200)(), sub_4BE200, 0x4be200);
DECL_FUNC(int (__thiscall*sub_4BE240)(char *this_), sub_4BE240, 0x4be240);
DECL_FUNC(void (__thiscall*statLb_Static_Update3)(int this_, int a2, int a3), statLb_Static_Update3, 0x4be280);
DECL_FUNC(BOOL (*sub_4BE330)(), sub_4BE330, 0x4be330);
DECL_FUNC(void (__thiscall*StatLb_Static_Update)(int this_, int a2, int a3), StatLb_Static_Update, 0x4be370);
DECL_FUNC(void (*destroy_statlb_dlg)(), destroy_statlb_dlg, 0x4be3b0);
DECL_FUNC(void (__thiscall*statLb_Static_Update2)(int this_, int a2, int a3), statLb_Static_Update2, 0x4be3d0);
void sub_4BE430(dialog *a1) {
    int address = 0x4be430;
    __asm {
        mov eax, a1
        call address
    }
}
DECL_FUNC(void (__thiscall*sub_4BE5B0)(dialog *this_), sub_4BE5B0, 0x4be5b0);
DECL_FUNC(void (__thiscall*sub_4BE5D0)(dialog *this_), sub_4BE5D0, 0x4be5d0);
DECL_FUNC(void (__thiscall*sub_4BE5F0)(dialog *this_), sub_4BE5F0, 0x4be5f0);
DECL_FUNC(__int16 (__thiscall*sub_4BE610)(int this_), sub_4BE610, 0x4be610);
DECL_FUNC(void (__stdcall*sub_4BE670)(dialog *a1), sub_4BE670, 0x4be670);
DECL_FUNC(void (__stdcall*hideLeaderboard)(dialog *a1), hideLeaderboard, 0x4be860);
void hideLeaderboardCmd(dialog *a1) {
    int address = 0x4beb40;
    __asm {
        mov eax, a1
        call address
    }
}
DECL_FUNC(void (__fastcall*leaderboardUpdateProc)(dialog *dlg, __int16 a2), leaderboardUpdateProc, 0x4beb90);
DECL_FUNC(void (__thiscall*sub_4BEBC0)(void *this_), sub_4BEBC0, 0x4bebc0);
DECL_FUNC(void (*ToggleLeaderboardList)(), ToggleLeaderboardList, 0x4bec00);
DECL_FUNC(void (__stdcall*statlb_Dlg_Create)(dialog *a1), statlb_Dlg_Create, 0x4bec40);
DECL_FUNC(int (__fastcall*statlb_Dlg_Interact)(dialog *dlg, dlgEvent *evt), statlb_Dlg_Interact, 0x4becf0);
DECL_FUNC(void (*load_statlb)(), load_statlb, 0x4bed70);
int getNameFromPath(char *out_buf, const char *path, size_t size_) {
    int address = 0x4beed0;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr size_
        mov edi, path
        mov ebx, out_buf
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_4BEF20)(), sub_4BEF20, 0x4bef20);
int sub_4BEF40(const char *a1, int a2) {
    int address = 0x4bef40;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed LoadFileToSBigBuf(const char *filename, int *a2) {
    int address = 0x4bef80;
    signed result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, filename
        call address
        mov result_, eax
    }
    return result_;
}
int readDATFileData(FILE *a1, unsigned __int16 a2) {
    int address = 0x4bf020;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__thiscall*sub_4BF370)(FILE *a1, void *a2, int a3), sub_4BF370, 0x4bf370);
BOOL WriteDATFileData(FILE *a1) {
    int address = 0x4bf390;
    BOOL result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__cdecl*LoadMap)(), LoadMap, 0x4bf520);
DECL_FUNC(int (__stdcall*ReadMapData)(char *source, MapChunks *a2, bool is_campaign), ReadMapData, 0x4bf5d0);
BOOL ReadCampaignMapData(MapChunks *a1) {
    int address = 0x4bf780;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void CMDRECV_MinimapPing(int a1) {
    int address = 0x4bf7a0;
    __asm {
        mov eax, a1
        call address
    }
}
unsigned sub_4BF7F0(int a1) {
    int address = 0x4bf7f0;
    unsigned result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*nullsub_56)(), nullsub_56, 0x4bf810);
DECL_FUNC(int (__fastcall*CMDRECV_VoiceEnable)(int a1, _BYTE *a2), CMDRECV_VoiceEnable, 0x4bf820);
DECL_FUNC(int (*sub_4BF870)(), sub_4BF870, 0x4bf870);
DECL_FUNC(int (*sub_4BF8A0)(), sub_4BF8A0, 0x4bf8a0);
DECL_FUNC(void (*sub_4BF960)(), sub_4BF960, 0x4bf960);
BOOL PositionIsInsideMap(Position *a1) {
    int address = 0x4bf970;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__fastcall*sub_4BF9A0)(int a1, unsigned __int8 *a2), sub_4BF9A0, 0x4bf9a0);
PlayerType * CMDRECV_Vision(int a1) {
    int address = 0x4bf9c0;
    PlayerType * result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(BYTE (*sub_4BFA40)(), sub_4BFA40, 0x4bfa40);
DECL_FUNC(int (*nullsub_57)(), nullsub_57, 0x4bfa50);
void sub_4BFA60(int result) {
    int address = 0x4bfa60;
    __asm {
        mov eax, result
        call address
    }
}
int templarMergePartner(int a1, CUnit *a2, int a3) {
    int address = 0x4bfa80;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (*CMDRECV_restartGame)(), CMDRECV_restartGame, 0x4bfb10);
DECL_FUNC(void (__stdcall*CMDRECV_ShiftDeselect)(int a1), CMDRECV_ShiftDeselect, 0x4bfb40);
DECL_FUNC(void (__stdcall*CMDACT_minimap_ping)(__int16 a1, __int16 a2), CMDACT_minimap_ping, 0x4bfc50);
void CMDACT_replay_speed(char a1, int a2, int a3) {
    int address = 0x4bfc80;
    __asm {
        xor eax, eax
        mov ecx, a3
        mov edx, a2
        mov al, a1
        call address
    }
}
DECL_FUNC(void (*CMDACT_stimpack)(), CMDACT_stimpack, 0x4bfcb0);
DECL_FUNC(CUnit * (*CMDRECV_CancelNuke)(), CMDRECV_CancelNuke, 0x4bfcd0);
DECL_FUNC(void (*CMDACT_cancel_nuke)(), CMDACT_cancel_nuke, 0x4bfd30);
DECL_FUNC(void (*CMDACT_merge_dark_archon)(), CMDACT_merge_dark_archon, 0x4bfd50);
DECL_FUNC(void (*CMDACT_merge_archon)(), CMDACT_merge_archon, 0x4bfd70);
DECL_FUNC(void (*CMDACT_train_fighter)(), CMDACT_train_fighter, 0x4bfd90);
void CMDACT_unload(CUnit *a1) {
    int address = 0x4bfdb0;
    __asm {
        mov esi, a1
        call address
    }
}
void CMDACT_unload_all(char a1) {
    int address = 0x4bfe10;
    __asm {
        xor eax, eax
        mov al, a1
        call address
    }
}
void CMDACT_siege(char a1) {
    int address = 0x4bfe30;
    __asm {
        xor eax, eax
        mov al, a1
        call address
    }
}
void CMDACT_unsiege(char a1) {
    int address = 0x4bfe50;
    __asm {
        xor eax, eax
        mov al, a1
        call address
    }
}
void CMDACT_building_morph(__int16 a1) {
    int address = 0x4bfe70;
    __asm {
        xor eax, eax
        mov ax, a1
        call address
    }
}
void CMDACT_morph(__int16 a1) {
    int address = 0x4bfe90;
    __asm {
        xor eax, eax
        mov ax, a1
        call address
    }
}
void CMDACT_decloak(char a1) {
    int address = 0x4bfeb0;
    __asm {
        xor eax, eax
        mov al, a1
        call address
    }
}
void CMDACT_cloak(char a1) {
    int address = 0x4bfed0;
    __asm {
        xor eax, eax
        mov al, a1
        call address
    }
}
void CMDACT_unburrow(char a1) {
    int address = 0x4bfef0;
    __asm {
        xor eax, eax
        mov al, a1
        call address
    }
}
void CMDACT_burrow(char a1) {
    int address = 0x4bff10;
    __asm {
        xor eax, eax
        mov al, a1
        call address
    }
}
DECL_FUNC(CUnit * (*CMDRECV_CancelAddon)(), CMDRECV_CancelAddon, 0x4bff30);
DECL_FUNC(void (*CMDACT_cancel_addon)(), CMDACT_cancel_addon, 0x4bffa0);
DECL_FUNC(void (*CMDRECV_CancelUpgrade)(), CMDRECV_CancelUpgrade, 0x4bffc0);
DECL_FUNC(void (*CMDACT_cancel_upgrade)(), CMDACT_cancel_upgrade, 0x4c0030);
void CMDACT_upgrade(char a1) {
    int address = 0x4c0050;
    __asm {
        xor eax, eax
        mov al, a1
        call address
    }
}
DECL_FUNC(void (*CMDRECV_CancelResearch)(void), CMDRECV_CancelResearch, 0x4c0070);
DECL_FUNC(void (*CMDACT_cancel_research)(), CMDACT_cancel_research, 0x4c00c0);
void CMDACT_research(char a1) {
    int address = 0x4c00e0;
    __asm {
        xor eax, eax
        mov al, a1
        call address
    }
}
DECL_FUNC(__int16 (__stdcall*CMDRECV_CancelTrain)(int a1), CMDRECV_CancelTrain, 0x4c0100);
void CMDACT_cancel_train(__int16 a1) {
    int address = 0x4c01a0;
    __asm {
        xor eax, eax
        mov ax, a1
        call address
    }
}
void CMDACT_train(__int16 a1) {
    int address = 0x4c01c0;
    __asm {
        xor eax, eax
        mov ax, a1
        call address
    }
}
void CMDACT_return_cargo(char a1) {
    int address = 0x4c01e0;
    __asm {
        xor eax, eax
        mov al, a1
        call address
    }
}
DECL_FUNC(void (*CMDACT_reaver_stop)(), CMDACT_reaver_stop, 0x4c0200);
DECL_FUNC(void (*CMDACT_carrier_stop)(), CMDACT_carrier_stop, 0x4c0220);
void CMDACT_hold_position(char a1) {
    int address = 0x4c0240;
    __asm {
        xor eax, eax
        mov al, a1
        call address
    }
}
void CMDACT_stop(char a1) {
    int address = 0x4c0260;
    __asm {
        xor eax, eax
        mov al, a1
        call address
    }
}
DECL_FUNC(void (*CMDACT_cancel_unit_morph)(), CMDACT_cancel_unit_morph, 0x4c0280);
DECL_FUNC(void (*CMDACT_cancel_construction)(), CMDACT_cancel_construction, 0x4c02a0);
DECL_FUNC(void (*CMDACT_lift)(), CMDACT_lift, 0x4c02c0);
void CMDACT_TargetOrder(char a1, CUnit *a2, __int16 a3, __int16 a4, __int16 a5, char a6) {
    int address = 0x4c0300;
    __asm {
        xor edx, edx
        push dword ptr a6
        push dword ptr a5
        push dword ptr a4
        push dword ptr a3
        mov esi, a2
        mov dl, a1
        call address
    }
}
void CMDACT_RightClickOrder(CUnit *a1, __int16 a2, __int16 a3, __int16 a4, char a5) {
    int address = 0x4c0380;
    __asm {
        push dword ptr a5
        push dword ptr a4
        push dword ptr a3
        push dword ptr a2
        mov esi, a1
        call address
    }
}
void CMDACT_UseCheat(CheatFlags a1) {
    int address = 0x4c0400;
    __asm {
        mov eax, a1
        call address
    }
}
DECL_FUNC(void (__fastcall*CMDACT_ResumeGame)(), CMDACT_ResumeGame, 0x4c0420);
DECL_FUNC(void (__fastcall*CMDACT_PauseGame)(), CMDACT_PauseGame, 0x4c0450);
DECL_FUNC(void (__stdcall*CMDACT_ChangeGameSpeed)(char a1), CMDACT_ChangeGameSpeed, 0x4c0480);
void CMDACT_set_allies(int a1) {
    int address = 0x4c04b0;
    __asm {
        mov eax, a1
        call address
    }
}
CUnit * StopAttackingAllies_maybe(int player_id) {
    int address = 0x4c04d0;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov esi, player_id
        call address
        mov result_, eax
    }
    return result_;
}
void CMDACT_set_fog(__int16 a1) {
    int address = 0x4c0540;
    __asm {
        xor eax, eax
        mov ax, a1
        call address
    }
}
DECL_FUNC(void (__fastcall*CMDACT_place_building)(char a1, __int16 a2, int a3), CMDACT_place_building, 0x4c0560);
void sub_4C0590(int a1, char a2, _BYTE *a3) {
    int address = 0x4c0590;
    __asm {
        xor edx, edx
        mov ecx, a3
        mov dl, a2
        mov eax, a1
        call address
    }
}
DECL_FUNC(void (*CMDACT_restart_game)(), CMDACT_restart_game, 0x4c05a0);
void CMDACT_load_game(char *source, int a2) {
    int address = 0x4c05c0;
    __asm {
        mov eax, a2
        mov ecx, source
        call address
    }
}
DECL_FUNC(void (__stdcall*CMDACT_SaveGame)(char *source), CMDACT_SaveGame, 0x4c0600);
DECL_FUNC(CUnit * (*CMDRECV_Decloak)(), CMDRECV_Decloak, 0x4c0660);
DECL_FUNC(CUnit * (*CMRECV_Cloak)(), CMRECV_Cloak, 0x4c0720);
void CMDACT_HotkeyUnit(char a1, char a2, const void *a3, unsigned __int8 a4) {
    int address = 0x4c07b0;
    __asm {
        xor ebx, ebx
        push dword ptr a4
        push dword ptr a3
        push dword ptr a2
        mov bl, a1
        call address
    }
}
DECL_FUNC(void (__stdcall*selectUnits)(int count, CUnit **unitsToSelect), selectUnits, 0x4c0860);
DECL_FUNC(void (__fastcall*CMDRECV_UseCheat)(int a1, int a2), CMDRECV_UseCheat, 0x4c0ad0);
DECL_FUNC(void (*CMDRECV_ResumeGame)(), CMDRECV_ResumeGame, 0x4c0b00);
DECL_FUNC(void (__cdecl*CMDRECV_PauseGame)(), CMDRECV_PauseGame, 0x4c0bc0);
DECL_FUNC(CUnit * (*CMDRECV_MergeDarkArchon)(), CMDRECV_MergeDarkArchon, 0x4c0cd0);
DECL_FUNC(char (*CMDRECV_MergeArchon)(), CMDRECV_MergeArchon, 0x4c0e90);
DECL_FUNC(CUnit * (*CMDRECV_Nothing)(), CMDRECV_Nothing, 0x4c1050);
DECL_FUNC(CUnit * (*CMDRECV_ReaverStop)(), CMDRECV_ReaverStop, 0x4c1240);
DECL_FUNC(CUnit * (*CMDRECV_CarrierStop)(), CMDRECV_CarrierStop, 0x4c1430);
DECL_FUNC(void (__stdcall*CMDRECV_Liftoff)(int a1), CMDRECV_Liftoff, 0x4c1620);
DECL_FUNC(CUnit * (*CMDRECV_TrainFighter)(), CMDRECV_TrainFighter, 0x4c1800);
char CMDRECV_BuildingMorph(int a1) {
    int address = 0x4c1910;
    char result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
DECL_FUNC(signed (__stdcall*CMDRECV_UnitMorph)(int a1), CMDRECV_UnitMorph, 0x4c1990);
DECL_FUNC(CUnit * (*CMDRECV_Unburrow)(), CMDRECV_Unburrow, 0x4c1ac0);
DECL_FUNC(CUnit * (__stdcall*CMDRECV_Upgrade)(int a1), CMDRECV_Upgrade, 0x4c1b20);
DECL_FUNC(CUnit * (__stdcall*CMDRECV_Research)(int a1), CMDRECV_Research, 0x4c1ba0);
__int16 CMDRECV_Train(int a1) {
    int address = 0x4c1c20;
    __int16 result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, ax
    }
    return result_;
}
DECL_FUNC(bool (__thiscall*sub_4C1CA0)(int this_), sub_4C1CA0, 0x4c1ca0);
CUnit * CMDRECV_UnloadAll(int a1) {
    int address = 0x4c1cc0;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(CUnit * (__stdcall*CMDRECV_Siege)(int a1), CMDRECV_Siege, 0x4c1e80);
DECL_FUNC(CUnit * (__stdcall*CMDRECV_Unsiege)(int a1), CMDRECV_Unsiege, 0x4c1f10);
DECL_FUNC(CUnit * (__stdcall*CMDRECV_Burrow)(int a1), CMDRECV_Burrow, 0x4c1fa0);
CUnit * CMRECV_ReturnCargo(int a1) {
    int address = 0x4c2040;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
CUnit * CMDRECV_HoldPosition(int a1) {
    int address = 0x4c20c0;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
CUnit * CMDRECV_Stop(int a1) {
    int address = 0x4c2190;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
char CMDRECV_TargetCmd(int result) {
    int address = 0x4c2320;
    char result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, al
    }
    return result_;
}
void CMDRECV_RightClick(int result) {
    int address = 0x4c2370;
    __asm {
        mov eax, result
        call address
    }
}
__int16 CMDRECV_Build(int a1) {
    int address = 0x4c23c0;
    __int16 result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, ax
    }
    return result_;
}
void BWFXN_SendPublicCallTarget(const char *a1) {
    int address = 0x4c2420;
    __asm {
        mov esi, a1
        call address
    }
}
CUnit * CMDRECV_Unload(CUnit *result) {
    int address = 0x4c24f0;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__stdcall*CMDRECV_ShiftSelect)(int a1), CMDRECV_ShiftSelect, 0x4c2560);
DECL_FUNC(void (__stdcall*CMDRECV_Select)(int a1), CMDRECV_Select, 0x4c2750);
DECL_FUNC(void (__thiscall*CMDRECV_Hotkey)(unsigned __int8 *this_), CMDRECV_Hotkey, 0x4c2870);
DECL_FUNC(void (__stdcall*CMDRECV_Ally)(int a1), CMDRECV_Ally, 0x4c28a0);
void CMDRECV_SaveGame(SaveGameCommand *command) {
    int address = 0x4c2910;
    __asm {
        mov eax, command
        call address
    }
}
DECL_FUNC(char (__stdcall*CMDRECV_LeaveGame)(int a1), CMDRECV_LeaveGame, 0x4c2e90);
DECL_FUNC(CUnit * (*CMDRECV_CancelUnitMorph)(), CMDRECV_CancelUnitMorph, 0x4c2ec0);
DECL_FUNC(void (*CMDRECV_CancelConstruction)(), CMDRECV_CancelConstruction, 0x4c2ef0);
DECL_FUNC(CUnit * (*CMDRECV_StimPack)(), CMDRECV_StimPack, 0x4c2f30);
DECL_FUNC(unsigned (__fastcall*_CRC32)(int a1, void *edx0, int a3), _CRC32, 0x4c3010);
DECL_FUNC(_DWORD * (__cdecl*write_buf)(const void *a1, unsigned int *a2, _DWORD *a3), write_buf, 0x4c3040);
DECL_FUNC(unsigned (__cdecl*read_buf)(void *a1, unsigned int *a2, _DWORD *a3), read_buf, 0x4c3090);
DECL_FUNC(void (__cdecl*decompressCleanup)(), decompressCleanup, 0x4c30d0);
void * sub_4C3130(int a1) {
    int address = 0x4c3130;
    void * result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__thiscall*DecompressData)(void *this_, int a2, _DWORD *a3), DecompressData, 0x4c3190);
unsigned CompressOutput(void **a1, int a2, unsigned int a3) {
    int address = 0x4c3200;
    unsigned result_;
    __asm {
        xor eax, eax
        mov esi, a3
        mov edi, a2
        mov ebx, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(BOOL (__stdcall*DecompressRead)(void *a1, int a2, FILE *a3), DecompressRead, 0x4c3280);
int CompressWrite(void *a1, size_t a2, FILE *a3) {
    int address = 0x4c3450;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__cdecl*sub_4C35C0)(), sub_4C35C0, 0x4c35c0);
void BINDLG_BlitSurface(dialog *dlg) {
    int address = 0x4c35f0;
    __asm {
        mov esi, dlg
        call address
    }
}
DECL_FUNC(int (*sub_4C3690)(), sub_4C3690, 0x4c3690);
DECL_FUNC(int (*RefreshConsole)(), RefreshConsole, 0x4c36c0);
DECL_FUNC(const char * (__fastcall*TblGetString)(__int16 index), TblGetString, 0x4c36f0);
DECL_FUNC(u16 * (*sub_4C3720)(), sub_4C3720, 0x4c3720);
DECL_FUNC(int (*sub_4C3750)(), sub_4C3750, 0x4c3750);
DECL_FUNC(void (__cdecl*destroyGameHUD)(), destroyGameHUD, 0x4c3780);
DECL_FUNC(void (__cdecl*updateSelectedUnitData)(), updateSelectedUnitData, 0x4c38b0);
DECL_FUNC(void (__cdecl*sub_4C3930)(), sub_4C3930, 0x4c3930);
DECL_FUNC(void (__cdecl*LoadConsoleImage)(), LoadConsoleImage, 0x4c3950);
DECL_FUNC(void (*load_Stat_txt)(), load_Stat_txt, 0x4c3a20);
DECL_FUNC(void (*sub_4C3B10)(), sub_4C3B10, 0x4c3b10);
signed updateBuildingLandUnitSelection(CUnit *a1) {
    int address = 0x4c3b40;
    signed result_;
    __asm {
        xor eax, eax
        mov edx, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__cdecl*setup_HUD)(), setup_HUD, 0x4c3bb0);
DECL_FUNC(void (*sub_4C3C80)(), sub_4C3C80, 0x4c3c80);
DECL_FUNC(void (__stdcall*eventSetPlayerFlag)(s_evt *evt), eventSetPlayerFlag, 0x4c3c90);
DECL_FUNC(int (*clearPlayerFlags)(), clearPlayerFlags, 0x4c3cd0);
DECL_FUNC(void (*nullsub_58)(), nullsub_58, 0x4c3d00);
DECL_FUNC(void (*nullsub_59)(), nullsub_59, 0x4c3d10);
DECL_FUNC(BOOL (__stdcall*leaveGame)(int a1), leaveGame, 0x4c3d20);
BOOL sub_4C3DA0(int playerid, size_t a2, char *a3) {
    int address = 0x4c3da0;
    BOOL result_;
    __asm {
        xor eax, eax
        mov esi, a3
        mov eax, a2
        mov ecx, playerid
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(unsigned (*getActivePlayerId)(), getActivePlayerId, 0x4c3db0);
DECL_FUNC(BOOL (*sub_4C3EA0)(), sub_4C3EA0, 0x4c3ea0);
DECL_FUNC(int (*sub_4C3EB0)(), sub_4C3EB0, 0x4c3eb0);
DECL_FUNC(void (*sub_4C3ED0)(), sub_4C3ED0, 0x4c3ed0);
DECL_FUNC(char (*GetActivePlayerCount)(), GetActivePlayerCount, 0x4c40f0);
DECL_FUNC(BOOL (*sub_4C4140)(), sub_4C4140, 0x4c4140);
DECL_FUNC(void (__stdcall*UpdateGameMode)(int a1), UpdateGameMode, 0x4c4160);
DECL_FUNC(BOOL (*sub_4C41E0)(), sub_4C41E0, 0x4c41e0);
DECL_FUNC(BOOL (*isMultiplayerModeBNET)(), isMultiplayerModeBNET, 0x4c4200);
int ApplyGameVictoryStatus(_DWORD *a1, _DWORD *a2) {
    int address = 0x4c4220;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__fastcall*leaveOnQuit)(bool exit_code), leaveOnQuit, 0x4c4680);
DECL_FUNC(void (*RECV_MakeGamePublic)(), RECV_MakeGamePublic, 0x4c46e0);
DECL_FUNC(void (__cdecl*ReportGameResult)(), ReportGameResult, 0x4c4790);
DECL_FUNC(BOOL (*sub_4C4870)(), sub_4C4870, 0x4c4870);
void sub_4C4950(int result, DWORD a2, const char *a3) {
    int address = 0x4c4950;
    __asm {
        mov esi, a3
        mov ecx, a2
        mov eax, result
        call address
    }
}
DECL_FUNC(void (__stdcall*eventPlayerDropped)(s_evt *evt), eventPlayerDropped, 0x4c4980);
DECL_FUNC(void (__stdcall*sub_4C4A80)(int a1, int a2), sub_4C4A80, 0x4c4a80);
DECL_FUNC(MapDownload * (*userHasMap)(), userHasMap, 0x4c4c50);
DECL_FUNC(char (__stdcall*playerLeaveGame)(int a1, int a2, int a3), playerLeaveGame, 0x4c4d60);
char sub_4C4F80(unsigned __int8 a1) {
    int address = 0x4c4f80;
    char result_;
    __asm {
        xor eax, eax
        mov al, a1
        call address
        mov result_, al
    }
    return result_;
}
DECL_FUNC(void (*sub_4C4FA0)(), sub_4C4FA0, 0x4c4fa0);
DECL_FUNC(int (__fastcall*TriggerAction_EnableDebugMode)(Action *a1), TriggerAction_EnableDebugMode, 0x4c5000);
DECL_FUNC(int (__fastcall*TriggerAction_DisableDebugMode)(Action *a1), TriggerAction_DisableDebugMode, 0x4c5020);
DECL_FUNC(int (*sub_4C5040)(), sub_4C5040, 0x4c5040);
DECL_FUNC(UnitProperties * (*sub_4C5060)(), sub_4C5060, 0x4c5060);
DECL_FUNC(int (__fastcall*TriggerAction_Draw)(Action *a1), TriggerAction_Draw, 0x4c5070);
DECL_FUNC(int (__fastcall*TriggerAction_UnpauseTimer)(Action *a1), TriggerAction_UnpauseTimer, 0x4c50c0);
DECL_FUNC(int (__fastcall*TriggerAction_PauseTimer)(Action *a1), TriggerAction_PauseTimer, 0x4c50d0);
DECL_FUNC(int (__fastcall*TriggerAction_SetNextScenario)(Action *a1), TriggerAction_SetNextScenario, 0x4c50e0);
DECL_FUNC(int (__fastcall*TriggerAction_SetCountdownTimer)(Action *a1), TriggerAction_SetCountdownTimer, 0x4c5160);
DECL_FUNC(int (__fastcall*TriggerAction_SetMissionObjectives)(Action *a1), TriggerAction_SetMissionObjectives, 0x4c51b0);
unsigned getTextDisplayTime(unsigned int result) {
    int address = 0x4c51d0;
    unsigned result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__fastcall*TriggerAction_LeaderBoardComputerPlayers)(Action *a1), TriggerAction_LeaderBoardComputerPlayers, 0x4c5210);
DECL_FUNC(int (__fastcall*TriggerAction_Wait)(Action *a1), TriggerAction_Wait, 0x4c5250);
DECL_FUNC(int (__fastcall*TriggerAction_PreserveTrigger)(Action *a1), TriggerAction_PreserveTrigger, 0x4c52a0);
DECL_FUNC(int (__fastcall*TriggerAction_Defeat)(Action *a1), TriggerAction_Defeat, 0x4c52c0);
DECL_FUNC(int (__fastcall*TriggerAction_Victory)(Action *a1), TriggerAction_Victory, 0x4c5310);
DECL_FUNC(int (__fastcall*TriggerAction_NoAction)(Action *a1), TriggerAction_NoAction, 0x4c5350);
DECL_FUNC(int (*sub_4C5360)(), sub_4C5360, 0x4c5360);
DECL_FUNC(int (*sub_4C5370)(), sub_4C5370, 0x4c5370);
DECL_FUNC(int (*sub_4C5390)(), sub_4C5390, 0x4c5390);
DECL_FUNC(int (__stdcall*KillRemoveUnits_Unit)(int a1), KillRemoveUnits_Unit, 0x4c53d0);
DECL_FUNC(BOOL (__thiscall*killRemoveUnits_Factories)(void *this_, CUnit *a2), killRemoveUnits_Factories, 0x4c5400);
DECL_FUNC(BOOL (__thiscall*KillRemoveUnits_Buildings)(void *this_, CUnit *a2), KillRemoveUnits_Buildings, 0x4c5430);
DECL_FUNC(BOOL (__thiscall*KillRemoveUnits_Men)(void *this_, CUnit *a2), KillRemoveUnits_Men, 0x4c5460);
DECL_FUNC(int (__stdcall*KillRemoveUnits_Anyunit)(int a1), KillRemoveUnits_Anyunit, 0x4c5490);
DECL_FUNC(int (__fastcall*TriggerAction_MinimapPing)(Action *a1), TriggerAction_MinimapPing, 0x4c54b0);
DECL_FUNC(int (__fastcall*TriggerAction_LeaderBoard)(Action *a1), TriggerAction_LeaderBoard, 0x4c5520);
DECL_FUNC(int (__fastcall*TriggerAction_SetSwitch)(Action *a1), TriggerAction_SetSwitch, 0x4c5590);
DECL_FUNC(signed (__stdcall*ModifyUnitResources)(CUnit *a1, __int16 a2), ModifyUnitResources, 0x4c5670);
DECL_FUNC(int (__fastcall*TriggerAction_RunAiScriptAtLocation)(Action *a1), TriggerAction_RunAiScriptAtLocation, 0x4c56c0);
DECL_FUNC(int (__fastcall*TriggerAction_RunAiScript)(Action *a1), TriggerAction_RunAiScript, 0x4c5720);
DECL_FUNC(int (__fastcall*TriggerAction_DisplayTextMessage)(Action *a1), TriggerAction_DisplayTextMessage, 0x4c5770);
DECL_FUNC(int (__fastcall*TriggerAction_UnpauseGame)(Action *a1), TriggerAction_UnpauseGame, 0x4c5810);
DECL_FUNC(int (__fastcall*SetAlliance_maybe)(unsigned int player, __int16 a2, int a3), SetAlliance_maybe, 0x4c58f0);
DECL_FUNC(signed (__stdcall*ModifyUnitShields)(CUnit *a1, int a2), ModifyUnitShields, 0x4c5a20);
DECL_FUNC(int (__fastcall*SubtractDeaths)(unsigned int player, unsigned __int16 a2, int a3), SubtractDeaths, 0x4c5a80);
DECL_FUNC(int (__fastcall*AddDeaths)(unsigned int player, unsigned __int16 a2, int a3), AddDeaths, 0x4c5c60);
DECL_FUNC(int (__fastcall*SetDeaths)(unsigned int player, unsigned __int16 a2, int a3), SetDeaths, 0x4c5dd0);
DECL_FUNC(int (__fastcall*SubtractScore)(unsigned int player, __int16 a2, int amount), SubtractScore, 0x4c5f20);
DECL_FUNC(int (__fastcall*AddScore)(unsigned int player, __int16 a2, int amount), AddScore, 0x4c61e0);
DECL_FUNC(int (__fastcall*SetScore)(unsigned int player, __int16 a2, int a3), SetScore, 0x4c6400);
DECL_FUNC(int (__fastcall*SubtractResource)(unsigned int player, __int16 a2, int amount), SubtractResource, 0x4c65c0);
DECL_FUNC(int (__fastcall*AddResource)(unsigned int player, __int16 a2, int amount), AddResource, 0x4c6700);
DECL_FUNC(int (__fastcall*SetResource)(unsigned int player, __int16 a2, int amount), SetResource, 0x4c6830);
DECL_FUNC(int (__fastcall*TriggerAction_UnmuteUnitSpeech)(Action *a1), TriggerAction_UnmuteUnitSpeech, 0x4c6940);
DECL_FUNC(int (__fastcall*TriggerAction_MuteUnitSpeech)(Action *a1), TriggerAction_MuteUnitSpeech, 0x4c6990);
DECL_FUNC(int (__fastcall*FindUnitType)(CUnit *a1, int a2), FindUnitType, 0x4c69c0);
DECL_FUNC(signed (__stdcall*ModifyUnitEnergy)(CUnit *a1, int a2), ModifyUnitEnergy, 0x4c6aa0);
DECL_FUNC(int (__fastcall*setInvincibility)(CUnit *a1, int a2), setInvincibility, 0x4c6b00);
DECL_FUNC(int (__fastcall*TriggerAction_SetDeaths)(Action *a1), TriggerAction_SetDeaths, 0x4c6cc0);
DECL_FUNC(int (__fastcall*TriggerAction_SetScore)(Action *a1), TriggerAction_SetScore, 0x4c6d20);
DECL_FUNC(int (__fastcall*TriggerAction_SetResources)(Action *a1), TriggerAction_SetResources, 0x4c6d80);
DECL_FUNC(int (__fastcall*TriggerAction_CenterView)(Action *a1), TriggerAction_CenterView, 0x4c6de0);
DECL_FUNC(signed (__fastcall*getDoodadStateUnit)(CUnit *a1, int a2), getDoodadStateUnit, 0x4c6f70);
DECL_FUNC(int (__fastcall*TriggerAction_ModifyUnitResourceAmount)(Action *a1), TriggerAction_ModifyUnitResourceAmount, 0x4c70b0);
DECL_FUNC(int (__fastcall*TriggerAction_ModifyUnitShieldPoints)(Action *a1), TriggerAction_ModifyUnitShieldPoints, 0x4c7170);
DECL_FUNC(int (__fastcall*TriggerAction_ModifyUnitEnergy)(Action *a1), TriggerAction_ModifyUnitEnergy, 0x4c7230);
DECL_FUNC(int (__fastcall*TriggerAction_SetInvincibility)(Action *a1), TriggerAction_SetInvincibility, 0x4c72f0);
CUnit * getUnitForDoodadState(unsigned __int8 location, __int16 a2, int a3) {
    int address = 0x4c7380;
    CUnit * result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        push dword ptr a2
        mov al, location
        call address
        mov result_, eax
    }
    return result_;
}
CUnit * sub_4C7400(int a1, __int16 a2, unsigned __int8 a3, POINT *center) {
    int address = 0x4c7400;
    CUnit * result_;
    __asm {
        xor eax, eax
        xor ecx, ecx
        xor ebx, ebx
        mov edi, center
        mov bl, a3
        mov cx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__fastcall*TriggerAction_MoveLocation)(Action *a1), TriggerAction_MoveLocation, 0x4c7460);
DECL_FUNC(int (__fastcall*TriggerAction_TalkingPortrait)(Action *a1), TriggerAction_TalkingPortrait, 0x4c7570);
DECL_FUNC(int (__fastcall*TriggerAction_SetDoodadState)(Action *a1), TriggerAction_SetDoodadState, 0x4c75b0);
DECL_FUNC(int (__fastcall*TrgOrder)(CUnit *a1, TriggerOrderRelated *a2), TrgOrder, 0x4c7630);
DECL_FUNC(int (__fastcall*TriggerAction_PlayWav)(Action *a1), TriggerAction_PlayWav, 0x4c77d0);
DECL_FUNC(int (__fastcall*TriggerAction_Transmission)(Action *a1), TriggerAction_Transmission, 0x4c7890);
DECL_FUNC(int (__fastcall*TriggerAction_Order)(Action *a1), TriggerAction_Order, 0x4c79f0);
DECL_FUNC(int (__fastcall*TriggerAction_PauseGame)(Action *a1), TriggerAction_PauseGame, 0x4c7ac0);
DECL_FUNC(signed (__stdcall*ModifyUnitHP)(CUnit *a1, int a2), ModifyUnitHP, 0x4c7b60);
DECL_FUNC(int (__fastcall*TriggerAction_ModifyUnitHitPoints)(Action *a1), TriggerAction_ModifyUnitHitPoints, 0x4c7c20);
DECL_FUNC(int (__fastcall*giveUnitsProc)(_DWORD a1, _DWORD a2), giveUnitsProc, 0x4c7ce0);
void trigMoveUnit(CUnit *unit, __int16 pos_x, int pos_y) {
    int address = 0x4c7cf0;
    __asm {
        xor ebx, ebx
        mov esi, pos_y
        mov bx, pos_x
        mov eax, unit
        call address
    }
}
void TriggerKillAllUnits(int a1, int a2, int (__fastcall *a3)(_DWORD, _DWORD, _DWORD), int a4) {
    int address = 0x4c7d80;
    __asm {
        push dword ptr a4
        push dword ptr a3
        push dword ptr a2
        mov ebx, a1
        call address
    }
}
DECL_FUNC(BOOL (__fastcall*killUnitsAtLocationProc)(CUnit *a1, int a2), killUnitsAtLocationProc, 0x4c7e20);
DECL_FUNC(signed (__stdcall*GiveUnits)(CUnit *a1, int a2), GiveUnits, 0x4c8040);
CUnit * TriggerKillUnitsAtLocation(int location, int a2, __int16 a3, int a4, int a5) {
    int address = 0x4c8170;
    CUnit * result_;
    __asm {
        xor eax, eax
        push dword ptr a5
        push dword ptr a4
        push dword ptr a3
        push dword ptr a2
        mov eax, location
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__fastcall*TriggerAction_GiveUnitsToPlayer)(Action *a1), TriggerAction_GiveUnitsToPlayer, 0x4c8200);
signed sub_4C82C0(int a1, CUnit *a2) {
    int address = 0x4c82c0;
    signed result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int trigMoveBuilding(int result, CUnit *a2, int a3) {
    int address = 0x4c82d0;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        mov edx, a2
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__fastcall*DestroyUnit_maybe)(int player_id, __int16 a2, int location, int a4), DestroyUnit_maybe, 0x4c8570);
DECL_FUNC(int (__fastcall*TriggerAction_SetAllianceStatus)(Action *a1), TriggerAction_SetAllianceStatus, 0x4c86d0);
DECL_FUNC(BOOL (__fastcall*moveUnitCB)(CUnit *unit, int a2), moveUnitCB, 0x4c8700);
DECL_FUNC(int (__fastcall*TriggerAction_RemoveUnitAtLocation)(Action *a1), TriggerAction_RemoveUnitAtLocation, 0x4c8870);
DECL_FUNC(int (__fastcall*TriggerAction_RemoveUnit)(Action *a1), TriggerAction_RemoveUnit, 0x4c88c0);
DECL_FUNC(int (__fastcall*TriggerAction_KillUnitAtLocation)(Action *a1), TriggerAction_KillUnitAtLocation, 0x4c88f0);
DECL_FUNC(int (__fastcall*TriggerAction_KillUnit)(Action *a1), TriggerAction_KillUnit, 0x4c8940);
DECL_FUNC(int (__fastcall*TriggerAction_MoveUnit)(Action *a1), TriggerAction_MoveUnit, 0x4c8970);
DECL_FUNC(BOOL (__stdcall*ModifyUnitHangerCount)(CUnit *a1, int a2), ModifyUnitHangerCount, 0x4c8a30);
DECL_FUNC(int (__fastcall*TriggerAction_ModifyUnitHangarCount)(Action *a1), TriggerAction_ModifyUnitHangarCount, 0x4c8b60);
DECL_FUNC(int (__fastcall*CreateUnit_maybe)(signed int player_id, int unit_type, struct_a3 *a3), CreateUnit_maybe, 0x4c8c20);
DECL_FUNC(int (__fastcall*TriggerAction_CreateUnitWithProperties)(Action *a1), TriggerAction_CreateUnitWithProperties, 0x4c8d90);
DECL_FUNC(int (*sub_4C8E10)(), sub_4C8E10, 0x4c8e10);
DECL_FUNC(RegistryOptions * (*sub_4C8E30)(), sub_4C8E30, 0x4c8e30);
DECL_FUNC(int (*sub_4C8E60)(), sub_4C8E60, 0x4c8e60);
char sub_4C8E80(unsigned __int16 a1, grpHead *a2, int a3, int a4) {
    int address = 0x4c8e80;
    char result_;
    __asm {
        xor eax, eax
        push dword ptr a4
        mov ecx, a3
        mov edx, a2
        mov ax, a1
        call address
        mov result_, al
    }
    return result_;
}
char sub_4C8F10(unsigned __int16 a1, int a2, dialog *a3, int a4) {
    int address = 0x4c8f10;
    char result_;
    __asm {
        xor eax, eax
        push dword ptr a4
        push dword ptr a3
        mov esi, a2
        mov ax, a1
        call address
        mov result_, al
    }
    return result_;
}
DECL_FUNC(grpHead * (*sub_4C9020)(), sub_4C9020, 0x4c9020);
char * sub_4C9030(dialog *a1) {
    int address = 0x4c9030;
    char * result_;
    __asm {
        xor eax, eax
        mov edx, a1
        call address
        mov result_, eax
    }
    return result_;
}
int sub_4C90C0(dialog *dlg) {
    int address = 0x4c90c0;
    int result_;
    __asm {
        xor eax, eax
        mov eax, dlg
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__fastcall*sub_4C9120)(bool exit_code), sub_4C9120, 0x4c9120);
DECL_FUNC(void (__fastcall*sub_4C9150)(dialog *dlg, __int16 a2), sub_4C9150, 0x4c9150);
DECL_FUNC(void (__fastcall*quit_replay_handler)(dialog *dlg), quit_replay_handler, 0x4c9280);
void options_OK(dialog *dlg) {
    int address = 0x4c9360;
    __asm {
        mov esi, dlg
        call address
    }
}
dialog * sub_4C93A0(dialog *a1) {
    int address = 0x4c93a0;
    dialog * result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
void sub_4C9410(dialog *a1) {
    int address = 0x4c9410;
    __asm {
        mov eax, a1
        call address
    }
}
void sub_4C9440(dialog *a1) {
    int address = 0x4c9440;
    __asm {
        mov edi, a1
        call address
    }
}
void sub_4C94F0(dialog *a1) {
    int address = 0x4c94f0;
    __asm {
        mov eax, a1
        call address
    }
}
DECL_FUNC(void (__fastcall*restart_game_menu_handler)(dialog *a1), restart_game_menu_handler, 0x4c9530);
DECL_FUNC(void (__fastcall*quit_mission_menu_handler)(dialog *dlg), quit_mission_menu_handler, 0x4c95a0);
DECL_FUNC(void (__fastcall*exit_game_menu_handler)(dialog *dlg), exit_game_menu_handler, 0x4c96d0);
DECL_FUNC(void (__stdcall*sub_4C9780)(dialog *a1), sub_4C9780, 0x4c9780);
int options_Cancel(dialog *a1, dlgEvent *a2) {
    int address = 0x4c9800;
    int result_;
    __asm {
        xor eax, eax
        mov esi, a2
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__fastcall*saveGameCBProc)(dialog *dlg, __int16 a2), saveGameCBProc, 0x4c9890);
int j_options_Cancel(dialog *a1, dlgEvent *a2) {
    int address = 0x4c99b0;
    int result_;
    __asm {
        xor eax, eax
        mov esi, a2
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(signed (*sub_4C99C0)(), sub_4C99C0, 0x4c99c0);
void checkSaveGameDialog(dialog *dlg) {
    int address = 0x4c9a90;
    __asm {
        mov edi, dlg
        call address
    }
}
void sub_4C9C40(const char *a1) {
    int address = 0x4c9c40;
    __asm {
        mov esi, a1
        call address
    }
}
void sub_4C9CC0(dialog *dlg, const char *a2) {
    int address = 0x4c9cc0;
    __asm {
        mov eax, a2
        mov ebx, dlg
        call address
    }
}
char setObjctDlgBtnString(dialog *a1) {
    int address = 0x4c9de0;
    char result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
DECL_FUNC(void (__cdecl*open_options_menu)(), open_options_menu, 0x4c9f60);
DECL_FUNC(int (__fastcall*objctdlg_BINDLG)(dialog *dlg, dlgEvent *evt), objctdlg_BINDLG, 0x4c9f80);
DECL_FUNC(void (__fastcall*help_menu_handler)(dialog *dlg), help_menu_handler, 0x4ca010);
DECL_FUNC(void (*open_mission_objectives_dialog)(), open_mission_objectives_dialog, 0x4ca090);
DECL_FUNC(void (__fastcall*options_menu_handler)(dialog *dlg), options_menu_handler, 0x4ca0a0);
char gamemenu_CustomCtrlID(dialog *a1) {
    int address = 0x4ca160;
    char result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
DECL_FUNC(int (__fastcall*gamemenu_Dlg_Interact)(dialog *dlg, dlgEvent *evt), gamemenu_Dlg_Interact, 0x4ca240);
DECL_FUNC(void (*open_restart_game_menu)(), open_restart_game_menu, 0x4ca2d0);
DECL_FUNC(void (__cdecl*open_quit_mission_menu)(), open_quit_mission_menu, 0x4ca2f0);
DECL_FUNC(void (__cdecl*open_exit_game_menu)(), open_exit_game_menu, 0x4ca330);
DECL_FUNC(void (__cdecl*open_help_menu)(), open_help_menu, 0x4ca350);
DECL_FUNC(void (__fastcall*abort_menu_handler)(dialog *dlg), abort_menu_handler, 0x4ca370);
DECL_FUNC(void (__cdecl*open_abort_menu)(), open_abort_menu, 0x4ca430);
DECL_FUNC(void (__fastcall*game_menu_handler)(dialog *dlg), game_menu_handler, 0x4ca450);
DECL_FUNC(void (__cdecl*open_game_menu)(), open_game_menu, 0x4ca500);
DECL_FUNC(BOOL (*mapHandleDestroy)(), mapHandleDestroy, 0x4ca520);
DECL_FUNC(int (__stdcall*mapAuthCallback)(char *szFileName, void *a2, struct_v3 *a3), mapAuthCallback, 0x4ca540);
DECL_FUNC(bool (__stdcall*ChkLoader_PUNI)(SectionData *a1, int a2, MapChunks *a3), ChkLoader_PUNI, 0x4ca600);
DECL_FUNC(bool (__stdcall*ChkLoader_TECS)(SectionData *a1, int a2, MapChunks *a3), ChkLoader_TECS, 0x4ca6d0);
DECL_FUNC(bool (__stdcall*ChkLoader_TECx)(SectionData *a1, int a2, MapChunks *a3), ChkLoader_TECx, 0x4ca7d0);
DECL_FUNC(bool (__stdcall*ChkLoader_UPGS)(SectionData *a1, int a2, MapChunks *a3), ChkLoader_UPGS, 0x4ca8d0);
DECL_FUNC(bool (__stdcall*ChkLoader_UPGx)(SectionData *a1, int a2, MapChunks *a3), ChkLoader_UPGx, 0x4ca9f0);
DECL_FUNC(bool (__stdcall*ChkLoader_UNIS)(SectionData *a1, int a2, MapChunks *a3), ChkLoader_UNIS, 0x4cab10);
DECL_FUNC(bool (__stdcall*ChkLoader_UNIx)(SectionData *a1, int a2, MapChunks *a3), ChkLoader_UNIx, 0x4cacd0);
LPVOID sub_4CAE90(int a1) {
    int address = 0x4cae90;
    LPVOID result_;
    __asm {
        xor eax, eax
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(bool (__stdcall*ChkLoader_FORC)(SectionData *a1, int a2, MapChunks *a3), ChkLoader_FORC, 0x4caee0);
DECL_FUNC(bool (__stdcall*ChkLoader_SPRP)(SectionData *a1, int a2, MapChunks *a3), ChkLoader_SPRP, 0x4caf40);
DECL_FUNC(bool (__stdcall*ChkLoader_MASK)(SectionData *a1, int a2, MapChunks *a3), ChkLoader_MASK, 0x4caf90);
DECL_FUNC(bool (__stdcall*ChkLoader_DIM)(SectionData *a1, int a2, MapChunks *a3), ChkLoader_DIM, 0x4cb040);
UnitRelated20 * sub_4CB0A0(UnitRelated20 *a1, UnitRelated20 *a2) {
    int address = 0x4cb0a0;
    UnitRelated20 * result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_4CB120)(), sub_4CB120, 0x4cb120);
UnitRelated20 * sub_4CB140(int a1, UnitRelated20 *a2, CUnit *unit, int unit_id) {
    int address = 0x4cb140;
    UnitRelated20 * result_;
    __asm {
        xor eax, eax
        push dword ptr unit_id
        push dword ptr unit
        mov esi, a2
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
int CHK_UNIT_StartLocationSub(Position *a1, ChunkUnitEntry *a2) {
    int address = 0x4cb190;
    int result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
BOOL sub_4CB220(int a1) {
    int address = 0x4cb220;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(bool (__stdcall*ChkLoader_UPRP)(SectionData *a1, int a2, MapChunks *a3), ChkLoader_UPRP, 0x4cb250);
DECL_FUNC(bool (__stdcall*ChkLoader_MRGN)(SectionData *a1, int a2, MapChunks *a3), ChkLoader_MRGN, 0x4cb2a0);
DECL_FUNC(bool (__stdcall*ChkLoader_MRGN_1_00)(SectionData *a1, int a2, MapChunks *a3), ChkLoader_MRGN_1_00, 0x4cb2f0);
BOOL sub_4CB340(__int16 a1) {
    int address = 0x4cb340;
    BOOL result_;
    __asm {
        xor eax, eax
        mov ax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__fastcall*freeCHKStringHandle)(bool exit_code), freeCHKStringHandle, 0x4cb370);
DECL_FUNC(bool (__stdcall*ChkLoader_ERA)(SectionData *section_data, int section_size_, MapChunks *a3), ChkLoader_ERA, 0x4cb3a0);
DECL_FUNC(bool (__stdcall*ChkLoader_OWNR)(SectionData *a1, int a2, MapChunks *a3), ChkLoader_OWNR, 0x4cb420);
DECL_FUNC(bool (__stdcall*ChkLoader_SIDE)(SectionData *a1, int a2, MapChunks *a3), ChkLoader_SIDE, 0x4cb490);
DECL_FUNC(bool (__stdcall*ChkLoader_VER)(SectionData *section_data, int section_size_, MapChunks *a3), ChkLoader_VER, 0x4cb500);
DECL_FUNC(bool (__stdcall*ChkLoader_TYPE)(SectionData *a1, int a2, MapChunks *a3), ChkLoader_TYPE, 0x4cb550);
DECL_FUNC(int (__fastcall*sub_4CB560)(int a1), sub_4CB560, 0x4cb560);
void sub_4CB5B0(UnknownTilesetRelated2 *a1) {
    int address = 0x4cb5b0;
    __asm {
        mov edx, a1
        call address
    }
}
DECL_FUNC(BOOL (*sub_4CB650)(), sub_4CB650, 0x4cb650);
DECL_FUNC(bool (__stdcall*ChkLoader_PTEC)(SectionData *a1, int a2, MapChunks *a3), ChkLoader_PTEC, 0x4cb670);
DECL_FUNC(bool (__stdcall*ChkLoader_PTEx)(SectionData *a1, int a2, MapChunks *a3), ChkLoader_PTEx, 0x4cb7d0);
DECL_FUNC(bool (__stdcall*ChkLoader_UPGR)(SectionData *a1, int a2, MapChunks *a3), ChkLoader_UPGR, 0x4cb940);
DECL_FUNC(bool (__stdcall*ChkLoader_PUPx)(SectionData *a1, int a2, MapChunks *a3), ChkLoader_PUPx, 0x4cbac0);
DECL_FUNC(bool (__stdcall*ChkLoader_VCOD)(SectionData *sectionData, int sectionSize, MapChunks *map_chunks), ChkLoader_VCOD, 0x4cbc40);
UnitRelated20 * sub_4CBD30(UnitRelated20 *a1) {
    int address = 0x4cbd30;
    UnitRelated20 * result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
UnitRelated20 * CHK_UNIT_Addon(CUnit *unit, UnitRelated20 *result, int a3, int unit_id) {
    int address = 0x4cbdc0;
    UnitRelated20 * result_;
    __asm {
        xor eax, eax
        push dword ptr unit_id
        mov edi, a3
        mov eax, result
        mov edx, unit
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__stdcall*sub_4CBE00)(char a1, int a2), sub_4CBE00, 0x4cbe00);
BOOL unitNotNeutral(ChunkUnitEntry *a1) {
    int address = 0x4cbe20;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(bool (__stdcall*ChkLoader_COLR)(SectionData *section_data, int section_size_, MapChunks *a3), ChkLoader_COLR, 0x4cbe70);
DECL_FUNC(void (__thiscall*sub_4CBED0)(int this_), sub_4CBED0, 0x4cbed0);
UnitRelated20 * CHK_UNIT_Nydus(int a1, CUnit *a2, UnitRelated20 *a3, int a4) {
    int address = 0x4cbef0;
    UnitRelated20 * result_;
    __asm {
        xor eax, eax
        push dword ptr a4
        mov esi, a3
        mov edi, a2
        mov ebx, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_4CBF40)(), sub_4CBF40, 0x4cbf40);
void sub_4CBF60(int a1, CUnit *a2, __int16 a3) {
    int address = 0x4cbf60;
    __asm {
        push dword ptr a3
        mov ecx, a2
        mov eax, a1
        call address
    }
}
DECL_FUNC(bool (__stdcall*ChkLoader_TRIG)(SectionData *a1, int a2, MapChunks *a3), ChkLoader_TRIG, 0x4cbfa0);
signed ReadMapChunks(MapChunks *a1, void *chk_data, int *out_version_loader_index, int chk_size_) {
    int address = 0x4cc060;
    signed result_;
    __asm {
        xor eax, eax
        push dword ptr chk_size_
        mov ebx, out_version_loader_index
        mov ecx, chk_data
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
BOOL LoadFileArchiveToSBigBuf(const char *filename, int *a2, int a3, HANDLE *a4) {
    int address = 0x4cc110;
    BOOL result_;
    __asm {
        xor eax, eax
        push dword ptr a4
        push dword ptr a3
        push dword ptr a2
        mov esi, filename
        call address
        mov result_, eax
    }
    return result_;
}
int sub_4CC1B0(unsigned __int8 a1, int a2, int a3) {
    int address = 0x4cc1b0;
    int result_;
    __asm {
        xor eax, eax
        xor edx, edx
        push dword ptr a3
        mov esi, a2
        mov dl, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(bool (__stdcall*ChkLoader_MBRF)(SectionData *a1, int a2, MapChunks *a3), ChkLoader_MBRF, 0x4cc1f0);
signed sub_4CC2A0(void *chk_data, int chk_size_, int a3, MapChunks *a4) {
    int address = 0x4cc2a0;
    signed result_;
    __asm {
        xor eax, eax
        push dword ptr a4
        push dword ptr a3
        mov esi, chk_size_
        mov edi, chk_data
        call address
        mov result_, eax
    }
    return result_;
}
signed sub_4CC350(char *a1, const char *a2, int *a3, size_t a4) {
    int address = 0x4cc350;
    signed result_;
    __asm {
        xor eax, eax
        mov ecx, a4
        mov edi, a3
        mov edx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(_DWORD (__stdcall*setUnitEnergyEx)(_DWORD a1, char a2), setUnitEnergyEx, 0x4cc3b0);
BOOL sub_4CC420(char *a1, size_t ecx0) {
    int address = 0x4cc420;
    BOOL result_;
    __asm {
        xor eax, eax
        mov ecx, ecx0
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void CHK_UNIT_ApplyOtherFlags(CUnit *a1, char a2, int a3) {
    int address = 0x4cc470;
    __asm {
        push dword ptr a3
        push dword ptr a2
        mov eax, a1
        call address
    }
}
void sub_4CC610(CUnit *a1, char a2, int a3) {
    int address = 0x4cc610;
    __asm {
        push dword ptr a3
        push dword ptr a2
        mov esi, a1
        call address
    }
}
DECL_FUNC(bool (__stdcall*ChkLoader_STR)(SectionData *section_data, int section_size_, MapChunks *a3), ChkLoader_STR, 0x4cc650);
void * getFullMapChunk(char *filename, int *chk_size_) {
    int address = 0x4cc6e0;
    void * result_;
    __asm {
        xor eax, eax
        push dword ptr chk_size_
        mov eax, filename
        call address
        mov result_, eax
    }
    return result_;
}
BOOL sub_4CC7F0(char *a1) {
    int address = 0x4cc7f0;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__cdecl*sub_4CC990)(), sub_4CC990, 0x4cc990);
signed sub_4CCAC0(char *a1, MapChunks *a2) {
    int address = 0x4ccac0;
    signed result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void sub_4CCC40(int a1, unsigned __int8 a2, CUnit *a3) {
    int address = 0x4ccc40;
    __asm {
        xor ecx, ecx
        mov esi, a3
        mov cl, a2
        mov eax, a1
        call address
    }
}
DECL_FUNC(void (__cdecl*ResetDATFiles)(), ResetDATFiles, 0x4ccc80);
void CHK_UNIT_ApplyBurrowFlag(CUnit *result, char a2, CUnit *a3) {
    int address = 0x4ccf20;
    __asm {
        push dword ptr a3
        push dword ptr a2
        mov eax, result
        call address
    }
}
DECL_FUNC(UnitRelated20 * (__stdcall*sub_4CCF90)(UnitRelated20 *a1), sub_4CCF90, 0x4ccf90);
DECL_FUNC(int (__stdcall*sub_4CD070)(char a1, int a2), sub_4CD070, 0x4cd070);
DECL_FUNC(void (*sub_4CD090)(), sub_4CD090, 0x4cd090);
DECL_FUNC(bool (__stdcall*ChkLoader_MTXM)(SectionData *a1, int a2, MapChunks *a3), ChkLoader_MTXM, 0x4cd0b0);
char setHangerCount(CUnit *a1, CUnit *a2, unsigned __int8 a3) {
    int address = 0x4cd260;
    char result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        mov edi, a2
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
CUnit * CreateUnitAtPos(__int16 player_id, UnitType unit_type, __int16 x, __int16 y) {
    int address = 0x4cd360;
    CUnit * result_;
    __asm {
        xor eax, eax
        xor ecx, ecx
        push dword ptr y
        push dword ptr x
        mov cx, unit_type
        mov ax, player_id
        call address
        mov result_, eax
    }
    return result_;
}
void editUnitFlags(CUnit *a1, UnitGroupFlags *a2) {
    int address = 0x4cd480;
    __asm {
        mov ebx, a2
        mov eax, a1
        call address
    }
}
DECL_FUNC(bool (__stdcall*ChkLoader_THG2)(SectionData *a1, int a2, MapChunks *a3), ChkLoader_THG2, 0x4cd600);
CUnit * sub_4CD740(ChunkUnitEntry *a1) {
    int address = 0x4cd740;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__cdecl*sub_4CD770)(), sub_4CD770, 0x4cd770);
DECL_FUNC(bool (__stdcall*ChkLoader_UNIT)(SectionData *a1, int section_size_, MapChunks *a3), ChkLoader_UNIT, 0x4cd7a0);
DECL_FUNC(void (__fastcall*sub_4CD9C0)(dialog *this_), sub_4CD9C0, 0x4cd9c0);
int sub_4CDA00(int result, unsigned __int16 a2, int a3) {
    int address = 0x4cda00;
    int result_;
    __asm {
        xor eax, eax
        xor ecx, ecx
        push dword ptr a3
        mov cx, a2
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (*sub_4CDA20)(), sub_4CDA20, 0x4cda20);
dialog * UpdateCancelButton(dialog *a1, unsigned __int16 a2, DialogFlags a3) {
    int address = 0x4cda30;
    dialog * result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
dialog * UpdateOKButton(dialog *a1, unsigned __int16 a2, DialogFlags a3) {
    int address = 0x4cda80;
    dialog * result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__fastcall*sub_4CDAD0)(dialog *dlg, dlgEvent *evt), sub_4CDAD0, 0x4cdad0);
DECL_FUNC(int (__fastcall*gameMenu_DLG)(dialog *a1, dlgEvent *a2), gameMenu_DLG, 0x4cdb40);
DECL_FUNC(const char * (__fastcall*GetNetworkTblString)(__int16 network_tbl_entry), GetNetworkTblString, 0x4cdb70);
DECL_FUNC(void (__fastcall*FreeNetworkTBLHandle)(bool exit_code), FreeNetworkTBLHandle, 0x4cdba0);
DECL_FUNC(void (*LoadNetworkTBL)(), LoadNetworkTBL, 0x4cdbd0);
int sub_4CDCC0(int result) {
    int address = 0x4cdcc0;
    int result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(char * (__thiscall*sub_4CDCE0)(GameActionDataBlock *this_), sub_4CDCE0, 0x4cdce0);
int sub_4CDD30(GameActionDataBlock *a1) {
    int address = 0x4cdd30;
    int result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
_DWORD * sub_4CDDC0(_DWORD *result) {
    int address = 0x4cddc0;
    _DWORD * result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
void sub_4CDE10(_BYTE *a1, size_t *a2, int a3, void *dest) {
    int address = 0x4cde10;
    __asm {
        push dword ptr dest
        mov esi, a3
        mov ebx, a2
        mov eax, a1
        call address
    }
}
void saveReplayAction(GameActionDataBlock *a1, _BYTE *a2, size_t a3, char a4) {
    int address = 0x4cde70;
    __asm {
        push dword ptr a4
        mov edi, a3
        mov ebx, a2
        mov eax, a1
        call address
    }
}
DECL_FUNC(int (*sub_4CDF00)(), sub_4CDF00, 0x4cdf00);
DECL_FUNC(int (*sub_4CDF10)(), sub_4CDF10, 0x4cdf10);
DECL_FUNC(int (*sub_4CDF20)(), sub_4CDF20, 0x4cdf20);
DECL_FUNC(int (*sub_4CDF30)(), sub_4CDF30, 0x4cdf30);
GameActionDataBlock * allocateRepGameActionMemory(GameActionDataBlock *a1) {
    int address = 0x4cdf50;
    GameActionDataBlock * result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
void sub_4CDFA0(_BYTE *a1, size_t a2) {
    int address = 0x4cdfa0;
    __asm {
        mov edi, a2
        mov ebx, a1
        call address
    }
}
DECL_FUNC(void (__cdecl*sub_4CDFC0)(), sub_4CDFC0, 0x4cdfc0);
DECL_FUNC(void (__cdecl*sub_4CDFD0)(), sub_4CDFD0, 0x4cdfd0);
int sub_4CDFF0(GameActionDataBlock *a1, _DWORD *a2, char *a3, u8 *dest, int *a5) {
    int address = 0x4cdff0;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a5
        push dword ptr dest
        push dword ptr a3
        push dword ptr a2
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
int sub_4CE110(int *a1, char *a2, u8 *a3, _DWORD *a4) {
    int address = 0x4ce110;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a4
        mov ecx, a3
        mov edx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__fastcall*FreeGameActionData)(bool exit_code), FreeGameActionData, 0x4ce130);
int WriteGameActions(FILE *file, GameActionDataBlock *a2) {
    int address = 0x4ce1c0;
    int result_;
    __asm {
        xor eax, eax
        mov esi, a2
        mov edi, file
        call address
        mov result_, eax
    }
    return result_;
}
BOOL sub_4CE220(FILE *file) {
    int address = 0x4ce220;
    BOOL result_;
    __asm {
        xor eax, eax
        mov ebx, file
        call address
        mov result_, eax
    }
    return result_;
}
int sub_4CE270(FILE *a1) {
    int address = 0x4ce270;
    int result_;
    __asm {
        xor eax, eax
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__cdecl*createNewGameActionDataBlock)(), createNewGameActionDataBlock, 0x4ce280);
int convertRelativeToFullPath(char *a1, size_t a2) {
    int address = 0x4ce300;
    int result_;
    __asm {
        xor eax, eax
        mov esi, a2
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
char * convertFullPathToRelativePath(size_t a1, char *a2) {
    int address = 0x4ce370;
    char * result_;
    __asm {
        xor eax, eax
        mov esi, a2
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(FILE * (*closeLoadGameFile)(), closeLoadGameFile, 0x4ce440);
DECL_FUNC(int (*nullsub_60)(), nullsub_60, 0x4ce460);
DECL_FUNC(int (*sub_4CE470)(void), sub_4CE470, 0x4ce470);
DECL_FUNC(const char * (*sub_4CE4A0)(), sub_4CE4A0, 0x4ce4a0);
signed GetMapSaveDirectory(char *a1, unsigned int esi0, const char *a3) {
    int address = 0x4ce4d0;
    signed result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        mov esi, esi0
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed getSaveDirectory(char *a1, unsigned int esi0, char *a3, int a4) {
    int address = 0x4ce5b0;
    signed result_;
    __asm {
        xor eax, eax
        push dword ptr a4
        push dword ptr a3
        mov esi, esi0
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (*SetMapStartStatus)(), SetMapStartStatus, 0x4ce6b0);
DECL_FUNC(char (*getMapStartStatus)(), getMapStartStatus, 0x4ce6c0);
BOOL sub_4CE6D0(const CHAR *a1) {
    int address = 0x4ce6d0;
    BOOL result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
const void * sub_4CE700(const void *result) {
    int address = 0x4ce700;
    const void * result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_4CE720)(), sub_4CE720, 0x4ce720);
int sub_4CE730(int result) {
    int address = 0x4ce730;
    int result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
int sub_4CE740(int result) {
    int address = 0x4ce740;
    int result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (*sub_4CE750)(), sub_4CE750, 0x4ce750);
DECL_FUNC(int (*sub_4CE760)(), sub_4CE760, 0x4ce760);
int setUpgradeLevel(int result, u8 a2, unsigned __int16 a3) {
    int address = 0x4ce770;
    int result_;
    __asm {
        xor eax, eax
        xor edx, edx
        xor ecx, ecx
        mov cx, a3
        mov dl, a2
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
u8 getUpgradesLevel(int a1, unsigned __int16 a2) {
    int address = 0x4ce7a0;
    u8 result_;
    __asm {
        xor eax, eax
        xor ecx, ecx
        mov cx, a2
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
DECL_FUNC(int (*sub_4CE7D0)(), sub_4CE7D0, 0x4ce7d0);
DECL_FUNC(int (__thiscall*getUpgradesAvailable)(_DWORD a1), getUpgradesAvailable, 0x4ce7f0);
int sub_4CE820(int result, u8 a2, unsigned __int16 a3) {
    int address = 0x4ce820;
    int result_;
    __asm {
        xor eax, eax
        xor edx, edx
        xor ecx, ecx
        mov cx, a3
        mov dl, a2
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
u8 isTechResearched(int a1, Tech2 tech) {
    int address = 0x4ce850;
    u8 result_;
    __asm {
        xor eax, eax
        xor ecx, ecx
        mov cx, tech
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
int sub_4CE880(int a1, char a2, int a3) {
    int address = 0x4ce880;
    int result_;
    __asm {
        xor eax, eax
        xor edx, edx
        mov ecx, a3
        mov dl, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
char techIsResearchedSCBW(int a1, Tech2 a2) {
    int address = 0x4ce8a0;
    char result_;
    __asm {
        xor eax, eax
        xor ecx, ecx
        mov cx, a2
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
DECL_FUNC(int (__fastcall*sub_4CE8D0)(char *source, int a2, int a3, int a4), sub_4CE8D0, 0x4ce8d0);
BOOL writeSavePlaintextHeader(FILE *a1, int a2) {
    int address = 0x4ce950;
    BOOL result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov ebx, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(bool * (*unpackAllPlayerSelectionGroups)(), unpackAllPlayerSelectionGroups, 0x4ceda0);
DECL_FUNC(int (*packAllPlayerSelectionGroups)(), packAllPlayerSelectionGroups, 0x4cee00);
DECL_FUNC(const char * (__cdecl*getSaveExtension)(), getSaveExtension, 0x4cee60);
DECL_FUNC(int (__fastcall*sub_4CEEF0)(char *a1, int a2, int a3, _DWORD *a4), sub_4CEEF0, 0x4ceef0);
DECL_FUNC(int (__stdcall*sub_4CEFF0)(int a1, int a2), sub_4CEFF0, 0x4ceff0);
int sub_4CF0F0(char *a1, FILE *a2) {
    int address = 0x4cf0f0;
    int result_;
    __asm {
        xor eax, eax
        mov edi, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(BOOL (__stdcall*WriteSaveVersion)(int a1, FILE *a2), WriteSaveVersion, 0x4cf160);
int getSavePath(char *base, unsigned int eax0, int a3, const char *a4) {
    int address = 0x4cf2a0;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a4
        mov ebx, a3
        mov eax, eax0
        mov ecx, base
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__fastcall*enumSaveLoadFiles)(char *a1, const char *filename_pattern, int (__fastcall *a3)(char *, struct _WIN32_FIND_DATAA *, const char *, int *), int a4, int a5, const char *a6, int *a7), enumSaveLoadFiles, 0x4cf330);
unsigned createSaveLoadList(int a1, int a2, char *a3, int a4, int a5) {
    int address = 0x4cf5a0;
    unsigned result_;
    __asm {
        xor eax, eax
        push dword ptr a5
        push dword ptr a4
        mov ecx, a3
        mov edx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(signed (*sub_4CF5F0)(), sub_4CF5F0, 0x4cf5f0);
signed sub_4CF7B0(char *a1) {
    int address = 0x4cf7b0;
    signed result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(BOOL (__stdcall*sub_4CF820)(const char *a1), sub_4CF820, 0x4cf820);
int LoadGameInit_Mode(char *a1) {
    int address = 0x4cf8e0;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int CMDRECV_LoadGame(const char *a1) {
    int address = 0x4cf950;
    int result_;
    __asm {
        xor eax, eax
        mov ebx, a1
        call address
        mov result_, eax
    }
    return result_;
}
char sub_4CFA10(char *a1, int a2) {
    int address = 0x4cfa10;
    char result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov ebx, a1
        call address
        mov result_, al
    }
    return result_;
}
DECL_FUNC(signed (__fastcall*Saved_Game_Node_Constructor)(const char *source, int a2, int a3, int a4), Saved_Game_Node_Constructor, 0x4cfb00);
DECL_FUNC(int (__fastcall*sub_4CFCC0)(char *source, int a2, int a3, _DWORD *a4), sub_4CFCC0, 0x4cfcc0);
DECL_FUNC(void (__stdcall*sub_4CFD90)(void (__stdcall *a1)(_DWORD)), sub_4CFD90, 0x4cfd90);
DECL_FUNC(int (__stdcall*sub_4CFE40)(int a1, char *dest, size_t size_), sub_4CFE40, 0x4cfe40);
DECL_FUNC(signed (*loadGameFull)(), loadGameFull, 0x4cfef0);
int sub_4D02D0(const char *filename, int time, int a3) {
    int address = 0x4d02d0;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        push dword ptr time
        mov eax, filename
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*loseSightSelection)(), loseSightSelection, 0x4d0820);
DECL_FUNC(LPTOP_LEVEL_EXCEPTION_FILTER (*getTopLevelExceptionFilter)(), getTopLevelExceptionFilter, 0x4d0910);
DECL_FUNC(LPTOP_LEVEL_EXCEPTION_FILTER (*ExceptionFilterDestructor)(), ExceptionFilterDestructor, 0x4d0920);
CHAR * GetExceptionName(unsigned int a1, DWORD a2, CHAR *a3) {
    int address = 0x4d0930;
    CHAR * result_;
    __asm {
        xor eax, eax
        mov esi, a3
        mov edi, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int * GetModuleInfo(LPCVOID lpAddress, int a2, LPSTR lpString1, int a4, int a5) {
    int address = 0x4d0cb0;
    int * result_;
    __asm {
        xor eax, eax
        push dword ptr a5
        push dword ptr a4
        push dword ptr lpString1
        mov eax, a2
        mov ecx, lpAddress
        call address
        mov result_, eax
    }
    return result_;
}
void LogCallStack(int a1, unsigned int a2) {
    int address = 0x4d0db0;
    __asm {
        mov eax, a2
        mov ecx, a1
        call address
    }
}
void LogCodeBytes(unsigned __int8 *a1, unsigned int j, UINT_PTR ucb) {
    int address = 0x4d0e90;
    __asm {
        push dword ptr ucb
        mov esi, j
        mov eax, a1
        call address
    }
}
LONG TopLevelExceptionFilter(int a1, int a2, struct _EXCEPTION_POINTERS *ExceptionInfo) {
    int address = 0x4d0f70;
    LONG result_;
    __asm {
        xor eax, eax
        push dword ptr ExceptionInfo
        mov esi, a2
        mov ebx, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__stdcall*CreateExceptionFilter)(int a1), CreateExceptionFilter, 0x4d1120);
int IsOutsideGameScreen(int x, int y) {
    int address = 0x4d1140;
    int result_;
    __asm {
        xor eax, eax
        mov eax, y
        mov ecx, x
        call address
        mov result_, eax
    }
    return result_;
}
void setHudBeginY(Bitmap *result) {
    int address = 0x4d11a0;
    __asm {
        mov eax, result
        call address
    }
}
DECL_FUNC(char (*sub_4D1210)(), sub_4D1210, 0x4d1210);
DECL_FUNC(void (*sub_4D1220)(), sub_4D1220, 0x4d1220);
DECL_FUNC(void (*sub_4D1230)(), sub_4D1230, 0x4d1230);
DECL_FUNC(CursorType (*sub_4D1240)(), sub_4D1240, 0x4d1240);
DECL_FUNC(void (__fastcall*DestroyCursors)(bool exit_code), DestroyCursors, 0x4d1250);
int getScrollCursorType(_DWORD *a1, _DWORD *a2) {
    int address = 0x4d12a0;
    int result_;
    __asm {
        xor eax, eax
        mov esi, a2
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
BOOL UnitIsEnemy(CUnit *a1) {
    int address = 0x4d1380;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void setCursorType(CursorType cursor_type) {
    int address = 0x4d13b0;
    __asm {
        mov eax, cursor_type
        call address
    }
}
DECL_FUNC(CursorType (__cdecl*getCursorType)(), getCursorType, 0x4d1460);
DECL_FUNC(void (*BWFXN_NextFrameHelperFunctionTarget)(), BWFXN_NextFrameHelperFunctionTarget, 0x4d14d0);
DECL_FUNC(void (__cdecl*LoadCursors)(), LoadCursors, 0x4d1560);
BOOL hasMessagesWaiting(struct tagMSG *a1, int a2) {
    int address = 0x4d1650;
    BOOL result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(__int16 (__stdcall*sub_4D16F0)(int a1), sub_4D16F0, 0x4d16f0);
void GameShowCursor(bool show_cursor) {
    int address = 0x4d1750;
    __asm {
        xor esi, esi
        mov si, word ptr show_cursor
        call address
    }
}
DECL_FUNC(void (__cdecl*Game_NumLockInit)(), Game_NumLockInit, 0x4d17b0);
DECL_FUNC(int (*BWFXN_Game_KeyState)(), BWFXN_Game_KeyState, 0x4d1810);
DECL_FUNC(void (__cdecl*Game_Close)(), Game_Close, 0x4d1880);
void Game_MouseWheel(EventNo wNo, int a2, InputProcedure a3) {
    int address = 0x4d1900;
    __asm {
        xor eax, eax
        mov edi, a3
        mov ecx, a2
        mov ax, wNo
        call address
    }
}
void BWFXN_Game_ButtonUp(int a1, InputProcedure a2, Position a3, EventNo a4) {
    int address = 0x4d1940;
    __asm {
        push dword ptr a4
        mov esi, a3
        mov edi, a2
        mov eax, a1
        call address
    }
}
void BWFXN_Game_ButtonDown(int a1, InputProcedure a2, Position a3, EventNo a4) {
    int address = 0x4d19c0;
    __asm {
        push dword ptr a4
        mov esi, a3
        mov edi, a2
        mov eax, a1
        call address
    }
}
void Game_BtnDoubleClick(int a1, InputProcedure a2, Position a3, EventNo a4) {
    int address = 0x4d1a50;
    __asm {
        push dword ptr a4
        mov esi, a3
        mov edi, a2
        mov eax, a1
        call address
    }
}
DECL_FUNC(void (*UpdateDlgMousePosition)(void), UpdateDlgMousePosition, 0x4d1ae0);
DECL_FUNC(void (__cdecl*TakeScreenshot)(), TakeScreenshot, 0x4d1b40);
DECL_FUNC(void (__stdcall*BWFXN_videoLoop)(int flag), BWFXN_videoLoop, 0x4d1bf0);
DECL_FUNC(void (*sub_4D1D30)(), sub_4D1D30, 0x4d1d30);
DECL_FUNC(void (*Game_Capturechanged)(), Game_Capturechanged, 0x4d1d40);
DECL_FUNC(LRESULT (__stdcall*MainWindowProc)(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam), MainWindowProc, 0x4d1d70);
DECL_FUNC(void * (__stdcall*allocFunction)(DWORD a1), allocFunction, 0x4d26b0);
_DWORD * sub_4D26D0(_DWORD *result) {
    int address = 0x4d26d0;
    _DWORD * result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
void * sub_4D26E0(int logline, char *logfilename, void *result) {
    int address = 0x4d26e0;
    void * result_;
    __asm {
        xor eax, eax
        mov eax, result
        mov edx, logfilename
        mov ecx, logline
        call address
        mov result_, eax
    }
    return result_;
}
BOOL j_SFileCloseFile(void *a1) {
    int address = 0x4d26f0;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(signed (__stdcall*FileIOErrProc)(char *source, int a2, unsigned int a3), FileIOErrProc, 0x4d2700);
DECL_FUNC(BOOL (*sub_4D2760)(), sub_4D2760, 0x4d2760);
void sub_4D2770(int height, int width, int a3, const char *a4, int size_, void *buffer, int buffersize_) {
    int address = 0x4d2770;
    __asm {
        push dword ptr buffersize_
        push dword ptr buffer
        push dword ptr size_
        mov esi, a4
        mov eax, a3
        mov edx, width
        mov ecx, height
        call address
    }
}
DECL_FUNC(void (__fastcall*AllocBackgroundImage)(const char *fileName, Bitmap *a2, PALETTEENTRY *palette, const char *source_filename, int source_line), AllocBackgroundImage, 0x4d27a0);
int sub_4D2800(void *a1, const char *a2, int a3) {
    int address = 0x4d2800;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        mov esi, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int sub_4D2840(DWORD dwSearchScope, HANDLE hMpq, HANDLE *a3, const char *a4, int a5) {
    int address = 0x4d2840;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a5
        mov esi, a4
        mov eax, a3
        mov edx, hMpq
        mov ecx, dwSearchScope
        call address
        mov result_, eax
    }
    return result_;
}
void FileFatal(HANDLE this_, int a2) {
    int address = 0x4d2880;
    __asm {
        mov ebx, a2
        mov ecx, this_
        call address
    }
}
DECL_FUNC(void (*checkLastFileError)(), checkLastFileError, 0x4d28d0);
int openGraphicHandle(const char *a1) {
    int address = 0x4d2930;
    int result_;
    __asm {
        xor eax, eax
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__stdcall*waitForImageLoadObjects)(LPOVERLAPPED a1, int a2, int a3), waitForImageLoadObjects, 0x4d29d0);
void ReadFile_Overlapped(void *buffer, DWORD nNumberOfBytesToRead, LPOVERLAPPED a3, void *a4) {
    int address = 0x4d2aa0;
    __asm {
        mov edi, a4
        mov eax, a3
        mov edx, nNumberOfBytesToRead
        mov ecx, buffer
        call address
    }
}
void sub_4D2B10(DWORD *a1, void *a2) {
    int address = 0x4d2b10;
    __asm {
        mov esi, a2
        mov eax, a1
        call address
    }
}
DECL_FUNC(grpHead * (__fastcall*LoadGraphic)(const char *grp_path, int unused_zero, const char *logfilename, int logline), LoadGraphic, 0x4d2b30);
void * sub_4D2BF0(int eax0, char *a2, LONG *a3, int a4, char *logfilename, int logline) {
    int address = 0x4d2bf0;
    void * result_;
    __asm {
        xor eax, eax
        push dword ptr logline
        push dword ptr logfilename
        push dword ptr a4
        push dword ptr a3
        push dword ptr a2
        mov eax, eax0
        call address
        mov result_, eax
    }
    return result_;
}
HANDLE sub_4D2C70(int a1, char *filename, LONG *last_error, LPOVERLAPPED a4, char *logfilename, int logline) {
    int address = 0x4d2c70;
    HANDLE result_;
    __asm {
        xor eax, eax
        push dword ptr logline
        push dword ptr logfilename
        push dword ptr a4
        push dword ptr last_error
        push dword ptr filename
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int fastFileRead(int *bytes_read, int searchScope, const char *filename, int defaultValue, int bytes_to_read, const char *logfilename, int logline) {
    int address = 0x4d2d10;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr logline
        push dword ptr logfilename
        push dword ptr bytes_to_read
        push dword ptr defaultValue
        push dword ptr filename
        mov ecx, searchScope
        mov eax, bytes_read
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void * (__fastcall*_fastFileRead)(const char *filename, int default_value, int *bytes_read, const char *a4, int a5), _fastFileRead, 0x4d2e40);
int sub_4D2E60(int a1, const char *a2) {
    int address = 0x4d2e60;
    int result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void LoadGameData(DatLoad *a1, char *a2) {
    int address = 0x4d2e80;
    __asm {
        push dword ptr a2
        mov eax, a1
        call address
    }
}
DECL_FUNC(void (__fastcall*DestroyAccelerators)(bool exit_code), DestroyAccelerators, 0x4d2f30);
DECL_FUNC(HACCEL (*sub_4D2F90)(), sub_4D2F90, 0x4d2f90);
DECL_FUNC(HACCEL (*sub_4D2FB0)(), sub_4D2FB0, 0x4d2fb0);
DECL_FUNC(HACCEL (*sub_4D2FD0)(), sub_4D2FD0, 0x4d2fd0);
DECL_FUNC(void (__cdecl*InitializeInputProcs)(), InitializeInputProcs, 0x4d2ff0);
DECL_FUNC(void (__cdecl*InitAccelerators)(), InitAccelerators, 0x4d3070);
DECL_FUNC(void (*j_InitializeInputProcs)(), j_InitializeInputProcs, 0x4d31f0);
DECL_FUNC(HACCEL (*sub_4D3200)(), sub_4D3200, 0x4d3200);
DECL_FUNC(void (__cdecl*sub_4D3220)(), sub_4D3220, 0x4d3220);
DECL_FUNC(void (__cdecl*cleanBufferCounts)(), cleanBufferCounts, 0x4d3240);
_BYTE * sub_4D32E0(unsigned __int8 a1, char a2) {
    int address = 0x4d32e0;
    _BYTE * result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov al, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*nullsub_61)(), nullsub_61, 0x4d3330);
DECL_FUNC(void (*sub_4D3340)(), sub_4D3340, 0x4d3340);
int sub_4D3350(int result) {
    int address = 0x4d3350;
    int result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_4D3360)(), sub_4D3360, 0x4d3360);
signed sub_4D3370(GameData *a1) {
    int address = 0x4d3370;
    signed result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__thiscall*sub_4D3400)(void *this_), sub_4D3400, 0x4d3400);
DECL_FUNC(int (*nullsub_62)(), nullsub_62, 0x4d3430);
DECL_FUNC(int (*nullsub_63)(), nullsub_63, 0x4d3440);
DECL_FUNC(int (*nullsub_64)(), nullsub_64, 0x4d3450);
DECL_FUNC(Char4 (*get_netmode)(), get_netmode, 0x4d3460);
DECL_FUNC(void (*sub_4D3470)(), sub_4D3470, 0x4d3470);
int sub_4D3480(const char *a1) {
    int address = 0x4d3480;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*GameUpgrade)(_DWORD *a1), GameUpgrade, 0x4d34a0);
DECL_FUNC(HANDLE (*ResetLeagueEvent)(), ResetLeagueEvent, 0x4d3510);
DECL_FUNC(HANDLE (*sub_4D3540)(), sub_4D3540, 0x4d3540);
DECL_FUNC(void (*sub_4D3570)(), sub_4D3570, 0x4d3570);
DECL_FUNC(void (*sub_4D3580)(), sub_4D3580, 0x4d3580);
DECL_FUNC(void (__cdecl*sub_4D35A0)(), sub_4D35A0, 0x4d35a0);
DECL_FUNC(int (__stdcall*Game_Hdr_Node_Constructor)(DWORD a1), Game_Hdr_Node_Constructor, 0x4d35e0);
int sub_4D37C0(dialog *a1, int (__stdcall *a2)(_DWORD, _DWORD)) {
    int address = 0x4d37c0;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (*sub_4D3810)(), sub_4D3810, 0x4d3810);
DECL_FUNC(void (__cdecl*sub_4D3860)(), sub_4D3860, 0x4d3860);
void j_BWFXN_SendLobbyCallTarget(const char *a1) {
    int address = 0x4d3900;
    __asm {
        mov edi, a1
        call address
    }
}
DECL_FUNC(signed (__stdcall*CreateLadderGame)(GameData *a1, int a2), CreateLadderGame, 0x4d3910);
signed JoinNetworkGame(GameData *a1) {
    int address = 0x4d3b50;
    signed result_;
    __asm {
        xor eax, eax
        mov ebx, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed InitializeNetworkProvider(Char4 provider_id) {
    int address = 0x4d3cc0;
    signed result_;
    __asm {
        xor eax, eax
        mov ebx, provider_id
        call address
        mov result_, eax
    }
    return result_;
}
int CreateGame(GameData *data) {
    int address = 0x4d3fc0;
    int result_;
    __asm {
        xor eax, eax
        mov eax, data
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(signed (*sub_4D4130)(), sub_4D4130, 0x4d4130);
DECL_FUNC(int (__stdcall*LobbyLoopCnt)(int a1), LobbyLoopCnt, 0x4d4340);
DECL_FUNC(void (*sub_4D4400)(), sub_4D4400, 0x4d4400);
DECL_FUNC(void (__fastcall*endVideoProc)(dlgEvent *a1), endVideoProc, 0x4d4410);
DECL_FUNC(void (__cdecl*sub_4D4440)(), sub_4D4440, 0x4d4440);
void PlayMovie(unsigned int a1) {
    int address = 0x4d4470;
    __asm {
        mov eax, a1
        call address
    }
}
DECL_FUNC(BOOL (*sub_4D4540)(), sub_4D4540, 0x4d4540);
DECL_FUNC(void (__fastcall*TitleLoopUpdate)(dialog *dlg, int x, int y, rect *dst), TitleLoopUpdate, 0x4d4550);
void sub_4D45A0(dialog *a1) {
    int address = 0x4d45a0;
    __asm {
        mov eax, a1
        call address
    }
}
DECL_FUNC(void (*sub_4D4620)(), sub_4D4620, 0x4d4620);
DECL_FUNC(void (__fastcall*TitleLoopTimer)(dialog *a1, __int16 a2), TitleLoopTimer, 0x4d4640);
void DrawBINDialog(dialog *dlg) {
    int address = 0x4d46a0;
    __asm {
        mov eax, dlg
        call address
    }
}
void TitleBlitAndLoop(dialog *dlg) {
    int address = 0x4d46f0;
    __asm {
        mov eax, dlg
        call address
    }
}
void titleInit(dialog *dlg) {
    int address = 0x4d4870;
    __asm {
        mov eax, dlg
        call address
    }
}
DECL_FUNC(int (__fastcall*TitleDlgProc)(dialog *dlg, struct dlgEvent *evt), TitleDlgProc, 0x4d4960);
DECL_FUNC(void (__cdecl*LoadTitle)(), LoadTitle, 0x4d49a0);
DECL_FUNC(int (*initializePlayerValues)(), initializePlayerValues, 0x4d4ac0);
DECL_FUNC(void (*nullsub_65)(), nullsub_65, 0x4d4b10);
signed packColorShifts(void *a1) {
    int address = 0x4d4b20;
    signed result_;
    __asm {
        xor eax, eax
        mov edx, a1
        call address
        mov result_, eax
    }
    return result_;
}
int sub_4D4B50(int a1) {
    int address = 0x4d4b50;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
unsigned sub_4D4B60(int a1) {
    int address = 0x4d4b60;
    unsigned result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
LO_Header ** sub_4D4B80(int a1) {
    int address = 0x4d4b80;
    LO_Header ** result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__cdecl*initializeImageArray)(), initializeImageArray, 0x4d4ba0);
int sub_4D4C70(int a1, _DWORD *a2) {
    int address = 0x4d4c70;
    int result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
_DWORD * sub_4D4CB0(_DWORD *result, int a2) {
    int address = 0x4d4cb0;
    _DWORD * result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
_WORD * sub_4D4CC0(_WORD *result, _WORD *a2) {
    int address = 0x4d4cc0;
    _WORD * result_;
    __asm {
        xor eax, eax
        mov edx, a2
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
int sub_4D4CD0(int result, _DWORD *a2) {
    int address = 0x4d4cd0;
    int result_;
    __asm {
        xor eax, eax
        mov edx, a2
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
CImage * ImageDestructor(CImage *a1) {
    int address = 0x4d4ce0;
    CImage * result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
IScriptProgram * sub_4D4D70(int a1) {
    int address = 0x4d4d70;
    IScriptProgram * result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int sub_4D4D80(unsigned __int8 a1, int a2) {
    int address = 0x4d4d80;
    int result_;
    __asm {
        xor eax, eax
        mov edx, a2
        mov al, a1
        call address
        mov result_, eax
    }
    return result_;
}
int sub_4D4DA0(int result, int a2) {
    int address = 0x4d4da0;
    int result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
BOOL sub_4D4DB0(int a1, unsigned int a2, unsigned int a3) {
    int address = 0x4d4db0;
    BOOL result_;
    __asm {
        xor eax, eax
        mov ecx, a3
        mov edx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_4D4E10)(), sub_4D4E10, 0x4d4e10);
grpHead * sub_4D4E20(int a1) {
    int address = 0x4d4e20;
    grpHead * result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(CImage * (__cdecl*sub_4D4E30)(), sub_4D4E30, 0x4d4e30);
void sub_4D4E80(CImage *a1) {
    int address = 0x4d4e80;
    __asm {
        mov esi, a1
        call address
    }
}
void sub_4D4F10(CImage *image) {
    int address = 0x4d4f10;
    __asm {
        mov esi, image
        call address
    }
}
CImage * removeSelectionCircleImage(CImage *a1) {
    int address = 0x4d4fa0;
    CImage * result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
CImage * removeHPBar(CImage *a1) {
    int address = 0x4d5030;
    CImage * result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__fastcall*CleanupIscriptBINHandle)(bool exit_code), CleanupIscriptBINHandle, 0x4d50c0);
DECL_FUNC(void (*nullsub_66)(), nullsub_66, 0x4d5150);
DECL_FUNC(int (*nullsub_67)(), nullsub_67, 0x4d5160);
DECL_FUNC(int (__stdcall*sub_4D5170)(int a1, int a2), sub_4D5170, 0x4d5170);
DECL_FUNC(char (__fastcall*imageRenderFxn16_1)(int a1, int a2, grpFrame *a3, RECT *a4, int a5), imageRenderFxn16_1, 0x4d51a0);
DECL_FUNC(char (__fastcall*imageRenderFxn16_0)(int a1, int a2, grpFrame *a3, RECT *a4, int a5), imageRenderFxn16_0, 0x4d5210);
DECL_FUNC(__int16 (__fastcall*imageRenderFxn15_0)(__int16 a1, unsigned __int16 a2, grpFrame *a3, RECT *a4, int a5), imageRenderFxn15_0, 0x4d5280);
DECL_FUNC(char (__fastcall*imageRenderFxn13_0)(int a1, int a2, grpFrame *a3, RECT *a4, unsigned __int8 a5), imageRenderFxn13_0, 0x4d5390);
char imageRenderFxn12_Main(rect *a1, int a2, int a3) {
    int address = 0x4d53f0;
    char result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
DECL_FUNC(char (__fastcall*imageRenderFxn17_1)(int a1, int a2, grpFrame *a3, int a4, unsigned __int8 a5), imageRenderFxn17_1, 0x4d5450);
DECL_FUNC(char (__fastcall*imageRenderFxn17_0)(int a1, int a2, grpFrame *a3, RECT *a4, unsigned __int8 a5), imageRenderFxn17_0, 0x4d5480);
DECL_FUNC(char (__fastcall*imageRenderFxn6_1)(int a1, int a2, int a3, tagRECT *a4, int a5), imageRenderFxn6_1, 0x4d54b0);
DECL_FUNC(char (__fastcall*imageRenderFxn6_0)(int a1, int a2, int a3, tagRECT *a4, int a5), imageRenderFxn6_0, 0x4d54d0);
DECL_FUNC(char (__fastcall*imageRenderFxn5_1)(int a1, int a2, int a3, tagRECT *a4, int a5), imageRenderFxn5_1, 0x4d54f0);
DECL_FUNC(char (__fastcall*imageRenderFxn5_0)(int a1, int a2, int a3, tagRECT *a4, int a5), imageRenderFxn5_0, 0x4d5530);
DECL_FUNC(char (__fastcall*imageRenderFxn2_1)(int a1, int a2, int a3, tagRECT *a4, int a5), imageRenderFxn2_1, 0x4d5570);
DECL_FUNC(char (__fastcall*imageRenderFxn2_0)(int a1, int a2, grpFrame *a3, tagRECT *a4, int a5), imageRenderFxn2_0, 0x4d55b0);
DECL_FUNC(int (*nullsub_6)(), nullsub_6, 0x4d55f0);
CImage * unpackImageGrpData(CImage *result) {
    int address = 0x4d5600;
    CImage * result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(BOOL (__fastcall*sub_4D56F0)(CImage *a1, int a2, int a3), sub_4D56F0, 0x4d56f0);
int sub_4D5740(int result, int a2, int a3) {
    int address = 0x4d5740;
    int result_;
    __asm {
        xor eax, eax
        mov esi, a3
        mov edx, a2
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
void ISCRIPT_UseLOFile(point *p, CImage *image, OverlayType overlay_type, int a4) {
    int address = 0x4d5770;
    __asm {
        xor ecx, ecx
        mov edi, a4
        mov cl, overlay_type
        mov edx, image
        mov eax, p
        call address
    }
}
CImage * CImage__updateGraphicData(CImage *image) {
    int address = 0x4d57b0;
    CImage * result_;
    __asm {
        xor eax, eax
        mov eax, image
        call address
        mov result_, eax
    }
    return result_;
}
CImage * setImagePaletteType(CImage *result, unsigned __int8 a2) {
    int address = 0x4d58b0;
    CImage * result_;
    __asm {
        xor eax, eax
        xor ebx, ebx
        mov bl, a2
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
void ISCRIPT_setPosition(CImage *result, char x, char y) {
    int address = 0x4d5900;
    __asm {
        xor edx, edx
        xor ecx, ecx
        mov cl, y
        mov dl, x
        mov eax, result
        call address
    }
}
CImage * ISCRIPT_setVerticalPosition(CImage *result, char a2) {
    int address = 0x4d5920;
    CImage * result_;
    __asm {
        xor eax, eax
        xor ecx, ecx
        mov cl, a2
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
CImage * ISCRIPT_setHorizontalPosition(CImage *result, char a2) {
    int address = 0x4d5930;
    CImage * result_;
    __asm {
        xor eax, eax
        xor ecx, ecx
        mov cl, a2
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
void updateImageFrameIndex(CImage *image) {
    int address = 0x4d5940;
    __asm {
        mov eax, image
        call address
    }
}
CImage * sub_4D5960(CImage *result) {
    int address = 0x4d5960;
    CImage * result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
CImage * sub_4D59C0(CImage *result) {
    int address = 0x4d59c0;
    CImage * result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__thiscall*updateImagePositionOffset)(CImage *this_), updateImagePositionOffset, 0x4d5a00);
void InitializeImageData(CImage *image, CSprite *sprite, int image_id, __int8 horizontal_offset, __int8 vertical_offset) {
    int address = 0x4d5a50;
    __asm {
        push dword ptr vertical_offset
        push dword ptr horizontal_offset
        mov esi, image_id
        mov edi, sprite
        mov eax, image
        call address
    }
}
CImage * sub_4D5B00(CImage *result, int a2) {
    int address = 0x4d5b00;
    CImage * result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__cdecl*sub_4D5B60)(), sub_4D5B60, 0x4d5b60);
void sub_4D5BB0(CSprite *a1) {
    int address = 0x4d5bb0;
    __asm {
        mov edi, a1
        call address
    }
}
DECL_FUNC(void (*InitDamageOverlayCounts)(), InitDamageOverlayCounts, 0x4d5c20);
DECL_FUNC(void (__fastcall*imageRenderFxn12_1)(int a1, int a2, grpFrame *a3, rect *a4, int a5), imageRenderFxn12_1, 0x4d5c90);
DECL_FUNC(char (__fastcall*imageRenderFxn12_0)(int a1, int a2, int a3, rect *a4, int a5), imageRenderFxn12_0, 0x4d5cd0);
DECL_FUNC(void (__thiscall*iscriptDecloaking)(CImage *this_), iscriptDecloaking, 0x4d5d10);
DECL_FUNC(CImage * (__thiscall*iscriptCloaking)(CImage *this_), iscriptCloaking, 0x4d5d70);
DECL_FUNC(int (*sub_4D5DC0)(), sub_4D5DC0, 0x4d5dc0);
DECL_FUNC(CImage * (*sub_4D5DE0)(), sub_4D5DE0, 0x4d5de0);
DECL_FUNC(int (__fastcall*sub_4D5E00)(int a1, grpHead *a2), sub_4D5E00, 0x4d5e00);
CImage * CopyImagePaletteType(CImage *result, CImage *a2) {
    int address = 0x4d5e40;
    CImage * result_;
    __asm {
        xor eax, eax
        mov esi, a2
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
void ISCRIPT_PlayFrame(CImage *image, int a2) {
    int address = 0x4d5e70;
    __asm {
        mov edx, a2
        mov eax, image
        call address
    }
}
void updateImageDirection(CImage *image, unsigned __int8 direction) {
    int address = 0x4d5ea0;
    __asm {
        push dword ptr direction
        mov eax, image
        call address
    }
}
void flipImage(CImage *image, char a2) {
    int address = 0x4d5f30;
    __asm {
        xor ecx, ecx
        mov cl, a2
        mov eax, image
        call address
    }
}
void setImageDirection(CImage *image, unsigned __int8 direction) {
    int address = 0x4d5f80;
    __asm {
        push dword ptr direction
        mov esi, image
        call address
    }
}
void compileHealthBar(CImage *a1, CSprite *a2) {
    int address = 0x4d6010;
    __asm {
        push dword ptr a2
        mov esi, a1
        call address
    }
}
DECL_FUNC(int (__fastcall*imageRenderFxn14_1)(int a1, int a2, grpFrame *a3, RECT *a4, char a5), imageRenderFxn14_1, 0x4d6120);
DECL_FUNC(int (__fastcall*imageRenderFxn14_0)(int a1, int a2, grpFrame *a3, RECT *a4, char a5), imageRenderFxn14_0, 0x4d61a0);
DECL_FUNC(int (__stdcall*ReadImagesArray)(FILE *a1), ReadImagesArray, 0x4d6220);
void packImageData(CImage *image) {
    int address = 0x4d6330;
    __asm {
        mov esi, image
        call address
    }
}
CImage ** CreateHealthBar(CSprite *a1) {
    int address = 0x4d6420;
    CImage ** result_;
    __asm {
        xor eax, eax
        mov edx, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__thiscall*sub_4D64A0)(unsigned int this_), sub_4D64A0, 0x4d64a0);
DECL_FUNC(int (__stdcall*writeImages)(FILE *file), writeImages, 0x4d64c0);
void ISCRIPT_PlaySnd(SfxData sfx, CImage *a2) {
    int address = 0x4d6610;
    __asm {
        mov eax, a2
        mov ebx, sfx
        call address
    }
}
void isValidScript(CImage *image, int a2) {
    int address = 0x4d6640;
    __asm {
        mov edi, a2
        mov ebx, image
        call address
    }
}
void sub_4D6690(CImage *a1) {
    int address = 0x4d6690;
    __asm {
        mov eax, a1
        call address
    }
}
void sub_4D66B0(CImage *image) {
    int address = 0x4d66b0;
    __asm {
        mov eax, image
        call address
    }
}
void sub_4D6740(CImage *a1, CSprite *a2, unsigned int a3, unsigned int a4) {
    int address = 0x4d6740;
    __asm {
        push dword ptr a4
        push dword ptr a3
        push dword ptr a2
        mov eax, a1
        call address
    }
}
void sub_4D67D0(CImage *a1, int edi0, unsigned __int16 a3, int a4) {
    int address = 0x4d67d0;
    __asm {
        push dword ptr a4
        push dword ptr a3
        mov edi, edi0
        mov ebx, a1
        call address
    }
}
void createSelectionCircleImage(CSprite *a1, CImage *a2, unsigned __int8 a3, __int16 a4) {
    int address = 0x4d6810;
    __asm {
        push dword ptr a4
        push dword ptr a3
        mov ecx, a2
        mov eax, a1
        call address
    }
}
void InitializeHealthBarImage(int a1, CImage *a2) {
    int address = 0x4d68c0;
    __asm {
        mov ecx, a2
        mov eax, a1
        call address
    }
}
DECL_FUNC(void (*InitializePresetImageArrays)(), InitializePresetImageArrays, 0x4d6930);
DECL_FUNC(CImage * (__stdcall*ISCRIPT_CreateImage)(CImage *image, int image_id, char horizontal_offset, int vertical_offset, ImageOrder image_order), ISCRIPT_CreateImage, 0x4d6d90);
DECL_FUNC(void (__fastcall*sub_4D6F00)(int a1, CSprite *a2, unsigned int a3, unsigned int a4), sub_4D6F00, 0x4d6f00);
CImage * sub_4D6F90(CSprite *a1, unsigned __int16 a2, unsigned int a3, unsigned __int16 a4) {
    int address = 0x4d6f90;
    CImage * result_;
    __asm {
        xor eax, eax
        push dword ptr a4
        push dword ptr a3
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
CImage ** CreateSelectionCircle(CSprite *a1, unsigned __int8 a2, __int16 a3) {
    int address = 0x4d7070;
    CImage ** result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
CThingy * ISCRIPT_CreateSprite(CImage *image, unsigned __int16 sprite_id, int x, int y, char elevation_level) {
    int address = 0x4d7120;
    CThingy * result_;
    __asm {
        xor eax, eax
        push dword ptr elevation_level
        push dword ptr y
        push dword ptr x
        push dword ptr sprite_id
        mov eax, image
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (*LoadImageData)(), LoadImageData, 0x4d7180);
DECL_FUNC(void (*LoadInitIscriptBIN)(), LoadInitIscriptBIN, 0x4d7390);
DECL_FUNC(void (__thiscall*BWFXN_PlayIscript)(CImage *image, IScriptProgramState *program_state, int noop, _DWORD *distance_moved), BWFXN_PlayIscript, 0x4d74c0);
void PlayIscriptAnim(CImage *image, Anims new_animation) {
    int address = 0x4d8470;
    __asm {
        push dword ptr new_animation
        mov ecx, image
        call address
    }
}
void PlayWarpInOverlay(CImage *image) {
    int address = 0x4d8500;
    __asm {
        mov eax, image
        call address
    }
}
DECL_FUNC(void (__fastcall*iscriptSomething_Death)(CImage *image), iscriptSomething_Death, 0x4d8590);
BOOL sub_4D8600(char a1) {
    int address = 0x4d8600;
    BOOL result_;
    __asm {
        xor eax, eax
        mov al, a1
        call address
        mov result_, eax
    }
    return result_;
}
unsigned creditsSetDisplayTime(const char *a1) {
    int address = 0x4d8620;
    unsigned result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
unsigned creditsSetFadeSpeed(const char *a1) {
    int address = 0x4d8660;
    unsigned result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int sub_4D86A0(char **tag, _DWORD *is_tag) {
    int address = 0x4d86a0;
    int result_;
    __asm {
        xor eax, eax
        mov esi, is_tag
        mov ebx, tag
        call address
        mov result_, eax
    }
    return result_;
}
int sub_4D8780(dialog *a1) {
    int address = 0x4d8780;
    int result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
void creditsDlgDestroy(dialog *a1) {
    int address = 0x4d8790;
    __asm {
        mov eax, a1
        call address
    }
}
void sub_4D8840(int a1, char *source) {
    int address = 0x4d8840;
    __asm {
        push dword ptr source
        mov eax, a1
        call address
    }
}
void creditsEndPage(dialog *a1) {
    int address = 0x4d88d0;
    __asm {
        mov ebx, a1
        call address
    }
}
DECL_FUNC(void (__fastcall*sub_4D8930)(dialog *dlg, int x, int y, rect *dst), sub_4D8930, 0x4d8930);
HANDLE creditsSetBackgroundImageFromFile(const char *a1, dialog *a2) {
    int address = 0x4d8970;
    HANDLE result_;
    __asm {
        xor eax, eax
        mov edi, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void creditsSetFontColorFromFile(const char *a1) {
    int address = 0x4d8a10;
    __asm {
        mov eax, a1
        call address
    }
}
int runCreditsScriptCommands(char *tag, unsigned int a2, dialog *a3) {
    int address = 0x4d8a80;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        mov eax, a2
        mov ecx, tag
        call address
        mov result_, eax
    }
    return result_;
}
signed runCredits(dialog *a1) {
    int address = 0x4d8bd0;
    signed result_;
    __asm {
        xor eax, eax
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed creditsDlgInit(dialog *a1) {
    int address = 0x4d8c60;
    signed result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int credits_idle(dialog *a1) {
    int address = 0x4d8cd0;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed credits_keyDwn(dialog *a1, dlgEvent *a2) {
    int address = 0x4d8d20;
    signed result_;
    __asm {
        xor eax, eax
        mov eax, a2
        mov ecx, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__fastcall*creditsDlgInteract)(dialog *dlg, struct dlgEvent *evt), creditsDlgInteract, 0x4d8d60);
void loadInitCreditsBIN(const char *a1) {
    int address = 0x4d8df0;
    __asm {
        mov eax, a1
        call address
    }
}
void sub_4D8F90(int a1, EstablishingShot *a2) {
    int address = 0x4d8f90;
    __asm {
        mov ecx, a2
        mov eax, a1
        call address
    }
}
DECL_FUNC(void (*BeginCredits)(void), BeginCredits, 0x4d8fd0);
DECL_FUNC(void (*BeginEpilog)(void), BeginEpilog, 0x4d90c0);
DECL_FUNC(void (__cdecl*DisplayMissionEpilog)(), DisplayMissionEpilog, 0x4d91b0);
DECL_FUNC(void (__cdecl*DisplayEstablishingShot)(), DisplayEstablishingShot, 0x4d9200);
DECL_FUNC(int (*sub_4D9250)(), sub_4D9250, 0x4d9250);
DECL_FUNC(DWORD (*sub_4D9260)(), sub_4D9260, 0x4d9260);
void lmissionInitSelf(GamePosition a1) {
    int address = 0x4d9270;
    __asm {
        xor eax, eax
        mov ax, a1
        call address
    }
}
DECL_FUNC(DWORD (*resetLastInputFrameCounts)(), resetLastInputFrameCounts, 0x4d92a0);
unsigned sub_4D9360(int a1) {
    int address = 0x4d9360;
    unsigned result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (*sub_4D93B0)(), sub_4D93B0, 0x4d93b0);
DECL_FUNC(void (__cdecl*updateHUDInformation)(), updateHUDInformation, 0x4d93f0);
DECL_FUNC(void (__cdecl*RefreshAllUnits)(), RefreshAllUnits, 0x4d9460);
DECL_FUNC(void (*GameLoop)(), GameLoop, 0x4d94b0);
DECL_FUNC(void (*DoGameLoop)(), DoGameLoop, 0x4d9530);
DECL_FUNC(int (__thiscall*GameLoopWaitSendTurn)(int *this_), GameLoopWaitSendTurn, 0x4d9550);
DECL_FUNC(int (__thiscall*GameLoop_State)(void *a1), GameLoop_State, 0x4d9670);
DECL_FUNC(void (*GameLoop_Top)(), GameLoop_Top, 0x4d9840);
DECL_FUNC(GamePosition (*BeginGame)(), BeginGame, 0x4d9950);
DECL_FUNC(int (*sub_4D9AA0)(), sub_4D9AA0, 0x4d9aa0);
DECL_FUNC(int (*sub_4D9AB0)(), sub_4D9AB0, 0x4d9ab0);
DECL_FUNC(void (__fastcall*DestroyFontKey)(bool exit_code), DestroyFontKey, 0x4d9ac0);
DECL_FUNC(void (*DetectExpansionInstallation)(), DetectExpansionInstallation, 0x4d9b10);
void ClearAndFreeCdkeyStrings(const char *cdkeyowner, const char *cdkey) {
    int address = 0x4d9b50;
    __asm {
        mov esi, cdkey
        mov edi, cdkeyowner
        call address
    }
}
int KeyIsValid(unsigned int a1, int a2) {
    int address = 0x4d9ba0;
    int result_;
    __asm {
        xor eax, eax
        mov esi, a2
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
int * getCDKeyInfo(void **a1, int *a2) {
    int address = 0x4d9bf0;
    int * result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov ebx, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(DWORD (*makeStringHash)(), makeStringHash, 0x4d9cd0);
BOOL KeyVerification(char *a1, const char *a2) {
    int address = 0x4d9d60;
    BOOL result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (*InitializeFontKey)(void), InitializeFontKey, 0x4d9eb0);
DECL_FUNC(void (__fastcall*FreeLocalDLL)(bool exit_code), FreeLocalDLL, 0x4d9fc0);
BOOL dlgCenterScreen(HWND a1) {
    int address = 0x4d9fe0;
    BOOL result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__fastcall*FreeMapdataTable)(bool exit_code), FreeMapdataTable, 0x4da060);
DECL_FUNC(void (*sub_4DA120)(), sub_4DA120, 0x4da120);
char * strTokenize(const char *a1) {
    int address = 0x4da130;
    char * result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int sub_4DA1D0(const char *a1) {
    int address = 0x4da1d0;
    int result_;
    __asm {
        xor eax, eax
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(HANDLE (*sub_4DA230)(), sub_4DA230, 0x4da230);
DECL_FUNC(HANDLE (*sub_4DA240)(), sub_4DA240, 0x4da240);
DECL_FUNC(HANDLE (*sub_4DA250)(), sub_4DA250, 0x4da250);
DECL_FUNC(BOOL (__fastcall*SFileExists)(char *szFileName, HANDLE hMpq), SFileExists, 0x4da260);
DECL_FUNC(HANDLE (*sub_4DA290)(), sub_4DA290, 0x4da290);
DECL_FUNC(void (__fastcall*CloseAllArchives)(bool exit_code), CloseAllArchives, 0x4da2b0);
DECL_FUNC(void (__fastcall*vidinimoDestroy)(bool exit_code), vidinimoDestroy, 0x4da310);
DECL_FUNC(BOOL (__stdcall*LocalErrProc)(HWND a1, UINT a2, WPARAM a3, LPARAM a4), LocalErrProc, 0x4da350);
HANDLE sub_4DA3E0(DWORD a1, void *a2, const char *a3, HANDLE hMpq) {
    int address = 0x4da3e0;
    HANDLE result_;
    __asm {
        xor eax, eax
        push dword ptr hMpq
        mov esi, a3
        mov ecx, a2
        mov edx, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*LoadMainModuleStringInfo)(), LoadMainModuleStringInfo, 0x4da440);
DECL_FUNC(void (__fastcall*DestroyFonts)(bool exit_code), DestroyFonts, 0x4da510);
HANDLE LoadInstallArchiveHD(const char *a1, char *a2, const char *hMpq, HANDLE phFile) {
    int address = 0x4da550;
    HANDLE result_;
    __asm {
        xor eax, eax
        push dword ptr phFile
        push dword ptr hMpq
        mov esi, a2
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
HANDLE LoadArchiveFromCD(int a1, char *a2, DWORD dwPriority, char *szFileName) {
    int address = 0x4da5e0;
    HANDLE result_;
    __asm {
        xor eax, eax
        push dword ptr szFileName
        push dword ptr dwPriority
        mov edi, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
HANDLE LoadInstallArchiveCD(DWORD a1, const char *a2, const char *filename) {
    int address = 0x4da6d0;
    HANDLE result_;
    __asm {
        xor eax, eax
        mov esi, filename
        mov ebx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__fastcall*j_BWFXN_DSoundDestroy)(bool exit_code), j_BWFXN_DSoundDestroy, 0x4da780);
DECL_FUNC(int (*sub_4DA790)(), sub_4DA790, 0x4da790);
void localDll_Init(HINSTANCE a1) {
    int address = 0x4da7d0;
    __asm {
        mov esi, a1
        call address
    }
}
DECL_FUNC(void (__cdecl*CommandLineCheck)(), CommandLineCheck, 0x4da8a0);
signed InitializeCDArchives(const char *filename, int a2) {
    int address = 0x4da950;
    signed result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, filename
        call address
        mov result_, eax
    }
    return result_;
}
void DataVersionCheck(const char *data_file_version) {
    int address = 0x4daa60;
    __asm {
        mov ebx, data_file_version
        call address
    }
}
DECL_FUNC(Font * (__fastcall*AllocateFont)(char *font_path, int default_value, int a3, int a4, int search_scope, char *logfilename, int logline), AllocateFont, 0x4dab00);
DECL_FUNC(int (*InitializeArchiveHandles)(), InitializeArchiveHandles, 0x4dabd0);
DECL_FUNC(void (*LoadGameFonts)(), LoadGameFonts, 0x4dae50);
DECL_FUNC(void (*LoadMenuFonts)(), LoadMenuFonts, 0x4daec0);
DECL_FUNC(void (__cdecl*PreInitData)(), PreInitData, 0x4daf30);
DECL_FUNC(void (__cdecl*audioVideoInit)(), audioVideoInit, 0x4db060);
BOOL gluMainDestroy(dialog *a1) {
    int address = 0x4db140;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__thiscall*expansion_cd_archive_loaded)(void *this_), expansion_cd_archive_loaded, 0x4db180);
DECL_FUNC(int (__thiscall*vanilla_cd_archive_loaded)(void *this_), vanilla_cd_archive_loaded, 0x4db1c0);
DECL_FUNC(signed (__cdecl*loadCampaignBIN)(), loadCampaignBIN, 0x4db200);
DECL_FUNC(int (__fastcall*sub_4DB260)(const char *a1, int a2, int *a3, int a4, int a5), sub_4DB260, 0x4db260);
void gluMainCreate(dialog *dlg) {
    int address = 0x4db280;
    __asm {
        mov eax, dlg
        call address
    }
}
void gluMain_CustomCtrlID(dialog *a1) {
    int address = 0x4db480;
    __asm {
        mov eax, a1
        call address
    }
}
signed loadStareditProcess(dialog *a1) {
    int address = 0x4db490;
    signed result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
BOOL cmpgn_WaitForCDRom(GluAllTblEntry a1, char *filename) {
    int address = 0x4db5c0;
    BOOL result_;
    __asm {
        xor eax, eax
        xor edi, edi
        mov esi, filename
        mov di, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(BOOL (__thiscall*sub_4DB6A0)(void *this_), sub_4DB6A0, 0x4db6a0);
DECL_FUNC(BOOL (__thiscall*sub_4DB6C0)(void *this_), sub_4DB6C0, 0x4db6c0);
DECL_FUNC(int (*SelGameMode)(int a1), SelGameMode, 0x4db6e0);
DECL_FUNC(BOOL (*gluMain_DisplayCDRomErrorBinDlg)(), gluMain_DisplayCDRomErrorBinDlg, 0x4db770);
DECL_FUNC(int (__fastcall*gluMain_Dlg_Interact)(dialog *dlg, struct dlgEvent *evt), gluMain_Dlg_Interact, 0x4db7a0);
DECL_FUNC(void (*loadMenu_gluMain)(), loadMenu_gluMain, 0x4db930);
DECL_FUNC(int (__stdcall*append_melee_computer)(char a1), append_melee_computer, 0x4dbb70);
DECL_FUNC(int (*sub_4DBBC0)(), sub_4DBBC0, 0x4dbbc0);
DECL_FUNC(PlayerType * (*ClearMeleeCompSlots)(), ClearMeleeCompSlots, 0x4dbbe0);
DECL_FUNC(BYTE (*setSinglePlayerValue)(), setSinglePlayerValue, 0x4dbc00);
CampaignMenuEntry * getCampaignIndex(MapData a1, CampaignMenuEntry **a2) {
    int address = 0x4dbc20;
    CampaignMenuEntry * result_;
    __asm {
        xor eax, eax
        xor edi, edi
        mov esi, a2
        mov di, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__thiscall*parseCmpgnCheatTypeString)(const char *campaign_index, int race, int first_mission_index, int is_expansion, MapData4 *a5), parseCmpgnCheatTypeString, 0x4dbc60);
signed sub_4DBD20(const char *a1, size_t a2, int *a3) {
    int address = 0x4dbd20;
    signed result_;
    __asm {
        xor eax, eax
        mov esi, a3
        mov edi, a2
        mov ebx, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__cdecl*updateActiveCampaignMission)(), updateActiveCampaignMission, 0x4dbd60);
CampaignMenuEntry * sub_4DBDA0(const char *a1) {
    int address = 0x4dbda0;
    CampaignMenuEntry * result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(signed (*sub_4DBE50)(), sub_4DBE50, 0x4dbe50);
DECL_FUNC(signed (*initSingle)(), initSingle, 0x4dbea0);
DECL_FUNC(void (*playActiveCinematic)(), playActiveCinematic, 0x4dbec0);
void sub_4DBEE0(CampaignMenuEntry *a1) {
    int address = 0x4dbee0;
    __asm {
        mov edi, a1
        call address
    }
}
DECL_FUNC(void (__cdecl*sub_4DBF80)(), sub_4DBF80, 0x4dbf80);
int CreateCampaignGame(MapData a1) {
    int address = 0x4dbfc0;
    int result_;
    __asm {
        xor eax, eax
        mov ax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int LoadCampaignWithCharacter(int race) {
    int address = 0x4dc0b0;
    int result_;
    __asm {
        xor eax, eax
        mov edi, race
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__cdecl*CreateNextCampaignGame)(), CreateNextCampaignGame, 0x4dc1c0);
DECL_FUNC(signed (__stdcall*ContinueCampaign)(int a1), ContinueCampaign, 0x4dc320);
unsigned RandomizeShort(int a1) {
    int address = 0x4dc4a0;
    unsigned result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__stdcall*sub_4DC4E0)(int a1), sub_4DC4E0, 0x4dc4e0);
DECL_FUNC(int (*sub_4DC510)(), sub_4DC510, 0x4dc510);
DECL_FUNC(unsigned (*sub_4DC520)(), sub_4DC520, 0x4dc520);
unsigned sub_4DC530(unsigned int result) {
    int address = 0x4dc530;
    unsigned result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__thiscall*SetInGameLoop)(int this_), SetInGameLoop, 0x4dc540);
unsigned RandBetween(int a1, unsigned int a2, int a3) {
    int address = 0x4dc550;
    unsigned result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        mov edx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__cdecl*BWFXN_NetSelectReturnMenu)(), BWFXN_NetSelectReturnMenu, 0x4dc5b0);
void ContinueCampaignWithLevelCheat(MapData4 result, int a2, int race) {
    int address = 0x4dc630;
    __asm {
        mov ecx, race
        mov edx, a2
        mov eax, result
        call address
    }
}
DECL_FUNC(void (*sub_4DC650)(), sub_4DC650, 0x4dc650);
DECL_FUNC(void (__thiscall*sub_4DC660)(_DWORD *this_), sub_4DC660, 0x4dc660);
int sub_4DC670(size_t eax0, int a2) {
    int address = 0x4dc670;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, eax0
        call address
        mov result_, eax
    }
    return result_;
}
int sub_4DC6A0(size_t eax0, int a2) {
    int address = 0x4dc6a0;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, eax0
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(BOOL (__stdcall*EnumFunc)(HWND a1, LPARAM a2), EnumFunc, 0x4dc6d0);
DECL_FUNC(void (__fastcall*DestroyGluAllStrings)(bool exit_code), DestroyGluAllStrings, 0x4dc720);
int getBGPalInfo(MenuPosition a1) {
    int address = 0x4dc750;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
_DWORD * sub_4DC7D0(_DWORD *result) {
    int address = 0x4dc7d0;
    _DWORD * result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
int sub_4DC800(_DWORD *a1, void *a2, _DWORD *a3) {
    int address = 0x4dc800;
    int result_;
    __asm {
        xor eax, eax
        mov ecx, a3
        mov edx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
_DWORD * sub_4DC840(_DWORD *result, _DWORD *a2, const void *a3) {
    int address = 0x4dc840;
    _DWORD * result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        mov ecx, a2
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_4DC870)(), sub_4DC870, 0x4dc870);
DECL_FUNC(void (__cdecl*sub_4DC8D0)(), sub_4DC8D0, 0x4dc8d0);
DECL_FUNC(void * (*sub_4DC8F0)(), sub_4DC8F0, 0x4dc8f0);
DECL_FUNC(grpHead * (*sub_4DC940)(), sub_4DC940, 0x4dc940);
DECL_FUNC(int (__thiscall*cleanUpFileNameString)(char *a1), cleanUpFileNameString, 0x4dca20);
void sub_4DCB00(char *a1, char *a2) {
    int address = 0x4dcb00;
    __asm {
        mov eax, a2
        mov ecx, a1
        call address
    }
}
DECL_FUNC(BOOL (__thiscall*sub_4DCBD0)(void *this_), sub_4DCBD0, 0x4dcbd0);
Timer * DestroyChildren(dialog *a1) {
    int address = 0x4dcc00;
    Timer * result_;
    __asm {
        xor eax, eax
        mov ebx, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__cdecl*nextLeaveGameMenu)(), nextLeaveGameMenu, 0x4dcc50);
DECL_FUNC(void (*loadMenu_None)(), loadMenu_None, 0x4dcc90);
DECL_FUNC(void (__fastcall*DLGSwishOutProc)(dialog *a1, __int16 a2), DLGSwishOutProc, 0x4dcd00);
DECL_FUNC(void (__fastcall*sub_4DCEA0)(dialog *a1, __int16 a2), sub_4DCEA0, 0x4dcea0);
DECL_FUNC(BYTE (*sub_4DCEE0)(), sub_4DCEE0, 0x4dcee0);
void setDialogString(dialog *a1, __int16 a2, const char *a3) {
    int address = 0x4dcf30;
    __asm {
        xor ecx, ecx
        mov edi, a3
        mov cx, a2
        mov eax, a1
        call address
    }
}
DECL_FUNC(void (__cdecl*changeMenu)(), changeMenu, 0x4dcfa0);
DECL_FUNC(char (__stdcall*DLG_SwishOut)(dialog *dlg), DLG_SwishOut, 0x4dd040);
DECL_FUNC(void (__cdecl*jmpNoMenu)(), jmpNoMenu, 0x4dd1c0);
DECL_FUNC(void (__stdcall*buttonMouseOver)(int a1), buttonMouseOver, 0x4dd1d0);
DECL_FUNC(void (__fastcall*DLG_SwishInLock)(dialog *a1, __int16 a2), DLG_SwishInLock, 0x4dd220);
void DLG_ServerMenuSwishBegin(int a1, dialog *a2, int a3) {
    int address = 0x4dd540;
    __asm {
        push dword ptr a3
        mov esi, a2
        mov edx, a1
        call address
        add esp, 4
    }
}
void DlgSwooshin(__int16 timers_count, swishTimer *timers, dialog *a3, signed __int16 a4) {
    int address = 0x4dd5e0;
    __asm {
        xor eax, eax
        push dword ptr a4
        push dword ptr a3
        mov ecx, timers
        mov ax, timers_count
        call address
    }
}
DECL_FUNC(void (*loadTFontPcx)(void), loadTFontPcx, 0x4dd850);
DECL_FUNC(void (*loadtEffectPcx)(void), loadtEffectPcx, 0x4dd910);
void registerMenuFunctions(FnInteract *functions, dialog *a2, int functions_size_, int a4) {
    int address = 0x4dd9e0;
    __asm {
        push dword ptr a4
        push dword ptr functions_size_
        push dword ptr a2
        mov eax, functions
        call address
    }
}
DECL_FUNC(dialog * (__fastcall*loadFullMenuDLG)(const char *szFileName, void *buffer, int read, const char *logfilename, int logline), loadFullMenuDLG, 0x4ddbe0);
DECL_FUNC(dialog * (__thiscall*loadAndInitFullMenuDLG)(const char *this_), loadAndInitFullMenuDLG, 0x4ddcf0);
DECL_FUNC(const char * (__stdcall*get_GluAll_String)(GluAllTblEntry tbl_entry), get_GluAll_String, 0x4ddd30);
void sub_4DDE70(dialog *a1) {
    int address = 0x4dde70;
    __asm {
        mov edi, a1
        call address
    }
}
DECL_FUNC(void (__cdecl*loadDlgGrp)(), loadDlgGrp, 0x4ddf00);
DECL_FUNC(void (*loadCursor)(void), loadCursor, 0x4ddf90);
DECL_FUNC(char (__fastcall*sub_4DE040)(dialog *dlg, struct dlgEvent *evt), sub_4DE040, 0x4de040);
DECL_FUNC(void (*init_gluesounds)(void), init_gluesounds, 0x4de0b0);
DECL_FUNC(void (*sub_4DE130)(), sub_4DE130, 0x4de130);
DECL_FUNC(void (__fastcall*DLGSwishInProc)(dialog *a1, __int16 a2), DLGSwishInProc, 0x4de140);
void DLG_SwishIn(dialog *a1) {
    int address = 0x4de150;
    __asm {
        mov ebx, a1
        call address
    }
}
DECL_FUNC(void (__cdecl*SwitchMenu)(), SwitchMenu, 0x4de200);
signed replayCommand(const char *a1) {
    int address = 0x4de6a0;
    signed result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(unsigned (__stdcall*sub_4DE740)(int a1), sub_4DE740, 0x4de740);
DECL_FUNC(DWORD (*sub_4DE770)(), sub_4DE770, 0x4de770);
DECL_FUNC(int (*sub_4DE790)(), sub_4DE790, 0x4de790);
DECL_FUNC(void (__cdecl*freeChkFileMem)(), freeChkFileMem, 0x4de7a0);
BOOL sub_4DE7D0(const CHAR *a1) {
    int address = 0x4de7d0;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed trimTrailingSpaces(const char *a1) {
    int address = 0x4de7e0;
    signed result_;
    __asm {
        xor eax, eax
        mov edx, a1
        call address
        mov result_, eax
    }
    return result_;
}
_BYTE * sub_4DE810(DWORD a1, CHAR *a2) {
    int address = 0x4de810;
    _BYTE * result_;
    __asm {
        xor eax, eax
        mov esi, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
_DWORD * sub_4DE840(_DWORD *result) {
    int address = 0x4de840;
    _DWORD * result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
_DWORD * sub_4DE860(_DWORD *result) {
    int address = 0x4de860;
    _DWORD * result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_4DE880)(), sub_4DE880, 0x4de880);
DECL_FUNC(MapData (*sub_4DE890)(), sub_4DE890, 0x4de890);
DECL_FUNC(int (*get_replay_seed)(), get_replay_seed, 0x4de8a0);
int set_replay_seed(int result) {
    int address = 0x4de8b0;
    int result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_4DE8C0)(), sub_4DE8C0, 0x4de8c0);
DECL_FUNC(int (*sub_4DE8D0)(), sub_4DE8D0, 0x4de8d0);
int sub_4DE8E0(int result) {
    int address = 0x4de8e0;
    int result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
struct_v2 * sub_4DE8F0(struct_v2 *result) {
    int address = 0x4de8f0;
    struct_v2 * result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
struct_v2 * sub_4DE920(struct_v2 *result) {
    int address = 0x4de920;
    struct_v2 * result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
void getReplPlayerColors(int *result) {
    int address = 0x4de950;
    __asm {
        mov eax, result
        call address
    }
}
void getReplPlayerStructs(PlayerInfo *a1) {
    int address = 0x4de9a0;
    __asm {
        mov eax, a1
        call address
    }
}
void copyPlayerStructsToReplayPlayerStructs(PlayerInfo *players_info, void *a2) {
    int address = 0x4de9d0;
    __asm {
        mov edx, a2
        mov eax, players_info
        call address
    }
}
void SetReplayData(GameData *a1, PlayerInfo *a2, int *a3) {
    int address = 0x4dea10;
    __asm {
        mov ebx, a3
        mov edx, a2
        mov eax, a1
        call address
    }
}
DECL_FUNC(DWORD (*sub_4DEA90)(), sub_4DEA90, 0x4dea90);
DECL_FUNC(ButtonState (__fastcall*BTNSCOND_ReplayPlayPause)(u16 variable, int player_id, CUnit *unit), BTNSCOND_ReplayPlayPause, 0x4deac0);
DECL_FUNC(ButtonState (__fastcall*BTNSCOND_ReplaySpeedUp)(u16 variable, int player_id, CUnit *unit), BTNSCOND_ReplaySpeedUp, 0x4deaf0);
DECL_FUNC(ButtonState (__fastcall*BTNSCOND_ReplaySlowDown)(u16 variable, int player_id, CUnit *unit), BTNSCOND_ReplaySlowDown, 0x4deb40);
void SetGameSpeed_maybe(int game_speed, unsigned __int8 a2, unsigned int speed_multiplier) {
    int address = 0x4deb90;
    __asm {
        xor edx, edx
        mov ecx, speed_multiplier
        mov dl, a2
        mov eax, game_speed
        call address
    }
}
DECL_FUNC(void (__stdcall*sub_4DECF0)(unsigned __int8 a1), sub_4DECF0, 0x4decf0);
DECL_FUNC(void (*sub_4DED10)(), sub_4DED10, 0x4ded10);
DECL_FUNC(signed (__stdcall*CopyLastReplay)(char *a1), CopyLastReplay, 0x4ded30);
int sub_4DEE90(DWORD a1, const char *a2) {
    int address = 0x4dee90;
    int result_;
    __asm {
        xor eax, eax
        mov esi, a2
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__cdecl*replayFrameComputation)(), replayFrameComputation, 0x4deed0);
int getDirectoryPath(CHAR *a1, DWORD esi0, const char *a3) {
    int address = 0x4def80;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        mov esi, esi0
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
Timer * saveGame_Destroy(dialog *a1) {
    int address = 0x4df000;
    Timer * result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(HANDLE (__stdcall*GetReplayFileList)(void (__fastcall *a1)(_DWORD, _DWORD, _DWORD)), GetReplayFileList, 0x4df0b0);
int sub_4DF1E0(const char *a1) {
    int address = 0x4df1e0;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*DeleteFileIfExists)(), DeleteFileIfExists, 0x4df220);
DECL_FUNC(void (__fastcall*CMDACT_IncreaseReplaySpeed)(int a1, bool a2), CMDACT_IncreaseReplaySpeed, 0x4df260);
DECL_FUNC(void (__fastcall*CMDACT_SetReplaySpeed)(int action_variable, bool is_shift_used), CMDACT_SetReplaySpeed, 0x4df2c0);
DECL_FUNC(void (__fastcall*CMDACT_DecreaseReplaySpeed)(int a1, bool a2), CMDACT_DecreaseReplaySpeed, 0x4df300);
DECL_FUNC(signed (*replay_leaderboard_Hide)(), replay_leaderboard_Hide, 0x4df360);
DECL_FUNC(signed (__thiscall*replay_leaderboard_Show)(void *this_), replay_leaderboard_Show, 0x4df3b0);
void sub_4DF4A0(dialog *a1) {
    int address = 0x4df4a0;
    __asm {
        mov eax, a1
        call address
    }
}
DECL_FUNC(void (__thiscall*sub_4DF520)(dialog *this_), sub_4DF520, 0x4df520);
int LoadReplayFile(char *filename, int *a2) {
    int address = 0x4df570;
    int result_;
    __asm {
        xor eax, eax
        mov edi, a2
        mov eax, filename
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__fastcall*savegame_Delete)(dialog *a1, dlgEvent *a2), savegame_Delete, 0x4df6d0);
void sub_4DF740(dialog *a1, struct dlgEvent *evt) {
    int address = 0x4df740;
    __asm {
        push dword ptr evt
        mov edi, a1
        call address
    }
}
DECL_FUNC(u8 (__stdcall*ReplayFileListIterateItemProc)(char *a1), ReplayFileListIterateItemProc, 0x4df880);
DECL_FUNC(int (__fastcall*savegame_TextBox)(dialog *dlg, dlgEvent *evt), savegame_TextBox, 0x4df8a0);
void createReplayListbox(dialog *a1) {
    int address = 0x4df950;
    __asm {
        mov edi, a1
        call address
    }
}
DECL_FUNC(int (__fastcall*savegame_Listbox)(dialog *dlg, dlgEvent *evt), savegame_Listbox, 0x4df9e0);
int saveGame_InitChildren(dialog *dlg) {
    int address = 0x4dfa30;
    int result_;
    __asm {
        xor eax, eax
        mov eax, dlg
        call address
        mov result_, eax
    }
    return result_;
}
void savegameBIN_CustomCtrlID(dialog *a1) {
    int address = 0x4dfa90;
    __asm {
        mov esi, a1
        call address
    }
}
int SaveReplay(const char *a1, int a2) {
    int address = 0x4dfab0;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int ConfirmReplayOverwrite(char *filename, __int16 a2) {
    int address = 0x4dfc80;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, filename
        call address
        mov result_, eax
    }
    return result_;
}
int CopyLastReplayTo(char *a1) {
    int address = 0x4dfd70;
    int result_;
    __asm {
        xor eax, eax
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
void saveGame_Create(dialog *dlg) {
    int address = 0x4dfdd0;
    __asm {
        mov eax, dlg
        call address
    }
}
DECL_FUNC(int (__fastcall*savegameBIN_Main)(dialog *dlg, struct dlgEvent *evt), savegameBIN_Main, 0x4dfef0);
int LoadSaveGameBIN_Main(int a1, RaceId a2) {
    int address = 0x4dffc0;
    int result_;
    __asm {
        xor eax, eax
        xor ecx, ecx
        mov cl, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*BWSetSecurityInfo)(), BWSetSecurityInfo, 0x4e0200);
DECL_FUNC(DWORD (__stdcall*CheckForOtherInstances)(LPCSTR lpClassName), CheckForOtherInstances, 0x4e0380);
DECL_FUNC(int (*VerifySystemMemory)(), VerifySystemMemory, 0x4e0440);
DECL_FUNC(void (__cdecl*CreateMainWindow)(), CreateMainWindow, 0x4e05b0);
DECL_FUNC(void (*GameRun)(), GameRun, 0x4e0710);
DECL_FUNC(void (__cdecl*GameMainLoop)(), GameMainLoop, 0x4e0820);
DECL_FUNC(int (__stdcall*_WinMain)(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nShowCmd), _WinMain, 0x4e0ae0);
DECL_FUNC(int (__fastcall*sub_4E0B30)(dialog *a1, dlgEvent *a2), sub_4E0B30, 0x4e0b30);
__int16 genericLightupBtnUserDestroyEventHandler(dialog *a1) {
    int address = 0x4e0b80;
    __int16 result_;
    __asm {
        xor eax, eax
        mov edi, a1
        call address
        mov result_, ax
    }
    return result_;
}
int sub_4E0BE0(dialog *a1, dialog *a2, rect *a3, int a4, int a5) {
    int address = 0x4e0be0;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a5
        push dword ptr a4
        mov ecx, a3
        mov edx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_4E0D10)(), sub_4E0D10, 0x4e0d10);
void genericLightupBtnMouseUpdate(dlgEvent *a1, rect *a2, dialog *a3) {
    int address = 0x4e0d40;
    __asm {
        mov esi, a3
        mov ebx, a2
        mov eax, a1
        call address
    }
}
void activateDialog(dialog *a1) {
    int address = 0x4e0dd0;
    __asm {
        mov esi, a1
        call address
    }
}
void sub_4E0E40(dialog *result) {
    int address = 0x4e0e40;
    __asm {
        mov eax, result
        call address
    }
}
DECL_FUNC(void (__fastcall*PlayVideoFrame)(dialog *a1, __int16 a2), PlayVideoFrame, 0x4e0f50);
void sub_4E1020(dialog *a1, char a2) {
    int address = 0x4e1020;
    __asm {
        push dword ptr a2
        mov eax, a1
        call address
    }
}
void AnimateVideos(dialog *result) {
    int address = 0x4e10f0;
    __asm {
        mov eax, result
        call address
    }
}
DECL_FUNC(void (__fastcall*sub_4E1120)(dialog *dlg, int x, int y, rect *dst), sub_4E1120, 0x4e1120);
DECL_FUNC(void (__fastcall*genericLightupBtnUpdate)(dialog *dlg, int x, int y, rect *dst), genericLightupBtnUpdate, 0x4e1180);
void MenuGenericBtnInitChildren(dialog *dlg) {
    int address = 0x4e1220;
    __asm {
        mov eax, dlg
        call address
    }
}
BOOL PlayVidInRect(int a1) {
    int address = 0x4e1260;
    BOOL result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
int MenuGenericBtnUserEventHandler(dialog *a1, dlgEvent *a2) {
    int address = 0x4e1390;
    int result_;
    __asm {
        xor eax, eax
        mov edx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void ButtonVideo(dialog *a1) {
    int address = 0x4e14a0;
    __asm {
        mov edi, a1
        call address
    }
}
DECL_FUNC(int (__fastcall*Menu_Generic_Button)(dialog *dlg, dlgEvent *evt), Menu_Generic_Button, 0x4e1560);
unsigned sub_4E1640(dialog *a1, dlgEvent *a2) {
    int address = 0x4e1640;
    unsigned result_;
    __asm {
        xor eax, eax
        mov esi, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int genericLightupBtnUserEventHandler(dlgEvent *a1, dialog *a2) {
    int address = 0x4e1670;
    int result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__fastcall*gluRdyZ_Secret)(dialog *dlg, dlgEvent *evt), gluRdyZ_Secret, 0x4e17a0);
DECL_FUNC(int (__fastcall*genericLightupBtnInteract)(dialog *dlg, struct dlgEvent *evt), genericLightupBtnInteract, 0x4e17e0);
dialog * sub_4E18C0(dialog *a1) {
    int address = 0x4e18c0;
    dialog * result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
dialog * sub_4E1900(dialog *a1) {
    int address = 0x4e1900;
    dialog * result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void GenericControlMouseEvt(dlgEvent *a1, dialog *a2) {
    int address = 0x4e1970;
    __asm {
        mov esi, a2
        mov ecx, a1
        call address
    }
}
void removeDlgFromTimerTracking1(dialog *a1) {
    int address = 0x4e19f0;
    __asm {
        mov esi, a1
        call address
    }
}
unsigned GenericControlInteract(dialog *a1, dlgEvent *a2) {
    int address = 0x4e1a70;
    unsigned result_;
    __asm {
        xor eax, eax
        mov ebx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(bool (__fastcall*genericCheckboxInteract)(dialog *dlg, struct dlgEvent *evt), genericCheckboxInteract, 0x4e1b50);
DECL_FUNC(bool (__fastcall*genericOptionInteract)(dialog *dlg, struct dlgEvent *evt), genericOptionInteract, 0x4e1bc0);
DECL_FUNC(bool (__fastcall*genericBtnInteract)(dialog *dlg, struct dlgEvent *evt), genericBtnInteract, 0x4e1c20);
u8 * BWFXN_Draw(unsigned __int16 a1, int a2, int a3, unsigned __int16 a4) {
    int address = 0x4e1c70;
    u8 * result_;
    __asm {
        xor eax, eax
        xor esi, esi
        push dword ptr a4
        push dword ptr a3
        push dword ptr a2
        mov si, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__stdcall*BWFXN_DrawBox)(s16 x, s16 y, u16 w, u16 h), BWFXN_DrawBox, 0x4e1d20);
DECL_FUNC(BOOL (__stdcall*CreatePath_PopulatePathAreas)(struct_a1_1 *a1), CreatePath_PopulatePathAreas, 0x4e1d90);
BOOL sub_4E2510(struct_a1_1 *a1) {
    int address = 0x4e2510;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
BOOL sub_4E25F0(struct_a1_1 *a1) {
    int address = 0x4e25f0;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed sub_4E2700(int a1, struct_a1_1 *a2, int a3, int a4) {
    int address = 0x4e2700;
    signed result_;
    __asm {
        xor eax, eax
        push dword ptr a4
        mov ecx, a3
        mov edx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(signed (*EndAreaFixup)(), EndAreaFixup, 0x4e27a0);
DECL_FUNC(int (__stdcall*AreaFixup_Constructor)(unsigned __int16 a1), AreaFixup_Constructor, 0x4e2820);
unsigned DoAreaFixup(unsigned int a1, __int16 a2, __int16 a3, int a4, int a5, int a6) {
    int address = 0x4e29b0;
    unsigned result_;
    __asm {
        xor eax, eax
        xor edx, edx
        xor ecx, ecx
        push dword ptr a6
        push dword ptr a5
        push dword ptr a4
        mov cx, a3
        mov dx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void upgradeAllUpgradesFromUnit(int a1, int (__stdcall *a2)(int, int, int, int), int a3) {
    int address = 0x4e2b50;
    __asm {
        push dword ptr a3
        push dword ptr a2
        mov ebx, a1
        call address
    }
}
void researchAllTechsFromUnit(int a1, int (__stdcall *a2)(int, int, int, int), int a3) {
    int address = 0x4e2c00;
    __asm {
        push dword ptr a3
        push dword ptr a2
        mov ebx, a1
        call address
    }
}
DECL_FUNC(int (__fastcall*sub_4E2CB0)(int a1, int a2), sub_4E2CB0, 0x4e2cb0);
DECL_FUNC(int (*somethingAIType)(void), somethingAIType, 0x4e2d30);
int CreateUnitHash(CUnit *a1) {
    int address = 0x4e2da0;
    int result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
bool * unpackUnitData(CUnit *a1, bool *a2) {
    int address = 0x4e2e20;
    bool * result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int packUnitData(CUnit *a1, int a2) {
    int address = 0x4e3410;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_4E3DC0)(), sub_4E3DC0, 0x4e3dc0);
void networkTBLPlayerMessage(int a1, __int16 a2) {
    int address = 0x4e3de0;
    __asm {
        xor ecx, ecx
        mov cx, a2
        mov eax, a1
        call address
    }
}
DECL_FUNC(void (__stdcall*CTF_FinishedCaptureFlagEvent)(int a1), CTF_FinishedCaptureFlagEvent, 0x4e3e90);
DECL_FUNC(void (__stdcall*sub_4E3F10)(int a1), sub_4E3F10, 0x4e3f10);
DECL_FUNC(void (__stdcall*CTF_TakeFlagEvent)(int a1), CTF_TakeFlagEvent, 0x4e3f30);
void orders_CTFCOP2(CUnit *unit) {
    int address = 0x4e3fb0;
    __asm {
        mov eax, unit
        call address
    }
}
DECL_FUNC(int (__fastcall*CTFCOP_CheckForFlagCapture)(CUnit *unit, CUnit *a2), CTFCOP_CheckForFlagCapture, 0x4e4130);
void orders_CTFCOP1(CUnit *a1) {
    int address = 0x4e41a0;
    __asm {
        mov esi, a1
        call address
    }
}
void orders_CTFCOP_init(CUnit *unit) {
    int address = 0x4e4210;
    __asm {
        mov eax, unit
        call address
    }
}
struct_path_related * toggleUnitPath(CUnit *a1) {
    int address = 0x4e42a0;
    struct_path_related * result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
_DWORD * getAllocatedPath(_WORD *a1, __int16 *a2) {
    int address = 0x4e42f0;
    _DWORD * result_;
    __asm {
        xor eax, eax
        mov esi, a2
        mov edx, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed sub_4E4380(Position *a1, int a2, Position a3) {
    int address = 0x4e4380;
    signed result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        mov edi, a2
        mov ebx, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed sub_4E44B0(signed int a1, Position *a2, signed int a3, Position a4) {
    int address = 0x4e44b0;
    signed result_;
    __asm {
        xor eax, eax
        push dword ptr a4
        mov ecx, a3
        mov edx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed sub_4E4520(CUnit *a1, Position *a2) {
    int address = 0x4e4520;
    signed result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
void sub_4E4590(dialog *dlg) {
    int address = 0x4e4590;
    __asm {
        mov eax, dlg
        call address
    }
}
void sub_4E4670(dialog *dlg) {
    int address = 0x4e4670;
    __asm {
        mov eax, dlg
        call address
    }
}
DECL_FUNC(void (__fastcall*sub_4E46A0)(dialog *dlg, int x, int y, rect *dst), sub_4E46A0, 0x4e46a0);
DECL_FUNC(void (__fastcall*sub_4E4750)(dialog *dlg, int x, int y, rect *dst), sub_4E4750, 0x4e4750);
DECL_FUNC(void (__fastcall*sub_4E4770)(dialog *dlg, int x, int y, rect *dst), sub_4E4770, 0x4e4770);
DECL_FUNC(void (*j_BWFXN_NextFrameHelperFunctionTarget)(), j_BWFXN_NextFrameHelperFunctionTarget, 0x4e4810);
DECL_FUNC(void (__fastcall*sub_4E4820)(dialog *dlg), sub_4E4820, 0x4e4820);
DECL_FUNC(int (__fastcall*dlgfatal_loop)(dialog *dlg, struct dlgEvent *evt), dlgfatal_loop, 0x4e4980);
void load_DLGFatal_BIN(const char *error_location, const char *a2) {
    int address = 0x4e4a10;
    __asm {
        mov ecx, a2
        mov eax, error_location
        call address
    }
}
BOOL isAttemptingProtossBuild(CUnit *a1) {
    int address = 0x4e4c40;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void orders_Warpin(CUnit *unit) {
    int address = 0x4e4c70;
    __asm {
        mov edi, unit
        call address
    }
}
void orders_ProbeBuild(CUnit *unit) {
    int address = 0x4e4d00;
    __asm {
        mov edi, unit
        call address
    }
}
void orders_pylon_build(CUnit *unit) {
    int address = 0x4e4f20;
    __asm {
        mov eax, unit
        call address
    }
}
void orders_bldgUnderConstruction_Protoss(CUnit *unit) {
    int address = 0x4e4f40;
    __asm {
        mov eax, unit
        call address
    }
}
DECL_FUNC(void (__stdcall*sub_4E51C0)(dialog *dlg, __int16 a2, unsigned __int16 a3), sub_4E51C0, 0x4e51c0);
DECL_FUNC(void (__cdecl*destroyStatsesBin)(), destroyStatsesBin, 0x4e5290);
void printStatresInfo(dialog *a1, __int16 a2, int a3, int a4, int a5) {
    int address = 0x4e52e0;
    __asm {
        push dword ptr a5
        push dword ptr a4
        push dword ptr a3
        push dword ptr a2
        mov ebx, a1
        call address
    }
}
void showSupplyInfo(dialog *a1, __int16 a2, unsigned __int16 a3, unsigned __int16 a4) {
    int address = 0x4e53b0;
    __asm {
        push dword ptr a4
        push dword ptr a3
        push dword ptr a2
        mov ebx, a1
        call address
    }
}
DECL_FUNC(void (__fastcall*statRes_Text_Update)(dialog *dlg, int x, int y, rect *dst), statRes_Text_Update, 0x4e5460);
DECL_FUNC(void (__stdcall*setCountdownTimerString)(char *source), setCountdownTimerString, 0x4e5590);
DECL_FUNC(void (*DisableCountdownTimer)(), DisableCountdownTimer, 0x4e5600);
DECL_FUNC(void (__fastcall*StatRes_MainProc)(dialog *a1, __int16 a2), StatRes_MainProc, 0x4e5640);
DECL_FUNC(void (__stdcall*hideLeftmostResource)(int a1), hideLeftmostResource, 0x4e57d0);
DECL_FUNC(int (__fastcall*StatRes_CustomCtrl)(dialog *dlg, dlgEvent *evt), StatRes_CustomCtrl, 0x4e5850);
void StatRes_RegisterCustomProcs(dialog *a1) {
    int address = 0x4e58d0;
    __asm {
        mov esi, a1
        call address
    }
}
DECL_FUNC(int (__fastcall*StatRes_DialogInteract)(dialog *dlg, dlgEvent *evt), StatRes_DialogInteract, 0x4e5910);
DECL_FUNC(void (*load_StatRes_BIN)(), load_StatRes_BIN, 0x4e5990);
BOOL sub_4E5AD0(CUnit *a1) {
    int address = 0x4e5ad0;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_4E5B30)(), sub_4E5B30, 0x4e5b30);
int getUpdatedSightRange(CUnit *unit, int a2) {
    int address = 0x4e5b40;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov edx, unit
        call address
        mov result_, eax
        add esp, 4
    }
    return result_;
}
int UnitIsInvincible_(CUnit *a1) {
    int address = 0x4e5c70;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__fastcall*sub_4E5C90)(_DWORD a1, _DWORD a2), sub_4E5C90, 0x4e5c90);
void RemoveOverlays(CUnit *a1, unsigned int a2, unsigned int a3) {
    int address = 0x4e5cf0;
    __asm {
        mov edi, a3
        mov edx, a2
        mov eax, a1
        call address
    }
}
DECL_FUNC(int (*sub_4E5D50)(), sub_4E5D50, 0x4e5d50);
void sub_4E5D60(CUnit *result, UnitType a2) {
    int address = 0x4e5d60;
    __asm {
        xor ecx, ecx
        mov cx, a2
        mov eax, result
        call address
    }
}
int isUnitVisible(CUnit *a1) {
    int address = 0x4e5db0;
    int result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
int isTargetVisible(CUnit *a1, CUnit *a2) {
    int address = 0x4e5e30;
    int result_;
    __asm {
        xor eax, eax
        mov esi, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
Order getRightClickActionOrder(CUnit *a1) {
    int address = 0x4e5ea0;
    Order result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
DECL_FUNC(int (*sub_4E5EE0)(), sub_4E5EE0, 0x4e5ee0);
DECL_FUNC(int (*sub_4E5F00)(), sub_4E5F00, 0x4e5f00);
DECL_FUNC(void (__stdcall*refreshUnitVision)(CUnit *unit), refreshUnitVision, 0x4e5f30);
void moveScreenToUnit(CUnit *a1) {
    int address = 0x4e6020;
    __asm {
        mov eax, a1
        call address
    }
}
void sub_4E6060(CUnit *a1, char a2, int esi0, char a4, int a5) {
    int address = 0x4e6060;
    __asm {
        xor edx, edx
        push dword ptr a5
        push dword ptr a4
        mov esi, esi0
        mov dl, a2
        mov ecx, a1
        call address
        add esp, 8
    }
}
void UpdateUnitDamageOverlay(CUnit *a1) {
    int address = 0x4e6090;
    __asm {
        mov esi, a1
        call address
    }
}
void CreateShieldOverlay(CUnit *a1, int direction) {
    int address = 0x4e6140;
    __asm {
        mov eax, direction
        mov ecx, a1
        call address
    }
}
void CreateUnitSelection(CUnit *a1, char a2) {
    int address = 0x4e6180;
    __asm {
        push dword ptr a2
        mov eax, a1
        call address
    }
}
void sub_4E6260(char a1, CUnit *a2) {
    int address = 0x4e6260;
    __asm {
        xor ebx, ebx
        mov esi, a2
        mov bl, a1
        call address
    }
}
void DestroyUnitSelection(CUnit *a1) {
    int address = 0x4e6290;
    __asm {
        mov eax, a1
        call address
    }
}
void sub_4E62F0(CUnit *a1) {
    int address = 0x4e62f0;
    __asm {
        mov eax, a1
        call address
    }
}
DECL_FUNC(void (*sub_4E6310)(), sub_4E6310, 0x4e6310);
void unitDeathSomething_0(CUnit *a1) {
    int address = 0x4e6340;
    __asm {
        mov eax, a1
        call address
    }
}
CUnit * initUnitTrapDoodad(CUnit *a1) {
    int address = 0x4e6490;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
int _CreateDashedSelection(CUnit *a1) {
    int address = 0x4e65c0;
    int result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void SetConstructionGraphic(CUnit *unit, int a2) {
    int address = 0x4e65e0;
    __asm {
        push dword ptr a2
        mov edi, unit
        call address
        add esp, 4
    }
}
BOOL isConstructingAddon(CUnit *a1) {
    int address = 0x4e66b0;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void CancelAddon_Direct(int a1) {
    int address = 0x4e66e0;
    __asm {
        mov eax, a1
        call address
    }
}
void orders_NukeTrain(CUnit *unit) {
    int address = 0x4e6700;
    __asm {
        mov eax, unit
        call address
    }
}
DECL_FUNC(void (__stdcall*orders_PlaceAddon)(CUnit *unit), orders_PlaceAddon, 0x4e6880);
DECL_FUNC(BOOL (__thiscall*unitIsActiveTransport)(CUnit *this_), unitIsActiveTransport, 0x4e6ba0);
BOOL sub_4E6BE0(CUnit *a1, CUnit *a2) {
    int address = 0x4e6be0;
    BOOL result_;
    __asm {
        xor eax, eax
        mov edx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_4E6C00)(), sub_4E6C00, 0x4e6c00);
BOOL sub_4E6C10(CUnit *a1, signed int x, signed int y) {
    int address = 0x4e6c10;
    BOOL result_;
    __asm {
        xor eax, eax
        push dword ptr y
        push dword ptr x
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
CUnit * getLoadedUnitFromIndex(CUnit *a1, int a2) {
    int address = 0x4e6c40;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
bool * getFirstLoadedUnit(CUnit *a1) {
    int address = 0x4e6c90;
    bool * result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed iterateLoadedUnits(CUnit *a1, int (__fastcall *a2)(_DWORD, _DWORD), int a3) {
    int address = 0x4e6d00;
    signed result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed getFirstLoadedWorker(CUnit *a1) {
    int address = 0x4e6d90;
    signed result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
BOOL CanBeEnteredBy(CUnit *transport, CUnit *unit) {
    int address = 0x4e6e00;
    BOOL result_;
    __asm {
        xor eax, eax
        push dword ptr unit
        mov eax, transport
        call address
        mov result_, eax
    }
    return result_;
}
signed sub_4E6EF0(CUnit *a1, int a2) {
    int address = 0x4e6ef0;
    signed result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov ebx, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed isUnitLoaded(CUnit *a1) {
    int address = 0x4e7110;
    signed result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__thiscall*getLoadedSpaceAmount)(CUnit *this_), getLoadedSpaceAmount, 0x4e7170);
BOOL sub_4E72E0(CUnit *a1) {
    int address = 0x4e72e0;
    BOOL result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
void orders_TransportIdle(CUnit *a1) {
    int address = 0x4e7300;
    __asm {
        mov eax, a1
        call address
    }
}
void orders_Pickup3_0(CUnit *a1) {
    int address = 0x4e73b0;
    __asm {
        mov edi, a1
        call address
    }
}
DECL_FUNC(signed (__stdcall*AI_GetTransportAssist)(CUnit *a1, int a2, int a3), AI_GetTransportAssist, 0x4e7420);
void transportIdleOpen(CUnit *a1) {
    int address = 0x4e75d0;
    __asm {
        mov edi, a1
        call address
    }
}
BOOL canUnload(int a1, CUnit *unit, Position *outPos) {
    int address = 0x4e76c0;
    BOOL result_;
    __asm {
        xor eax, eax
        push dword ptr outPos
        mov esi, unit
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__stdcall*orders_MoveUnload)(CUnit *a1), orders_MoveUnload, 0x4e7700);
void sub_4E78E0(CUnit *transport, CUnit *a2) {
    int address = 0x4e78e0;
    __asm {
        mov ecx, a2
        mov eax, transport
        call address
    }
}
void orders_Pickup4_0(CUnit *a1) {
    int address = 0x4e7b70;
    __asm {
        mov eax, a1
        call address
    }
}
void orders_EnterTransport(CUnit *a1) {
    int address = 0x4e7cf0;
    __asm {
        mov eax, a1
        call address
    }
}
char sub_4E7E10(CUnit *a1, int a2) {
    int address = 0x4e7e10;
    char result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
CUnit * Unload_(CUnit *a1) {
    int address = 0x4e7f70;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void orders_Unload(CUnit *a1) {
    int address = 0x4e80d0;
    __asm {
        mov eax, a1
        call address
    }
}
CUnit * IterateUnitsAtLocationTargetProc(int (__fastcall *a1)(CUnit *, CUnit *), rect *area, CUnit *a3) {
    int address = 0x4e8280;
    CUnit * result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        mov eax, area
        mov ebx, a1
        call address
        mov result_, eax
    }
    return result_;
}
CUnit * _CreateSplashWeaponProc(__int16 a1, __int16 a2, __int16 a3, int (__fastcall *a4)(CUnit *, CUnit *), CUnit *a5) {
    int address = 0x4e82e0;
    CUnit * result_;
    __asm {
        xor eax, eax
        xor edx, edx
        xor ecx, ecx
        push dword ptr a5
        push dword ptr a4
        mov cx, a3
        mov dx, a2
        mov ax, a1
        call address
        mov result_, eax
    }
    return result_;
}
CUnit * GetNearest(int a1, CUnit *a2, __int16 a3, __int16 a4, signed int a5, signed int a6, int a7, int a8, int (__fastcall *a9)(CUnit *, UnitType), void *data) {
    int address = 0x4e8320;
    CUnit * result_;
    __asm {
        xor eax, eax
        push dword ptr data
        push dword ptr a9
        push dword ptr a8
        push dword ptr a7
        push dword ptr a6
        push dword ptr a5
        push dword ptr a4
        push dword ptr a3
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
CUnit * sub_4E8660(__int16 a1, __int16 a2, int a3, int (__fastcall *a4)(_DWORD, _DWORD), int unit_type) {
    int address = 0x4e8660;
    CUnit * result_;
    __asm {
        xor eax, eax
        xor ebx, ebx
        push dword ptr unit_type
        push dword ptr a4
        push dword ptr a3
        push dword ptr a2
        mov bx, a1
        call address
        mov result_, eax
    }
    return result_;
}
CUnit * GetNearestUnitFrom(__int16 a1, __int16 a2, __int16 a3, int (__fastcall *a4)(_DWORD, _DWORD), int unit_type) {
    int address = 0x4e86c0;
    CUnit * result_;
    __asm {
        xor eax, eax
        xor ebx, ebx
        xor esi, esi
        push dword ptr unit_type
        push dword ptr a4
        mov si, a3
        mov bx, a2
        mov ax, a1
        call address
        mov result_, eax
    }
    return result_;
}
CUnit * AI_ClosestUnit(CUnit *a1, int a2, int (__fastcall *a3)(CUnit *, CUnit *), CUnit *unit_type) {
    int address = 0x4e8740;
    CUnit * result_;
    __asm {
        xor eax, eax
        push dword ptr unit_type
        push dword ptr a3
        push dword ptr a2
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
CUnit * AI_BestUnit_InBox(__int16 a1, CUnit *a2, int (__fastcall *a3)(CUnit *, CUnit *), CUnit *a4) {
    int address = 0x4e87e0;
    CUnit * result_;
    __asm {
        xor eax, eax
        push dword ptr a4
        push dword ptr a3
        mov ecx, a2
        mov ax, a1
        call address
        mov result_, eax
    }
    return result_;
}
CUnit * ModifyUnit_maybe(Box16 *a1, void *a2, int (__fastcall *a3)(CUnit *, void *)) {
    int address = 0x4e8830;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov edi, a3
        mov ebx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(__int16 (__thiscall*DlgLatency)(int this_), DlgLatency, 0x4e88b0);
bool sub_4E8920(dialog *a1, dlgEvent *a2) {
    int address = 0x4e8920;
    bool result_;
    __asm {
        xor eax, eax
        mov edi, a2
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
DECL_FUNC(bool (__fastcall*network_latencyRadioBtn)(dialog *dlg, dlgEvent *evt), network_latencyRadioBtn, 0x4e8970);
void sub_4E89A0(dialog *a1) {
    int address = 0x4e89a0;
    __asm {
        mov eax, a1
        call address
    }
}
char sub_4E89C0(dialog *a1) {
    int address = 0x4e89c0;
    char result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
void network_options_menu_activate(dialog *dlg) {
    int address = 0x4e8a30;
    __asm {
        mov eax, dlg
        call address
    }
}
DECL_FUNC(int (__fastcall*netdlg_BINDLG_Main)(dialog *dlg, dlgEvent *evt), netdlg_BINDLG_Main, 0x4e8ae0);
DECL_FUNC(void (*open_network_options_menu)(), open_network_options_menu, 0x4e8bb0);
unsigned pixelPosHasCreep(__int16 a1, __int16 a2) {
    int address = 0x4e8bc0;
    unsigned result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov ax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_4E8C00)(), sub_4E8C00, 0x4e8c00);
BOOL sub_4E8C20(CUnit *a1, CUnit *a2) {
    int address = 0x4e8c20;
    BOOL result_;
    __asm {
        xor eax, eax
        mov edx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_4E8C60)(), sub_4E8C60, 0x4e8c60);
DECL_FUNC(BOOL (__fastcall*larvaCounterProc)(CUnit *a1, CUnit *a2), larvaCounterProc, 0x4e8c80);
BOOL sub_4E8CB0(__int16 *a1, int a2, int a3) {
    int address = 0x4e8cb0;
    BOOL result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
char UpdateLarvaOrderState_TooFar(int a1) {
    int address = 0x4e8da0;
    char result_;
    __asm {
        xor eax, eax
        mov edi, a1
        call address
        mov result_, al
    }
    return result_;
}
signed sub_4E8E10(CUnit *a1, int a2) {
    int address = 0x4e8e10;
    signed result_;
    __asm {
        xor eax, eax
        mov edi, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int UpdateHarvestValues(int result, int a2) {
    int address = 0x4e92b0;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
signed ChkLarvaStray(CUnit *a1, unsigned int a2, unsigned int a3) {
    int address = 0x4e93e0;
    signed result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        push dword ptr a2
        mov ebx, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__stdcall*ChkLarvaStray_0)(CUnit *a1, int a2, int a3), ChkLarvaStray_0, 0x4e94b0);
void orders_StopCreepGrowth(CUnit *a1) {
    int address = 0x4e95e0;
    __asm {
        mov eax, a1
        call address
    }
}
Order orders_InitCreepGrowth(CUnit *a1) {
    int address = 0x4e96d0;
    Order result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
void Unburrow(CUnit *a1) {
    int address = 0x4e97c0;
    __asm {
        mov eax, a1
        call address
    }
}
void orders_burrowed(CUnit *unit) {
    int address = 0x4e9860;
    __asm {
        mov eax, unit
        call address
    }
}
void orders_drone_infest(CUnit *unit) {
    int address = 0x4e98e0;
    __asm {
        mov eax, unit
        call address
    }
}
void sub_4E99D0(CUnit *a1) {
    int address = 0x4e99d0;
    __asm {
        mov eax, a1
        call address
    }
}
void sub_4E9A30(CUnit *unit) {
    int address = 0x4e9a30;
    __asm {
        mov eax, unit
        call address
    }
}
void orders_DroneLand(CUnit *unit) {
    int address = 0x4e9aa0;
    __asm {
        mov eax, unit
        call address
    }
}
void orders_burrow(CUnit *unit) {
    int address = 0x4e9e60;
    __asm {
        mov eax, unit
        call address
    }
}
void orders_Larva(CUnit *a1) {
    int address = 0x4e9f90;
    __asm {
        mov eax, a1
        call address
    }
}
void performNydusCanalMove(CUnit *a1, CUnit *a2) {
    int address = 0x4ea180;
    __asm {
        mov ecx, a2
        mov eax, a1
        call address
    }
}
void orders_InfestMine4(CUnit *unit) {
    int address = 0x4ea290;
    __asm {
        mov eax, unit
        call address
    }
}
void orders_EnterNydusCanal(CUnit *a1) {
    int address = 0x4ea3e0;
    __asm {
        mov eax, a1
        call address
    }
}
void orders_InfestMine1(CUnit *unit) {
    int address = 0x4ea4c0;
    __asm {
        mov eax, unit
        call address
    }
}
void orders_deburrowed(CUnit *unit) {
    int address = 0x4ea670;
    __asm {
        mov eax, unit
        call address
    }
}
void secondaryOrd_SpawningLarva(CUnit *a1) {
    int address = 0x4ea780;
    __asm {
        mov esi, a1
        call address
    }
}
void secondaryOrd_SpreadCreepSpawningLarva(CUnit *a1) {
    int address = 0x4ea880;
    __asm {
        mov eax, a1
        call address
    }
}
int sub_4EA940(int a1, int a2) {
    int address = 0x4ea940;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
BOOL writeUnitPointer(int a1, CUnit *a2, FILE *a3) {
    int address = 0x4ea970;
    BOOL result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        mov esi, a2
        mov ecx, a1
        call address
        mov result_, eax
    }
    return result_;
}
CUnit * sub_4EA9D0(unsigned int a1, void *a2) {
    int address = 0x4ea9d0;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov esi, a2
        mov ecx, a1
        call address
        mov result_, eax
    }
    return result_;
}
int sub_4EAA80(int a1, int a2, int a3) {
    int address = 0x4eaa80;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        mov ebx, a2
        mov ecx, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__stdcall*WriteUnits)(FILE *file), WriteUnits, 0x4eaaf0);
DECL_FUNC(signed (*initializeGlobUnitCount)(), initializeGlobUnitCount, 0x4ead50);
DECL_FUNC(int (*_unk_dtor)(void), _unk_dtor, 0x4ead80);
DECL_FUNC(void (*mapTransferVector_clear)(), mapTransferVector_clear, 0x4eadf0);
_DWORD * sub_4EAE60(_DWORD *result) {
    int address = 0x4eae60;
    _DWORD * result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
void mapTransferVector2_clear(BOOL result) {
    int address = 0x4eaeb0;
    __asm {
        mov eax, result
        call address
    }
}
DECL_FUNC(int (*sub_4EAF30)(), sub_4EAF30, 0x4eaf30);
DECL_FUNC(void (*sub_4EAF50)(), sub_4EAF50, 0x4eaf50);
DECL_FUNC(int (__stdcall*mapStringCreate)(char a1, int a2, int a3, char *source, char *a5), mapStringCreate, 0x4eaf70);
void mapDataTransfer(unsigned int a1, _BYTE *a2, char a3) {
    int address = 0x4eafe0;
    __asm {
        xor ecx, ecx
        mov cl, a3
        mov edx, a2
        mov eax, a1
        call address
    }
}
DECL_FUNC(COrder * (__thiscall*sub_4EB070)(CUnit *this_), sub_4EB070, 0x4eb070);
DECL_FUNC(char (*sub_4EB090)(), sub_4EB090, 0x4eb090);
DECL_FUNC(char (*sub_4EB0C0)(), sub_4EB0C0, 0x4eb0c0);
DECL_FUNC(void (__thiscall*sub_4EB0F0)(CUnit *this_), sub_4EB0F0, 0x4eb0f0);
CUnit * setNextWaypoint(CUnit *result, int a2, int a3) {
    int address = 0x4eb130;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov ecx, a3
        mov edx, a2
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__thiscall*SetUnitUnderDisruptionWeb)(CUnit *this_), SetUnitUnderDisruptionWeb, 0x4eb170);
DECL_FUNC(char (__fastcall*sub_4EB240)(int a1, CUnit *a2), sub_4EB240, 0x4eb240);
points setResourceTarget(CUnit *unit) {
    int address = 0x4eb290;
    points result_;
    __asm {
        xor eax, eax
        mov eax, unit
        call address
        mov result_, eax
    }
    return result_;
}
BOOL sub_4EB2E0(CUnit *a1, CUnit *a2) {
    int address = 0x4eb2e0;
    BOOL result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*sub_4EB2F0)(), sub_4EB2F0, 0x4eb2f0);
void UpdateEnergyTimer(CUnit *unit) {
    int address = 0x4eb4b0;
    __asm {
        mov esi, unit
        call address
    }
}
int orders_HoldPositionSuicidal(CUnit *a1) {
    int address = 0x4eb5b0;
    int result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
void sub_4EB5E0(CUnit *a1) {
    int address = 0x4eb5e0;
    __asm {
        mov ebx, a1
        call address
    }
}
char ProgressSubunitDirection(CUnit *a1, char a2) {
    int address = 0x4eb660;
    char result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov esi, a1
        call address
        mov result_, al
    }
    return result_;
}
signed moveToTarget(CUnit *a1, CUnit *a2) {
    int address = 0x4eb720;
    signed result_;
    __asm {
        xor eax, eax
        mov esi, a2
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
int SetMoveTarget_xy(int x, int y, CUnit *unit) {
    int address = 0x4eb820;
    int result_;
    __asm {
        xor eax, eax
        mov esi, unit
        mov edi, y
        mov ebx, x
        call address
        mov result_, eax
    }
    return result_;
}
signed sub_4EB900(CUnit *a1, CUnit *a2) {
    int address = 0x4eb900;
    signed result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed Warping_SetMoveTarget(CUnit *a1, int a2, int a3) {
    int address = 0x4eb960;
    signed result_;
    __asm {
        xor eax, eax
        mov edi, a3
        mov ebx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int _moveToTarget(CUnit *a1, CUnit *a2) {
    int address = 0x4eb980;
    int result_;
    __asm {
        xor eax, eax
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
CSprite * UnitBeginAcquireMoveTarget(int a1, CUnit *a2, int a3) {
    int address = 0x4eb9c0;
    CSprite * result_;
    __asm {
        xor eax, eax
        mov ecx, a3
        mov edx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void SetUnitPosition(CUnit *unit, __int16 pos_x, __int16 pos_y) {
    int address = 0x4eb9f0;
    __asm {
        xor eax, eax
        xor ecx, ecx
        mov cx, pos_y
        mov ax, pos_x
        mov edx, unit
        call address
    }
}
void MoveUnit(CUnit *unit, __int16 pos_x, __int16 pos_y) {
    int address = 0x4ebae0;
    __asm {
        xor eax, eax
        xor ecx, ecx
        mov cx, pos_y
        mov ax, pos_x
        mov edx, unit
        call address
    }
}
void RefreshSprite(CSprite *a1, unsigned __int8 a2) {
    int address = 0x4ebbd0;
    __asm {
        push dword ptr a2
        mov esi, a1
        call address
    }
}
DECL_FUNC(void (__thiscall*sub_4EBC30)(CUnit *unit), sub_4EBC30, 0x4ebc30);
void sub_4EBDB0(CUnit *a1) {
    int address = 0x4ebdb0;
    __asm {
        mov eax, a1
        call address
    }
}
void RefreshUnit(CUnit *unit) {
    int address = 0x4ebde0;
    __asm {
        mov eax, unit
        call address
    }
}
void UpdateUnitSpriteInfo(CUnit *unit) {
    int address = 0x4ebe10;
    __asm {
        mov esi, unit
        call address
    }
}
void ordersIDCases(CUnit *unit) {
    int address = 0x4ebed0;
    __asm {
        mov eax, unit
        call address
    }
}
void ProgressSecondaryOrder_Hidden(CUnit *a1) {
    int address = 0x4ec120;
    __asm {
        mov eax, a1
        call address
    }
}
void performSecondaryOrders(CUnit *a1) {
    int address = 0x4ec170;
    __asm {
        mov eax, a1
        call address
    }
}
void updateUnitTimers(CUnit *unit) {
    int address = 0x4ec290;
    __asm {
        mov eax, unit
        call address
    }
}
DECL_FUNC(void (__thiscall*unitUpdate)(CUnit *unit), unitUpdate, 0x4ec420);
void ordersEntries(CUnit *unit) {
    int address = 0x4ec4d0;
    __asm {
        mov eax, unit
        call address
    }
}
DECL_FUNC(void (__fastcall*UpdateUnitOrderData)(CUnit *unit), UpdateUnitOrderData, 0x4ecf70);
DECL_FUNC(void (*UpdateUnits)(), UpdateUnits, 0x4ed000);
DECL_FUNC(void (__cdecl*initializeDefaultPlayerNames)(), initializeDefaultPlayerNames, 0x4ed2b0);
signed gluLogin_CharacterCreate_CheckDuplicate(char *a1) {
    int address = 0x4ed3a0;
    signed result_;
    __asm {
        xor eax, eax
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (*sub_4ED3E0)(), sub_4ED3E0, 0x4ed3e0);
signed gluLogin_Activate(dialog *a1) {
    int address = 0x4ed3f0;
    signed result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int sub_4ED440(ID *a1) {
    int address = 0x4ed440;
    int result_;
    __asm {
        xor eax, eax
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__stdcall*ID_Constructor)(CharacterData *a1), ID_Constructor, 0x4ed490);
DECL_FUNC(DialogFlags (__fastcall*sub_4ED500)(__int16 a1), sub_4ED500, 0x4ed500);
DECL_FUNC(void (__fastcall*sub_4ED530)(__int16 a1), sub_4ED530, 0x4ed530);
DialogFlags gluLogin_SetSelect_Evt(dialog *a1) {
    int address = 0x4ed560;
    DialogFlags result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(HANDLE (*sub_4ED620)(), sub_4ED620, 0x4ed620);
void gluLogin_Listbox_Init_Evt(dialog *a1) {
    int address = 0x4ed640;
    __asm {
        mov edi, a1
        call address
    }
}
DECL_FUNC(void (__stdcall*gluLogin_Init)(dialog *a1), gluLogin_Init, 0x4ed720);
void j_genericListboxDropdown(dialog *a1) {
    int address = 0x4ed760;
    __asm {
        mov eax, a1
        call address
    }
}
DECL_FUNC(int (__fastcall*gluLogin_Listbox)(dialog *dlg, dlgEvent *evt), gluLogin_Listbox, 0x4ed770);
void gluLogin_CustomCtrlID(dialog *dlg) {
    int address = 0x4ed810;
    __asm {
        mov esi, dlg
        call address
    }
}
DECL_FUNC(void (__stdcall*gluLogin_DeleteCharacter)(dialog *a1), gluLogin_DeleteCharacter, 0x4ed840);
DECL_FUNC(void (__stdcall*gluLogin_CreateCharacter)(dialog *a1), gluLogin_CreateCharacter, 0x4ed940);
DECL_FUNC(int (__fastcall*gluLogin_Main)(dialog *dlg, struct dlgEvent *evt), gluLogin_Main, 0x4edaa0);
DECL_FUNC(void (*loadMenu_gluLogin)(), loadMenu_gluLogin, 0x4edc30);
DECL_FUNC(HWND (__stdcall*GetClassWindow)(const char *a1), GetClassWindow, 0x4eddf0);
DECL_FUNC(int (__fastcall*openDlg)(LPCSTR lpDirectory, int a2, unsigned __int8 *a3, int a4), openDlg, 0x4ede60);
BOOL sub_4EDEC0(const char *a1) {
    int address = 0x4edec0;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__thiscall*sub_4EDEF0)(void *this_, char *a2), sub_4EDEF0, 0x4edef0);
DECL_FUNC(int (__stdcall*sub_4EDF20)(int csidl, const char *a2), sub_4EDF20, 0x4edf20);
int sub_4EDFC0(const char *a1) {
    int address = 0x4edfc0;
    int result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__fastcall*destroyFileFindIndexer)(bool exit_code), destroyFileFindIndexer, 0x4edfe0);
DECL_FUNC(void (__cdecl*FastIndexInit)(), FastIndexInit, 0x4ee070);
DECL_FUNC(void (__stdcall*mouseOver_Loading_CB)(int a1), mouseOver_Loading_CB, 0x4ee0f0);
DECL_FUNC(int (*SinglePlayerMeleeInitGame)(), SinglePlayerMeleeInitGame, 0x4ee110);
DECL_FUNC(void (__cdecl*BWFXN_InitializePlayerConsole)(), BWFXN_InitializePlayerConsole, 0x4ee180);
DECL_FUNC(signed (*sub_4EE210)(), sub_4EE210, 0x4ee210);
DECL_FUNC(void (__cdecl*LoadRaceUI)(), LoadRaceUI, 0x4ee2d0);
DECL_FUNC(signed (*RestartGame)(), RestartGame, 0x4ee3d0);
DECL_FUNC(signed (*LoadGameCreate)(), LoadGameCreate, 0x4ee520);
DECL_FUNC(int (*LevelCheatInitGame)(), LevelCheatInitGame, 0x4ee5b0);
DECL_FUNC(void (__cdecl*DestroyGame)(), DestroyGame, 0x4ee8c0);
DECL_FUNC(void (__cdecl*hotkeyRemapping)(), hotkeyRemapping, 0x4eec30);
DECL_FUNC(signed (*LoadGameCore)(), LoadGameCore, 0x4eed10);
DECL_FUNC(signed (*GameInit)(), GameInit, 0x4eee00);
DECL_FUNC(signed (*sub_4EEFD0)(), sub_4EEFD0, 0x4eefd0);
DECL_FUNC(signed (*LoadGameInit)(), LoadGameInit, 0x4ef100);
DECL_FUNC(int (__thiscall*DrawDialogImage)(rect *this_, Bitmap *a2, int a3, int a4, int a5), DrawDialogImage, 0x4ef440);
DECL_FUNC(int (*sub_4EF530)(), sub_4EF530, 0x4ef530);
DECL_FUNC(void (__fastcall*genericImageUpdate)(dialog *dlg, int x, int y, rect *dst), genericImageUpdate, 0x4ef560);
DECL_FUNC(void (__fastcall*genericDlgUpdate)(dialog *dlg, int x, int y, rect *dst), genericDlgUpdate, 0x4ef590);
int sub_4EF600(rect *a1, unsigned int a2, __int16 a3, __int16 a4, DialogFlags a5) {
    int address = 0x4ef600;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a5
        push dword ptr a4
        push dword ptr a3
        push dword ptr a2
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
u8 * sub_4EF6D0(u8 *result, int a2, char a3) {
    int address = 0x4ef6d0;
    u8 * result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        mov ecx, a2
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
int sub_4EF710(rect *a1, unsigned int a2, int a3, int x, __int16 y, int width, DialogFlags a7) {
    int address = 0x4ef710;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a7
        push dword ptr width
        push dword ptr y
        push dword ptr x
        mov edi, a3
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int sub_4EF7E0(__int16 a1, unsigned int a2, __int16 a3, rect *a4) {
    int address = 0x4ef7e0;
    int result_;
    __asm {
        xor eax, eax
        xor ecx, ecx
        mov esi, a4
        mov cx, a3
        mov edx, a2
        mov ax, a1
        call address
        mov result_, eax
    }
    return result_;
}
unsigned sub_4EF7F0(int a1, unsigned int a2, rect *a3) {
    int address = 0x4ef7f0;
    unsigned result_;
    __asm {
        xor eax, eax
        mov esi, a3
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void DlgDrawText(rect *a1, dialog *a2, int a3, int a4) {
    int address = 0x4ef870;
    __asm {
        push dword ptr a4
        push dword ptr a3
        mov ecx, a2
        mov eax, a1
        call address
    }
}
DECL_FUNC(void (__fastcall*genericCStaticUpdate)(dialog *dlg, int x, int y, rect *dst), genericCStaticUpdate, 0x4ef9a0);
DECL_FUNC(void (__fastcall*genericRStaticUpdate)(dialog *dlg, int x, int y, rect *dst), genericRStaticUpdate, 0x4ef9c0);
DECL_FUNC(void (__fastcall*genericLStaticUpdate)(dialog *dlg, int x, int y, rect *dst), genericLStaticUpdate, 0x4ef9e0);
DECL_FUNC(void (__fastcall*genericEditUpdate)(dialog *dlg, int x, int y, rect *dst), genericEditUpdate, 0x4efa00);
DECL_FUNC(void (__fastcall*genericCheckboxUpdate)(dialog *dlg, int x, int y, rect *dst), genericCheckboxUpdate, 0x4efa80);
DECL_FUNC(void (__fastcall*genericOptionUpdate)(dialog *dlg, int x, int y, rect *dst), genericOptionUpdate, 0x4efc30);
void DrawStandardButtonGraphic(dialog *a1, rect *a2) {
    int address = 0x4efd90;
    __asm {
        push dword ptr a2
        mov edi, a1
        call address
    }
}
void DrawAlternateButtonGraphic(dialog *a1, dialog *ecx0, rect *a3) {
    int address = 0x4efeb0;
    __asm {
        push dword ptr a3
        mov ecx, ecx0
        mov ebx, a1
        call address
    }
}
void sub_4EFF80(__int16 a1, __int16 a2) {
    int address = 0x4eff80;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov ax, a1
        call address
    }
}
void DrawButtonImage(dialog *a1, rect *a2) {
    int address = 0x4f0050;
    __asm {
        push dword ptr a2
        mov edi, a1
        call address
    }
}
void sub_4F02C0(char a1, __int16 *a2) {
    int address = 0x4f02c0;
    __asm {
        xor eax, eax
        mov esi, a2
        mov al, a1
        call address
    }
}
DECL_FUNC(void (__fastcall*genericBtnUpdate)(dialog *dlg, int x, int y, rect *dst), genericBtnUpdate, 0x4f0390);
int contour_gen_bottomRight(int a1) {
    int address = 0x4f03e0;
    int result_;
    __asm {
        xor eax, eax
        mov ebx, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (*contour_gen_topRight)(void), contour_gen_topRight, 0x4f08c0);
DECL_FUNC(int (*contour_gen_leftTop)(void), contour_gen_leftTop, 0x4f0d50);
DECL_FUNC(int (*contour_gen_bottomLeft)(void), contour_gen_bottomLeft, 0x4f1200);
DECL_FUNC(int (*sub_4F1680)(), sub_4F1680, 0x4f1680);
DECL_FUNC(int (__fastcall*sub_4F16C0)(int a1, int a2, int *a3, signed __int16 *a4, int a5), sub_4F16C0, 0x4f16c0);
BOOL sub_4F17C0(CUnit *unit, CUnit *a2) {
    int address = 0x4f17c0;
    BOOL result_;
    __asm {
        xor eax, eax
        mov esi, a2
        mov ecx, unit
        call address
        mov result_, eax
    }
    return result_;
}
BOOL sub_4F1870(CUnit *a1, __int16 a2, __int16 a3) {
    int address = 0x4f1870;
    BOOL result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
BOOL TerrainCollision(CUnit *a1) {
    int address = 0x4f1980;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int GetOthersLocation(int a1, int a2) {
    int address = 0x4f1a20;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed sub_4F1B70(CUnit *a1) {
    int address = 0x4f1b70;
    signed result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int sub_4F1C70(CUnit *a1, int a2) {
    int address = 0x4f1c70;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
CUnit * FindCollidingUnit(CUnit *a1) {
    int address = 0x4f20d0;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov ebx, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed sub_4F2160(CUnit *a1) {
    int address = 0x4f2160;
    signed result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
CUnit ** sub_4F2240(CUnit *a1) {
    int address = 0x4f2240;
    CUnit ** result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int sub_4F2260(CUnit *a1, int a2, CUnit *a3) {
    int address = 0x4f2260;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int sub_4F29E0(CUnit *a1, int a2) {
    int address = 0x4f29e0;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed sub_4F2A70(CUnit *a1, CUnit *a2) {
    int address = 0x4f2a70;
    signed result_;
    __asm {
        xor eax, eax
        mov edi, a2
        mov ebx, a1
        call address
        mov result_, eax
    }
    return result_;
}
signed sub_4F2DE0(CUnit *a1) {
    int address = 0x4f2de0;
    signed result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void sub_4F2F00(dialog *a1) {
    int address = 0x4f2f00;
    __asm {
        mov ebx, a1
        call address
    }
}
DECL_FUNC(void (*destroy_textbox_bin)(), destroy_textbox_bin, 0x4f3020);
void sub_4F3040(dialog *a1) {
    int address = 0x4f3040;
    __asm {
        mov eax, a1
        call address
    }
}
void SetTargetDlgText(char *a1) {
    int address = 0x4f31d0;
    __asm {
        mov edx, a1
        call address
    }
}
DECL_FUNC(bool (__fastcall*textBox_ctrl_charEvent)(dialog *a1, dlgEvent *a2), textBox_ctrl_charEvent, 0x4f3240);
void sendChatMessage(const char *message) {
    int address = 0x4f3280;
    __asm {
        mov eax, message
        call address
    }
}
void onSendText(dialog *a1, dlgEvent *a2, CheatFlags a3) {
    int address = 0x4f32d0;
    __asm {
        push dword ptr a3
        push dword ptr a2
        mov edi, a1
        call address
    }
}
DECL_FUNC(int (__fastcall*textbox_CtrlInteract)(dialog *dlg, struct dlgEvent *evt), textbox_CtrlInteract, 0x4f3540);
void textbox_DLG_Init_Evt(dialog *dlg) {
    int address = 0x4f35d0;
    __asm {
        mov edi, dlg
        call address
    }
}
DECL_FUNC(int (__fastcall*textbox_DLG_Interact)(dialog *dlg, dlgEvent *evt), textbox_DLG_Interact, 0x4f36c0);
DECL_FUNC(void (*load_textbox_BIN)(), load_textbox_BIN, 0x4f37c0);
void destroyPowerupImageOverlay(CUnit *a1) {
    int address = 0x4f3900;
    __asm {
        mov eax, a1
        call address
    }
}
int sub_4F39A0(CUnit *a1) {
    int address = 0x4f39a0;
    int result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
BOOL sub_4F3A80(CUnit *a1) {
    int address = 0x4f3a80;
    BOOL result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
u8 sub_4F3AF0(char a1, CUnit *a2, int a3, char a4) {
    int address = 0x4f3af0;
    u8 result_;
    __asm {
        xor eax, eax
        xor edx, edx
        push dword ptr a4
        mov esi, a3
        mov edi, a2
        mov dl, a1
        call address
        mov result_, al
    }
    return result_;
}
DECL_FUNC(u8 (__stdcall*ResetUnitPowerup)(CUnit *a1), ResetUnitPowerup, 0x4f3b70);
void killPowerup(CUnit *a1) {
    int address = 0x4f3c60;
    __asm {
        mov esi, a1
        call address
    }
}
DECL_FUNC(char (__stdcall*sub_4F3CA0)(CUnit *a1, CUnit *a2), sub_4F3CA0, 0x4f3ca0);
void orders_Powerup2(CUnit *a1) {
    int address = 0x4f3e10;
    __asm {
        mov eax, a1
        call address
    }
}
void orders_Powerup1(CUnit *unit) {
    int address = 0x4f3ea0;
    __asm {
        mov eax, unit
        call address
    }
}
signed isBadName(int a1, const char *name, size_t name_length) {
    int address = 0x4f3f20;
    signed result_;
    __asm {
        xor eax, eax
        mov eax, name_length
        mov edx, name
        mov ecx, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__fastcall*ProgressDownload_maybe)(), ProgressDownload_maybe, 0x4f4080);
DECL_FUNC(void (*sub_4F40C0)(), sub_4F40C0, 0x4f40c0);
unsigned sub_4F40D0(int a1) {
    int address = 0x4f40d0;
    unsigned result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(BOOL (*LobbyLoopTurns)(), LobbyLoopTurns, 0x4f40f0);
DECL_FUNC(char (__fastcall*RemoveAcidSpores)(int a1, CUnit *a2), RemoveAcidSpores, 0x4f4160);
DECL_FUNC(unsigned (__thiscall*GetAcidSporeImage)(CUnit *this_), GetAcidSporeImage, 0x4f41f0);
void sub_4F4240(CUnit *a1) {
    int address = 0x4f4240;
    __asm {
        mov esi, a1
        call address
    }
}
void sub_4F4260(CUnit *a1) {
    int address = 0x4f4260;
    __asm {
        mov esi, a1
        call address
    }
}
void sub_4F4290(CUnit *a1) {
    int address = 0x4f4290;
    __asm {
        mov edi, a1
        call address
    }
}
void UpdateAcidSporeOverlays(CUnit *a1) {
    int address = 0x4f4480;
    __asm {
        mov ebx, a1
        call address
    }
}
void CreatePlagueOverlay(CUnit *a1) {
    int address = 0x4f4550;
    __asm {
        mov edi, a1
        call address
    }
}
char sub_4F45B0(CUnit *a1) {
    int address = 0x4f45b0;
    char result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
void CreateEnsnareOverlay(CUnit *a1) {
    int address = 0x4f45e0;
    __asm {
        mov edi, a1
        call address
    }
}
CUnit * sub_4F4640(CUnit *result) {
    int address = 0x4f4640;
    CUnit * result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__fastcall*CorrosiveAcidProc)(CUnit *a1, int player_id), CorrosiveAcidProc, 0x4f4670);
DECL_FUNC(int (__fastcall*EnsnareProc)(CUnit *a1, CUnit *a2), EnsnareProc, 0x4f46c0);
void CloakProc(CUnit *a1) {
    int address = 0x4f46f0;
    __asm {
        mov esi, a1
        call address
    }
}
void CorrosiveAcidHit(__int16 x, __int16 y, int player_id) {
    int address = 0x4f4770;
    __asm {
        xor ecx, ecx
        xor eax, eax
        push dword ptr player_id
        mov ax, y
        mov cx, x
        call address
    }
}
void ConsumeHit(CUnit *target, CUnit *attacker) {
    int address = 0x4f47b0;
    __asm {
        mov esi, attacker
        mov eax, target
        call address
    }
}
void EnsnareHit(__int16 x, __int16 y, CUnit *attacker) {
    int address = 0x4f4830;
    __asm {
        xor ecx, ecx
        xor eax, eax
        push dword ptr attacker
        mov ax, y
        mov cx, x
        call address
    }
}
DECL_FUNC(void (__stdcall*DarkSwarmHit)(int x, __int16 y, unsigned __int8 player_id), DarkSwarmHit, 0x4f48a0);
DECL_FUNC(void (__stdcall*BroodlingHit)(CUnit *a1, CUnit *a2), BroodlingHit, 0x4f4940);
DECL_FUNC(int (__fastcall*PlagueHit)(CUnit *a1, CUnit *a2), PlagueHit, 0x4f4af0);
void Plague_(__int16 a1, __int16 a2, CUnit *a3) {
    int address = 0x4f4b30;
    __asm {
        xor eax, eax
        xor ecx, ecx
        push dword ptr a3
        mov cx, a2
        mov ax, a1
        call address
    }
}
DECL_FUNC(void (__thiscall*sub_4F4B70)(CUnit *this_), sub_4F4B70, 0x4f4b70);
DECL_FUNC(int (*nullsub_68)(), nullsub_68, 0x4f4bb0);
DECL_FUNC(int (__stdcall*sub_4F4BC0)(int a1, _DWORD a2, int a3), sub_4F4BC0, 0x4f4bc0);
DECL_FUNC(LRESULT (__stdcall*sub_4F4C00)(int a1, void (__stdcall *a2)(const char *, _DWORD, int)), sub_4F4C00, 0x4f4c00);
DECL_FUNC(void (*destroy_statfluf_bin)(), destroy_statfluf_bin, 0x4f4cf0);
void statflufDlgUpdate(dialog *dlg) {
    int address = 0x4f4d30;
    __asm {
        mov eax, dlg
        call address
    }
}
DECL_FUNC(int (__fastcall*statfluf_DLG_Interact)(dialog *dlg, dlgEvent *evt), statfluf_DLG_Interact, 0x4f4d60);
DECL_FUNC(void (*load_statfluf_BIN)(), load_statfluf_BIN, 0x4f4dc0);
DECL_FUNC(void (*destroy_statf10_bin)(), destroy_statf10_bin, 0x4f4f50);
void drawGameMenuContextHelp(dialog *dlg) {
    int address = 0x4f4f70;
    __asm {
        mov edx, dlg
        call address
    }
}
DECL_FUNC(void (__fastcall*statf10_ButtonUpdate)(dialog *dlg, int x, int y, rect *dst), statf10_ButtonUpdate, 0x4f4fb0);
void Statf10_MouseMoveEvt(dialog *dlg, struct dlgEvent *evt) {
    int address = 0x4f5070;
    __asm {
        mov ecx, evt
        mov eax, dlg
        call address
    }
}
int sub_4F50D0(int result) {
    int address = 0x4f50d0;
    int result_;
    __asm {
        xor eax, eax
        mov eax, result
        call address
        mov result_, eax
    }
    return result_;
}
void setActiveDlgElement(dialog *dlg, struct dlgEvent *evt) {
    int address = 0x4f50f0;
    __asm {
        push dword ptr evt
        mov esi, dlg
        call address
    }
}
void load_gamemenu(dialog *result) {
    int address = 0x4f5150;
    __asm {
        mov eax, result
        call address
    }
}
DECL_FUNC(int (__fastcall*statf10_ButtonInteract)(dialog *dlg, dlgEvent *evt), statf10_ButtonInteract, 0x4f5180);
void Statf10_RegisterCustomProcs(dialog *a1) {
    int address = 0x4f5210;
    __asm {
        mov eax, a1
        call address
    }
}
DECL_FUNC(int (__fastcall*Statf10_DialogProc)(dialog *dlg, dlgEvent *evt), Statf10_DialogProc, 0x4f5240);
DECL_FUNC(void (*load_Statf10_BIN)(), load_Statf10_BIN, 0x4f5300);
void load_helpmenu(dialog *a1) {
    int address = 0x4f5420;
    __asm {
        mov esi, a1
        call address
    }
}
void * sub_4F5460(dialog *a1, dlgEvent *a2) {
    int address = 0x4f5460;
    void * result_;
    __asm {
        xor eax, eax
        mov esi, a2
        mov edi, a1
        call address
        mov result_, eax
    }
    return result_;
}
void help_listbox_create(dialog *a1) {
    int address = 0x4f5480;
    __asm {
        mov edi, a1
        call address
    }
}
DECL_FUNC(bool (__fastcall*help_Listbox)(dialog *dlg, dlgEvent *evt), help_Listbox, 0x4f54f0);
void help_BINDLG_CustomCtrlID(dialog *a1) {
    int address = 0x4f5530;
    __asm {
        mov eax, a1
        call address
    }
}
DECL_FUNC(int (__fastcall*help_BINDLG)(dialog *dlg, dlgEvent *evt), help_BINDLG, 0x4f5650);
DECL_FUNC(void (*open_help)(), open_help, 0x4f56f0);
DECL_FUNC(void (__stdcall*msgfltr_Cancel)(char a1), msgfltr_Cancel, 0x4f5700);
DECL_FUNC(void (__fastcall*genericPopupDlgInteract)(dialog *a1, dlgEvent *a2), genericPopupDlgInteract, 0x4f5760);
DECL_FUNC(void (__fastcall*BWFXN_OpenGameDialog)(char *a1, FnInteract a2), BWFXN_OpenGameDialog, 0x4f57a0);
DECL_FUNC(void (*HidePopupDialog)(), HidePopupDialog, 0x4f5930);
void sub_4F5990(dialog *dlg) {
    int address = 0x4f5990;
    __asm {
        mov eax, dlg
        call address
    }
}
DECL_FUNC(void (__fastcall*DLG_DrawTextUpdate_CB)(dialog *dlg, int x, int y, rect *dst), DLG_DrawTextUpdate_CB, 0x4f59c0);
int sub_4F59E0(dialog *a1, dlgEvent *a2) {
    int address = 0x4f59e0;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(int (__fastcall*wait_BINDLG)(dialog *dlg, dlgEvent *evt), wait_BINDLG, 0x4f5a40);
dialog * sub_4F5B70(dialog *a1) {
    int address = 0x4f5b70;
    dialog * result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void load_wait(const char *a1) {
    int address = 0x4f5c50;
    __asm {
        mov esi, a1
        call address
    }
}
DECL_FUNC(int (__fastcall*okcancel_Interact)(dialog *dlg, struct dlgEvent *evt), okcancel_Interact, 0x4f5cb0);
int loadOKCancelBIN(int a1, const char *a2, HANDLE phFile) {
    int address = 0x4f5d70;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr phFile
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
int loadOKBIN(int a1, const char *a2, HANDLE phFile) {
    int address = 0x4f5ee0;
    int result_;
    __asm {
        xor eax, eax
        push dword ptr phFile
        mov ecx, a2
        mov eax, a1
        call address
        mov result_, eax
    }
    return result_;
}
void loadOKCancelDialog(const char *message, int (__fastcall *a2)(__int16), char *a3) {
    int address = 0x4f6050;
    __asm {
        push dword ptr a3
        push dword ptr a2
        mov esi, message
        call address
    }
}
void open_okcancel_dialog(int (__fastcall *a1)(__int16), const char *a2) {
    int address = 0x4f60e0;
    __asm {
        mov esi, a2
        mov eax, a1
        call address
    }
}
void open_ok_dialog(int (__fastcall *a1)(__int16), const char *a2) {
    int address = 0x4f60f0;
    __asm {
        mov esi, a2
        mov eax, a1
        call address
    }
}
signed AppAddExit(AppExitHandle a1) {
    int address = 0x4f6100;
    signed result_;
    __asm {
        xor eax, eax
        mov ebx, a1
        call address
        mov result_, eax
    }
    return result_;
}
char ApplyHallucinationStats(CUnit *a1) {
    int address = 0x4f6180;
    char result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
char RemoveStasisField(CUnit *a1) {
    int address = 0x4f62d0;
    char result_;
    __asm {
        xor eax, eax
        mov esi, a1
        call address
        mov result_, al
    }
    return result_;
}
CThingy * replaceFeedbackSprite(CUnit *a1, int a2) {
    int address = 0x4f6350;
    CThingy * result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov ebx, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(char (__thiscall*CHK_UNIT_FinalCreateStep)(CUnit *this_), CHK_UNIT_FinalCreateStep, 0x4f6420);
u8 * sub_4F65B0(CUnit *a1, CUnit *a2) {
    int address = 0x4f65b0;
    u8 * result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
char sub_4F66D0(CUnit *unit) {
    int address = 0x4f66d0;
    char result_;
    __asm {
        xor eax, eax
        mov eax, unit
        call address
        mov result_, al
    }
    return result_;
}
DECL_FUNC(int (__fastcall*MaelStromProc)(CUnit *a1, CUnit *a2), MaelStromProc, 0x4f6760);
void StasisFieldOverlay(CUnit *a1, unsigned __int8 a2) {
    int address = 0x4f67b0;
    __asm {
        push dword ptr a2
        mov edi, a1
        call address
    }
}
u8 sub_4F6830(CUnit *a1) {
    int address = 0x4f6830;
    u8 result_;
    __asm {
        xor eax, eax
        mov eax, a1
        call address
        mov result_, al
    }
    return result_;
}
void MaelstromHit(int x, __int16 y, CUnit *a3) {
    int address = 0x4f6850;
    __asm {
        xor eax, eax
        push dword ptr a3
        mov ax, y
        push dword ptr x
        call address
    }
}
DECL_FUNC(int (__fastcall*StasisFieldProc)(CUnit *a1, CUnit *a2), StasisFieldProc, 0x4f68d0);
signed MindControl_Hit(CUnit *a1, CUnit *a2) {
    int address = 0x4f6910;
    signed result_;
    __asm {
        xor eax, eax
        push dword ptr a2
        mov esi, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__stdcall*orders_CastMindControl)(CUnit *a1), orders_CastMindControl, 0x4f6950);
CUnit * StasisFieldHit(__int16 a1, int a2, CUnit *a3) {
    int address = 0x4f6a80;
    CUnit * result_;
    __asm {
        xor eax, eax
        push dword ptr a3
        mov ecx, a2
        mov ax, a1
        call address
        mov result_, eax
    }
    return result_;
}
DECL_FUNC(void (__stdcall*DisruptionWebHit)(int a1, __int16 a2, char a3), DisruptionWebHit, 0x4f6af0);
DECL_FUNC(CUnit * (__thiscall*sub_4F6B90)(CUnit *this_, int a2), sub_4F6B90, 0x4f6b90);
void orders_Hallucination1(CUnit *a1) {
    int address = 0x4f6c40;
    __asm {
        mov edi, a1
        call address
    }
}
DECL_FUNC(void (__stdcall*orders_Feedback)(CUnit *a1), orders_Feedback, 0x4f6d40);
void orders_RightClickAction(CUnit *unit) {
    int address = 0x4f6ef0;
    __asm {
        mov eax, unit
        call address
    }
}
void orders_Special(CUnit *a1) {
    int address = 0x4f6fa0;
    __asm {
        mov eax, a1
        call address
    }
}
void gluRdyZ_CustomCtrlID(dialog *dlg) {
    int address = 0x4f70c0;
    __asm {
        mov esi, dlg
        call address
    }
}
void RdyZFrame(dialog *a1) {
    int address = 0x4f70f0;
    __asm {
        mov eax, a1
        call address
    }
}
DECL_FUNC(int (__fastcall*gluRdyZ_BINDLG_Loop)(dialog *dlg, struct dlgEvent *evt), gluRdyZ_BINDLG_Loop, 0x4f7150);
DECL_FUNC(void (*loadMenu_gluRdyZ)(void), loadMenu_gluRdyZ, 0x4f71f0);
void gluRdyT_CustomCtrlID(dialog *a1) {
    int address = 0x4f7420;
    __asm {
        mov esi, a1
        call address
    }
}
void RdyTFrame(dialog *a1) {
    int address = 0x4f7450;
    __asm {
        mov eax, a1
        call address
    }
}
DECL_FUNC(int (__fastcall*gluRdyT_BINDLG_Loop)(dialog *dlg, dlgEvent *evt), gluRdyT_BINDLG_Loop, 0x4f74b0);
DECL_FUNC(void (*loadMenu_gluRdyT)(void), loadMenu_gluRdyT, 0x4f7550);
void gluRdyP_CustomCtrlID(dialog *dlg) {
    int address = 0x4f7780;
    __asm {
        mov esi, dlg
        call address
    }
}
void rdyPFrame(dialog *a1) {
    int address = 0x4f77b0;
    __asm {
        mov eax, a1
        call address
    }
}
DECL_FUNC(int (__fastcall*gluRdyP_BINDLG_Loop)(dialog *dlg, dlgEvent *evt), gluRdyP_BINDLG_Loop, 0x4f7810);
DECL_FUNC(void (*loadMenu_gluRdyP)(void), loadMenu_gluRdyP, 0x4f78b0);
void PlayMovieWithIntro(Cinematic a1) {
    int address = 0x4f7ae0;
    __asm {
        xor esi, esi
        mov si, word ptr a1
        call address
    }
}
DECL_FUNC(void (*nullsub_4)(), nullsub_4, 0x4f7b17);
DECL_FUNC(_DWORD (__cdecl*__ld12cvt_0)(_DWORD a1, _DWORD a2), __ld12cvt_0, 0x4f99e4);
DECL_FUNC(_DWORD (__cdecl*___ld12cvt)(_DWORD a1, _DWORD a2), ___ld12cvt, 0x4f99fa);
DECL_FUNC(int (__cdecl*___strgtold12_0)(int a1, int a2), ___strgtold12_0, 0x4f9a10);
DECL_FUNC(int (__cdecl*____strgtold12)(int a1, int a2), ____strgtold12, 0x4f9a4d);
DECL_FUNC(int (*false_0)(), false_0, 0x4fb90b);
DECL_FUNC(int (*LeagueEventConstructor)(), LeagueEventConstructor, 0x4fc150);
DECL_FUNC(int (*_list_ctor)(), _list_ctor, 0x4fc180);
DECL_FUNC(int (*_initFloat)(), _initFloat, 0x4fc1a0);
DECL_FUNC(int (*_initFloat_0)(), _initFloat_0, 0x4fc1b0);
DECL_FUNC(int (*CriticalSectionConstructor_1)(), CriticalSectionConstructor_1, 0x4fc1c0);
DECL_FUNC(int (*_initFloat_1)(), _initFloat_1, 0x4fc1e0);
DECL_FUNC(int (*_initFloat_2)(), _initFloat_2, 0x4fc1f0);
DECL_FUNC(int (*_initFloat_3)(), _initFloat_3, 0x4fc200);
DECL_FUNC(int (*ExceptionFilterConstructor)(), ExceptionFilterConstructor, 0x4fc210);
DECL_FUNC(int (*_initFloat_4)(), _initFloat_4, 0x4fc230);
DECL_FUNC(int (*_list_ctor_0)(), _list_ctor_0, 0x4fc240);
DECL_FUNC(int (*_initFloat_5)(), _initFloat_5, 0x4fc260);
DECL_FUNC(int (*_initFloat_6)(), _initFloat_6, 0x4fc270);
DECL_FUNC(int (*_initFloat_7)(), _initFloat_7, 0x4fc280);
DECL_FUNC(int (*_initFloat_8)(), _initFloat_8, 0x4fc290);
DECL_FUNC(int (*_initFloat_9)(), _initFloat_9, 0x4fc2a0);
DECL_FUNC(int (*_initFloat_10)(), _initFloat_10, 0x4fc2b0);
DECL_FUNC(int (*_initFloat_11)(), _initFloat_11, 0x4fc2c0);
DECL_FUNC(int (*_initFloat_12)(), _initFloat_12, 0x4fc2d0);
DECL_FUNC(int (*_initFloat_13)(), _initFloat_13, 0x4fc2e0);
DECL_FUNC(int (*_initFloat_14)(), _initFloat_14, 0x4fc2f0);
DECL_FUNC(int (*_initFloat_15)(), _initFloat_15, 0x4fc300);
DECL_FUNC(int (*_initFloat_16)(), _initFloat_16, 0x4fc310);
DECL_FUNC(int (*_initFloat_17)(), _initFloat_17, 0x4fc320);
DECL_FUNC(int (*_initFloat_18)(), _initFloat_18, 0x4fc330);
DECL_FUNC(int (*_initFloat_19)(), _initFloat_19, 0x4fc340);
DECL_FUNC(int (*_initFloat_20)(), _initFloat_20, 0x4fc350);
DECL_FUNC(int (*_initFloat_21)(), _initFloat_21, 0x4fc360);
DECL_FUNC(int (*CriticalSectionConstructor_0)(), CriticalSectionConstructor_0, 0x4fc370);
DECL_FUNC(int (*_list_sfx_ctor)(), _list_sfx_ctor, 0x4fc390);
DECL_FUNC(int (*_initFloat_22)(), _initFloat_22, 0x4fc3b0);
DECL_FUNC(int (*_initFloat_23)(), _initFloat_23, 0x4fc3c0);
DECL_FUNC(int (*_list_netMode_ctor)(), _list_netMode_ctor, 0x4fc3d0);
DECL_FUNC(int (*_initFloat_24)(), _initFloat_24, 0x4fc3f0);
DECL_FUNC(int (*_list_characters_ctor)(), _list_characters_ctor, 0x4fc400);
DECL_FUNC(int (*_initFloat_25)(), _initFloat_25, 0x4fc420);
DECL_FUNC(int (*_initFloat_26)(), _initFloat_26, 0x4fc430);
DECL_FUNC(int (*_initFloat_27)(), _initFloat_27, 0x4fc440);
DECL_FUNC(int (*_initFloat_28)(), _initFloat_28, 0x4fc450);
DECL_FUNC(int (*_list_ctor_1)(), _list_ctor_1, 0x4fc460);
DECL_FUNC(int (*_initFloat_29)(), _initFloat_29, 0x4fc480);
DECL_FUNC(int (*_initFloat_30)(), _initFloat_30, 0x4fc490);
DECL_FUNC(int (*_list_ctor_2)(), _list_ctor_2, 0x4fc4a0);
DECL_FUNC(int (*_initFloat_31)(), _initFloat_31, 0x4fc4c0);
DECL_FUNC(int (*_initFloat_32)(), _initFloat_32, 0x4fc4d0);
DECL_FUNC(int (*_initFloat_33)(), _initFloat_33, 0x4fc4e0);
DECL_FUNC(int (*_initFloat_34)(), _initFloat_34, 0x4fc4f0);
DECL_FUNC(int (*_initFloat_35)(), _initFloat_35, 0x4fc500);
DECL_FUNC(int (*_initFloat_36)(), _initFloat_36, 0x4fc510);
DECL_FUNC(int (*_initFloat_37)(), _initFloat_37, 0x4fc520);
DECL_FUNC(int (*_initFloat_38)(), _initFloat_38, 0x4fc530);
DECL_FUNC(int (*_list_modem_ctor)(), _list_modem_ctor, 0x4fc540);
DECL_FUNC(int (*_list_phonebook_ctor)(), _list_phonebook_ctor, 0x4fc560);
DECL_FUNC(int (*_initFloat_39)(), _initFloat_39, 0x4fc580);
DECL_FUNC(int (*_initFloat_40)(), _initFloat_40, 0x4fc590);
DECL_FUNC(int (*_list_ctor_3)(), _list_ctor_3, 0x4fc5a0);
DECL_FUNC(int (*_initFloat_41)(), _initFloat_41, 0x4fc5c0);
DECL_FUNC(int (*_list_BNGameTypeComboBox_ctor)(), _list_BNGameTypeComboBox_ctor, 0x4fc5d0);
DECL_FUNC(int (*_initFloat_42)(), _initFloat_42, 0x4fc5f0);
DECL_FUNC(int (*_initFloat_43)(), _initFloat_43, 0x4fc600);
DECL_FUNC(int (*_initFloat_44)(), _initFloat_44, 0x4fc610);
DECL_FUNC(int (*_list_BNMapComboBox_ctor)(), _list_BNMapComboBox_ctor, 0x4fc620);
DECL_FUNC(int (*_initFloat_45)(), _initFloat_45, 0x4fc640);
DECL_FUNC(int (*_initFloat_46)(), _initFloat_46, 0x4fc650);
DECL_FUNC(int (*_initFloat_47)(), _initFloat_47, 0x4fc660);
DECL_FUNC(int (*_initFloat_48)(), _initFloat_48, 0x4fc670);
DECL_FUNC(int (*_initFloat_49)(), _initFloat_49, 0x4fc680);
DECL_FUNC(int (*_initFloat_50)(), _initFloat_50, 0x4fc690);
DECL_FUNC(int (*_initFloat_51)(), _initFloat_51, 0x4fc6a0);
DECL_FUNC(int (*_initFloat_52)(), _initFloat_52, 0x4fc6b0);
DECL_FUNC(int (*_initFloat_53)(), _initFloat_53, 0x4fc6c0);
DECL_FUNC(int (*_initFloat_54)(), _initFloat_54, 0x4fc6d0);
DECL_FUNC(int (*_initFloat_55)(), _initFloat_55, 0x4fc6e0);
DECL_FUNC(int (*_initFloat_56)(), _initFloat_56, 0x4fc6f0);
DECL_FUNC(int (*_initFloat_57)(), _initFloat_57, 0x4fc700);
DECL_FUNC(int (*_initFloat_58)(), _initFloat_58, 0x4fc710);
DECL_FUNC(int (*_initFloat_59)(), _initFloat_59, 0x4fc720);
DECL_FUNC(int (*_initFloat_60)(), _initFloat_60, 0x4fc730);
DECL_FUNC(int (*_initFloat_61)(), _initFloat_61, 0x4fc740);
DECL_FUNC(int (*_initFloat_62)(), _initFloat_62, 0x4fc750);
DECL_FUNC(int (*_initFloat_63)(), _initFloat_63, 0x4fc760);
DECL_FUNC(int (*_initFloat_64)(), _initFloat_64, 0x4fc770);
DECL_FUNC(int (*_initFloat_65)(), _initFloat_65, 0x4fc780);
DECL_FUNC(int (*_initFloat_66)(), _initFloat_66, 0x4fc790);
DECL_FUNC(int (*_initFloat_67)(), _initFloat_67, 0x4fc7a0);
DECL_FUNC(int (*_initFloat_68)(), _initFloat_68, 0x4fc7b0);
DECL_FUNC(int (*_initFloat_69)(), _initFloat_69, 0x4fc7c0);
DECL_FUNC(int (*_initFloat_70)(), _initFloat_70, 0x4fc7d0);
DECL_FUNC(int (*_initFloat_71)(), _initFloat_71, 0x4fc7e0);
DECL_FUNC(int (*_list_playerTriggers_ctor)(), _list_playerTriggers_ctor, 0x4fc7f0);
DECL_FUNC(int (*_initFloat_72)(), _initFloat_72, 0x4fc870);
DECL_FUNC(int (*_initFloat_73)(), _initFloat_73, 0x4fc880);
DECL_FUNC(int (*_initFloat_74)(), _initFloat_74, 0x4fc890);
DECL_FUNC(int (*_initFloat_75)(), _initFloat_75, 0x4fc8a0);
DECL_FUNC(int (*_initFloat_76)(), _initFloat_76, 0x4fc8b0);
DECL_FUNC(int (*_initFloat_77)(), _initFloat_77, 0x4fc8c0);
DECL_FUNC(int (*_initFloat_78)(), _initFloat_78, 0x4fc8d0);
DECL_FUNC(int (*_initFloat_79)(), _initFloat_79, 0x4fc8e0);
DECL_FUNC(int (*_initFloat_80)(), _initFloat_80, 0x4fc8f0);
DECL_FUNC(int (*_initFloat_81)(), _initFloat_81, 0x4fc900);
DECL_FUNC(int (*_initFloat_82)(), _initFloat_82, 0x4fc910);
DECL_FUNC(int (*_initFloat_83)(), _initFloat_83, 0x4fc920);
DECL_FUNC(int (*_initFloat_84)(), _initFloat_84, 0x4fc930);
DECL_FUNC(int (*_initFloat_85)(), _initFloat_85, 0x4fc940);
DECL_FUNC(int (*_initFloat_86)(), _initFloat_86, 0x4fc950);
DECL_FUNC(int (*_initFloat_87)(), _initFloat_87, 0x4fc960);
DECL_FUNC(int (*_initFloat_88)(), _initFloat_88, 0x4fc970);
DECL_FUNC(int (*_initFloat_89)(), _initFloat_89, 0x4fc980);
DECL_FUNC(int (*_initFloat_90)(), _initFloat_90, 0x4fc990);
DECL_FUNC(int (*_list_league_ctor)(), _list_league_ctor, 0x4fc9a0);
DECL_FUNC(int (*_initFloat_91)(), _initFloat_91, 0x4fc9c0);
DECL_FUNC(int (*_initFloat_92)(), _initFloat_92, 0x4fc9d0);
DECL_FUNC(int (*_initFloat_93)(), _initFloat_93, 0x4fc9e0);
DECL_FUNC(int (*_initFloat_94)(), _initFloat_94, 0x4fc9f0);
DECL_FUNC(int (*_initFloat_95)(), _initFloat_95, 0x4fca00);
DECL_FUNC(int (*_initFloat_96)(), _initFloat_96, 0x4fca10);
DECL_FUNC(int (*_initFloat_97)(), _initFloat_97, 0x4fca20);
DECL_FUNC(int (*_initFloat_98)(), _initFloat_98, 0x4fca30);
DECL_FUNC(int (*_initFloat_)(), _initFloat_, 0x4fca40);
DECL_FUNC(int (*_initFloat__0)(), _initFloat__0, 0x4fca50);
DECL_FUNC(int (*_initFloat__1)(), _initFloat__1, 0x4fca60);
DECL_FUNC(int (*_initFloat__2)(), _initFloat__2, 0x4fca70);
DECL_FUNC(int (*_initFloat__3)(), _initFloat__3, 0x4fca80);
DECL_FUNC(int (*_initFloat__4)(), _initFloat__4, 0x4fca90);
DECL_FUNC(int (*_initFloat__5)(), _initFloat__5, 0x4fcaa0);
DECL_FUNC(int (*_initFloat__6)(), _initFloat__6, 0x4fcab0);
DECL_FUNC(int (*_initFloat__7)(), _initFloat__7, 0x4fcac0);
DECL_FUNC(int (*_initFloat__8)(), _initFloat__8, 0x4fcad0);
DECL_FUNC(int (*_initFloat__9)(), _initFloat__9, 0x4fcae0);
DECL_FUNC(int (*_initFloat__10)(), _initFloat__10, 0x4fcaf0);
DECL_FUNC(int (*_initFloat__11)(), _initFloat__11, 0x4fcb00);
DECL_FUNC(int (*_list_banned_ctor)(), _list_banned_ctor, 0x4fcb10);
DECL_FUNC(int (*_initFloat__12)(), _initFloat__12, 0x4fcb30);
DECL_FUNC(int (*_initFloat__13)(), _initFloat__13, 0x4fcb40);
DECL_FUNC(int (*_initFloat__14)(), _initFloat__14, 0x4fcb50);
DECL_FUNC(int (*_initFloat__15)(), _initFloat__15, 0x4fcb60);
DECL_FUNC(int (*_list_ctor_4)(), _list_ctor_4, 0x4fcb70);
DECL_FUNC(int (*_list_ctor_5)(), _list_ctor_5, 0x4fcb90);
DECL_FUNC(int (*_initFloat__16)(), _initFloat__16, 0x4fcbb0);
DECL_FUNC(int (*_initFloat__17)(), _initFloat__17, 0x4fcbc0);
DECL_FUNC(int (*_initFloat__18)(), _initFloat__18, 0x4fcbd0);
DECL_FUNC(int (*_initFloat__19)(), _initFloat__19, 0x4fcbe0);
DECL_FUNC(int (*_initFloat__20)(), _initFloat__20, 0x4fcbf0);
DECL_FUNC(int (*_initFloat__21)(), _initFloat__21, 0x4fcc00);
DECL_FUNC(int (*_initFloat__22)(), _initFloat__22, 0x4fcc10);
DECL_FUNC(int (*_initFloat__23)(), _initFloat__23, 0x4fcc20);
DECL_FUNC(int (*_initFloat__24)(), _initFloat__24, 0x4fcc30);
DECL_FUNC(int (*_initFloat__25)(), _initFloat__25, 0x4fcc40);
DECL_FUNC(int (*_initFloat__26)(), _initFloat__26, 0x4fcc50);
DECL_FUNC(int (*_list_briefingTriggers_ctor)(), _list_briefingTriggers_ctor, 0x4fcc60);
DECL_FUNC(int (*_initFloat__27)(), _initFloat__27, 0x4fcc80);
DECL_FUNC(int (*_initFloat__28)(), _initFloat__28, 0x4fcc90);
DECL_FUNC(int (*_initFloat__29)(), _initFloat__29, 0x4fcca0);
DECL_FUNC(int (*_initFloat__30)(), _initFloat__30, 0x4fccb0);
DECL_FUNC(int (*_initFloat__31)(), _initFloat__31, 0x4fccc0);
DECL_FUNC(int (*_initFloat__32)(), _initFloat__32, 0x4fccd0);
DECL_FUNC(int (*_initFloat__33)(), _initFloat__33, 0x4fcce0);
DECL_FUNC(int (*_initFloat__34)(), _initFloat__34, 0x4fccf0);
DECL_FUNC(int (*_initFloat__35)(), _initFloat__35, 0x4fcd00);
DECL_FUNC(int (*_initFloat__36)(), _initFloat__36, 0x4fcd10);
DECL_FUNC(int (*_list_ctor_6)(), _list_ctor_6, 0x4fcd20);
DECL_FUNC(int (*_initFloat__37)(), _initFloat__37, 0x4fcd40);
DECL_FUNC(int (*_initFloat__38)(), _initFloat__38, 0x4fcd50);
DECL_FUNC(int (*_initFloat__39)(), _initFloat__39, 0x4fcd60);
DECL_FUNC(int (*_initFloat__40)(), _initFloat__40, 0x4fcd70);
DECL_FUNC(int (*_initFloat__41)(), _initFloat__41, 0x4fcd80);
DECL_FUNC(int (*_initFloat__42)(), _initFloat__42, 0x4fcd90);
DECL_FUNC(int (*_initFloat__43)(), _initFloat__43, 0x4fcda0);
DECL_FUNC(int (*_initFloat__44)(), _initFloat__44, 0x4fcdb0);
DECL_FUNC(int (*_initFloat__45)(), _initFloat__45, 0x4fcdc0);
DECL_FUNC(int (*_initFloat__46)(), _initFloat__46, 0x4fcdd0);
DECL_FUNC(int (*_initFloat__47)(), _initFloat__47, 0x4fcde0);
DECL_FUNC(int (*_initFloat__48)(), _initFloat__48, 0x4fcdf0);
DECL_FUNC(int (*_initFloat__49)(), _initFloat__49, 0x4fce00);
DECL_FUNC(int (*_initFloat__50)(), _initFloat__50, 0x4fce10);
DECL_FUNC(int (*_initFloat__51)(), _initFloat__51, 0x4fce20);
DECL_FUNC(int (*_initFloat__52)(), _initFloat__52, 0x4fce30);
DECL_FUNC(int (*_initFloat__53)(), _initFloat__53, 0x4fce40);
DECL_FUNC(int (*_initFloat__54)(), _initFloat__54, 0x4fce50);
DECL_FUNC(int (*_initFloat__55)(), _initFloat__55, 0x4fce60);
DECL_FUNC(int (*_initFloat__56)(), _initFloat__56, 0x4fce70);
DECL_FUNC(int (*_initFloat__57)(), _initFloat__57, 0x4fce80);
DECL_FUNC(int (*_initFloat__58)(), _initFloat__58, 0x4fce90);
DECL_FUNC(int (*_initFloat__59)(), _initFloat__59, 0x4fcea0);
DECL_FUNC(int (*_initFloat__60)(), _initFloat__60, 0x4fceb0);
DECL_FUNC(int (*_initFloat__61)(), _initFloat__61, 0x4fcec0);
DECL_FUNC(int (*_initFloat__62)(), _initFloat__62, 0x4fced0);
DECL_FUNC(int (*_initFloat__63)(), _initFloat__63, 0x4fcee0);
DECL_FUNC(int (*_initFloat__64)(), _initFloat__64, 0x4fcef0);
DECL_FUNC(int (*SBigConstructor)(), SBigConstructor, 0x4fcf00);
DECL_FUNC(int (*SBigConstructor_0)(), SBigConstructor_0, 0x4fcf20);
DECL_FUNC(int (*_initFloat__65)(), _initFloat__65, 0x4fcf40);
DECL_FUNC(int (*_initFloat__66)(), _initFloat__66, 0x4fcf50);
DECL_FUNC(int (*_initFloat__67)(), _initFloat__67, 0x4fcf60);
DECL_FUNC(int (*_initFloat__68)(), _initFloat__68, 0x4fcf70);
DECL_FUNC(int (*_initFloat__69)(), _initFloat__69, 0x4fcf80);
DECL_FUNC(int (*_initFloat__70)(), _initFloat__70, 0x4fcf90);
DECL_FUNC(int (*_initFloat__71)(), _initFloat__71, 0x4fcfa0);
DECL_FUNC(int (*_initFloat__72)(), _initFloat__72, 0x4fcfb0);
DECL_FUNC(int (*_initFloat__73)(), _initFloat__73, 0x4fcfc0);
DECL_FUNC(int (*_initFloat__74)(), _initFloat__74, 0x4fcfd0);
DECL_FUNC(int (*_initFloat__75)(), _initFloat__75, 0x4fcfe0);
DECL_FUNC(int (*_initFloat__76)(), _initFloat__76, 0x4fcff0);
DECL_FUNC(int (*_initFloat__77)(), _initFloat__77, 0x4fd000);
DECL_FUNC(int (*_initFloat__78)(), _initFloat__78, 0x4fd010);
DECL_FUNC(int (*_initFloat__79)(), _initFloat__79, 0x4fd020);
DECL_FUNC(int (*_initFloat__80)(), _initFloat__80, 0x4fd030);
DECL_FUNC(int (*_initFloat__81)(), _initFloat__81, 0x4fd040);
DECL_FUNC(int (*_initFloat__82)(), _initFloat__82, 0x4fd050);
DECL_FUNC(int (*_initFloat__83)(), _initFloat__83, 0x4fd060);
DECL_FUNC(int (*_initFloat__84)(), _initFloat__84, 0x4fd070);
DECL_FUNC(int (*_initFloat__85)(), _initFloat__85, 0x4fd080);
DECL_FUNC(int (*_initFloat__86)(), _initFloat__86, 0x4fd090);
DECL_FUNC(int (*_initFloat__87)(), _initFloat__87, 0x4fd0a0);
DECL_FUNC(int (*_initFloat__88)(), _initFloat__88, 0x4fd0b0);
DECL_FUNC(int (*_initFloat__89)(), _initFloat__89, 0x4fd0c0);
DECL_FUNC(int (*_initFloat__90)(), _initFloat__90, 0x4fd0d0);
DECL_FUNC(int (*_initFloat__91)(), _initFloat__91, 0x4fd0e0);
DECL_FUNC(int (*_initFloat__92)(), _initFloat__92, 0x4fd0f0);
DECL_FUNC(int (*_initFloat__93)(), _initFloat__93, 0x4fd100);
DECL_FUNC(int (*_initFloat__94)(), _initFloat__94, 0x4fd110);
DECL_FUNC(int (*_initFloat__95)(), _initFloat__95, 0x4fd120);
DECL_FUNC(int (*_initFloat__96)(), _initFloat__96, 0x4fd130);
DECL_FUNC(int (*_initFloat__97)(), _initFloat__97, 0x4fd140);
DECL_FUNC(int (*_initFloat__98)(), _initFloat__98, 0x4fd150);
DECL_FUNC(int (*_initFloat__)(), _initFloat__, 0x4fd160);
DECL_FUNC(int (*_initFloat___0)(), _initFloat___0, 0x4fd170);
DECL_FUNC(int (*_initFloat___1)(), _initFloat___1, 0x4fd180);
DECL_FUNC(int (*_initFloat___2)(), _initFloat___2, 0x4fd190);
DECL_FUNC(int (*_initFloat___3)(), _initFloat___3, 0x4fd1a0);
DECL_FUNC(int (*_initFloat___4)(), _initFloat___4, 0x4fd1b0);
DECL_FUNC(int (*_initFloat___5)(), _initFloat___5, 0x4fd1c0);
DECL_FUNC(int (*_initFloat___6)(), _initFloat___6, 0x4fd1d0);
DECL_FUNC(int (*_initFloat___7)(), _initFloat___7, 0x4fd1e0);
DECL_FUNC(int (*_initFloat___8)(), _initFloat___8, 0x4fd1f0);
DECL_FUNC(int (*_initFloat___9)(), _initFloat___9, 0x4fd200);
DECL_FUNC(int (*_initFloat___10)(), _initFloat___10, 0x4fd210);
DECL_FUNC(int (*_initFloat___11)(), _initFloat___11, 0x4fd220);
DECL_FUNC(int (*_initFloat___12)(), _initFloat___12, 0x4fd230);
DECL_FUNC(int (*_initFloat___13)(), _initFloat___13, 0x4fd240);
DECL_FUNC(int (*_initFloat___14)(), _initFloat___14, 0x4fd250);
DECL_FUNC(int (*_initFloat___15)(), _initFloat___15, 0x4fd260);
DECL_FUNC(int (*_initFloat___16)(), _initFloat___16, 0x4fd270);
DECL_FUNC(int (*_initFloat___17)(), _initFloat___17, 0x4fd280);
DECL_FUNC(int (*_list_areaFixups_ctor)(), _list_areaFixups_ctor, 0x4fd290);
DECL_FUNC(int (*_initFloat___18)(), _initFloat___18, 0x4fd2b0);
DECL_FUNC(int (*_initFloat___19)(), _initFloat___19, 0x4fd2c0);
DECL_FUNC(int (*_initFloat___20)(), _initFloat___20, 0x4fd2d0);
DECL_FUNC(int (*_initFloat___21)(), _initFloat___21, 0x4fd2e0);
DECL_FUNC(int (*_initFloat___22)(), _initFloat___22, 0x4fd2f0);
DECL_FUNC(int (*_initFloat___23)(), _initFloat___23, 0x4fd300);
DECL_FUNC(int (*_initFloat___24)(), _initFloat___24, 0x4fd310);
DECL_FUNC(int (*_initFloat___25)(), _initFloat___25, 0x4fd320);
DECL_FUNC(int (*_initFloat___26)(), _initFloat___26, 0x4fd330);
DECL_FUNC(int (*_initFloat___27)(), _initFloat___27, 0x4fd340);
DECL_FUNC(int (*_initFloat___28)(), _initFloat___28, 0x4fd350);
DECL_FUNC(int (*_initFloat___29)(), _initFloat___29, 0x4fd360);
DECL_FUNC(int (*_initFloat___30)(), _initFloat___30, 0x4fd370);
DECL_FUNC(int (*_initFloat___31)(), _initFloat___31, 0x4fd380);
DECL_FUNC(int (*_initFloat___32)(), _initFloat___32, 0x4fd390);
DECL_FUNC(int (*CriticalSectionConstructor)(), CriticalSectionConstructor, 0x4fd3a0);
DECL_FUNC(int (*_initFloat___33)(), _initFloat___33, 0x4fd3c0);
DECL_FUNC(int (*_initFloat___34)(), _initFloat___34, 0x4fd3d0);
DECL_FUNC(int (*_initFloat___35)(), _initFloat___35, 0x4fd3e0);
DECL_FUNC(int (*_initFloat___36)(), _initFloat___36, 0x4fd3f0);
DECL_FUNC(int (*_initFloat___37)(), _initFloat___37, 0x4fd400);
DECL_FUNC(int (*_initFloat___38)(), _initFloat___38, 0x4fd410);
DECL_FUNC(int (*_initFloat___39)(), _initFloat___39, 0x4fd420);
DECL_FUNC(int (*_initFloat___40)(), _initFloat___40, 0x4fd430);
DECL_FUNC(int (*_initFloat___41)(), _initFloat___41, 0x4fd440);
DECL_FUNC(int (*_initFloat___42)(), _initFloat___42, 0x4fd450);
DECL_FUNC(int (*_list_ctor_7)(), _list_ctor_7, 0x4fd460);
DECL_FUNC(int (*_initFloat___43)(), _initFloat___43, 0x4fd480);
DECL_FUNC(int (*_initFloat___44)(), _initFloat___44, 0x4fd490);
DECL_FUNC(int (*_initFloat___45)(), _initFloat___45, 0x4fd4a0);
DECL_FUNC(int (*_initFloat___46)(), _initFloat___46, 0x4fd4b0);
DECL_FUNC(int (*_initFloat___47)(), _initFloat___47, 0x4fd4c0);
DECL_FUNC(int (*_initFloat___48)(), _initFloat___48, 0x4fd4d0);
DECL_FUNC(int (*_initFloat___49)(), _initFloat___49, 0x4fd4e0);
DECL_FUNC(int (*_initFloat___50)(), _initFloat___50, 0x4fd4f0);
DECL_FUNC(int (*_initFloat___51)(), _initFloat___51, 0x4fd500);
DECL_FUNC(int (*_initFloat___52)(), _initFloat___52, 0x4fd510);
DECL_FUNC(int (*_list_ctor_8)(), _list_ctor_8, 0x4fd520);
DECL_FUNC(int (*_initFloat___53)(), _initFloat___53, 0x4fd540);
DECL_FUNC(int (*_initFloat___54)(), _initFloat___54, 0x4fd550);
DECL_FUNC(int (*UIDlgListConstructor)(), UIDlgListConstructor, 0x4fd560);
DECL_FUNC(int (*_initFloat___55)(), _initFloat___55, 0x4fd580);
DECL_FUNC(int (*_initFloat___56)(), _initFloat___56, 0x4fd590);
DECL_FUNC(int (*_initFloat___57)(), _initFloat___57, 0x4fd5a0);
DECL_FUNC(int (*_initFloat___58)(), _initFloat___58, 0x4fd5b0);
DECL_FUNC(int (*_initFloat___59)(), _initFloat___59, 0x4fd5c0);
DECL_FUNC(int (*_initFloat___60)(), _initFloat___60, 0x4fd5d0);
DECL_FUNC(int (*_initFloat___61)(), _initFloat___61, 0x4fd5e0);
DECL_FUNC(int (*_initFloat___62)(), _initFloat___62, 0x4fd5f0);
DECL_FUNC(int (*_initFloat___63)(), _initFloat___63, 0x4fd600);
DECL_FUNC(int (*_initFloat___64)(), _initFloat___64, 0x4fd610);
DECL_FUNC(int (*_initFloat___65)(), _initFloat___65, 0x4fd620);
DECL_FUNC(int (*_initFloat___66)(), _initFloat___66, 0x4fd630);
DECL_FUNC(int (*_initFloat___67)(), _initFloat___67, 0x4fd640);
DECL_FUNC(int (*_initFloat___68)(), _initFloat___68, 0x4fd650);
DECL_FUNC(int (*_initFloat___69)(), _initFloat___69, 0x4fd660);
DECL_FUNC(void (__cdecl*LeagueEventDestructor)(), LeagueEventDestructor, 0x4fd670);
DECL_FUNC(void (__cdecl*_list_dtor)(), _list_dtor, 0x4fd690);
DECL_FUNC(void (__cdecl*CriticalSectionDestructor_1)(), CriticalSectionDestructor_1, 0x4fd6f0);
DECL_FUNC(void (__cdecl*j_ExceptionFilterDestructor)(), j_ExceptionFilterDestructor, 0x4fd700);
DECL_FUNC(void (__cdecl*_list_dtor_0)(), _list_dtor_0, 0x4fd710);
DECL_FUNC(void (__cdecl*CriticalSectionDestructor_0)(), CriticalSectionDestructor_0, 0x4fd770);
DECL_FUNC(void (__cdecl*_list_sfx_dtor)(), _list_sfx_dtor, 0x4fd780);
DECL_FUNC(void (__cdecl*_list_netMode_dtor)(), _list_netMode_dtor, 0x4fd7e0);
DECL_FUNC(void (__cdecl*_list_characters_dtor)(), _list_characters_dtor, 0x4fd840);
DECL_FUNC(void (__cdecl*_list_dtor_1)(), _list_dtor_1, 0x4fd8a0);
DECL_FUNC(void (__cdecl*_list_dtor_2)(), _list_dtor_2, 0x4fd900);
DECL_FUNC(void (__cdecl*_list_modem_dtor)(), _list_modem_dtor, 0x4fd960);
DECL_FUNC(void (__cdecl*_list_phonebook_dtor)(), _list_phonebook_dtor, 0x4fd9c0);
DECL_FUNC(void (__cdecl*_list_dtor_3)(), _list_dtor_3, 0x4fda20);
DECL_FUNC(void (__cdecl*_list_BNGameTypeComboBox_dtor)(), _list_BNGameTypeComboBox_dtor, 0x4fda80);
DECL_FUNC(void (__cdecl*_list_BNMapComboBox_dtor)(), _list_BNMapComboBox_dtor, 0x4fdae0);
DECL_FUNC(void (__cdecl*_list_playerTriggers_dtor)(), _list_playerTriggers_dtor, 0x4fdb40);
DECL_FUNC(void (__cdecl*_list_league_dtor)(), _list_league_dtor, 0x4fdba0);
DECL_FUNC(void (__cdecl*_list_banned_dtor)(), _list_banned_dtor, 0x4fdc00);
DECL_FUNC(void (__cdecl*_list_dtor_4)(), _list_dtor_4, 0x4fdc60);
DECL_FUNC(void (__cdecl*_list_dtor_5)(), _list_dtor_5, 0x4fdcc0);
DECL_FUNC(void (__cdecl*_list_briefingTriggers_dtor)(), _list_briefingTriggers_dtor, 0x4fdd20);
DECL_FUNC(void (__cdecl*_list_dtor_6)(), _list_dtor_6, 0x4fdd80);
DECL_FUNC(void (__cdecl*SBigDestructor)(), SBigDestructor, 0x4fdde0);
DECL_FUNC(void (__cdecl*SBigDestructor_0)(), SBigDestructor_0, 0x4fddf0);
DECL_FUNC(void (__cdecl*_list_areaFixups_dtor)(), _list_areaFixups_dtor, 0x4fde00);
DECL_FUNC(void (__cdecl*CriticalSectionDestructor)(), CriticalSectionDestructor, 0x4fde60);
DECL_FUNC(void (__cdecl*_list_dtor_7)(), _list_dtor_7, 0x4fde70);
DECL_FUNC(void (__cdecl*_list_dtor_8)(), _list_dtor_8, 0x4fded0);
DECL_FUNC(void (__cdecl*UIDlgListDestructor)(), UIDlgListDestructor, 0x4fdf30);
_SCOPETABLE_ENTRY& stru_4FE5F0 = * ((decltype(&stru_4FE5F0)) 0x4fe5f0);
CHAR(&ProcName)[] = * ((decltype(&ProcName)) 0x4fe5fc);
CHAR(&ModuleName)[] = * ((decltype(&ModuleName)) 0x4fe60c);
_SCOPETABLE_ENTRY& stru_4FE618 = * ((decltype(&stru_4FE618)) 0x4fe618);
char(&aRuntimeError)[15] = * ((decltype(&aRuntimeError)) 0x4fe624);
char(&aTlossError)[14] = * ((decltype(&aTlossError)) 0x4fe634);
char(&aSingError)[13] = * ((decltype(&aSingError)) 0x4fe644);
char(&aDomainError)[15] = * ((decltype(&aDomainError)) 0x4fe654);
char(&aR6029ThisAppli)[162] = * ((decltype(&aR6029ThisAppli)) 0x4fe668);
char(&aR6028UnableToI)[37] = * ((decltype(&aR6028UnableToI)) 0x4fe70c);
char(&aR6027NotEnough)[53] = * ((decltype(&aR6027NotEnough)) 0x4fe734);
char(&aR6026NotEnough)[53] = * ((decltype(&aR6026NotEnough)) 0x4fe76c);
char(&aR6025PureVirtu)[38] = * ((decltype(&aR6025PureVirtu)) 0x4fe7a4);
char(&aR6024NotEnough)[53] = * ((decltype(&aR6024NotEnough)) 0x4fe7cc);
char(&aR6019UnableToO)[41] = * ((decltype(&aR6019UnableToO)) 0x4fe804);
char(&aR6018Unexpecte)[33] = * ((decltype(&aR6018Unexpecte)) 0x4fe830);
char(&aR6017Unexpecte)[45] = * ((decltype(&aR6017Unexpecte)) 0x4fe854);
char(&aR6016NotEnough)[44] = * ((decltype(&aR6016NotEnough)) 0x4fe884);
char(&aThisApplicatio)[150] = * ((decltype(&aThisApplicatio)) 0x4fe8b0);
char(&aR6009NotEnough)[44] = * ((decltype(&aR6009NotEnough)) 0x4fe948);
char(&aR6008NotEnough)[42] = * ((decltype(&aR6008NotEnough)) 0x4fe974);
char(&aR6002FloatingP)[37] = * ((decltype(&aR6002FloatingP)) 0x4fe9a0);
char(&aMicrosoftVisua)[37] = * ((decltype(&aMicrosoftVisua)) 0x4fe9c8);
char(&aRuntimeErrorPr)[] = * ((decltype(&aRuntimeErrorPr)) 0x4fe9f0);
char(&aProgramNameUnk)[] = * ((decltype(&aProgramNameUnk)) 0x4fea0c);
_SCOPETABLE_ENTRY& stru_4FEA28 = * ((decltype(&stru_4FEA28)) 0x4fea28);
_SCOPETABLE_ENTRY& stru_4FEA38 = * ((decltype(&stru_4FEA38)) 0x4fea38);
_SCOPETABLE_ENTRY(&stru_4FEA48)[2] = * ((decltype(&stru_4FEA48)) 0x4fea48);
CHAR(&aFlsfree)[] = * ((decltype(&aFlsfree)) 0x4fea60);
CHAR(&aFlssetvalue)[] = * ((decltype(&aFlssetvalue)) 0x4fea68);
CHAR(&aFlsgetvalue)[] = * ((decltype(&aFlsgetvalue)) 0x4fea74);
CHAR(&aFlsalloc)[] = * ((decltype(&aFlsalloc)) 0x4fea80);
CHAR(&aKernel32_dll_0)[] = * ((decltype(&aKernel32_dll_0)) 0x4fea8c);
_SCOPETABLE_ENTRY& stru_4FEAA0 = * ((decltype(&stru_4FEAA0)) 0x4feaa0);
_SCOPETABLE_ENTRY& stru_4FEAB0 = * ((decltype(&stru_4FEAB0)) 0x4feab0);
CHAR(&aGetprocesswind)[] = * ((decltype(&aGetprocesswind)) 0x4feabc);
CHAR(&aGetuserobjecti)[] = * ((decltype(&aGetuserobjecti)) 0x4fead4);
CHAR(&aGetlastactivep)[] = * ((decltype(&aGetlastactivep)) 0x4feaf0);
CHAR(&aGetactivewindo)[] = * ((decltype(&aGetactivewindo)) 0x4feb04);
CHAR(&aMessageboxa)[] = * ((decltype(&aMessageboxa)) 0x4feb14);
CHAR(&LibFileName)[] = * ((decltype(&LibFileName)) 0x4feb20);
_SCOPETABLE_ENTRY& stru_4FEB30 = * ((decltype(&stru_4FEB30)) 0x4feb30);
_SCOPETABLE_ENTRY& stru_4FEB40 = * ((decltype(&stru_4FEB40)) 0x4feb40);
_SCOPETABLE_ENTRY& stru_4FEB50 = * ((decltype(&stru_4FEB50)) 0x4feb50);
_SCOPETABLE_ENTRY& stru_4FEB60 = * ((decltype(&stru_4FEB60)) 0x4feb60);
_SCOPETABLE_ENTRY& stru_4FEB70 = * ((decltype(&stru_4FEB70)) 0x4feb70);
CHAR(&aInitializecrit)[] = * ((decltype(&aInitializecrit)) 0x4feb7c);
_SCOPETABLE_ENTRY& stru_4FEBA8 = * ((decltype(&stru_4FEBA8)) 0x4feba8);
_SCOPETABLE_ENTRY& stru_4FEBB8 = * ((decltype(&stru_4FEBB8)) 0x4febb8);
wchar_t(&aHH)[32] = * ((decltype(&aHH)) 0x4febc8);
_SCOPETABLE_ENTRY& stru_4FED48 = * ((decltype(&stru_4FED48)) 0x4fed48);
_SCOPETABLE_ENTRY& stru_4FED58 = * ((decltype(&stru_4FED58)) 0x4fed58);
_SCOPETABLE_ENTRY& stru_4FED68 = * ((decltype(&stru_4FED68)) 0x4fed68);
char(&aProgram)[] = * ((decltype(&aProgram)) 0x4fed74);
char(&aABufferOverrun)[160] = * ((decltype(&aABufferOverrun)) 0x4fed80);
char(&aBufferOverrunD)[25] = * ((decltype(&aBufferOverrunD)) 0x4fee20);
char(&aASecurityError)[177] = * ((decltype(&aASecurityError)) 0x4fee40);
char(&aUnknownSecurit)[] = * ((decltype(&aUnknownSecurit)) 0x4feef4);
_SCOPETABLE_ENTRY& stru_4FEF18 = * ((decltype(&stru_4FEF18)) 0x4fef18);
wchar_t(&asc_4FF028)[33] = * ((decltype(&asc_4FF028)) 0x4ff028);
const WCHAR& SrcStr = * ((decltype(&SrcStr)) 0x4ff42c);
_SCOPETABLE_ENTRY(&stru_4FF430)[3] = * ((decltype(&stru_4FF430)) 0x4ff430);
_SCOPETABLE_ENTRY& stru_4FF458 = * ((decltype(&stru_4FF458)) 0x4ff458);
char(&aHhMmSs)[9] = * ((decltype(&aHhMmSs)) 0x4ff464);
char(&aDdddMmmmDdYyyy)[20] = * ((decltype(&aDdddMmmmDdYyyy)) 0x4ff470);
char(&aMmDdYy)[9] = * ((decltype(&aMmDdYy)) 0x4ff484);
char(&aPm)[3] = * ((decltype(&aPm)) 0x4ff490);
char(&aAm)[3] = * ((decltype(&aAm)) 0x4ff494);
char(&aDecember)[9] = * ((decltype(&aDecember)) 0x4ff498);
char(&aNovember)[9] = * ((decltype(&aNovember)) 0x4ff4a4);
char(&aOctober)[8] = * ((decltype(&aOctober)) 0x4ff4b0);
char(&aSeptember)[10] = * ((decltype(&aSeptember)) 0x4ff4b8);
char(&aAugust)[7] = * ((decltype(&aAugust)) 0x4ff4c4);
char(&aJuly)[5] = * ((decltype(&aJuly)) 0x4ff4cc);
char(&aJune)[5] = * ((decltype(&aJune)) 0x4ff4d4);
char(&aApril)[6] = * ((decltype(&aApril)) 0x4ff4dc);
char(&aMarch)[6] = * ((decltype(&aMarch)) 0x4ff4e4);
char(&aFebruary)[9] = * ((decltype(&aFebruary)) 0x4ff4ec);
char(&aJanuary)[8] = * ((decltype(&aJanuary)) 0x4ff4f8);
void *& off_4FF500 = * ((decltype(&off_4FF500)) 0x4ff500);
char(&aNov)[4] = * ((decltype(&aNov)) 0x4ff504);
char(&aOct)[4] = * ((decltype(&aOct)) 0x4ff508);
char(&aSep)[4] = * ((decltype(&aSep)) 0x4ff50c);
char(&aAug)[4] = * ((decltype(&aAug)) 0x4ff510);
char(&aJul)[4] = * ((decltype(&aJul)) 0x4ff514);
char(&aJun)[4] = * ((decltype(&aJun)) 0x4ff518);
char(&aMay)[4] = * ((decltype(&aMay)) 0x4ff51c);
char(&aApr)[4] = * ((decltype(&aApr)) 0x4ff520);
char(&aMar)[4] = * ((decltype(&aMar)) 0x4ff524);
char(&aFeb)[4] = * ((decltype(&aFeb)) 0x4ff528);
char(&aJan)[4] = * ((decltype(&aJan)) 0x4ff52c);
char(&aSaturday)[9] = * ((decltype(&aSaturday)) 0x4ff530);
char(&aFriday)[7] = * ((decltype(&aFriday)) 0x4ff53c);
char(&aThursday)[9] = * ((decltype(&aThursday)) 0x4ff544);
char(&aWednesday)[10] = * ((decltype(&aWednesday)) 0x4ff550);
char(&aTuesday)[8] = * ((decltype(&aTuesday)) 0x4ff55c);
char(&aMonday)[7] = * ((decltype(&aMonday)) 0x4ff564);
char(&aSunday)[7] = * ((decltype(&aSunday)) 0x4ff56c);
char(&aSat)[4] = * ((decltype(&aSat)) 0x4ff574);
char(&aFri)[4] = * ((decltype(&aFri)) 0x4ff578);
char(&aThu)[4] = * ((decltype(&aThu)) 0x4ff57c);
char(&aWed)[4] = * ((decltype(&aWed)) 0x4ff580);
char(&aTue)[4] = * ((decltype(&aTue)) 0x4ff584);
char(&aMon)[4] = * ((decltype(&aMon)) 0x4ff588);
char(&aSun)[4] = * ((decltype(&aSun)) 0x4ff58c);
_SCOPETABLE_ENTRY& stru_4FF590 = * ((decltype(&stru_4FF590)) 0x4ff590);
char& byte_4FF59C = * ((decltype(&byte_4FF59C)) 0x4ff59c);
char(&aUnmontuewedthu)[21] = * ((decltype(&aUnmontuewedthu)) 0x4ff59d);
char& byte_4FF5B4 = * ((decltype(&byte_4FF5B4)) 0x4ff5b4);
char(&aAnfebmaraprmay)[36] = * ((decltype(&aAnfebmaraprmay)) 0x4ff5b5);
char(&aTz)[3] = * ((decltype(&aTz)) 0x4ff5dc);
_SCOPETABLE_ENTRY& stru_4FF5E0 = * ((decltype(&stru_4FF5E0)) 0x4ff5e0);
_SCOPETABLE_ENTRY& stru_4FF5F0 = * ((decltype(&stru_4FF5F0)) 0x4ff5f0);
_SCOPETABLE_ENTRY& stru_4FF600 = * ((decltype(&stru_4FF600)) 0x4ff600);
_SCOPETABLE_ENTRY(&stru_4FF610)[2] = * ((decltype(&stru_4FF610)) 0x4ff610);
_SCOPETABLE_ENTRY& stru_4FF640 = * ((decltype(&stru_4FF640)) 0x4ff640);
_SCOPETABLE_ENTRY& stru_4FF650 = * ((decltype(&stru_4FF650)) 0x4ff650);
_SCOPETABLE_ENTRY& stru_4FF660 = * ((decltype(&stru_4FF660)) 0x4ff660);
_SCOPETABLE_ENTRY& stru_4FF670 = * ((decltype(&stru_4FF670)) 0x4ff670);
_SCOPETABLE_ENTRY& stru_4FF680 = * ((decltype(&stru_4FF680)) 0x4ff680);
_SCOPETABLE_ENTRY& stru_4FF690 = * ((decltype(&stru_4FF690)) 0x4ff690);
_SCOPETABLE_ENTRY& stru_4FF6A0 = * ((decltype(&stru_4FF6A0)) 0x4ff6a0);
_SCOPETABLE_ENTRY(&stru_4FF6B0)[2] = * ((decltype(&stru_4FF6B0)) 0x4ff6b0);
char(&byte_4FF6C8)[92] = * ((decltype(&byte_4FF6C8)) 0x4ff6c8);
wchar_t(&aNull_0)[7] = * ((decltype(&aNull_0)) 0x4ff724);
char(&aNull)[7] = * ((decltype(&aNull)) 0x4ff734);
_SCOPETABLE_ENTRY(&stru_4FF740)[3] = * ((decltype(&stru_4FF740)) 0x4ff740);
_SCOPETABLE_ENTRY& stru_4FF768 = * ((decltype(&stru_4FF768)) 0x4ff768);
_SCOPETABLE_ENTRY& stru_4FF778 = * ((decltype(&stru_4FF778)) 0x4ff778);
_SCOPETABLE_ENTRY(&stru_4FF788)[2] = * ((decltype(&stru_4FF788)) 0x4ff788);
_SCOPETABLE_ENTRY& stru_4FF7A0 = * ((decltype(&stru_4FF7A0)) 0x4ff7a0);
_SCOPETABLE_ENTRY& stru_4FF7B0 = * ((decltype(&stru_4FF7B0)) 0x4ff7b0);
_SCOPETABLE_ENTRY(&stru_4FF7C0)[2] = * ((decltype(&stru_4FF7C0)) 0x4ff7c0);
_SCOPETABLE_ENTRY& stru_4FF7D8 = * ((decltype(&stru_4FF7D8)) 0x4ff7d8);
_SCOPETABLE_ENTRY& stru_4FF7E8 = * ((decltype(&stru_4FF7E8)) 0x4ff7e8);
_SCOPETABLE_ENTRY& stru_4FF7F8 = * ((decltype(&stru_4FF7F8)) 0x4ff7f8);
_SCOPETABLE_ENTRY& stru_4FF808 = * ((decltype(&stru_4FF808)) 0x4ff808);
_SCOPETABLE_ENTRY& stru_4FF818 = * ((decltype(&stru_4FF818)) 0x4ff818);
_SCOPETABLE_ENTRY& stru_4FF828 = * ((decltype(&stru_4FF828)) 0x4ff828);
_SCOPETABLE_ENTRY& stru_4FF838 = * ((decltype(&stru_4FF838)) 0x4ff838);
CHAR(&aSetsecurityinf)[] = * ((decltype(&aSetsecurityinf)) 0x4ff844);
CHAR(&aAdvapi32_dll_0)[] = * ((decltype(&aAdvapi32_dll_0)) 0x4ff854);
char(&aForcehighmem)[] = * ((decltype(&aForcehighmem)) 0x4ff864);
char(&aForcelowmem)[] = * ((decltype(&aForcelowmem)) 0x4ff874);
CHAR(&RootPathName)[] = * ((decltype(&RootPathName)) 0x4ff880);
char(&aCreatewindowex)[] = * ((decltype(&aCreatewindowex)) 0x4ff884);
char(&aStarcraft_0)[] = * ((decltype(&aStarcraft_0)) 0x4ff894);
CHAR(&WindowName)[] = * ((decltype(&WindowName)) 0x4ff8a0);
char(&aRegisterclass)[] = * ((decltype(&aRegisterclass)) 0x4ff8ac);
CHAR(&aSwarclass)[] = * ((decltype(&aSwarclass)) 0x4ff8bc);
CHAR(&aStarcraftCheck)[] = * ((decltype(&aStarcraftCheck)) 0x4ff8c8);
char(&aNew)[] = * ((decltype(&aNew)) 0x4ff8ec);
char(&aDelete)[] = * ((decltype(&aDelete)) 0x4ff8f0);
int& dword_4FF8F8 = * ((decltype(&dword_4FF8F8)) 0x4ff8f8);
char(&aLastreplay_0)[11] = * ((decltype(&aLastreplay_0)) 0x4ff900);
int(&dword_4FF90C)[7] = * ((decltype(&dword_4FF90C)) 0x4ff90c);
char(&aShow)[] = * ((decltype(&aShow)) 0x4ff928);
int (*&off_4FF934)() = *((decltype(&off_4FF934)) 0x4ff934);
char(&aHide)[5] = * ((decltype(&aHide)) 0x4ff938);
char(&aKills)[6] = * ((decltype(&aKills)) 0x4ff948);
char(&byte_4FF960)[] = * ((decltype(&byte_4FF960)) 0x4ff960);
__int16(&word_4FF964)[] = * ((decltype(&word_4FF964)) 0x4ff964);
char(&aRazings)[8] = * ((decltype(&aRazings)) 0x4ff968);
char(&aSlaughter)[10] = * ((decltype(&aSlaughter)) 0x4ff988);
char(&aResources)[10] = * ((decltype(&aResources)) 0x4ff9a8);
char(&aMinerals)[9] = * ((decltype(&aMinerals)) 0x4ff9c8);
char(&aGas)[4] = * ((decltype(&aGas)) 0x4ff9e8);
char(&aScore)[6] = * ((decltype(&aScore)) 0x4ffa08);
char(&aScoreUnits)[12] = * ((decltype(&aScoreUnits)) 0x4ffa28);
char(&aScoreBuildings)[16] = * ((decltype(&aScoreBuildings)) 0x4ffa48);
char(&aScoreKills)[12] = * ((decltype(&aScoreKills)) 0x4ffa68);
char(&aScoreRazings)[14] = * ((decltype(&aScoreRazings)) 0x4ffa88);
char(&aScoreUser)[11] = * ((decltype(&aScoreUser)) 0x4ffaa8);
GlueRelated(&stru_4FFAD0)[27] = * ((decltype(&stru_4FFAD0)) 0x4ffad0);
CampaignMenuEntry(&terran_campaign_menu_entries)[16] = * ((decltype(&terran_campaign_menu_entries)) 0x4ffc20);
CampaignMenuEntry(&zerg_campaign_menu_entries)[15] = * ((decltype(&zerg_campaign_menu_entries)) 0x4ffca0);
CampaignMenuEntry(&protoss_campaign_menu_entries)[15] = * ((decltype(&protoss_campaign_menu_entries)) 0x4ffd18);
CampaignMenuEntry(&terran_expcampaign_menu_entries)[11] = * ((decltype(&terran_expcampaign_menu_entries)) 0x4ffd90);
CampaignMenuEntry(&zerg_expcampaign_menu_entries)[18] = * ((decltype(&zerg_expcampaign_menu_entries)) 0x4ffde8);
CampaignMenuEntry(&protoss_expcampaign_menu_entries)[10] = * ((decltype(&protoss_expcampaign_menu_entries)) 0x4ffe78);
char(&aRezGlucmpgn_bi)[] = * ((decltype(&aRezGlucmpgn_bi)) 0x4ffecc);
char(&filename)[] = * ((decltype(&filename)) 0x4ffee0);
const char(&aLastreplay_1)[] = * ((decltype(&aLastreplay_1)) 0x4ffef8);
char(&aLocal_dll)[10] = * ((decltype(&aLocal_dll)) 0x4fff08);
EstablishingShotPosition(&establishingShotPositions)[6] = * ((decltype(&establishingShotPositions)) 0x4fff24);
PrintFlags(&establishingShot_PrintXY_flags)[6] = * ((decltype(&establishingShot_PrintXY_flags)) 0x4fff54);
EstablishingShot(&establishing_shots)[65] = * ((decltype(&establishing_shots)) 0x4fff60);
CHAR(&String2)[] = * ((decltype(&String2)) 0x500194);
char(&aStareditScenar)[] = * ((decltype(&aStareditScenar)) 0x5001b4);
ChkSectionLoader(&chk_loaders_version)[2] = * ((decltype(&chk_loaders_version)) 0x5001cc);
ChkSectionLoader(&chk_loaders_lobby)[9] = * ((decltype(&chk_loaders_lobby)) 0x5001e8);
ChkSectionLoader(&chk_loaders_briefing)[2] = * ((decltype(&chk_loaders_briefing)) 0x500254);
ChkSectionLoader(&chk_loaders_melee_vanilla)[4] = * ((decltype(&chk_loaders_melee_vanilla)) 0x50026c);
ChkSectionLoader(&chk_loaders_ums_1_00)[19] = * ((decltype(&chk_loaders_ums_1_00)) 0x5002a0);
ChkSectionLoader(&chk_loaders_ums_1_04)[19] = * ((decltype(&chk_loaders_ums_1_04)) 0x500388);
ChkSectionLoader(&chk_loaders_melee_broodwar)[5] = * ((decltype(&chk_loaders_melee_broodwar)) 0x50046c);
ChkSectionLoader(&chk_loaders_ums_broodwar_1_04)[15] = * ((decltype(&chk_loaders_ums_broodwar_1_04)) 0x5004a8);
ChkLoader(&chk_loaders)[3] = * ((decltype(&chk_loaders)) 0x500560);
ChkLoader& dword_5005D8 = * ((decltype(&dword_5005D8)) 0x5005d8);
size_t(&size)[120] = * ((decltype(&size)) 0x5005f8);
char(&byte_5007D8)[256] = * ((decltype(&byte_5007D8)) 0x5007d8);
char(&byte_5008D8)[4] = * ((decltype(&byte_5008D8)) 0x5008d8);
int(&dword_5008EC)[] = * ((decltype(&dword_5008EC)) 0x5008ec);
signed __int32(&volume)[100] = * ((decltype(&volume)) 0x5008f0);
__int16(&word_500A94)[] = * ((decltype(&word_500A94)) 0x500a94);
__int16(&word_500A96)[17] = * ((decltype(&word_500A96)) 0x500a96);
__int16(&word_500AB8)[] = * ((decltype(&word_500AB8)) 0x500ab8);
__int16(&word_500ABA)[31] = * ((decltype(&word_500ABA)) 0x500aba);
__int64& cheat_hash_there_is_no_cow_level = * ((decltype(&cheat_hash_there_is_no_cow_level)) 0x500af8);
__int64& cheat_hash_game_over_man = * ((decltype(&cheat_hash_game_over_man)) 0x500b00);
__int64& cheat_hash_power_overwhelming = * ((decltype(&cheat_hash_power_overwhelming)) 0x500b08);
__int64& cheat_hash_show_me_the_money = * ((decltype(&cheat_hash_show_me_the_money)) 0x500b10);
__int64& cheat_hash_whats_mine_is_mine = * ((decltype(&cheat_hash_whats_mine_is_mine)) 0x500b18);
__int64& cheat_hash_breathe_deep = * ((decltype(&cheat_hash_breathe_deep)) 0x500b20);
__int64& cheat_hash_something_for_nothing = * ((decltype(&cheat_hash_something_for_nothing)) 0x500b28);
__int64& cheat_hash_black_sheep_wall = * ((decltype(&cheat_hash_black_sheep_wall)) 0x500b30);
__int64& cheat_hash_operation_cwal = * ((decltype(&cheat_hash_operation_cwal)) 0x500b38);
__int64& cheat_hash_staying_alive = * ((decltype(&cheat_hash_staying_alive)) 0x500b40);
__int64& cheat_hash_medieval_man = * ((decltype(&cheat_hash_medieval_man)) 0x500b48);
__int64& cheat_hash_modify_the_phase_variance = * ((decltype(&cheat_hash_modify_the_phase_variance)) 0x500b50);
__int64& cheat_hash_war_aint_what_it_used_to_be = * ((decltype(&cheat_hash_war_aint_what_it_used_to_be)) 0x500b58);
__int64& cheat_hash_food_for_thought = * ((decltype(&cheat_hash_food_for_thought)) 0x500b60);
__int64& cheat_hash_the_gathering = * ((decltype(&cheat_hash_the_gathering)) 0x500b68);
__int64& cheat_hash_radio_free_zerg = * ((decltype(&cheat_hash_radio_free_zerg)) 0x500b70);
__int64& cheat_hash_ophelia = * ((decltype(&cheat_hash_ophelia)) 0x500b78);
__int64& cheat_hash_no_glues = * ((decltype(&cheat_hash_no_glues)) 0x500b80);
__int16(&word_500B98)[] = * ((decltype(&word_500B98)) 0x500b98);
char(&a_mpc)[] = * ((decltype(&a_mpc)) 0x500bc4);
char(&a_spc)[5] = * ((decltype(&a_spc)) 0x500bcc);
CinematicIntro(&cinematic_intros)[10] = * ((decltype(&cinematic_intros)) 0x500be4);
char(&aLastreplay)[11] = * ((decltype(&aLastreplay)) 0x500c28);
char(&aCputhrottle)[] = * ((decltype(&aCputhrottle)) 0x500c94);
char(&aGamma)[] = * ((decltype(&aGamma)) 0x500cb0);
char(&aColorcycle)[] = * ((decltype(&aColorcycle)) 0x500cb8);
char(&aUnitportraits)[] = * ((decltype(&aUnitportraits)) 0x500cc4);
char *& off_500E40 = * ((decltype(&off_500E40)) 0x500e40);
char *& off_500F60 = * ((decltype(&off_500F60)) 0x500f60);
char(&aGlueBattle_n_9)[43] = * ((decltype(&aGlueBattle_n_9)) 0x501080);
char(&aGlueBattle_n_8)[] = * ((decltype(&aGlueBattle_n_8)) 0x5010ac);
char(&aGlueBattle__10)[] = * ((decltype(&aGlueBattle__10)) 0x5010d8);
__int16(&word_50110C)[] = * ((decltype(&word_50110C)) 0x50110c);
char(&byte_50110E)[] = * ((decltype(&byte_50110E)) 0x50110e);
__int16(&word_50112C)[] = * ((decltype(&word_50112C)) 0x50112c);
char(&keyname)[] = * ((decltype(&keyname)) 0x501434);
bool (__fastcall *(&GenericDlgInteractFxns)[14])(dialog *dlg, struct dlgEvent *evt) = * ((decltype(&GenericDlgInteractFxns)) 0x5014ac);
void (__fastcall *(&GenericDlgUpdateFxns)[14])(dialog *dlg, int x, int y, rect *dst) = * ((decltype(&GenericDlgUpdateFxns)) 0x501504);
int(&dword_501544)[10] = * ((decltype(&dword_501544)) 0x501544);
CndSignature(&stru_50156C)[9] = * ((decltype(&stru_50156C)) 0x50156c);
char(&aReplay)[] = * ((decltype(&aReplay)) 0x501654);
char(&aSMapsReplaysS_)[] = * ((decltype(&aSMapsReplaysS_)) 0x501660);
char(&a_)[] = * ((decltype(&a_)) 0x501678);
CHAR(&String)[] = * ((decltype(&String)) 0x50167c);
char(&a1)[] = * ((decltype(&a1)) 0x501680);
char(&aStarcraftSw_50)[] = * ((decltype(&aStarcraftSw_50)) 0x501694);
char(&aRep)[] = * ((decltype(&aRep)) 0x5016b4);
char(&a__1)[] = * ((decltype(&a__1)) 0x5016b8);
char(&aMapsReplays)[] = * ((decltype(&aMapsReplays)) 0x5016bc);
CHAR(&SubBlock)[] = * ((decltype(&SubBlock)) 0x5016cc);
char(&aGluePalpvTile_)[20] = * ((decltype(&aGluePalpvTile_)) 0x5016d0);
char(&aGluePaltvTile_)[20] = * ((decltype(&aGluePaltvTile_)) 0x5016e4);
char(&aGluePalzvTile_)[20] = * ((decltype(&aGluePalzvTile_)) 0x5016f8);
char(&aGluePalpdTile_)[20] = * ((decltype(&aGluePalpdTile_)) 0x50170c);
char(&aGluePaltdTile_)[20] = * ((decltype(&aGluePaltdTile_)) 0x501720);
char(&aGluePalzdTile_)[20] = * ((decltype(&aGluePalzdTile_)) 0x501734);
char(&aRezGluall_tbl)[] = * ((decltype(&aRezGluall_tbl)) 0x501748);
char(&aBackgnd_pcx)[] = * ((decltype(&aBackgnd_pcx)) 0x501758);
char(&aDlg_grp)[] = * ((decltype(&aDlg_grp)) 0x501768);
char(&aTfont_pcx)[] = * ((decltype(&aTfont_pcx)) 0x501774);
char(&aTeffect_pcx)[] = * ((decltype(&aTeffect_pcx)) 0x501780);
char(&aStarcraftSw_79)[] = * ((decltype(&aStarcraftSw_79)) 0x501790);
char(&aArrow_grp)[] = * ((decltype(&aArrow_grp)) 0x5017b0);
char(&aGlueGeneric)[14] = * ((decltype(&aGlueGeneric)) 0x5017bc);
char(&aGlueGamemode)[15] = * ((decltype(&aGlueGamemode)) 0x5017cc);
char(&aGlueDirect)[13] = * ((decltype(&aGlueDirect)) 0x5017dc);
char(&aGlueModem)[12] = * ((decltype(&aGlueModem)) 0x5017ec);
char(&aGlueScore)[12] = * ((decltype(&aGlueScore)) 0x5017f8);
char(&aGlueLoad)[11] = * ((decltype(&aGlueLoad)) 0x501804);
char(&aGlueCreate)[13] = * ((decltype(&aGlueCreate)) 0x501810);
char(&aGlueGamesel)[14] = * ((decltype(&aGlueGamesel)) 0x501820);
char(&aGlueReadyp)[13] = * ((decltype(&aGlueReadyp)) 0x501830);
char(&aGlueReadyz)[13] = * ((decltype(&aGlueReadyz)) 0x501840);
char(&aGlueReadyt)[13] = * ((decltype(&aGlueReadyt)) 0x501850);
char(&aGlueCampaign)[15] = * ((decltype(&aGlueCampaign)) 0x501860);
char(&aGlueLogin)[12] = * ((decltype(&aGlueLogin)) 0x501870);
char(&aGlueBattle_net_0)[17] = * ((decltype(&aGlueBattle_net_0)) 0x50187c);
char(&aGlueChatroom)[15] = * ((decltype(&aGlueChatroom)) 0x501890);
char(&aGlueSelconn)[14] = * ((decltype(&aGlueSelconn)) 0x5018a0);
char(&aGlueSimulate)[14] = * ((decltype(&aGlueSimulate)) 0x5018b0);
char(&aGlueMainmenu)[15] = * ((decltype(&aGlueMainmenu)) 0x5018c0);
char(&a_scm)[] = * ((decltype(&a_scm)) 0x5018d0);
char(&aStarcraftSw_78)[] = * ((decltype(&aStarcraftSw_78)) 0x5018d8);
char(&aRezGlumain_bin)[] = * ((decltype(&aRezGlumain_bin)) 0x5018fc);
char(&aStarcraftSw_77)[] = * ((decltype(&aStarcraftSw_77)) 0x50190c);
char(&aStaredit_exe)[] = * ((decltype(&aStaredit_exe)) 0x50192c);
const char(&aDlgsProtoss_gr)[] = * ((decltype(&aDlgsProtoss_gr)) 0x50193c);
const char(&aDlgsTerran_grp)[] = * ((decltype(&aDlgsTerran_grp)) 0x501950);
const char(&aDlgsZerg_grp)[] = * ((decltype(&aDlgsZerg_grp)) 0x501960);
char(&aStarcraftSw_91)[] = * ((decltype(&aStarcraftSw_91)) 0x501970);
const char(&aArrMapdata_tbl)[] = * ((decltype(&aArrMapdata_tbl)) 0x501990);
char(&aArrMapdata_dat)[] = * ((decltype(&aArrMapdata_dat)) 0x5019a0);
const char(&aRezCdversion_t)[] = * ((decltype(&aRezCdversion_t)) 0x5019b0);
const char(&data_file_version)[] = * ((decltype(&data_file_version)) 0x5019c4);
char(&aInvalidDataFil)[] = * ((decltype(&aInvalidDataFil)) 0x5019d8);
char(&asc_501A28)[3] = * ((decltype(&asc_501A28)) 0x501a28);
char(&asc_501A2C)[2] = * ((decltype(&asc_501A2C)) 0x501a2c);
char(&aDdemulate)[] = * ((decltype(&aDdemulate)) 0x501a30);
char(&aNosound)[] = * ((decltype(&aNosound)) 0x501a3c);
char(&asc_501A44)[] = * ((decltype(&asc_501A44)) 0x501a44);
char(&aBroodat_mpq)[] = * ((decltype(&aBroodat_mpq)) 0x501a48);
char(&aPatch_rt_mpq)[] = * ((decltype(&aPatch_rt_mpq)) 0x501a58);
char(&aStardat_mpq_0)[] = * ((decltype(&aStardat_mpq_0)) 0x501a68);
char(&aStardat_mpq)[] = * ((decltype(&aStardat_mpq)) 0x501a74);
const char(&aInstall_exe)[] = * ((decltype(&aInstall_exe)) 0x501a84);
const char(&aStarcraft_mpq)[] = * ((decltype(&aStarcraft_mpq)) 0x501a94);
const char(&hMpq)[] = * ((decltype(&hMpq)) 0x501aa4);
char(&aStarcd)[] = * ((decltype(&aStarcd)) 0x501ab4);
char(&aVersionD_D_D)[] = * ((decltype(&aVersionD_D_D)) 0x501abc);
const char(&aFont8)[] = * ((decltype(&aFont8)) 0x501ad0);
const char(&aFont10)[] = * ((decltype(&aFont10)) 0x501ad8);
const char(&aFont14)[] = * ((decltype(&aFont14)) 0x501ae0);
const char(&aFont16)[] = * ((decltype(&aFont16)) 0x501ae8);
const char(&font_name)[] = * ((decltype(&font_name)) 0x501af0);
char(&aStarcraftSw_75)[] = * ((decltype(&aStarcraftSw_75)) 0x501af8);
const char(&aFindFastIndexe)[] = * ((decltype(&aFindFastIndexe)) 0x501b18);
const char(&aMomParent)[] = * ((decltype(&aMomParent)) 0x501b2c);
const char(&aMicrosoftFindF)[] = * ((decltype(&aMicrosoftFindF)) 0x501b38);
const char(&aMicrosoftOffic)[] = * ((decltype(&aMicrosoftOffic)) 0x501b50);
char(&asc_501B74)[] = * ((decltype(&asc_501B74)) 0x501b74);
CHAR(&Operation)[] = * ((decltype(&Operation)) 0x501b78);
const char(&empty_string)[3] = * ((decltype(&empty_string)) 0x501b7d);
char(&aRezEpilogx_txt)[] = * ((decltype(&aRezEpilogx_txt)) 0x501b80);
char(&aSS_ccd)[] = * ((decltype(&aSS_ccd)) 0x501b90);
const char(&asc_501B9C)[] = * ((decltype(&asc_501B9C)) 0x501b9c);
char(&aSS_clh)[] = * ((decltype(&aSS_clh)) 0x501ba4);
char(&aSS_gid)[] = * ((decltype(&aSS_gid)) 0x501bb0);
char(&aFont)[5] = * ((decltype(&aFont)) 0x501bbc);
char(&aStarcraftSw_74)[] = * ((decltype(&aStarcraftSw_74)) 0x501bc4);
const char(&aStarcraftSw_73)[] = * ((decltype(&aStarcraftSw_73)) 0x501be4);
const char(&aCrdt_exp)[] = * ((decltype(&aCrdt_exp)) 0x501c08);
const char(&aCrdt_lst)[] = * ((decltype(&aCrdt_lst)) 0x501c14);
const char(&aEpilog)[] = * ((decltype(&aEpilog)) 0x501c20);
char(&aEpilogx)[8] = * ((decltype(&aEpilogx)) 0x501c28);
char(&aRezCredits_bin)[] = * ((decltype(&aRezCredits_bin)) 0x501c30);
char(&aRezS_txt)[] = * ((decltype(&aRezS_txt)) 0x501c40);
char(&aDisplaytime)[] = * ((decltype(&aDisplaytime)) 0x501c4c);
char(&aFadespeed)[] = * ((decltype(&aFadespeed)) 0x501c5c);
char(&aFontcolor)[] = * ((decltype(&aFontcolor)) 0x501c6c);
char(&aPage)[] = * ((decltype(&aPage)) 0x501c7c);
char(&aBackground)[] = * ((decltype(&aBackground)) 0x501c84);
char(&aStarcraftSw_72)[] = * ((decltype(&aStarcraftSw_72)) 0x501c94);
char(&aFinz09bx)[9] = * ((decltype(&aFinz09bx)) 0x501cb4);
char(&aEstz10x)[8] = * ((decltype(&aEstz10x)) 0x501cc0);
char(&aEstz09bx)[9] = * ((decltype(&aEstz09bx)) 0x501cc8);
char(&aEstz09x)[8] = * ((decltype(&aEstz09x)) 0x501cd4);
char(&aEstz08x)[8] = * ((decltype(&aEstz08x)) 0x501cdc);
char(&aEstz07x)[8] = * ((decltype(&aEstz07x)) 0x501ce4);
char(&aEstz06x)[8] = * ((decltype(&aEstz06x)) 0x501cec);
char(&aEstz05x)[8] = * ((decltype(&aEstz05x)) 0x501cf4);
char(&aEstz04x)[8] = * ((decltype(&aEstz04x)) 0x501cfc);
char(&aEstz03x)[8] = * ((decltype(&aEstz03x)) 0x501d04);
char(&aEstz02x)[8] = * ((decltype(&aEstz02x)) 0x501d0c);
char(&aEstz01x)[8] = * ((decltype(&aEstz01x)) 0x501d14);
char(&aEstt08x)[8] = * ((decltype(&aEstt08x)) 0x501d1c);
char(&aEstt07x)[8] = * ((decltype(&aEstt07x)) 0x501d24);
char(&aEstt06x)[8] = * ((decltype(&aEstt06x)) 0x501d2c);
char(&aEstt05bx)[9] = * ((decltype(&aEstt05bx)) 0x501d34);
char(&aEstt05ax)[9] = * ((decltype(&aEstt05ax)) 0x501d40);
char(&aEstt04x)[8] = * ((decltype(&aEstt04x)) 0x501d4c);
char(&aEstt03x)[8] = * ((decltype(&aEstt03x)) 0x501d54);
char(&aEstt02x)[8] = * ((decltype(&aEstt02x)) 0x501d5c);
char(&aEstt01x)[8] = * ((decltype(&aEstt01x)) 0x501d64);
char(&aEstp08x)[8] = * ((decltype(&aEstp08x)) 0x501d6c);
char(&aEstp07x)[8] = * ((decltype(&aEstp07x)) 0x501d74);
char(&aEstp06x)[8] = * ((decltype(&aEstp06x)) 0x501d7c);
char(&aEstp05x)[8] = * ((decltype(&aEstp05x)) 0x501d84);
char(&aEstp04x)[8] = * ((decltype(&aEstp04x)) 0x501d8c);
char(&aEstp03x)[8] = * ((decltype(&aEstp03x)) 0x501d94);
char(&aEstp02x)[8] = * ((decltype(&aEstp02x)) 0x501d9c);
char(&aEstp01x)[8] = * ((decltype(&aEstp01x)) 0x501da4);
char(&aEstp10)[7] = * ((decltype(&aEstp10)) 0x501dac);
char(&aEstp09)[7] = * ((decltype(&aEstp09)) 0x501db4);
char(&aEstp08)[7] = * ((decltype(&aEstp08)) 0x501dbc);
char(&aEstp07)[7] = * ((decltype(&aEstp07)) 0x501dc4);
char(&aEstp06)[7] = * ((decltype(&aEstp06)) 0x501dcc);
char(&aEstp05)[7] = * ((decltype(&aEstp05)) 0x501dd4);
char(&aEstp04)[7] = * ((decltype(&aEstp04)) 0x501ddc);
char(&aEstp03)[7] = * ((decltype(&aEstp03)) 0x501de4);
char(&aEstp02)[7] = * ((decltype(&aEstp02)) 0x501dec);
char(&aEstp01)[7] = * ((decltype(&aEstp01)) 0x501df4);
char(&aEstz10)[7] = * ((decltype(&aEstz10)) 0x501dfc);
char(&aEstz09)[7] = * ((decltype(&aEstz09)) 0x501e04);
char(&aEstz08)[7] = * ((decltype(&aEstz08)) 0x501e0c);
char(&aEstz07)[7] = * ((decltype(&aEstz07)) 0x501e14);
char(&aEstz06)[7] = * ((decltype(&aEstz06)) 0x501e1c);
char(&aEstz05)[7] = * ((decltype(&aEstz05)) 0x501e24);
char(&aEstz04)[7] = * ((decltype(&aEstz04)) 0x501e2c);
char(&aEstz03)[7] = * ((decltype(&aEstz03)) 0x501e34);
char(&aEstz02)[7] = * ((decltype(&aEstz02)) 0x501e3c);
char(&aEstz01)[7] = * ((decltype(&aEstz01)) 0x501e44);
char(&aEstt12)[7] = * ((decltype(&aEstt12)) 0x501e4c);
char(&aEstt11)[7] = * ((decltype(&aEstt11)) 0x501e54);
char(&aEstt09)[7] = * ((decltype(&aEstt09)) 0x501e5c);
char(&aEstt08)[7] = * ((decltype(&aEstt08)) 0x501e64);
char(&aEstt06)[7] = * ((decltype(&aEstt06)) 0x501e6c);
char(&aEstt05)[7] = * ((decltype(&aEstt05)) 0x501e74);
char(&aEstt04)[7] = * ((decltype(&aEstt04)) 0x501e7c);
char(&aEstt03)[7] = * ((decltype(&aEstt03)) 0x501e84);
char(&aEstt02)[7] = * ((decltype(&aEstt02)) 0x501e8c);
char(&aEstt01)[7] = * ((decltype(&aEstt01)) 0x501e94);
char(&aEstt0t)[7] = * ((decltype(&aEstt0t)) 0x501e9c);
char(&aScreenlowerlef)[19] = * ((decltype(&aScreenlowerlef)) 0x501ea4);
char(&aScreencenter)[16] = * ((decltype(&aScreencenter)) 0x501eb8);
char(&aScreenbottom)[16] = * ((decltype(&aScreenbottom)) 0x501ec8);
char(&aScreentop)[13] = * ((decltype(&aScreentop)) 0x501ed8);
char(&aScreenright)[15] = * ((decltype(&aScreenright)) 0x501ee8);
char(&aScreenleft)[14] = * ((decltype(&aScreenleft)) 0x501ef8);
char(&aScriptDDoesNot)[] = * ((decltype(&aScriptDDoesNot)) 0x501f08);
char(&aGameTselect_pc)[] = * ((decltype(&aGameTselect_pc)) 0x501f24);
char(&aArrImages_dat)[] = * ((decltype(&aArrImages_dat)) 0x501f38);
char(&aScriptsIscript)[] = * ((decltype(&aScriptsIscript)) 0x501f48);
char(&aTilesetSShift_)[] = * ((decltype(&aTilesetSShift_)) 0x501f5c);
char(&aArrImages_tbl)[] = * ((decltype(&aArrImages_tbl)) 0x501f74);
char(&aStarcraftSw_71)[] = * ((decltype(&aStarcraftSw_71)) 0x501f84);
char(&aRezTitledlg_bi)[] = * ((decltype(&aRezTitledlg_bi)) 0x501fa4);
char(&aGlueTitleTfont)[] = * ((decltype(&aGlueTitleTfont)) 0x501fb8);
char(&fileName)[] = * ((decltype(&fileName)) 0x501fd0);
char(&aStarcraftSw_70)[] = * ((decltype(&aStarcraftSw_70)) 0x501fe8);
char(&aSmkXzerg_smk)[14] = * ((decltype(&aSmkXzerg_smk)) 0x502008);
char(&aSmkXterran_smk)[16] = * ((decltype(&aSmkXterran_smk)) 0x502018);
char(&aSmkXprotoss_sm)[17] = * ((decltype(&aSmkXprotoss_sm)) 0x502028);
char(&aSmkStarxintr_s)[18] = * ((decltype(&aSmkStarxintr_s)) 0x50203c);
char(&aSmkProtoss4_sm)[17] = * ((decltype(&aSmkProtoss4_sm)) 0x502050);
char(&aSmkProtoss3_sm)[17] = * ((decltype(&aSmkProtoss3_sm)) 0x502064);
char(&aSmkProtoss2_sm)[17] = * ((decltype(&aSmkProtoss2_sm)) 0x502078);
char(&aSmkProtoss1_sm)[17] = * ((decltype(&aSmkProtoss1_sm)) 0x50208c);
char(&aSmkPreprotoss_)[21] = * ((decltype(&aSmkPreprotoss_)) 0x5020a0);
char(&aSmkPreprotos_0)[21] = * ((decltype(&aSmkPreprotos_0)) 0x5020b8);
char(&aSmkPreprotos_1)[21] = * ((decltype(&aSmkPreprotos_1)) 0x5020d0);
char(&aSmkZerg4_smk)[14] = * ((decltype(&aSmkZerg4_smk)) 0x5020e8);
char(&aSmkZerg3_smk)[14] = * ((decltype(&aSmkZerg3_smk)) 0x5020f8);
char(&aSmkZerg2_smk)[14] = * ((decltype(&aSmkZerg2_smk)) 0x502108);
char(&aSmkZerg1_smk)[14] = * ((decltype(&aSmkZerg1_smk)) 0x502118);
char(&aSmkPrezerg_4_s)[18] = * ((decltype(&aSmkPrezerg_4_s)) 0x502128);
char(&aSmkPrezerg_3_s)[18] = * ((decltype(&aSmkPrezerg_3_s)) 0x50213c);
char(&aSmkPrezerg_2_s)[18] = * ((decltype(&aSmkPrezerg_2_s)) 0x502150);
char(&aSmkTerran4_smk)[16] = * ((decltype(&aSmkTerran4_smk)) 0x502164);
char(&aSmkTerran3_smk)[16] = * ((decltype(&aSmkTerran3_smk)) 0x502174);
char(&aSmkTerran2_smk)[16] = * ((decltype(&aSmkTerran2_smk)) 0x502184);
char(&aSmkTerran1_smk)[16] = * ((decltype(&aSmkTerran1_smk)) 0x502194);
char(&aSmkPreterran_4)[20] = * ((decltype(&aSmkPreterran_4)) 0x5021a4);
char(&aSmkPreterran_3)[20] = * ((decltype(&aSmkPreterran_3)) 0x5021b8);
char(&aSmkPreterran_2)[20] = * ((decltype(&aSmkPreterran_2)) 0x5021cc);
char(&aSmkPreterran_1)[20] = * ((decltype(&aSmkPreterran_1)) 0x5021e0);
char(&aSmkStarintr_sm)[17] = * ((decltype(&aSmkStarintr_sm)) 0x5021f4);
char(&aSmkBlizzard_sm)[17] = * ((decltype(&aSmkBlizzard_sm)) 0x502208);
const char(&aStarcraftSw_69)[] = * ((decltype(&aStarcraftSw_69)) 0x50221c);
CHAR(&aBattle_netLeag)[] = * ((decltype(&aBattle_netLeag)) 0x502240);
char(&aS_0)[] = * ((decltype(&aS_0)) 0x50225c);
char(&aLowm)[] = * ((decltype(&aLowm)) 0x502260);
char(&aStarcraftSw_20)[] = * ((decltype(&aStarcraftSw_20)) 0x502268);
char(&aUnknown)[] = * ((decltype(&aUnknown)) 0x50228c);
CHAR(&ClassName)[] = * ((decltype(&ClassName)) 0x502298);
char(&aScscrnshot_02d)[] = * ((decltype(&aScscrnshot_02d)) 0x5022a4);
char(&aCursor)[] = * ((decltype(&aCursor)) 0x5022d0);
char(&aScrollul_grp)[13] = * ((decltype(&aScrollul_grp)) 0x5022d8);
char(&aScrolll_grp)[12] = * ((decltype(&aScrolll_grp)) 0x5022e8);
char(&aScrolldl_grp)[13] = * ((decltype(&aScrolldl_grp)) 0x5022f4);
char(&aScrolld_grp)[12] = * ((decltype(&aScrolld_grp)) 0x502304);
char(&aScrolldr_grp)[13] = * ((decltype(&aScrolldr_grp)) 0x502310);
char(&aScrollr_grp)[12] = * ((decltype(&aScrollr_grp)) 0x502320);
char(&aScrollur_grp)[13] = * ((decltype(&aScrollur_grp)) 0x50232c);
char(&aScrollu_grp)[12] = * ((decltype(&aScrollu_grp)) 0x50233c);
char(&aTime_grp)[9] = * ((decltype(&aTime_grp)) 0x502348);
char(&aDrag_grp)[9] = * ((decltype(&aDrag_grp)) 0x502354);
char(&aMagy_grp)[9] = * ((decltype(&aMagy_grp)) 0x502360);
char(&aMagr_grp)[9] = * ((decltype(&aMagr_grp)) 0x50236c);
char(&aMagg_grp)[9] = * ((decltype(&aMagg_grp)) 0x502378);
char(&aTargn_grp)[10] = * ((decltype(&aTargn_grp)) 0x502384);
char(&aTargg_grp)[10] = * ((decltype(&aTargg_grp)) 0x502390);
char(&aTargr_grp)[10] = * ((decltype(&aTargr_grp)) 0x50239c);
char(&aTargy_grp)[10] = * ((decltype(&aTargy_grp)) 0x5023a8);
char(&aIllegal_grp)[12] = * ((decltype(&aIllegal_grp)) 0x5023b4);
char(&aArrow_grp_0)[10] = * ((decltype(&aArrow_grp_0)) 0x5023c0);
char(&aCodeBytes)[] = * ((decltype(&aCodeBytes)) 0x5023cc);
char(&aStackBytes)[] = * ((decltype(&aStackBytes)) 0x5023dc);
char(&aFlags08x)[] = * ((decltype(&aFlags08x)) 0x5023ec);
char(&aDs04xEs04xFs04)[] = * ((decltype(&aDs04xEs04xFs04)) 0x5023fc);
char(&aSsEsp04x08xEbp)[] = * ((decltype(&aSsEsp04x08xEbp)) 0x502420);
char(&aCsEip04x08x)[] = * ((decltype(&aCsEip04x08x)) 0x50243c);
char(&aEax08xEbx08xEc)[] = * ((decltype(&aEax08xEbx08xEc)) 0x502450);
char(&aRegisters)[] = * ((decltype(&aRegisters)) 0x502490);
char(&aFaultAddress08)[] = * ((decltype(&aFaultAddress08)) 0x5024a0);
char(&aExceptionCode0)[] = * ((decltype(&aExceptionCode0)) 0x5024c4);
CHAR(&aNtdll_dll)[] = * ((decltype(&aNtdll_dll)) 0x5024e0);
CHAR(&aInvalid_handle)[] = * ((decltype(&aInvalid_handle)) 0x5024ec);
CHAR(&aGuard_page)[] = * ((decltype(&aGuard_page)) 0x5024fc);
CHAR(&aInvalid_dispos)[] = * ((decltype(&aInvalid_dispos)) 0x502508);
CHAR(&aStack_overflow)[] = * ((decltype(&aStack_overflow)) 0x50251c);
CHAR(&aNoncontinuable)[] = * ((decltype(&aNoncontinuable)) 0x50252c);
CHAR(&aIllegal_instru)[] = * ((decltype(&aIllegal_instru)) 0x502548);
CHAR(&aIn_page_error)[] = * ((decltype(&aIn_page_error)) 0x50255c);
CHAR(&aPriv_instructi)[] = * ((decltype(&aPriv_instructi)) 0x50256c);
CHAR(&aInt_overflow)[] = * ((decltype(&aInt_overflow)) 0x502580);
CHAR(&aInt_divide_by_)[] = * ((decltype(&aInt_divide_by_)) 0x502590);
CHAR(&aFlt_underflow)[] = * ((decltype(&aFlt_underflow)) 0x5025a4);
CHAR(&aFlt_stack_chec)[] = * ((decltype(&aFlt_stack_chec)) 0x5025b4);
CHAR(&aFlt_overflow)[] = * ((decltype(&aFlt_overflow)) 0x5025c4);
CHAR(&aFlt_invalid_op)[] = * ((decltype(&aFlt_invalid_op)) 0x5025d4);
CHAR(&aFlt_inexact_re)[] = * ((decltype(&aFlt_inexact_re)) 0x5025ec);
CHAR(&aFlt_divide_by_)[] = * ((decltype(&aFlt_divide_by_)) 0x502600);
CHAR(&aFlt_denormal_o)[] = * ((decltype(&aFlt_denormal_o)) 0x502614);
CHAR(&aArray_bounds_e)[] = * ((decltype(&aArray_bounds_e)) 0x50262c);
CHAR(&aSingle_step)[] = * ((decltype(&aSingle_step)) 0x502644);
CHAR(&aBreakpoint)[] = * ((decltype(&aBreakpoint)) 0x502650);
CHAR(&aDatatype_misal)[] = * ((decltype(&aDatatype_misal)) 0x50265c);
CHAR(&aAccess_violati)[] = * ((decltype(&aAccess_violati)) 0x502674);
char(&a08x08x04x08xS)[] = * ((decltype(&a08x08x04x08xS)) 0x502688);
char(&aCallStackAddre)[] = * ((decltype(&aCallStackAddre)) 0x5026a4);
char(&asc_5026DC)[] = * ((decltype(&asc_5026DC)) 0x5026dc);
char(&aC)[] = * ((decltype(&aC)) 0x5026e0);
char(&word_5026E4)[] = * ((decltype(&word_5026E4)) 0x5026e4);
char(&a02x)[] = * ((decltype(&a02x)) 0x5026ec);
char(&a0x08x)[] = * ((decltype(&a0x08x)) 0x5026f4);
char(&aStarcraftSw_62)[] = * ((decltype(&aStarcraftSw_62)) 0x502700);
char(&asc_502724)[] = * ((decltype(&asc_502724)) 0x502724);
char(&asc_502728)[] = * ((decltype(&asc_502728)) 0x502728);
char(&aScmPath)[] = * ((decltype(&aScmPath)) 0x502730);
char(&aScmTitle)[] = * ((decltype(&aScmTitle)) 0x502740);
char(&aGameType_0)[] = * ((decltype(&aGameType_0)) 0x502750);
char(&aCustom)[7] = * ((decltype(&aCustom)) 0x502760);
char(&asc_502768)[] = * ((decltype(&asc_502768)) 0x502768);
char(&aPlayers)[14] = * ((decltype(&aPlayers)) 0x502778);
char(&aFilename)[] = * ((decltype(&aFilename)) 0x502788);
char(&aSinglePlayerSa)[] = * ((decltype(&aSinglePlayerSa)) 0x502798);
char(&aMultiPlayerSav)[41] = * ((decltype(&aMultiPlayerSav)) 0x5027c4);
char(&asc_5027F0)[] = * ((decltype(&asc_5027F0)) 0x5027f0);
char(&asc_5027F4)[] = * ((decltype(&asc_5027F4)) 0x5027f4);
char(&a_mlx)[6] = * ((decltype(&a_mlx)) 0x50282c);
char(&a_snx)[6] = * ((decltype(&a_snx)) 0x502834);
char(&a_mlt)[6] = * ((decltype(&a_mlt)) 0x50283c);
char(&a_sng)[6] = * ((decltype(&a_sng)) 0x502844);
char(&aSave)[] = * ((decltype(&aSave)) 0x50284c);
char(&aMaps)[] = * ((decltype(&aMaps)) 0x502854);
char(&a__0)[] = * ((decltype(&a__0)) 0x50285c);
char(&byte_502860)[12] = * ((decltype(&byte_502860)) 0x502860);
char(&aStarcraftSw_67)[] = * ((decltype(&aStarcraftSw_67)) 0x50286c);
char(&aRezNetwork_tbl)[] = * ((decltype(&aRezNetwork_tbl)) 0x502890);
char(&asc_5028A0)[] = * ((decltype(&asc_5028A0)) 0x5028a0);
char(&aSS_1)[] = * ((decltype(&aSS_1)) 0x5028c0);
char(&aLeague_D_cnd)[] = * ((decltype(&aLeague_D_cnd)) 0x5028c8);
char(&aArrPortdata_da)[] = * ((decltype(&aArrPortdata_da)) 0x5028d8);
char(&aArrTechdata_da)[] = * ((decltype(&aArrTechdata_da)) 0x5028ec);
char(&aArrWeapons_dat)[] = * ((decltype(&aArrWeapons_dat)) 0x502900);
char(&aArrUpgrades_da)[] = * ((decltype(&aArrUpgrades_da)) 0x502910);
CHAR(&Type)[] = * ((decltype(&Type)) 0x502924);
char(&aStarcraftSw_66)[] = * ((decltype(&aStarcraftSw_66)) 0x50292c);
char(&aRezRestart_bin)[] = * ((decltype(&aRezRestart_bin)) 0x50294c);
char(&aRezQuit2mnu_bi)[] = * ((decltype(&aRezQuit2mnu_bi)) 0x50295c);
char(&aRezQuitrepl_bi)[] = * ((decltype(&aRezQuitrepl_bi)) 0x502970);
char(&aRezQuit_bin)[] = * ((decltype(&aRezQuit_bin)) 0x502984);
char(&aRezAbrtmenu_bi)[] = * ((decltype(&aRezAbrtmenu_bi)) 0x502994);
char(&aRezOptions_bin)[] = * ((decltype(&aRezOptions_bin)) 0x5029a8);
char(&aRezHelpmenu_bi)[] = * ((decltype(&aRezHelpmenu_bi)) 0x5029b8);
char(&aRezGamemenu_bi)[] = * ((decltype(&aRezGamemenu_bi)) 0x5029cc);
char(&aRezObjctdlg_bi)[] = * ((decltype(&aRezObjctdlg_bi)) 0x5029e0);
const char(&aDlgsTile_grp)[] = * ((decltype(&aDlgsTile_grp)) 0x5029f4);
char(&aStarcraftSw_32)[] = * ((decltype(&aStarcraftSw_32)) 0x502a04);
char(&aMapsDownload)[] = * ((decltype(&aMapsDownload)) 0x502a28);
char(&aStarcraftSw_65)[] = * ((decltype(&aStarcraftSw_65)) 0x502a38);
char(&aRezStat_txt_tb)[] = * ((decltype(&aRezStat_txt_tb)) 0x502a5c);
char(&aGameCS)[] = * ((decltype(&aGameCS)) 0x502a70);
char(&aConsole_pcx)[12] = * ((decltype(&aConsole_pcx)) 0x502a7c);
char(&aStarcraftSw_64)[] = * ((decltype(&aStarcraftSw_64)) 0x502a88);
char(&aRezWait_bin)[] = * ((decltype(&aRezWait_bin)) 0x502aa8);
char(&asc_502AB8)[] = * ((decltype(&asc_502AB8)) 0x502ab8);
char(&aRezOk_bin)[] = * ((decltype(&aRezOk_bin)) 0x502acc);
char(&asc_502AD8)[] = * ((decltype(&asc_502AD8)) 0x502ad8);
char(&aStarcraftSw_63)[] = * ((decltype(&aStarcraftSw_63)) 0x502afc);
char(&aRezStatlb_bin)[] = * ((decltype(&aRezStatlb_bin)) 0x502b20);
char(&aStarcraftSw_61)[] = * ((decltype(&aStarcraftSw_61)) 0x502b30);
char(&aD)[] = * ((decltype(&aD)) 0x502b50);
char(&aStarcraftSw_68)[] = * ((decltype(&aStarcraftSw_68)) 0x502b54);
char(&aTilesetSS_pcx)[] = * ((decltype(&aTilesetSS_pcx)) 0x502b70);
char(&aTilesetSDark_p)[] = * ((decltype(&aTilesetSDark_p)) 0x502b84);
char(&aStarcraftSw_60)[] = * ((decltype(&aStarcraftSw_60)) 0x502b98);
char(&a_vr4)[5] = * ((decltype(&a_vr4)) 0x502bb8);
char(&a_vx4)[5] = * ((decltype(&a_vx4)) 0x502bc0);
char(&a_grp)[5] = * ((decltype(&a_grp)) 0x502bc8);
char(&a_cv5)[5] = * ((decltype(&a_cv5)) 0x502bd0);
char(&a_vf4)[5] = * ((decltype(&a_vf4)) 0x502bd8);
char(&aSSS_0)[] = * ((decltype(&aSSS_0)) 0x502be0);
char(&aTileset)[9] = * ((decltype(&aTileset)) 0x502be8);
char(&a_wpe)[5] = * ((decltype(&a_wpe)) 0x502bf4);
char(&aStarcraftSw_57)[] = * ((decltype(&aStarcraftSw_57)) 0x502bfc);
char(&aTwilight)[9] = * ((decltype(&aTwilight)) 0x502c1c);
char(&aIce)[4] = * ((decltype(&aIce)) 0x502c28);
char(&aDesert)[7] = * ((decltype(&aDesert)) 0x502c2c);
char(&aJungle)[7] = * ((decltype(&aJungle)) 0x502c34);
char(&aAshworld)[9] = * ((decltype(&aAshworld)) 0x502c3c);
char(&aInstall)[8] = * ((decltype(&aInstall)) 0x502c48);
char(&aPlatform)[9] = * ((decltype(&aPlatform)) 0x502c50);
const char(&aBadlands)[10] = * ((decltype(&aBadlands)) 0x502c5c);
const char(&aArrSfxdata_tbl)[] = * ((decltype(&aArrSfxdata_tbl)) 0x502c68);
char(&aArrSfxdata_dat)[] = * ((decltype(&aArrSfxdata_dat)) 0x502c78);
char(&aSoundMemoryCac)[] = * ((decltype(&aSoundMemoryCac)) 0x502c88);
char(&aCreatesoundbuf)[18] = * ((decltype(&aCreatesoundbuf)) 0x502c9c);
char(&aSetcooperative)[] = * ((decltype(&aSetcooperative)) 0x502cb0);
char(&aGetprocaddress)[] = * ((decltype(&aGetprocaddress)) 0x502cc4);
CHAR(&aDirectsoundcre)[] = * ((decltype(&aDirectsoundcre)) 0x502cd4);
char(&function_name)[] = * ((decltype(&function_name)) 0x502ce8);
CHAR(&aDsound_dll)[] = * ((decltype(&aDsound_dll)) 0x502cf4);
char(&aSoundS)[] = * ((decltype(&aSoundS)) 0x502d00);
char(&aStarcraftSw_56)[] = * ((decltype(&aStarcraftSw_56)) 0x502d0c);
char(&aSFileSD)[] = * ((decltype(&aSFileSD)) 0x502d28);
char(&aStarcraftSw_55)[] = * ((decltype(&aStarcraftSw_55)) 0x502d38);
char(&aRezGluconn_bin)[] = * ((decltype(&aRezGluconn_bin)) 0x502d5c);
char(&aStarcraftSw_53)[] = * ((decltype(&aStarcraftSw_53)) 0x502d6c);
char(&aRezGlulogin_bi)[] = * ((decltype(&aRezGlulogin_bi)) 0x502d8c);
char(&aStarcraftSw_88)[] = * ((decltype(&aStarcraftSw_88)) 0x502da0);
char(&aGameTfontgam_p)[] = * ((decltype(&aGameTfontgam_p)) 0x502dc4);
char(&aRezGluchat_bin)[] = * ((decltype(&aRezGluchat_bin)) 0x502dd8);
char(&aDS)[] = * ((decltype(&aDS)) 0x502de8);
char(&new_)[] = * ((decltype(&new_)) 0x502df0);
char& byte_502DF2 = * ((decltype(&byte_502DF2)) 0x502df2);
char(&word_502DF4)[] = * ((decltype(&word_502DF4)) 0x502df4);
char(&aStarcraftSw_52)[] = * ((decltype(&aStarcraftSw_52)) 0x502df8);
char(&aRezGlurdyp_bin)[] = * ((decltype(&aRezGlurdyp_bin)) 0x502e18);
char(&asc_502E28)[] = * ((decltype(&asc_502E28)) 0x502e28);
char(&aGlueReadypPf_6)[25] = * ((decltype(&aGlueReadypPf_6)) 0x502e48);
char(&aGlueReadypPf_5)[25] = * ((decltype(&aGlueReadypPf_5)) 0x502e64);
char(&aGlueReadypPf_4)[25] = * ((decltype(&aGlueReadypPf_4)) 0x502e80);
char(&aGlueReadypPf_3)[25] = * ((decltype(&aGlueReadypPf_3)) 0x502e9c);
char(&aGlueReadypPf_2)[24] = * ((decltype(&aGlueReadypPf_2)) 0x502eb8);
char(&aGlueReadypPf_1)[24] = * ((decltype(&aGlueReadypPf_1)) 0x502ed0);
char(&aGlueReadypPf_0)[24] = * ((decltype(&aGlueReadypPf_0)) 0x502ee8);
char(&aGlueReadypPfra)[24] = * ((decltype(&aGlueReadypPfra)) 0x502f00);
char(&aRezGlujoin_bin)[] = * ((decltype(&aRezGlujoin_bin)) 0x502f18);
char(&aStarcraftSw_51)[] = * ((decltype(&aStarcraftSw_51)) 0x502f28);
char(&aUxU)[] = * ((decltype(&aUxU)) 0x502f48);
char(&aSCUU)[] = * ((decltype(&aSCUU)) 0x502f50);
char(&aRezGluhist_bin)[] = * ((decltype(&aRezGluhist_bin)) 0x502f5c);
char(&aGlueCampaignPh)[] = * ((decltype(&aGlueCampaignPh)) 0x502f6c);
char(&aRezGluhist_tbl)[] = * ((decltype(&aRezGluhist_tbl)) 0x502f84);
char(&aRezGlupoksplit)[] = * ((decltype(&aRezGlupoksplit)) 0x502f94);
char(&aRezGlupedit_bi)[] = * ((decltype(&aRezGlupedit_bi)) 0x502fa8);
int& dword_502FBC = * ((decltype(&dword_502FBC)) 0x502fbc);
int& dword_502FC0 = * ((decltype(&dword_502FC0)) 0x502fc0);
int& dword_502FC4 = * ((decltype(&dword_502FC4)) 0x502fc4);
char& byte_502FC8 = * ((decltype(&byte_502FC8)) 0x502fc8);
char(&aRezGlupok_bin)[] = * ((decltype(&aRezGlupok_bin)) 0x502fcc);
int& dword_502FDC = * ((decltype(&dword_502FDC)) 0x502fdc);
int& dword_502FE0 = * ((decltype(&dword_502FE0)) 0x502fe0);
int& dword_502FE4 = * ((decltype(&dword_502FE4)) 0x502fe4);
char& byte_502FE8 = * ((decltype(&byte_502FE8)) 0x502fe8);
char(&aRezGlupokcance)[] = * ((decltype(&aRezGlupokcance)) 0x502fec);
int& dword_503004 = * ((decltype(&dword_503004)) 0x503004);
int& dword_503008 = * ((decltype(&dword_503008)) 0x503008);
int& dword_50300C = * ((decltype(&dword_50300C)) 0x50300c);
char& byte_503010 = * ((decltype(&byte_503010)) 0x503010);
char(&aRezGlugamemode)[] = * ((decltype(&aRezGlugamemode)) 0x503014);
char(&source_filename)[] = * ((decltype(&source_filename)) 0x503028);
int& dword_50304C = * ((decltype(&dword_50304C)) 0x50304c);
int& dword_503050 = * ((decltype(&dword_503050)) 0x503050);
int& dword_503054 = * ((decltype(&dword_503054)) 0x503054);
__int16& word_503058 = * ((decltype(&word_503058)) 0x503058);
char& byte_50305A = * ((decltype(&byte_50305A)) 0x50305a);
const char(&aRezGluload_bin)[] = * ((decltype(&aRezGluload_bin)) 0x50305c);
char(&aRezGlurdyt_bin)[] = * ((decltype(&aRezGlurdyt_bin)) 0x50306c);
char(&asc_50307C)[] = * ((decltype(&asc_50307C)) 0x50307c);
char(&aGlueReadytTf_6)[25] = * ((decltype(&aGlueReadytTf_6)) 0x50309c);
char(&aGlueReadytTf_5)[25] = * ((decltype(&aGlueReadytTf_5)) 0x5030b8);
char(&aGlueReadytTf_4)[25] = * ((decltype(&aGlueReadytTf_4)) 0x5030d4);
char(&aGlueReadytTf_3)[25] = * ((decltype(&aGlueReadytTf_3)) 0x5030f0);
char(&aGlueReadytTf_2)[24] = * ((decltype(&aGlueReadytTf_2)) 0x50310c);
char(&aGlueReadytTf_1)[24] = * ((decltype(&aGlueReadytTf_1)) 0x503124);
char(&aGlueReadytTf_0)[24] = * ((decltype(&aGlueReadytTf_0)) 0x50313c);
char(&aGlueReadytTfra)[24] = * ((decltype(&aGlueReadytTfra)) 0x503154);
char(&aRezGlurdyz_bin)[] = * ((decltype(&aRezGlurdyz_bin)) 0x50316c);
char(&asc_50317C)[] = * ((decltype(&asc_50317C)) 0x50317c);
char(&aGlueReadyzZf_6)[25] = * ((decltype(&aGlueReadyzZf_6)) 0x50319c);
char(&aGlueReadyzZf_5)[25] = * ((decltype(&aGlueReadyzZf_5)) 0x5031b8);
char(&aGlueReadyzZf_4)[25] = * ((decltype(&aGlueReadyzZf_4)) 0x5031d4);
char(&aGlueReadyzZf_3)[25] = * ((decltype(&aGlueReadyzZf_3)) 0x5031f0);
char(&aGlueReadyzZf_2)[24] = * ((decltype(&aGlueReadyzZf_2)) 0x50320c);
char(&aGlueReadyzZf_1)[24] = * ((decltype(&aGlueReadyzZf_1)) 0x503224);
char(&aGlueReadyzZf_0)[24] = * ((decltype(&aGlueReadyzZf_0)) 0x50323c);
char(&aGlueReadyzZfra)[24] = * ((decltype(&aGlueReadyzZfra)) 0x503254);
CHAR(&Name)[] = * ((decltype(&Name)) 0x50326c);
int& dword_503278 = * ((decltype(&dword_503278)) 0x503278);
int& dword_50327C = * ((decltype(&dword_50327C)) 0x50327c);
__int16& word_503280 = * ((decltype(&word_503280)) 0x503280);
char& byte_503282 = * ((decltype(&byte_503282)) 0x503282);
CHAR(&aGlueokcancel_b)[] = * ((decltype(&aGlueokcancel_b)) 0x503284);
int& dword_503298 = * ((decltype(&dword_503298)) 0x503298);
int& dword_50329C = * ((decltype(&dword_50329C)) 0x50329c);
int& dword_5032A0 = * ((decltype(&dword_5032A0)) 0x5032a0);
int& dword_5032A4 = * ((decltype(&dword_5032A4)) 0x5032a4);
char& byte_5032A8 = * ((decltype(&byte_5032A8)) 0x5032a8);
char(&aStarcraftSw_48)[] = * ((decltype(&aStarcraftSw_48)) 0x5032ac);
const char(&aRezGluexpcmp_0)[] = * ((decltype(&aRezGluexpcmp_0)) 0x5032d0);
char(&aRezGluscore_bi)[] = * ((decltype(&aRezGluscore_bi)) 0x5032e4);
int& dword_5032F8 = * ((decltype(&dword_5032F8)) 0x5032f8);
int& dword_5032FC = * ((decltype(&dword_5032FC)) 0x5032fc);
int& dword_503300 = * ((decltype(&dword_503300)) 0x503300);
char& byte_503304 = * ((decltype(&byte_503304)) 0x503304);
int& dword_503308 = * ((decltype(&dword_503308)) 0x503308);
int& dword_50330C = * ((decltype(&dword_50330C)) 0x50330c);
__int16& word_503310 = * ((decltype(&word_503310)) 0x503310);
char& byte_503312 = * ((decltype(&byte_503312)) 0x503312);
char(&aMapSMap)[] = * ((decltype(&aMapSMap)) 0x503314);
char(&asc_503324)[] = * ((decltype(&asc_503324)) 0x503324);
char(&aResourcesScore)[59] = * ((decltype(&aResourcesScore)) 0x503328);
char(&aStructuresScor)[64] = * ((decltype(&aStructuresScor)) 0x503368);
char(&aUnitsScoreUPro)[57] = * ((decltype(&aUnitsScoreUPro)) 0x5033a8);
char(&aScoreOverallUU)[65] = * ((decltype(&aScoreOverallUU)) 0x5033e8);
char(&aLeagueidDLeagu)[] = * ((decltype(&aLeagueidDLeagu)) 0x503430);
char(&aUS_0)[] = * ((decltype(&aUS_0)) 0x503484);
char(&aUS)[] = * ((decltype(&aUS)) 0x50348c);
int& dword_503494 = * ((decltype(&dword_503494)) 0x503494);
int& dword_503498 = * ((decltype(&dword_503498)) 0x503498);
__int16& word_50349C = * ((decltype(&word_50349C)) 0x50349c);
char(&a02d02d)[] = * ((decltype(&a02d02d)) 0x5034a0);
char(&aD02d02d)[] = * ((decltype(&aD02d02d)) 0x5034ac);
char(&aU)[] = * ((decltype(&aU)) 0x5034bc);
int& dword_5034C0 = * ((decltype(&dword_5034C0)) 0x5034c0);
int& dword_5034C4 = * ((decltype(&dword_5034C4)) 0x5034c4);
__int16& word_5034C8 = * ((decltype(&word_5034C8)) 0x5034c8);
int& dword_5034CC = * ((decltype(&dword_5034CC)) 0x5034cc);
int& dword_5034D0 = * ((decltype(&dword_5034D0)) 0x5034d0);
__int16& word_5034D4 = * ((decltype(&word_5034D4)) 0x5034d4);
char& byte_5034D6 = * ((decltype(&byte_5034D6)) 0x5034d6);
char(&aStarcraftSw_47)[] = * ((decltype(&aStarcraftSw_47)) 0x5034d8);
int& dword_5034FC = * ((decltype(&dword_5034FC)) 0x5034fc);
int& dword_503500 = * ((decltype(&dword_503500)) 0x503500);
int& dword_503504 = * ((decltype(&dword_503504)) 0x503504);
char& byte_503508 = * ((decltype(&byte_503508)) 0x503508);
char(&aGlueScorepv)[14] = * ((decltype(&aGlueScorepv)) 0x50350c);
char(&aGlueScorepd)[14] = * ((decltype(&aGlueScorepd)) 0x50351c);
char(&aGlueScoretv)[14] = * ((decltype(&aGlueScoretv)) 0x50352c);
char(&aGlueScoretd)[14] = * ((decltype(&aGlueScoretd)) 0x50353c);
char(&aGlueScorezv)[14] = * ((decltype(&aGlueScorezv)) 0x50354c);
char(&aGlueScorezd)[14] = * ((decltype(&aGlueScorezd)) 0x50355c);
const char(&aRezGlucmpgn__0)[] = * ((decltype(&aRezGlucmpgn__0)) 0x50356c);
MissionCheatRelated(&stru_503580)[6] = * ((decltype(&stru_503580)) 0x503580);
char(&aXprotoss)[9] = * ((decltype(&aXprotoss)) 0x5035e0);
char(&aXzerg)[6] = * ((decltype(&aXzerg)) 0x5035ec);
char(&aXterran)[8] = * ((decltype(&aXterran)) 0x5035f4);
char(&aProtoss)[8] = * ((decltype(&aProtoss)) 0x5035fc);
char(&aZerg)[5] = * ((decltype(&aZerg)) 0x503604);
char(&aTerran)[7] = * ((decltype(&aTerran)) 0x50360c);
char(&aSS_4)[] = * ((decltype(&aSS_4)) 0x503614);
char(&aRezGlumodem_bi)[] = * ((decltype(&aRezGlumodem_bi)) 0x50361c);
char(&aRezGluatzoneli)[] = * ((decltype(&aRezGluatzoneli)) 0x503630);
char(&aRezGlumodemlis)[] = * ((decltype(&aRezGlumodemlis)) 0x503648);
char(&aPselect_pcx)[] = * ((decltype(&aPselect_pcx)) 0x503660);
char(&aRezGlumodemsta)[] = * ((decltype(&aRezGlumodemsta)) 0x50366c);
char(&aPstatus_pcx)[] = * ((decltype(&aPstatus_pcx)) 0x503684);
char(&asc_503690)[] = * ((decltype(&asc_503690)) 0x503690);
char(&aSoftwareBlizza)[] = * ((decltype(&aSoftwareBlizza)) 0x503694);
char(&aSCS)[] = * ((decltype(&aSCS)) 0x5036b8);
char(&aRezGlumodement)[] = * ((decltype(&aRezGlumodement)) 0x5036c0);
char(&aStarcraftSw_46)[] = * ((decltype(&aStarcraftSw_46)) 0x5036d8);
char(&aPentry_pcx)[] = * ((decltype(&aPentry_pcx)) 0x5036fc);
char(&aGlueCreateIcre)[] = * ((decltype(&aGlueCreateIcre)) 0x503708);
char(&aStarcraftSw_80)[] = * ((decltype(&aStarcraftSw_80)) 0x503720);
char(&aRezGlucreat_bi)[17] = * ((decltype(&aRezGlucreat_bi)) 0x503744);
const char(&aRezGlucustm_bi)[] = * ((decltype(&aRezGlucustm_bi)) 0x503758);
char(&aCustomType)[12] = * ((decltype(&aCustomType)) 0x50376c);
char(&aGameType)[] = * ((decltype(&aGameType)) 0x503778);
char(&valuename)[] = * ((decltype(&valuename)) 0x503784);
char(&aGameSpeed)[] = * ((decltype(&aGameSpeed)) 0x503794);
int& dword_5037A0 = * ((decltype(&dword_5037A0)) 0x5037a0);
int& dword_5037A4 = * ((decltype(&dword_5037A4)) 0x5037a4);
__int16& word_5037A8 = * ((decltype(&word_5037A8)) 0x5037a8);
char(&byte_5037AC)[] = * ((decltype(&byte_5037AC)) 0x5037ac);
char(&aApsReplays)[12] = * ((decltype(&aApsReplays)) 0x5037ad);
char(&aMaps_0)[5] = * ((decltype(&aMaps_0)) 0x5037bc);
CHAR(&aAbcdefghijklmn)[] = * ((decltype(&aAbcdefghijklmn)) 0x5037c4);
const char(&aRezGlubnres_re)[] = * ((decltype(&aRezGlubnres_re)) 0x5037fc);
char(&aStarcraftSw_13)[] = * ((decltype(&aStarcraftSw_13)) 0x503810);
CHAR(&CursorName)[] = * ((decltype(&CursorName)) 0x503830);
char(&aGenericIcon_19)[30] = * ((decltype(&aGenericIcon_19)) 0x50383c);
char(&aGenericIcon_18)[31] = * ((decltype(&aGenericIcon_18)) 0x50385c);
char(&aGenericIcon_17)[26] = * ((decltype(&aGenericIcon_17)) 0x50387c);
char(&aGenericIcon_16)[27] = * ((decltype(&aGenericIcon_16)) 0x503898);
char(&aGenericIcon_15)[25] = * ((decltype(&aGenericIcon_15)) 0x5038b4);
char(&aGenericIcon_14)[26] = * ((decltype(&aGenericIcon_14)) 0x5038d0);
char(&aGenericIcon_13)[26] = * ((decltype(&aGenericIcon_13)) 0x5038ec);
char(&aGenericIconsSl)[25] = * ((decltype(&aGenericIconsSl)) 0x503908);
char(&aGenericIcon_11)[23] = * ((decltype(&aGenericIcon_11)) 0x503924);
char(&aGenericIcon_10)[23] = * ((decltype(&aGenericIcon_10)) 0x50393c);
char(&aGenericIcons_9)[23] = * ((decltype(&aGenericIcons_9)) 0x503954);
char(&aGenericIcons_8)[23] = * ((decltype(&aGenericIcons_8)) 0x50396c);
char(&aGenericIcons_7)[23] = * ((decltype(&aGenericIcons_7)) 0x503984);
char(&aGenericIcons_6)[23] = * ((decltype(&aGenericIcons_6)) 0x50399c);
char(&aGenericIcons_5)[23] = * ((decltype(&aGenericIcons_5)) 0x5039b4);
char(&aGenericIcons_4)[23] = * ((decltype(&aGenericIcons_4)) 0x5039cc);
char(&aGenericIconsCm)[23] = * ((decltype(&aGenericIconsCm)) 0x5039e4);
int& dword_5039FC = * ((decltype(&dword_5039FC)) 0x5039fc);
int& dword_503A00 = * ((decltype(&dword_503A00)) 0x503a00);
int& dword_503A04 = * ((decltype(&dword_503A04)) 0x503a04);
__int16& word_503A08 = * ((decltype(&word_503A08)) 0x503a08);
int& dword_503A0C = * ((decltype(&dword_503A0C)) 0x503a0c);
int& dword_503A10 = * ((decltype(&dword_503A10)) 0x503a10);
int& dword_503A14 = * ((decltype(&dword_503A14)) 0x503a14);
int& dword_503A18 = * ((decltype(&dword_503A18)) 0x503a18);
int& dword_503A1C = * ((decltype(&dword_503A1C)) 0x503a1c);
int& dword_503A20 = * ((decltype(&dword_503A20)) 0x503a20);
int& dword_503A24 = * ((decltype(&dword_503A24)) 0x503a24);
int& dword_503A28 = * ((decltype(&dword_503A28)) 0x503a28);
char& byte_503A2C = * ((decltype(&byte_503A2C)) 0x503a2c);
char(&aGenericPopupsS)[26] = * ((decltype(&aGenericPopupsS)) 0x503a30);
char(&aGenericIcons_3)[27] = * ((decltype(&aGenericIcons_3)) 0x503a4c);
char(&aGenericIconsPr)[26] = * ((decltype(&aGenericIconsPr)) 0x503a68);
char(&aGenericPopupsL)[26] = * ((decltype(&aGenericPopupsL)) 0x503a84);
char(&aBackgroundsReg)[30] = * ((decltype(&aBackgroundsReg)) 0x503aa0);
int& dword_503AC0 = * ((decltype(&dword_503AC0)) 0x503ac0);
int& dword_503AC4 = * ((decltype(&dword_503AC4)) 0x503ac4);
int& dword_503AC8 = * ((decltype(&dword_503AC8)) 0x503ac8);
int& dword_503ACC = * ((decltype(&dword_503ACC)) 0x503acc);
int& dword_503AD0 = * ((decltype(&dword_503AD0)) 0x503ad0);
char(&aGenericPopup_0)[27] = * ((decltype(&aGenericPopup_0)) 0x503ad4);
int& dword_503AF0 = * ((decltype(&dword_503AF0)) 0x503af0);
int& dword_503AF4 = * ((decltype(&dword_503AF4)) 0x503af4);
int& dword_503AF8 = * ((decltype(&dword_503AF8)) 0x503af8);
int& dword_503AFC = * ((decltype(&dword_503AFC)) 0x503afc);
__int16& word_503B00 = * ((decltype(&word_503B00)) 0x503b00);
char& byte_503B02 = * ((decltype(&byte_503B02)) 0x503b02);
char(&aIconsDisconnec)[23] = * ((decltype(&aIconsDisconnec)) 0x503b04);
char(&aGenericIcons_2)[26] = * ((decltype(&aGenericIcons_2)) 0x503b1c);
char(&aGenericIcons_1)[26] = * ((decltype(&aGenericIcons_1)) 0x503b38);
char(&aGenericIcons_0)[26] = * ((decltype(&aGenericIcons_0)) 0x503b54);
char(&aGenericIconsBu)[26] = * ((decltype(&aGenericIconsBu)) 0x503b70);
char(&aGenericIcon_12)[29] = * ((decltype(&aGenericIcon_12)) 0x503b8c);
int& dword_503BAC = * ((decltype(&dword_503BAC)) 0x503bac);
int& dword_503BB0 = * ((decltype(&dword_503BB0)) 0x503bb0);
int& dword_503BB4 = * ((decltype(&dword_503BB4)) 0x503bb4);
int& dword_503BB8 = * ((decltype(&dword_503BB8)) 0x503bb8);
__int16& word_503BBC = * ((decltype(&word_503BBC)) 0x503bbc);
char& byte_503BBE = * ((decltype(&byte_503BBE)) 0x503bbe);
int& dword_503BC0 = * ((decltype(&dword_503BC0)) 0x503bc0);
int& dword_503BC4 = * ((decltype(&dword_503BC4)) 0x503bc4);
int& dword_503BC8 = * ((decltype(&dword_503BC8)) 0x503bc8);
int& dword_503BCC = * ((decltype(&dword_503BCC)) 0x503bcc);
__int16& word_503BD0 = * ((decltype(&word_503BD0)) 0x503bd0);
char& byte_503BD2 = * ((decltype(&byte_503BD2)) 0x503bd2);
int& dword_503BD4 = * ((decltype(&dword_503BD4)) 0x503bd4);
int& dword_503BD8 = * ((decltype(&dword_503BD8)) 0x503bd8);
int& dword_503BDC = * ((decltype(&dword_503BDC)) 0x503bdc);
int& dword_503BE0 = * ((decltype(&dword_503BE0)) 0x503be0);
char& byte_503BE4 = * ((decltype(&byte_503BE4)) 0x503be4);
char(&aBackgroundsBnl)[25] = * ((decltype(&aBackgroundsBnl)) 0x503be8);
char(&aBackgroundsBns)[25] = * ((decltype(&aBackgroundsBns)) 0x503c04);
int& dword_503C20 = * ((decltype(&dword_503C20)) 0x503c20);
int& dword_503C24 = * ((decltype(&dword_503C24)) 0x503c24);
int& dword_503C28 = * ((decltype(&dword_503C28)) 0x503c28);
int& dword_503C2C = * ((decltype(&dword_503C2C)) 0x503c2c);
__int16& word_503C30 = * ((decltype(&word_503C30)) 0x503c30);
char& byte_503C32 = * ((decltype(&byte_503C32)) 0x503c32);
char(&aBackgroundsCha)[25] = * ((decltype(&aBackgroundsCha)) 0x503c34);
char(&aBackgroundsBnc)[26] = * ((decltype(&aBackgroundsBnc)) 0x503c50);
char(&aBackgroundsC_0)[31] = * ((decltype(&aBackgroundsC_0)) 0x503c6c);
char(&aBackgroundsNew)[27] = * ((decltype(&aBackgroundsNew)) 0x503c8c);
int& dword_503CA8 = * ((decltype(&dword_503CA8)) 0x503ca8);
int& dword_503CAC = * ((decltype(&dword_503CAC)) 0x503cac);
int& dword_503CB0 = * ((decltype(&dword_503CB0)) 0x503cb0);
int& dword_503CB4 = * ((decltype(&dword_503CB4)) 0x503cb4);
int& dword_503CB8 = * ((decltype(&dword_503CB8)) 0x503cb8);
int& dword_503CBC = * ((decltype(&dword_503CBC)) 0x503cbc);
char(&aGenericPopupsH)[26] = * ((decltype(&aGenericPopupsH)) 0x503cc0);
char(&aBackgroundsBnj)[25] = * ((decltype(&aBackgroundsBnj)) 0x503cdc);
char(&aBackgroundsBn_)[23] = * ((decltype(&aBackgroundsBn_)) 0x503cf8);
char(&aTriggersCtf_tr)[17] = * ((decltype(&aTriggersCtf_tr)) 0x503d10);
const char(&aTriggersSlau_2)[] = * ((decltype(&aTriggersSlau_2)) 0x503d24);
const char(&aTriggersSlau_1)[] = * ((decltype(&aTriggersSlau_1)) 0x503d40);
const char(&aTriggersSlau_0)[] = * ((decltype(&aTriggersSlau_0)) 0x503d5c);
const char(&aTriggersSlaugh)[] = * ((decltype(&aTriggersSlaugh)) 0x503d78);
const char(&aTriggersGreed1)[] = * ((decltype(&aTriggersGreed1)) 0x503d94);
const char(&aTriggersGreed7)[] = * ((decltype(&aTriggersGreed7)) 0x503dac);
const char(&aTriggersGreed5)[] = * ((decltype(&aTriggersGreed5)) 0x503dc4);
const char(&aTriggersGreed2)[] = * ((decltype(&aTriggersGreed2)) 0x503ddc);
const char(&aTriggersSudden)[] = * ((decltype(&aTriggersSudden)) 0x503df4);
const char(&aTriggersMelee_)[] = * ((decltype(&aTriggersMelee_)) 0x503e10);
char(&template_name)[] = * ((decltype(&template_name)) 0x503e24);
char(&aUnableToReadGa)[] = * ((decltype(&aUnableToReadGa)) 0x503e38);
char(&aSS_0)[] = * ((decltype(&aSS_0)) 0x503e58);
char(&aTemplates_lst)[14] = * ((decltype(&aTemplates_lst)) 0x503e60);
char(&aStarcraftSw_45)[] = * ((decltype(&aStarcraftSw_45)) 0x503e70);
char(&aTemplates)[11] = * ((decltype(&aTemplates)) 0x503e94);
char(&a_got)[5] = * ((decltype(&a_got)) 0x503ea0);
char(&aCharacters)[] = * ((decltype(&aCharacters)) 0x503ea8);
char(&aStarcraftSw_17)[] = * ((decltype(&aStarcraftSw_17)) 0x503eb4);
char(&aRecentMaps)[] = * ((decltype(&aRecentMaps)) 0x503ed4);
char(&asc_503EE0)[] = * ((decltype(&asc_503EE0)) 0x503ee0);
char(&asc_503EE4)[] = * ((decltype(&asc_503EE4)) 0x503ee4);
char(&asc_503EE8)[] = * ((decltype(&asc_503EE8)) 0x503ee8);
char(&a__)[] = * ((decltype(&a__)) 0x503eec);
char(&aScx)[] = * ((decltype(&aScx)) 0x503ef0);
char(&aScm)[] = * ((decltype(&aScm)) 0x503ef4);
char(&aMusicRadiofree)[24] = * ((decltype(&aMusicRadiofree)) 0x503ef8);
char(&aMusicTitle_wav)[16] = * ((decltype(&aMusicTitle_wav)) 0x503f10);
char(&aMusicPvict_wav)[16] = * ((decltype(&aMusicPvict_wav)) 0x503f20);
char(&aMusicTvict_wav)[16] = * ((decltype(&aMusicTvict_wav)) 0x503f30);
char(&aMusicZvict_wav)[16] = * ((decltype(&aMusicZvict_wav)) 0x503f40);
char(&aMusicPdefeat_w)[18] = * ((decltype(&aMusicPdefeat_w)) 0x503f50);
char(&aMusicTdefeat_w)[18] = * ((decltype(&aMusicTdefeat_w)) 0x503f64);
char(&aMusicZdefeat_w)[18] = * ((decltype(&aMusicZdefeat_w)) 0x503f78);
char(&aMusicPrdyroom_)[19] = * ((decltype(&aMusicPrdyroom_)) 0x503f8c);
char(&aMusicTrdyroom_)[19] = * ((decltype(&aMusicTrdyroom_)) 0x503fa0);
char(&aMusicZrdyroom_)[19] = * ((decltype(&aMusicZrdyroom_)) 0x503fb4);
char(&aMusicProtoss3_)[19] = * ((decltype(&aMusicProtoss3_)) 0x503fc8);
char(&aMusicProtoss2_)[19] = * ((decltype(&aMusicProtoss2_)) 0x503fdc);
char(&aMusicProtoss1_)[19] = * ((decltype(&aMusicProtoss1_)) 0x503ff0);
char(&aMusicTerran3_w)[18] = * ((decltype(&aMusicTerran3_w)) 0x504004);
char(&aMusicTerran2_w)[18] = * ((decltype(&aMusicTerran2_w)) 0x504018);
char(&aMusicTerran1_w)[18] = * ((decltype(&aMusicTerran1_w)) 0x50402c);
char(&aMusicZerg3_wav)[16] = * ((decltype(&aMusicZerg3_wav)) 0x504040);
char(&aMusicZerg2_wav)[16] = * ((decltype(&aMusicZerg2_wav)) 0x504050);
char(&aMusicZerg1_wav)[16] = * ((decltype(&aMusicZerg1_wav)) 0x504060);
char(&aRezMinimap_bin)[] = * ((decltype(&aRezMinimap_bin)) 0x504070);
char(&aGameTblink_pcx)[] = * ((decltype(&aGameTblink_pcx)) 0x504080);
char(&grp_path)[] = * ((decltype(&grp_path)) 0x504090);
char(&aRezMinimapprev)[] = * ((decltype(&aRezMinimapprev)) 0x5040a0);
char(&aStarcraftSw_44)[] = * ((decltype(&aStarcraftSw_44)) 0x5040b8);
char(&aRezTimeout_bin)[] = * ((decltype(&aRezTimeout_bin)) 0x5040d8);
char(&aD02d)[] = * ((decltype(&aD02d)) 0x5040e8);
char(&aStarcraftSw_43)[] = * ((decltype(&aStarcraftSw_43)) 0x5040f0);
char(&aArrUnits_dat)[] = * ((decltype(&aArrUnits_dat)) 0x504114);
char(&aArrOrders_dat)[] = * ((decltype(&aArrOrders_dat)) 0x504124);
char(&aGameTminimap_p)[] = * ((decltype(&aGameTminimap_p)) 0x504134);
char(&aGameTunit_pcx)[] = * ((decltype(&aGameTunit_pcx)) 0x504148);
char(&aSSSS_S_S)[] = * ((decltype(&aSSSS_S_S)) 0x504158);
char(&aProfile_pcx)[] = * ((decltype(&aProfile_pcx)) 0x50416c);
char(&aStarcraftSw_42)[] = * ((decltype(&aStarcraftSw_42)) 0x504178);
char(&aSSS_mpq)[] = * ((decltype(&aSSS_mpq)) 0x504198);
char(&aLeagues)[9] = * ((decltype(&aLeagues)) 0x5041a4);
char(&aGameresultSGam)[] = * ((decltype(&aGameresultSGam)) 0x5041b0);
char(&aS)[] = * ((decltype(&aS)) 0x5041f4);
char(&aNonplayer)[12] = * ((decltype(&aNonplayer)) 0x5041f8);
void *& off_504204 = * ((decltype(&off_504204)) 0x504204);
char(&string)[] = * ((decltype(&string)) 0x504208);
char(&aStarcraftSw_41)[] = * ((decltype(&aStarcraftSw_41)) 0x504224);
char(&aArrSprites_dat)[] = * ((decltype(&aArrSprites_dat)) 0x504244);
char(&aStarcraftSw_40)[] = * ((decltype(&aStarcraftSw_40)) 0x504254);
char(&aArrFlingy_dat)[] = * ((decltype(&aArrFlingy_dat)) 0x504274);
char(&aStarcraftSw_39)[] = * ((decltype(&aStarcraftSw_39)) 0x504284);
char(&aRezMsgfltr_bin)[] = * ((decltype(&aRezMsgfltr_bin)) 0x5042ac);
char(&aRezAllyfltr_bi)[] = * ((decltype(&aRezAllyfltr_bi)) 0x5042bc);
char(&aRezTeamfltr_bi)[17] = * ((decltype(&aRezTeamfltr_bi)) 0x5042d0);
char(&aStarcraftSw_38)[] = * ((decltype(&aStarcraftSw_38)) 0x5042e4);
char(&aSCS_0)[] = * ((decltype(&aSCS_0)) 0x504308);
char(&aSSCS)[] = * ((decltype(&aSSCS)) 0x504314);
char(&aSS_3)[] = * ((decltype(&aSS_3)) 0x504324);
char(&aStarcraftSw_37)[] = * ((decltype(&aStarcraftSw_37)) 0x50432c);
char(&aCbulletDamage)[] = * ((decltype(&aCbulletDamage)) 0x50434c);
char(&aStarcraftSw_36)[] = * ((decltype(&aStarcraftSw_36)) 0x50435c);
char(&aStarcraftSw_35)[] = * ((decltype(&aStarcraftSw_35)) 0x50437c);
int (__fastcall *(&funcs_485FB0)[3])(DWORD a1, int a2, DWORD a3) = * ((decltype(&funcs_485FB0)) 0x50439c);
const char(&aStarcraftSw_34)[] = * ((decltype(&aStarcraftSw_34)) 0x5043a8);
char(&aStarcraftSw_98)[] = * ((decltype(&aStarcraftSw_98)) 0x5043c8);
const char(&file_name)[] = * ((decltype(&file_name)) 0x5043ec);
const CHAR(&aTheMapCouldNot)[] = * ((decltype(&aTheMapCouldNot)) 0x504410);
char(&aStarcraftSw_29)[] = * ((decltype(&aStarcraftSw_29)) 0x5044b8);
char(&aRezSpd_dlg_bin)[] = * ((decltype(&aRezSpd_dlg_bin)) 0x5044e0);
char(&aStarcraftSw_82)[] = * ((decltype(&aStarcraftSw_82)) 0x5044f0);
char(&aRezVideo_bin)[] = * ((decltype(&aRezVideo_bin)) 0x504514);
int (__fastcall *&off_504524)(int, int, SightStruct *, MegatileFlags *, unsigned int, unsigned int) = *((decltype(&off_504524)) 0x504524);
int (__fastcall *&off_504528)(int, int, SightStruct *, MegatileFlags *, unsigned int, unsigned int) = *((decltype(&off_504528)) 0x504528);
char(&aStarcraftSw_59)[] = * ((decltype(&aStarcraftSw_59)) 0x504534);
char(&aWSS)[] = * ((decltype(&aWSS)) 0x504554);
char(&aR)[3] = * ((decltype(&aR)) 0x504560);
char(&aReply)[7] = * ((decltype(&aReply)) 0x504564);
char(&aM)[3] = * ((decltype(&aM)) 0x50456c);
char(&aW)[3] = * ((decltype(&aW)) 0x504570);
char(&aMsg)[5] = * ((decltype(&aMsg)) 0x504574);
char(&aWhisper)[9] = * ((decltype(&aWhisper)) 0x50457c);
char(&aUnignore)[10] = * ((decltype(&aUnignore)) 0x504588);
char(&aUnsquelch)[11] = * ((decltype(&aUnsquelch)) 0x504594);
char(&aIgnore)[8] = * ((decltype(&aIgnore)) 0x5045a0);
char(&aSquelch)[9] = * ((decltype(&aSquelch)) 0x5045a8);
char(&aStats)[] = * ((decltype(&aStats)) 0x5045b4);
char(&aLeague)[] = * ((decltype(&aLeague)) 0x5045bc);
char(&aParallaxStar_s)[] = * ((decltype(&aParallaxStar_s)) 0x5045c4);
char(&aStarcraftSw_89)[] = * ((decltype(&aStarcraftSw_89)) 0x5045d8);
char(&aRezTips_dlg_bi)[] = * ((decltype(&aRezTips_dlg_bi)) 0x5045f8);
char(&aRezTips_tbl)[] = * ((decltype(&aRezTips_tbl)) 0x50460c);
char(&asc_50461C)[] = * ((decltype(&asc_50461C)) 0x50461c);
char(&aStarcraftSw_31)[] = * ((decltype(&aStarcraftSw_31)) 0x50463c);
char(&aUnitS)[] = * ((decltype(&aUnitS)) 0x50465c);
char(&aGameThpbar_pcx)[] = * ((decltype(&aGameThpbar_pcx)) 0x504664);
char(&asc_504674)[4] = * ((decltype(&asc_504674)) 0x504674);
char(&asc_504678)[] = * ((decltype(&asc_504678)) 0x504678);
char(&aStarcraftSw_22)[] = * ((decltype(&aStarcraftSw_22)) 0x50467c);
char(&aStarcraftSw_87)[] = * ((decltype(&aStarcraftSw_87)) 0x5046a4);
char(&aAstatS)[] = * ((decltype(&aAstatS)) 0x5046c0);
char(&aStarcraftSw_30)[] = * ((decltype(&aStarcraftSw_30)) 0x5046cc);
char(&aLpt9)[5] = * ((decltype(&aLpt9)) 0x5046f4);
char(&aLpt8)[5] = * ((decltype(&aLpt8)) 0x5046fc);
char(&aLpt7)[5] = * ((decltype(&aLpt7)) 0x504704);
char(&aLpt6)[5] = * ((decltype(&aLpt6)) 0x50470c);
char(&aLpt5)[5] = * ((decltype(&aLpt5)) 0x504714);
char(&aLpt4)[5] = * ((decltype(&aLpt4)) 0x50471c);
char(&aLpt3)[5] = * ((decltype(&aLpt3)) 0x504724);
char(&aLpt2)[5] = * ((decltype(&aLpt2)) 0x50472c);
char(&aLpt1)[5] = * ((decltype(&aLpt1)) 0x504734);
char(&aCom9)[5] = * ((decltype(&aCom9)) 0x50473c);
char(&aCom8)[5] = * ((decltype(&aCom8)) 0x504744);
char(&aCom7)[5] = * ((decltype(&aCom7)) 0x50474c);
char(&aCom6)[5] = * ((decltype(&aCom6)) 0x504754);
char(&aCom5)[5] = * ((decltype(&aCom5)) 0x50475c);
char(&aCom4)[5] = * ((decltype(&aCom4)) 0x504764);
char(&aCom3)[5] = * ((decltype(&aCom3)) 0x50476c);
char(&aCom2)[5] = * ((decltype(&aCom2)) 0x504774);
char(&aCom1)[5] = * ((decltype(&aCom1)) 0x50477c);
char(&aClock)[7] = * ((decltype(&aClock)) 0x504784);
char(&aConout)[8] = * ((decltype(&aConout)) 0x50478c);
char(&aConin)[7] = * ((decltype(&aConin)) 0x504794);
char(&aAux)[4] = * ((decltype(&aAux)) 0x50479c);
char(&aPrn)[4] = * ((decltype(&aPrn)) 0x5047a0);
char(&aCon)[4] = * ((decltype(&aCon)) 0x5047a4);
void *& off_5047A8 = * ((decltype(&off_5047A8)) 0x5047a8);
char(&aStarcraftSw_86)[] = * ((decltype(&aStarcraftSw_86)) 0x5047ac);
char(&asc_5047D0)[] = * ((decltype(&asc_5047D0)) 0x5047d0);
char(&aChklarvastray1)[] = * ((decltype(&aChklarvastray1)) 0x5047f0);
char(&aChklarvastray2)[] = * ((decltype(&aChklarvastray2)) 0x504804);
char(&aRezLoadgame_bi)[] = * ((decltype(&aRezLoadgame_bi)) 0x504818);
char(&aRezNetdlg_bin)[] = * ((decltype(&aRezNetdlg_bin)) 0x50482c);
char(&aRezHelp_bin)[] = * ((decltype(&aRezHelp_bin)) 0x50483c);
char(&aRezHelp_txt_tb)[] = * ((decltype(&aRezHelp_txt_tb)) 0x50484c);
char(&asc_504860)[] = * ((decltype(&asc_504860)) 0x504860);
char(&aRezLmission_bi)[] = * ((decltype(&aRezLmission_bi)) 0x504880);
char(&aRezWmission_bi)[] = * ((decltype(&aRezWmission_bi)) 0x504894);
char(&aRezSnd_dlg_bin)[] = * ((decltype(&aRezSnd_dlg_bin)) 0x5048a8);
char(&aRezStatport_bi)[] = * ((decltype(&aRezStatport_bi)) 0x5048b8);
char(&aArrPortdata)[] = * ((decltype(&aArrPortdata)) 0x5048cc);
char(&aGame)[6] = * ((decltype(&aGame)) 0x5048e0);
char(&aConover_pcx)[12] = * ((decltype(&aConover_pcx)) 0x5048e8);
char(&aStarcraftSw_28)[] = * ((decltype(&aStarcraftSw_28)) 0x5048f4);
FnInteract& off_504918 = * ((decltype(&off_504918)) 0x504918);
char(&aSSD_smk)[] = * ((decltype(&aSSD_smk)) 0x50491c);
char(&aPortrait)[10] = * ((decltype(&aPortrait)) 0x504928);
char(&szFileName)[] = * ((decltype(&szFileName)) 0x504934);
char(&aScriptsAiscrip)[] = * ((decltype(&aScriptsAiscrip)) 0x50494c);
char(&aStarcraftSw_94)[] = * ((decltype(&aStarcraftSw_94)) 0x504964);
char(&aIllegalAiScrip)[] = * ((decltype(&aIllegalAiScrip)) 0x504988);
char(&aStarcraftSw_27)[] = * ((decltype(&aStarcraftSw_27)) 0x5049a4);
char(&aStarcraftSw_95)[] = * ((decltype(&aStarcraftSw_95)) 0x5049c4);
char(&aRezCtextbox_bi)[] = * ((decltype(&aRezCtextbox_bi)) 0x5049e4);
char(&aRezStatbtnC_bi)[] = * ((decltype(&aRezStatbtnC_bi)) 0x5049f8);
char(&aUnitCmdbtnsTic)[] = * ((decltype(&aUnitCmdbtnsTic)) 0x504a0c);
char(&aUnitCmdbtnsCmd)[] = * ((decltype(&aUnitCmdbtnsCmd)) 0x504a24);
char(&aSCcmdbtns_grp)[] = * ((decltype(&aSCcmdbtns_grp)) 0x504a40);
char(&aUnitCmdbtns)[14] = * ((decltype(&aUnitCmdbtns)) 0x504a50);
char(&aPbrfull_pcx)[12] = * ((decltype(&aPbrfull_pcx)) 0x504a60);
char(&aStarcraftSw_26)[] = * ((decltype(&aStarcraftSw_26)) 0x504a6c);
char(&aPbrempt_pcx)[12] = * ((decltype(&aPbrempt_pcx)) 0x504a8c);
char(&aSSD)[] = * ((decltype(&aSSD)) 0x504a98);
char(&aRezStatdata_bi)[] = * ((decltype(&aRezStatdata_bi)) 0x504aa4);
char(&aUnitWireframGr)[] = * ((decltype(&aUnitWireframGr)) 0x504ab8);
char(&aUnitWireframTr)[] = * ((decltype(&aUnitWireframTr)) 0x504ad4);
FnInteract(&off_504AF0)[44] = * ((decltype(&off_504AF0)) 0x504af0);
char(&aSS_2)[] = * ((decltype(&aSS_2)) 0x504ba0);
char(&aSSDD)[] = * ((decltype(&aSSDD)) 0x504ba8);
char(&aSSDS)[12] = * ((decltype(&aSSDS)) 0x504bb4);
char(&aSSDDS)[] = * ((decltype(&aSSDDS)) 0x504bc0);
char(&logfile)[] = * ((decltype(&logfile)) 0x504bd0);
char(&aGameTwire_pcx)[] = * ((decltype(&aGameTwire_pcx)) 0x504bf4);
char(&aUnitWireframWi)[] = * ((decltype(&aUnitWireframWi)) 0x504c04);
char(&aStarcraftSw_92)[] = * ((decltype(&aStarcraftSw_92)) 0x504c20);
char(&aRezStat_f10_bi)[] = * ((decltype(&aRezStat_f10_bi)) 0x504c44);
char(&aStarcraftSw_97)[] = * ((decltype(&aStarcraftSw_97)) 0x504c58);
FnInteract& off_504C7C = * ((decltype(&off_504C7C)) 0x504c7c);
char(&aRezStatfluf_bi)[] = * ((decltype(&aRezStatfluf_bi)) 0x504c80);
char(&aStarcraftSw_96)[] = * ((decltype(&aStarcraftSw_96)) 0x504c94);
char(&aRezStatres_bin)[] = * ((decltype(&aRezStatres_bin)) 0x504cb8);
char(&aGameIcons_grp)[] = * ((decltype(&aGameIcons_grp)) 0x504cc8);
char(&aStarcraftSw_85)[] = * ((decltype(&aStarcraftSw_85)) 0x504cd8);
FnInteract(&off_504CF8)[6] = * ((decltype(&off_504CF8)) 0x504cf8);
const char(&SupplyInfoFormat)[9] = * ((decltype(&SupplyInfoFormat)) 0x504d10);
char(&aStarcraftSw_58)[] = * ((decltype(&aStarcraftSw_58)) 0x504d1c);
char(&aRezDlgfatal_bi)[] = * ((decltype(&aRezDlgfatal_bi)) 0x504d3c);
char(&aStarcraftSw_84)[] = * ((decltype(&aStarcraftSw_84)) 0x504d50);
char(&aRezGateways_tx)[] = * ((decltype(&aRezGateways_tx)) 0x504d74);
char(&aStarcraftSw_24)[] = * ((decltype(&aStarcraftSw_24)) 0x504d88);
char(&aOverrideBattle)[] = * ((decltype(&aOverrideBattle)) 0x504da8);
char(&aConfiguration)[] = * ((decltype(&aConfiguration)) 0x504dc8);
const char(&aBattle_netGate)[] = * ((decltype(&aBattle_netGate)) 0x504dd8);
const char(&aStarcraftSw_23)[32] = * ((decltype(&aStarcraftSw_23)) 0x504dec);
__int16& word_504E0C = * ((decltype(&word_504E0C)) 0x504e0c);
char& byte_504E0E = * ((decltype(&byte_504E0E)) 0x504e0e);
char(&aGlueChatroomIc)[] = * ((decltype(&aGlueChatroomIc)) 0x504e10);
char(&string2)[] = * ((decltype(&string2)) 0x504e28);
char(&aStatsS)[] = * ((decltype(&aStatsS)) 0x504e2c);
char(&a3u)[] = * ((decltype(&a3u)) 0x504e38);
char(&aStarcraftSw_21)[] = * ((decltype(&aStarcraftSw_21)) 0x504e3c);
char(&aStarcraftSw_19)[] = * ((decltype(&aStarcraftSw_19)) 0x504e60);
char(&aDialog_static_)[22] = * ((decltype(&aDialog_static_)) 0x504e84);
char(&aDialog_profile)[15] = * ((decltype(&aDialog_profile)) 0x504e9c);
int(&dword_504EAC)[6] = * ((decltype(&dword_504EAC)) 0x504eac);
int(&dword_504EC4)[6] = * ((decltype(&dword_504EC4)) 0x504ec4);
CHAR(&FileName)[] = * ((decltype(&FileName)) 0x504edc);
char(&aWb)[] = * ((decltype(&aWb)) 0x504ee8);
unsigned __int8& asc_504EEC = * ((decltype(&asc_504EEC)) 0x504eec);
unsigned __int8& aHttp = * ((decltype(&aHttp)) 0x504ef4);
char(&aTimeNewRoman)[15] = * ((decltype(&aTimeNewRoman)) 0x504efc);
char(&aStarcraftSw_18)[] = * ((decltype(&aStarcraftSw_18)) 0x504f0c);
char(&aGlueBattle_n_3)[] = * ((decltype(&aGlueBattle_n_3)) 0x504f34);
char(&aPopup)[6] = * ((decltype(&aPopup)) 0x504f60);
char(&aGlueBattle_n_7)[46] = * ((decltype(&aGlueBattle_n_7)) 0x504f68);
char(&aGlueBattle_n_6)[42] = * ((decltype(&aGlueBattle_n_6)) 0x504f98);
char(&aAt)[] = * ((decltype(&aAt)) 0x504fc4);
CHAR(&Format)[] = * ((decltype(&Format)) 0x504fcc);
char(&a0)[] = * ((decltype(&a0)) 0x504fd4);
char(&aArial)[6] = * ((decltype(&aArial)) 0x504fd8);
char(&aRecordSexp1Las)[31] = * ((decltype(&aRecordSexp1Las)) 0x504fe0);
char(&aRecordSexp1L_0)[24] = * ((decltype(&aRecordSexp1L_0)) 0x505000);
char(&aRecordSexp1Hig)[24] = * ((decltype(&aRecordSexp1Hig)) 0x505018);
char(&aDynkeySexp1Ran)[19] = * ((decltype(&aDynkeySexp1Ran)) 0x505030);
char(&aRecordSexp1H_0)[26] = * ((decltype(&aRecordSexp1H_0)) 0x505044);
char(&aRecordSexp1Rat)[21] = * ((decltype(&aRecordSexp1Rat)) 0x505060);
char(&aRecordSexp1Dis)[26] = * ((decltype(&aRecordSexp1Dis)) 0x505078);
char(&aRecordSexp1Los)[21] = * ((decltype(&aRecordSexp1Los)) 0x505094);
char(&aRecordSexp1Win)[19] = * ((decltype(&aRecordSexp1Win)) 0x5050ac);
char(&aRecordSexp0Las)[31] = * ((decltype(&aRecordSexp0Las)) 0x5050c0);
char(&aRecordSexp0L_0)[24] = * ((decltype(&aRecordSexp0L_0)) 0x5050e0);
char(&aRecordSexp0Dis)[26] = * ((decltype(&aRecordSexp0Dis)) 0x5050f8);
char(&aRecordSexp0Los)[21] = * ((decltype(&aRecordSexp0Los)) 0x505114);
char(&aRecordSexp0Win)[19] = * ((decltype(&aRecordSexp0Win)) 0x50512c);
char(&aRecordStar1Las)[31] = * ((decltype(&aRecordStar1Las)) 0x505140);
char(&aRecordStar1L_0)[24] = * ((decltype(&aRecordStar1L_0)) 0x505160);
char(&aRecordStar1Hig)[24] = * ((decltype(&aRecordStar1Hig)) 0x505178);
char(&aDynkeyStar1Ran)[19] = * ((decltype(&aDynkeyStar1Ran)) 0x505190);
char(&aRecordStar1H_0)[26] = * ((decltype(&aRecordStar1H_0)) 0x5051a4);
char(&aRecordStar1Rat)[21] = * ((decltype(&aRecordStar1Rat)) 0x5051c0);
char(&aRecordStar1Dis)[26] = * ((decltype(&aRecordStar1Dis)) 0x5051d8);
char(&aRecordStar1Los)[21] = * ((decltype(&aRecordStar1Los)) 0x5051f4);
char(&aRecordStar1Win)[19] = * ((decltype(&aRecordStar1Win)) 0x50520c);
char(&aRecordStar0Las)[31] = * ((decltype(&aRecordStar0Las)) 0x505220);
char(&aRecordStar0L_0)[24] = * ((decltype(&aRecordStar0L_0)) 0x505240);
char(&aRecordStar0Dis)[26] = * ((decltype(&aRecordStar0Dis)) 0x505258);
char(&aRecordStar0Los)[21] = * ((decltype(&aRecordStar0Los)) 0x505274);
char(&aRecordStar0Win)[19] = * ((decltype(&aRecordStar0Win)) 0x50528c);
char(&aProfileDescrip)[20] = * ((decltype(&aProfileDescrip)) 0x5052a0);
char(&aProfileLocatio)[17] = * ((decltype(&aProfileLocatio)) 0x5052b4);
char(&aProfileAge)[12] = * ((decltype(&aProfileAge)) 0x5052c8);
char(&aProfileSex_1)[12] = * ((decltype(&aProfileSex_1)) 0x5052d4);
char(&aDialog_creat_0)[19] = * ((decltype(&aDialog_creat_0)) 0x5052e0);
char(&aIcon)[5] = * ((decltype(&aIcon)) 0x5052f4);
char(&aBrowse)[7] = * ((decltype(&aBrowse)) 0x5052fc);
char(&aGlueBattle_n_1)[39] = * ((decltype(&aGlueBattle_n_1)) 0x505304);
char(&aGlueBattle__17)[31] = * ((decltype(&aGlueBattle__17)) 0x50532c);
char(&aGlueBattle__12)[34] = * ((decltype(&aGlueBattle__12)) 0x50534c);
char(&aDialog_create_)[21] = * ((decltype(&aDialog_create_)) 0x505370);
char(&aBattle_html)[12] = * ((decltype(&aBattle_html)) 0x505388);
char(&aLastCreatedGam)[] = * ((decltype(&aLastCreatedGam)) 0x505394);
char(&aStarcraftSw_16)[] = * ((decltype(&aStarcraftSw_16)) 0x5053ac);
char(&aGlueBattle_n_5)[] = * ((decltype(&aGlueBattle_n_5)) 0x5053d0);
char(&aGlueBattle_n_4)[] = * ((decltype(&aGlueBattle_n_4)) 0x5053fc);
char(&aCreate)[7] = * ((decltype(&aCreate)) 0x50542c);
char(&aGlueBattle_n_2)[41] = * ((decltype(&aGlueBattle_n_2)) 0x505434);
char(&aStarcraftSw_15)[] = * ((decltype(&aStarcraftSw_15)) 0x505460);
char(&aGlueBattle_n_0)[33] = * ((decltype(&aGlueBattle_n_0)) 0x505484);
char(&aStarcraftSw_54)[] = * ((decltype(&aStarcraftSw_54)) 0x5054a8);
char(&aIcontable)[10] = * ((decltype(&aIcontable)) 0x5054cc);
char(&aGlueBattle__11)[32] = * ((decltype(&aGlueBattle__11)) 0x5054d8);
char(&aGlueBattle_net)[] = * ((decltype(&aGlueBattle_net)) 0x5054f8);
char(&aGlueBattle__13)[43] = * ((decltype(&aGlueBattle__13)) 0x505524);
char(&aGlueBattle__14)[43] = * ((decltype(&aGlueBattle__14)) 0x505550);
char(&aGlueBattle__15)[42] = * ((decltype(&aGlueBattle__15)) 0x50557c);
char(&aGlueBattle__16)[42] = * ((decltype(&aGlueBattle__16)) 0x5055a8);
char(&aStarcraftSw_14)[] = * ((decltype(&aStarcraftSw_14)) 0x5055d4);
char(&aTimesNewRoman)[16] = * ((decltype(&aTimesNewRoman)) 0x5055fc);
char(&aStarcraftSw_12)[] = * ((decltype(&aStarcraftSw_12)) 0x50560c);
char(&aStarcraftSw_11)[] = * ((decltype(&aStarcraftSw_11)) 0x505630);
char(&aStarcraftSw_90)[] = * ((decltype(&aStarcraftSw_90)) 0x505654);
char(&aErrorInGetclos)[] = * ((decltype(&aErrorInGetclos)) 0x505678);
char(&aWriteMe)[] = * ((decltype(&aWriteMe)) 0x505698);
char(&aStarcraftSw_10)[] = * ((decltype(&aStarcraftSw_10)) 0x5056a4);
char(&aStarcraftSwa_9)[] = * ((decltype(&aStarcraftSwa_9)) 0x5056d0);
char& byte_5056EC = * ((decltype(&byte_5056EC)) 0x5056ec);
char& byte_5056F0 = * ((decltype(&byte_5056F0)) 0x5056f0);
char(&aSSS)[] = * ((decltype(&aSSS)) 0x5056f4);
char(&aSD_1)[] = * ((decltype(&aSD_1)) 0x5056fc);
char(&asc_505704)[2] = * ((decltype(&asc_505704)) 0x505704);
char& byte_505708 = * ((decltype(&byte_505708)) 0x505708);
char(&aD_0)[4] = * ((decltype(&aD_0)) 0x505710);
char(&aDDCDD)[] = * ((decltype(&aDDCDD)) 0x505714);
char(&aCDD)[] = * ((decltype(&aCDD)) 0x505724);
char& byte_50572C = * ((decltype(&byte_50572C)) 0x50572c);
char(&aSD)[] = * ((decltype(&aSD)) 0x505734);
char(&aSD_0)[] = * ((decltype(&aSD_0)) 0x50573c);
char(&aAppaddex1)[] = * ((decltype(&aAppaddex1)) 0x505744);
char(&asc_505750)[] = * ((decltype(&asc_505750)) 0x505750);
CHAR(&Caption)[] = * ((decltype(&Caption)) 0x505778);
char(&aSSLineDS)[] = * ((decltype(&aSSLineDS)) 0x505780);
char(&aSS)[] = * ((decltype(&aSS)) 0x505794);
char(&aDM)[] = * ((decltype(&aDM)) 0x50579c);
char(&aUnknownError0x)[] = * ((decltype(&aUnknownError0x)) 0x5057a4);
char(&aMmsysError0xX)[] = * ((decltype(&aMmsysError0xX)) 0x5057bc);
char(&aDserrUnknown0x)[] = * ((decltype(&aDserrUnknown0x)) 0x5057d0);
char(&aE_nointerface)[] = * ((decltype(&aE_nointerface)) 0x5057e4);
char(&source)[] = * ((decltype(&source)) 0x5057f4);
char(&aDserr_noaggreg)[] = * ((decltype(&aDserr_noaggreg)) 0x505808);
char(&aDserr_invalidp)[] = * ((decltype(&aDserr_invalidp)) 0x50581c);
char(&aDserr_bufferlo)[] = * ((decltype(&aDserr_bufferlo)) 0x505830);
char(&aDserr_alreadyi)[] = * ((decltype(&aDserr_alreadyi)) 0x505844);
char(&aDserr_nodriver)[] = * ((decltype(&aDserr_nodriver)) 0x505860);
char(&aDserr_badforma)[] = * ((decltype(&aDserr_badforma)) 0x505870);
char(&aDserr_prioleve)[] = * ((decltype(&aDserr_prioleve)) 0x505880);
char(&aDserr_invalidc)[] = * ((decltype(&aDserr_invalidc)) 0x505898);
char(&aDserr_controlu)[] = * ((decltype(&aDserr_controlu)) 0x5058ac);
char(&aDserr_allocate)[] = * ((decltype(&aDserr_allocate)) 0x5058c4);
char(&aDs_ok)[] = * ((decltype(&aDs_ok)) 0x5058d4);
char(&aDderrUnknown0x)[] = * ((decltype(&aDderrUnknown0x)) 0x5058dc);
char(&aDderr_unsupp_0)[] = * ((decltype(&aDderr_unsupp_0)) 0x5058f0);
char(&aDderr_notpalet)[] = * ((decltype(&aDderr_notpalet)) 0x505908);
char(&aDderr_wrongmod)[] = * ((decltype(&aDderr_wrongmod)) 0x50591c);
char(&aDderr_nodc)[] = * ((decltype(&aDderr_nodc)) 0x50592c);
char(&aDderr_cantcrea)[] = * ((decltype(&aDderr_cantcrea)) 0x505938);
char(&aDderr_exclusiv)[] = * ((decltype(&aDderr_exclusiv)) 0x50594c);
char(&aDderr_nopale_0)[] = * ((decltype(&aDderr_nopale_0)) 0x50596c);
char(&aDderr_nopalett)[] = * ((decltype(&aDderr_nopalett)) 0x505980);
char(&aDderr_hwndalre)[] = * ((decltype(&aDderr_hwndalre)) 0x505998);
char(&aDderr_hwndsubc)[] = * ((decltype(&aDderr_hwndsubc)) 0x5059b0);
char(&aDderr_nohwnd)[] = * ((decltype(&aDderr_nohwnd)) 0x5059c8);
char(&aDderr_noemulat)[] = * ((decltype(&aDderr_noemulat)) 0x5059d8);
char(&aDderr_primarys)[] = * ((decltype(&aDderr_primarys)) 0x5059ec);
char(&aDderr_nodire_0)[] = * ((decltype(&aDderr_nodire_0)) 0x505a10);
char(&aDderr_directdr)[] = * ((decltype(&aDderr_directdr)) 0x505a28);
char(&aDderr_invalidd)[] = * ((decltype(&aDderr_invalidd)) 0x505a48);
char(&aDderr_wasstill)[] = * ((decltype(&aDderr_wasstill)) 0x505a64);
char(&aDderr_vertical)[] = * ((decltype(&aDderr_vertical)) 0x505a7c);
char(&aDderr_unsuppor)[] = * ((decltype(&aDderr_unsuppor)) 0x505a9c);
char(&aDderr_surfacel)[] = * ((decltype(&aDderr_surfacel)) 0x505ab4);
char(&aDderr_cantlock)[] = * ((decltype(&aDderr_cantlock)) 0x505ac8);
char(&aDderr_surfaceb)[] = * ((decltype(&aDderr_surfaceb)) 0x505ae0);
char(&aDderr_paletteb)[] = * ((decltype(&aDderr_paletteb)) 0x505af4);
char(&aDderr_outofvid)[] = * ((decltype(&aDderr_outofvid)) 0x505b08);
char(&aDderr_notfound)[] = * ((decltype(&aDderr_notfound)) 0x505b20);
char(&aDderr_noexclus)[] = * ((decltype(&aDderr_noexclus)) 0x505b30);
char(&aDderr_nodirect)[] = * ((decltype(&aDderr_nodirect)) 0x505b48);
char(&aDderr_lockedsu)[] = * ((decltype(&aDderr_lockedsu)) 0x505b64);
char(&aDderr_invalidr)[] = * ((decltype(&aDderr_invalidr)) 0x505b7c);
char(&aDderr_invalidp)[] = * ((decltype(&aDderr_invalidp)) 0x505b90);
char(&aDderr_invalidm)[] = * ((decltype(&aDderr_invalidm)) 0x505bac);
char(&aDderr_currentl)[] = * ((decltype(&aDderr_currentl)) 0x505bc0);
char(&aDderr_cannotde)[] = * ((decltype(&aDderr_cannotde)) 0x505bd8);
char(&aDderr_cannotat)[] = * ((decltype(&aDderr_cannotat)) 0x505bf4);
char(&aDderr_incompat)[] = * ((decltype(&aDderr_incompat)) 0x505c10);
char(&aDderr_exceptio)[] = * ((decltype(&aDderr_exceptio)) 0x505c2c);
char(&aDderr_alreadyi)[] = * ((decltype(&aDderr_alreadyi)) 0x505c3c);
char(&aDd_ok)[] = * ((decltype(&aDd_ok)) 0x505c58);
char(&aStarcraftSwa_8)[] = * ((decltype(&aStarcraftSwa_8)) 0x505c60);
char(&aUsechatcolors)[14] = * ((decltype(&aUsechatcolors)) 0x505c84);
char(&aTrigtext)[9] = * ((decltype(&aTrigtext)) 0x505c94);
char(&aTip)[4] = * ((decltype(&aTip)) 0x505ca0);
char(&aBldgnoise)[10] = * ((decltype(&aBldgnoise)) 0x505ca4);
char(&aUnitnoise)[10] = * ((decltype(&aUnitnoise)) 0x505cb0);
char(&aUnitspeech)[11] = * ((decltype(&aUnitspeech)) 0x505cbc);
char(&aIntrox)[7] = * ((decltype(&aIntrox)) 0x505cc8);
char(&aIntro)[6] = * ((decltype(&aIntro)) 0x505cd0);
char(&aTipnum)[7] = * ((decltype(&aTipnum)) 0x505cd8);
char(&aSfx)[4] = * ((decltype(&aSfx)) 0x505ce0);
char(&aMusic)[6] = * ((decltype(&aMusic)) 0x505ce4);
char(&aM_kscroll)[10] = * ((decltype(&aM_kscroll)) 0x505cec);
char(&aM_mscroll)[10] = * ((decltype(&aM_mscroll)) 0x505cf8);
char(&aKscroll)[8] = * ((decltype(&aKscroll)) 0x505d04);
char(&aMscroll)[8] = * ((decltype(&aMscroll)) 0x505d0c);
char(&aSpeed)[6] = * ((decltype(&aSpeed)) 0x505d14);
char(&aBadPfopenModeI)[] = * ((decltype(&aBadPfopenModeI)) 0x505d1c);
char(&aWb_0)[4] = * ((decltype(&aWb_0)) 0x505d34);
char(&aRb)[3] = * ((decltype(&aRb)) 0x505d38);
int& dword_505D3C = * ((decltype(&dword_505D3C)) 0x505d3c);
char& byte_505D40 = * ((decltype(&byte_505D40)) 0x505d40);
char(&aStarcraftSwa_7)[] = * ((decltype(&aStarcraftSwa_7)) 0x505d44);
char(&aFontS_fnt)[] = * ((decltype(&aFontS_fnt)) 0x505d68);
char(&aGdsdialogboxpa)[] = * ((decltype(&aGdsdialogboxpa)) 0x505d74);
char(&format)[] = * ((decltype(&format)) 0x505d8c);
char(&aProgra)[] = * ((decltype(&aProgra)) 0x505d98);
char(&aSS02u02u02u_er)[] = * ((decltype(&aSS02u02u02u_er)) 0x505e4c);
char(&aStarcraftSw_81)[] = * ((decltype(&aStarcraftSw_81)) 0x505e64);
char(&aStarcraftSw_76)[] = * ((decltype(&aStarcraftSw_76)) 0x505e88);
char(&aCreatebacksurf)[] = * ((decltype(&aCreatebacksurf)) 0x505eb0);
char(&aSetpalette)[] = * ((decltype(&aSetpalette)) 0x505ec4);
char(&aCreateprimarys)[] = * ((decltype(&aCreateprimarys)) 0x505ed0);
char(&aCreatepalette)[] = * ((decltype(&aCreatepalette)) 0x505ee8);
char(&aSetdisplaymode)[] = * ((decltype(&aSetdisplaymode)) 0x505ef8);
CHAR(&aDirectdrawcrea)[] = * ((decltype(&aDirectdrawcrea)) 0x505f08);
char(&source_file)[] = * ((decltype(&source_file)) 0x505f1c);
CHAR(&aDdraw_dll)[] = * ((decltype(&aDdraw_dll)) 0x505f44);
char(&aStarcraftSw_93)[] = * ((decltype(&aStarcraftSw_93)) 0x505f50);
char(&aStarcraftSwa_5)[] = * ((decltype(&aStarcraftSwa_5)) 0x505f74);
char(&aStarcraftSwa_4)[] = * ((decltype(&aStarcraftSwa_4)) 0x505f98);
char(&aStarcraftSwa_3)[] = * ((decltype(&aStarcraftSwa_3)) 0x505fb8);
char(&a4W01ADBSW1A1W2)[] = * ((decltype(&a4W01ADBSW1A1W2)) 0x505fdc);
char(&a4W0ADBSW1A1W2B)[] = * ((decltype(&a4W0ADBSW1A1W2B)) 0x506000);
char(&arg0)[] = * ((decltype(&arg0)) 0x50605c);
char(&directives1)[] = * ((decltype(&directives1)) 0x506064);
char(&directives2)[] = * ((decltype(&directives2)) 0x506088);
char(&aStarcraftSwa_2)[] = * ((decltype(&aStarcraftSwa_2)) 0x5060e4);
char(&aStarcraftSwa_1)[] = * ((decltype(&aStarcraftSwa_1)) 0x506108);
__int16& word_50612C = * ((decltype(&word_50612C)) 0x50612c);
char& byte_50612E = * ((decltype(&byte_50612E)) 0x50612e);
char(&logfilename)[] = * ((decltype(&logfilename)) 0x506130);
char(&aStarcraftSw_83)[] = * ((decltype(&aStarcraftSw_83)) 0x506154);
char(&aCouldNotLoadS)[] = * ((decltype(&aCouldNotLoadS)) 0x506174);
char(&aDraw1)[] = * ((decltype(&aDraw1)) 0x506188);
char(&aStarcraftSwarL)[] = * ((decltype(&aStarcraftSwarL)) 0x506190);
int(&dword_5061B8)[] = * ((decltype(&dword_5061B8)) 0x5061b8);
int(&dword_5061BC)[17] = * ((decltype(&dword_5061BC)) 0x5061bc);
char(&asc_506200)[] = * ((decltype(&asc_506200)) 0x506200);
char(&byte_506224)[4] = * ((decltype(&byte_506224)) 0x506224);
const char(&asc_506228)[] = * ((decltype(&asc_506228)) 0x506228);
double& dbl_506230 = * ((decltype(&dbl_506230)) 0x506230);
double& dbl_506238 = * ((decltype(&dbl_506238)) 0x506238);
double& dbl_506240 = * ((decltype(&dbl_506240)) 0x506240);
double& dbl_506248 = * ((decltype(&dbl_506248)) 0x506248);
double& dbl_506250 = * ((decltype(&dbl_506250)) 0x506250);
double& dbl_506258 = * ((decltype(&dbl_506258)) 0x506258);
double& dbl_506260 = * ((decltype(&dbl_506260)) 0x506260);
double& dbl_506268 = * ((decltype(&dbl_506268)) 0x506268);
char(&aE000)[] = * ((decltype(&aE000)) 0x506270);
CHAR(&aIsprocessorfea)[] = * ((decltype(&aIsprocessorfea)) 0x506290);
CHAR(&aKernel32)[] = * ((decltype(&aKernel32)) 0x5062ac);
_SCOPETABLE_ENTRY& stru_5062B8 = * ((decltype(&stru_5062B8)) 0x5062b8);
char(&aAuthenticamd)[] = * ((decltype(&aAuthenticamd)) 0x5062c4);
__int64& qword_5062E0 = * ((decltype(&qword_5062E0)) 0x5062e0);
__int64& qword_506F00 = * ((decltype(&qword_506F00)) 0x506f00);
__int64& qword_507B20 = * ((decltype(&qword_507B20)) 0x507b20);
__int64& qword_509B60 = * ((decltype(&qword_509B60)) 0x509b60);
__int64& qword_509BC0 = * ((decltype(&qword_509BC0)) 0x509bc0);
__int64& qword_509BC8 = * ((decltype(&qword_509BC8)) 0x509bc8);
__int64& qword_509BD0 = * ((decltype(&qword_509BD0)) 0x509bd0);
__int64& qword_509BD8 = * ((decltype(&qword_509BD8)) 0x509bd8);
double& dbl_509BE0 = * ((decltype(&dbl_509BE0)) 0x509be0);
double& dbl_509BE8 = * ((decltype(&dbl_509BE8)) 0x509be8);
__int64& qword_509BF0 = * ((decltype(&qword_509BF0)) 0x509bf0);
__int64& qword_509BF8 = * ((decltype(&qword_509BF8)) 0x509bf8);
__int64& qword_509C00 = * ((decltype(&qword_509C00)) 0x509c00);
char(&aAtan)[5] = * ((decltype(&aAtan)) 0x509cc8);
char(&aCeil)[5] = * ((decltype(&aCeil)) 0x509cd0);
char(&aFloor)[6] = * ((decltype(&aFloor)) 0x509cd8);
char(&aModf)[5] = * ((decltype(&aModf)) 0x509ce0);
char(&aExp2)[5] = * ((decltype(&aExp2)) 0x509ce8);
char(&aExp10)[6] = * ((decltype(&aExp10)) 0x509cf0);
char(&aLog2)[5] = * ((decltype(&aLog2)) 0x509cf8);
char(&aPow)[4] = * ((decltype(&aPow)) 0x509d00);
void *& off_509D04 = * ((decltype(&off_509D04)) 0x509d04);
char(&aLog10)[6] = * ((decltype(&aLog10)) 0x509d08);
char(&aExp)[4] = * ((decltype(&aExp)) 0x509d10);
char(&a1Qnan)[] = * ((decltype(&a1Qnan)) 0x509d14);
char(&a1Inf)[] = * ((decltype(&a1Inf)) 0x509d1c);
char(&a1Ind)[6] = * ((decltype(&a1Ind)) 0x509d24);
char(&a1Snan)[7] = * ((decltype(&a1Snan)) 0x509d2c);
char(&a_nextafter)[11] = * ((decltype(&a_nextafter)) 0x509d34);
char(&a_logb)[6] = * ((decltype(&a_logb)) 0x509d40);
char(&a_yn)[4] = * ((decltype(&a_yn)) 0x509d48);
char(&a_y1)[4] = * ((decltype(&a_y1)) 0x509d4c);
char(&a_y0)[4] = * ((decltype(&a_y0)) 0x509d50);
char(&aFrexp)[6] = * ((decltype(&aFrexp)) 0x509d54);
char(&aFmod)[5] = * ((decltype(&aFmod)) 0x509d5c);
char(&a_hypot)[7] = * ((decltype(&a_hypot)) 0x509d64);
char(&a_cabs)[6] = * ((decltype(&a_cabs)) 0x509d6c);
char(&aLdexp)[6] = * ((decltype(&aLdexp)) 0x509d74);
char(&aFabs)[5] = * ((decltype(&aFabs)) 0x509d7c);
char(&aTan)[4] = * ((decltype(&aTan)) 0x509d84);
char(&aCos)[4] = * ((decltype(&aCos)) 0x509d88);
char(&aSin)[4] = * ((decltype(&aSin)) 0x509d8c);
char(&aSqrt)[5] = * ((decltype(&aSqrt)) 0x509d90);
char(&aAtan2)[6] = * ((decltype(&aAtan2)) 0x509d98);
char(&aAcos)[5] = * ((decltype(&aAcos)) 0x509da0);
char(&aAsin)[5] = * ((decltype(&aAsin)) 0x509da8);
char(&aTanh)[5] = * ((decltype(&aTanh)) 0x509db0);
char(&aCosh)[5] = * ((decltype(&aCosh)) 0x509db8);
char(&aSinh)[5] = * ((decltype(&aSinh)) 0x509dc0);
char(&asc_509DC8)[4] = * ((decltype(&asc_509DC8)) 0x509dc8);
void (*(&dword_509E80)[2])(void) = * ((decltype(&dword_509E80)) 0x509e80);
void (*&dword_509E88)(void) = *((decltype(&dword_509E88)) 0x509e88);
__int16 *(&off_509F40)[10] = * ((decltype(&off_509F40)) 0x509f40);
__int16 *(&off_509F6C)[23] = * ((decltype(&off_509F6C)) 0x509f6c);
__int16 *(&off_509FCC)[5] = * ((decltype(&off_509FCC)) 0x509fcc);
__int16 *(&off_509FE4)[111] = * ((decltype(&off_509FE4)) 0x509fe4);
__int16 *(&off_50A1A4)[4] = * ((decltype(&off_50A1A4)) 0x50a1a4);
__int16 *(&off_50A1B8)[73] = * ((decltype(&off_50A1B8)) 0x50a1b8);
__int16 *(&off_50A2E0)[3] = * ((decltype(&off_50A2E0)) 0x50a2e0);
int& dword_50A2F0 = * ((decltype(&dword_50A2F0)) 0x50a2f0);
__int16& word_50A510 = * ((decltype(&word_50A510)) 0x50a510);
__int16& word_50A524 = * ((decltype(&word_50A524)) 0x50a524);
__int16& word_50A536 = * ((decltype(&word_50A536)) 0x50a536);
__int16& word_50A548 = * ((decltype(&word_50A548)) 0x50a548);
__int16& word_50A558 = * ((decltype(&word_50A558)) 0x50a558);
__int16& word_50A566 = * ((decltype(&word_50A566)) 0x50a566);
__int16& word_50A578 = * ((decltype(&word_50A578)) 0x50a578);
__int16& word_50A58C = * ((decltype(&word_50A58C)) 0x50a58c);
__int16& word_50A5A0 = * ((decltype(&word_50A5A0)) 0x50a5a0);
__int16& word_50A5AC = * ((decltype(&word_50A5AC)) 0x50a5ac);
__int16& word_50A5BC = * ((decltype(&word_50A5BC)) 0x50a5bc);
__int16& word_50A5D2 = * ((decltype(&word_50A5D2)) 0x50a5d2);
__int16& word_50A5EE = * ((decltype(&word_50A5EE)) 0x50a5ee);
__int16& word_50A608 = * ((decltype(&word_50A608)) 0x50a608);
__int16& word_50A620 = * ((decltype(&word_50A620)) 0x50a620);
__int16& word_50A63A = * ((decltype(&word_50A63A)) 0x50a63a);
__int16& word_50A650 = * ((decltype(&word_50A650)) 0x50a650);
__int16& word_50A660 = * ((decltype(&word_50A660)) 0x50a660);
__int16& word_50A67A = * ((decltype(&word_50A67A)) 0x50a67a);
__int16& word_50A68C = * ((decltype(&word_50A68C)) 0x50a68c);
__int16& word_50A69A = * ((decltype(&word_50A69A)) 0x50a69a);
__int16& word_50A6B2 = * ((decltype(&word_50A6B2)) 0x50a6b2);
__int16& word_50A6BE = * ((decltype(&word_50A6BE)) 0x50a6be);
__int16& word_50A6CE = * ((decltype(&word_50A6CE)) 0x50a6ce);
__int16& word_50A6E4 = * ((decltype(&word_50A6E4)) 0x50a6e4);
__int16& word_50A6EE = * ((decltype(&word_50A6EE)) 0x50a6ee);
__int16& word_50A6FC = * ((decltype(&word_50A6FC)) 0x50a6fc);
__int16& word_50A70A = * ((decltype(&word_50A70A)) 0x50a70a);
__int16& word_50A718 = * ((decltype(&word_50A718)) 0x50a718);
__int16& word_50A726 = * ((decltype(&word_50A726)) 0x50a726);
__int16& word_50A734 = * ((decltype(&word_50A734)) 0x50a734);
__int16& word_50A740 = * ((decltype(&word_50A740)) 0x50a740);
__int16& word_50A758 = * ((decltype(&word_50A758)) 0x50a758);
__int16& word_50A770 = * ((decltype(&word_50A770)) 0x50a770);
__int16& word_50A780 = * ((decltype(&word_50A780)) 0x50a780);
__int16& word_50A78A = * ((decltype(&word_50A78A)) 0x50a78a);
__int16& word_50A796 = * ((decltype(&word_50A796)) 0x50a796);
__int16& word_50A7A2 = * ((decltype(&word_50A7A2)) 0x50a7a2);
__int16& word_50A7AE = * ((decltype(&word_50A7AE)) 0x50a7ae);
__int16& word_50A7CA = * ((decltype(&word_50A7CA)) 0x50a7ca);
__int16& word_50A7DA = * ((decltype(&word_50A7DA)) 0x50a7da);
__int16& word_50A7E8 = * ((decltype(&word_50A7E8)) 0x50a7e8);
__int16& word_50A7F8 = * ((decltype(&word_50A7F8)) 0x50a7f8);
__int16& word_50A804 = * ((decltype(&word_50A804)) 0x50a804);
__int16& word_50A81A = * ((decltype(&word_50A81A)) 0x50a81a);
__int16& word_50A82A = * ((decltype(&word_50A82A)) 0x50a82a);
__int16& word_50A836 = * ((decltype(&word_50A836)) 0x50a836);
__int16& word_50A850 = * ((decltype(&word_50A850)) 0x50a850);
__int16& word_50A860 = * ((decltype(&word_50A860)) 0x50a860);
__int16& word_50A876 = * ((decltype(&word_50A876)) 0x50a876);
__int16& word_50A890 = * ((decltype(&word_50A890)) 0x50a890);
__int16& word_50A8A0 = * ((decltype(&word_50A8A0)) 0x50a8a0);
__int16& word_50A8B6 = * ((decltype(&word_50A8B6)) 0x50a8b6);
__int16& word_50A8C6 = * ((decltype(&word_50A8C6)) 0x50a8c6);
__int16& word_50A8D8 = * ((decltype(&word_50A8D8)) 0x50a8d8);
__int16& word_50A8EA = * ((decltype(&word_50A8EA)) 0x50a8ea);
__int16& word_50A8FC = * ((decltype(&word_50A8FC)) 0x50a8fc);
__int16& word_50A90E = * ((decltype(&word_50A90E)) 0x50a90e);
__int16& word_50A920 = * ((decltype(&word_50A920)) 0x50a920);
__int16& word_50A932 = * ((decltype(&word_50A932)) 0x50a932);
__int16& word_50A942 = * ((decltype(&word_50A942)) 0x50a942);
__int16& word_50A95C = * ((decltype(&word_50A95C)) 0x50a95c);
__int16& word_50A96E = * ((decltype(&word_50A96E)) 0x50a96e);
__int16& word_50A980 = * ((decltype(&word_50A980)) 0x50a980);
char(&aKernel32_dll)[13] = * ((decltype(&aKernel32_dll)) 0x50a99a);
__int16& word_50A9A8 = * ((decltype(&word_50A9A8)) 0x50a9a8);
__int16& word_50A9BE = * ((decltype(&word_50A9BE)) 0x50a9be);
__int16& word_50A9C6 = * ((decltype(&word_50A9C6)) 0x50a9c6);
__int16& word_50A9D6 = * ((decltype(&word_50A9D6)) 0x50a9d6);
__int16& word_50A9EA = * ((decltype(&word_50A9EA)) 0x50a9ea);
__int16& word_50A9F8 = * ((decltype(&word_50A9F8)) 0x50a9f8);
__int16& word_50AA06 = * ((decltype(&word_50AA06)) 0x50aa06);
__int16& word_50AA1C = * ((decltype(&word_50AA1C)) 0x50aa1c);
__int16& word_50AA28 = * ((decltype(&word_50AA28)) 0x50aa28);
__int16& word_50AA3A = * ((decltype(&word_50AA3A)) 0x50aa3a);
__int16& word_50AA46 = * ((decltype(&word_50AA46)) 0x50aa46);
__int16& word_50AA56 = * ((decltype(&word_50AA56)) 0x50aa56);
__int16& word_50AA68 = * ((decltype(&word_50AA68)) 0x50aa68);
__int16& word_50AA78 = * ((decltype(&word_50AA78)) 0x50aa78);
__int16& word_50AA92 = * ((decltype(&word_50AA92)) 0x50aa92);
__int16& word_50AA9E = * ((decltype(&word_50AA9E)) 0x50aa9e);
__int16& word_50AAAC = * ((decltype(&word_50AAAC)) 0x50aaac);
__int16& word_50AAC6 = * ((decltype(&word_50AAC6)) 0x50aac6);
__int16& word_50AADE = * ((decltype(&word_50AADE)) 0x50aade);
__int16& word_50AAEE = * ((decltype(&word_50AAEE)) 0x50aaee);
__int16& word_50AAFA = * ((decltype(&word_50AAFA)) 0x50aafa);
__int16& word_50AB18 = * ((decltype(&word_50AB18)) 0x50ab18);
__int16& word_50AB28 = * ((decltype(&word_50AB28)) 0x50ab28);
__int16& word_50AB3A = * ((decltype(&word_50AB3A)) 0x50ab3a);
__int16& word_50AB4C = * ((decltype(&word_50AB4C)) 0x50ab4c);
__int16& word_50AB5C = * ((decltype(&word_50AB5C)) 0x50ab5c);
__int16& word_50AB6C = * ((decltype(&word_50AB6C)) 0x50ab6c);
__int16& word_50AB7E = * ((decltype(&word_50AB7E)) 0x50ab7e);
__int16& word_50AB8E = * ((decltype(&word_50AB8E)) 0x50ab8e);
__int16& word_50ABA4 = * ((decltype(&word_50ABA4)) 0x50aba4);
__int16& word_50ABB2 = * ((decltype(&word_50ABB2)) 0x50abb2);
__int16& word_50ABBC = * ((decltype(&word_50ABBC)) 0x50abbc);
__int16& word_50ABD4 = * ((decltype(&word_50ABD4)) 0x50abd4);
__int16& word_50ABEE = * ((decltype(&word_50ABEE)) 0x50abee);
__int16& word_50AC06 = * ((decltype(&word_50AC06)) 0x50ac06);
__int16& word_50AC14 = * ((decltype(&word_50AC14)) 0x50ac14);
__int16& word_50AC24 = * ((decltype(&word_50AC24)) 0x50ac24);
__int16& word_50AC34 = * ((decltype(&word_50AC34)) 0x50ac34);
__int16& word_50AC48 = * ((decltype(&word_50AC48)) 0x50ac48);
__int16& word_50AC58 = * ((decltype(&word_50AC58)) 0x50ac58);
__int16& word_50AC6A = * ((decltype(&word_50AC6A)) 0x50ac6a);
__int16& word_50AC78 = * ((decltype(&word_50AC78)) 0x50ac78);
__int16& word_50AC86 = * ((decltype(&word_50AC86)) 0x50ac86);
__int16& word_50AC96 = * ((decltype(&word_50AC96)) 0x50ac96);
__int16& word_50ACA4 = * ((decltype(&word_50ACA4)) 0x50aca4);
__int16& word_50ACB8 = * ((decltype(&word_50ACB8)) 0x50acb8);
__int16& word_50ACC6 = * ((decltype(&word_50ACC6)) 0x50acc6);
__int16& word_50ACD8 = * ((decltype(&word_50ACD8)) 0x50acd8);
__int16& word_50ACE4 = * ((decltype(&word_50ACE4)) 0x50ace4);
__int16& word_50ACF0 = * ((decltype(&word_50ACF0)) 0x50acf0);
__int16& word_50AD06 = * ((decltype(&word_50AD06)) 0x50ad06);
__int16& word_50AD1C = * ((decltype(&word_50AD1C)) 0x50ad1c);
__int16& word_50AD2C = * ((decltype(&word_50AD2C)) 0x50ad2c);
__int16& word_50AD40 = * ((decltype(&word_50AD40)) 0x50ad40);
__int16& word_50AD4C = * ((decltype(&word_50AD4C)) 0x50ad4c);
__int16& word_50AD68 = * ((decltype(&word_50AD68)) 0x50ad68);
__int16& word_50AD78 = * ((decltype(&word_50AD78)) 0x50ad78);
__int16& word_50AD86 = * ((decltype(&word_50AD86)) 0x50ad86);
__int16& word_50AD92 = * ((decltype(&word_50AD92)) 0x50ad92);
__int16& word_50ADA6 = * ((decltype(&word_50ADA6)) 0x50ada6);
__int16& word_50ADBA = * ((decltype(&word_50ADBA)) 0x50adba);
__int16& word_50ADCC = * ((decltype(&word_50ADCC)) 0x50adcc);
__int16& word_50ADDE = * ((decltype(&word_50ADDE)) 0x50adde);
__int16& word_50ADEE = * ((decltype(&word_50ADEE)) 0x50adee);
__int16& word_50ADFA = * ((decltype(&word_50ADFA)) 0x50adfa);
__int16& word_50AE06 = * ((decltype(&word_50AE06)) 0x50ae06);
__int16& word_50AE14 = * ((decltype(&word_50AE14)) 0x50ae14);
__int16& word_50AE1C = * ((decltype(&word_50AE1C)) 0x50ae1c);
__int16& word_50AE2C = * ((decltype(&word_50AE2C)) 0x50ae2c);
__int16& word_50AE38 = * ((decltype(&word_50AE38)) 0x50ae38);
__int16& word_50AE4E = * ((decltype(&word_50AE4E)) 0x50ae4e);
__int16& word_50AE5E = * ((decltype(&word_50AE5E)) 0x50ae5e);
__int16& word_50AE78 = * ((decltype(&word_50AE78)) 0x50ae78);
__int16& word_50AE90 = * ((decltype(&word_50AE90)) 0x50ae90);
__int16& word_50AEAA = * ((decltype(&word_50AEAA)) 0x50aeaa);
__int16& word_50AEBC = * ((decltype(&word_50AEBC)) 0x50aebc);
__int16& word_50AED0 = * ((decltype(&word_50AED0)) 0x50aed0);
__int16& word_50AEE0 = * ((decltype(&word_50AEE0)) 0x50aee0);
__int16& word_50AEF2 = * ((decltype(&word_50AEF2)) 0x50aef2);
__int16& word_50AF0A = * ((decltype(&word_50AF0A)) 0x50af0a);
__int16& word_50AF1A = * ((decltype(&word_50AF1A)) 0x50af1a);
__int16& word_50AF2A = * ((decltype(&word_50AF2A)) 0x50af2a);
__int16& word_50AF3E = * ((decltype(&word_50AF3E)) 0x50af3e);
__int16& word_50AF4C = * ((decltype(&word_50AF4C)) 0x50af4c);
__int16& word_50AF5A = * ((decltype(&word_50AF5A)) 0x50af5a);
__int16& word_50AF68 = * ((decltype(&word_50AF68)) 0x50af68);
__int16& word_50AF76 = * ((decltype(&word_50AF76)) 0x50af76);
__int16& word_50AF82 = * ((decltype(&word_50AF82)) 0x50af82);
__int16& word_50AF8E = * ((decltype(&word_50AF8E)) 0x50af8e);
__int16& word_50AF98 = * ((decltype(&word_50AF98)) 0x50af98);
__int16& word_50AFAA = * ((decltype(&word_50AFAA)) 0x50afaa);
__int16& word_50AFBA = * ((decltype(&word_50AFBA)) 0x50afba);
__int16& word_50AFC6 = * ((decltype(&word_50AFC6)) 0x50afc6);
__int16& word_50AFD2 = * ((decltype(&word_50AFD2)) 0x50afd2);
__int16& word_50AFE2 = * ((decltype(&word_50AFE2)) 0x50afe2);
__int16& word_50AFF0 = * ((decltype(&word_50AFF0)) 0x50aff0);
__int16& word_50B002 = * ((decltype(&word_50B002)) 0x50b002);
__int16& word_50B012 = * ((decltype(&word_50B012)) 0x50b012);
__int16& word_50B028 = * ((decltype(&word_50B028)) 0x50b028);
__int16& word_50B03A = * ((decltype(&word_50B03A)) 0x50b03a);
__int16& word_50B04C = * ((decltype(&word_50B04C)) 0x50b04c);
__int16& word_50B05A = * ((decltype(&word_50B05A)) 0x50b05a);
__int16& word_50B06C = * ((decltype(&word_50B06C)) 0x50b06c);
__int16& word_50B07E = * ((decltype(&word_50B07E)) 0x50b07e);
__int16& word_50B08C = * ((decltype(&word_50B08C)) 0x50b08c);
__int16& word_50B098 = * ((decltype(&word_50B098)) 0x50b098);
__int16& word_50B0A4 = * ((decltype(&word_50B0A4)) 0x50b0a4);
__int16& word_50B0B6 = * ((decltype(&word_50B0B6)) 0x50b0b6);
char(&aUser32_dll)[11] = * ((decltype(&aUser32_dll)) 0x50b0c4);
__int16& word_50B0D0 = * ((decltype(&word_50B0D0)) 0x50b0d0);
__int16& word_50B0E2 = * ((decltype(&word_50B0E2)) 0x50b0e2);
__int16& word_50B0F2 = * ((decltype(&word_50B0F2)) 0x50b0f2);
__int16& word_50B100 = * ((decltype(&word_50B100)) 0x50b100);
__int16& word_50B10E = * ((decltype(&word_50B10E)) 0x50b10e);
__int16& word_50B120 = * ((decltype(&word_50B120)) 0x50b120);
__int16& word_50B138 = * ((decltype(&word_50B138)) 0x50b138);
__int16& word_50B14E = * ((decltype(&word_50B14E)) 0x50b14e);
__int16& word_50B162 = * ((decltype(&word_50B162)) 0x50b162);
__int16& word_50B172 = * ((decltype(&word_50B172)) 0x50b172);
__int16& word_50B182 = * ((decltype(&word_50B182)) 0x50b182);
__int16& word_50B198 = * ((decltype(&word_50B198)) 0x50b198);
__int16& word_50B1A4 = * ((decltype(&word_50B1A4)) 0x50b1a4);
__int16& word_50B1B4 = * ((decltype(&word_50B1B4)) 0x50b1b4);
__int16& word_50B1CC = * ((decltype(&word_50B1CC)) 0x50b1cc);
__int16& word_50B1DA = * ((decltype(&word_50B1DA)) 0x50b1da);
__int16& word_50B1E6 = * ((decltype(&word_50B1E6)) 0x50b1e6);
__int16& word_50B1F4 = * ((decltype(&word_50B1F4)) 0x50b1f4);
__int16& word_50B204 = * ((decltype(&word_50B204)) 0x50b204);
char(&aGdi32_dll)[10] = * ((decltype(&aGdi32_dll)) 0x50b210);
__int16& word_50B21A = * ((decltype(&word_50B21A)) 0x50b21a);
__int16& word_50B22E = * ((decltype(&word_50B22E)) 0x50b22e);
__int16& word_50B244 = * ((decltype(&word_50B244)) 0x50b244);
__int16& word_50B25A = * ((decltype(&word_50B25A)) 0x50b25a);
__int16& word_50B26A = * ((decltype(&word_50B26A)) 0x50b26a);
__int16& word_50B286 = * ((decltype(&word_50B286)) 0x50b286);
__int16& word_50B29C = * ((decltype(&word_50B29C)) 0x50b29c);
__int16& word_50B2A6 = * ((decltype(&word_50B2A6)) 0x50b2a6);
__int16& word_50B2B6 = * ((decltype(&word_50B2B6)) 0x50b2b6);
char(&aAdvapi32_dll)[13] = * ((decltype(&aAdvapi32_dll)) 0x50b2c8);
__int16& word_50B2D6 = * ((decltype(&word_50B2D6)) 0x50b2d6);
__int16& word_50B2E6 = * ((decltype(&word_50B2E6)) 0x50b2e6);
__int16& word_50B302 = * ((decltype(&word_50B302)) 0x50b302);
__int16& word_50B316 = * ((decltype(&word_50B316)) 0x50b316);
__int16& word_50B332 = * ((decltype(&word_50B332)) 0x50b332);
char(&aImm32_dll)[10] = * ((decltype(&aImm32_dll)) 0x50b348);
__int16& word_50B352 = * ((decltype(&word_50B352)) 0x50b352);
__int16& word_50B364 = * ((decltype(&word_50B364)) 0x50b364);
__int16& word_50B37E = * ((decltype(&word_50B37E)) 0x50b37e);
char(&aVersion_dll)[12] = * ((decltype(&aVersion_dll)) 0x50b394);
__int16& word_50B3A0 = * ((decltype(&word_50B3A0)) 0x50b3a0);
__int16& word_50B3B0 = * ((decltype(&word_50B3B0)) 0x50b3b0);
__int16& word_50B3CE = * ((decltype(&word_50B3CE)) 0x50b3ce);
__int16& word_50B3E6 = * ((decltype(&word_50B3E6)) 0x50b3e6);
char(&aShell32_dll)[12] = * ((decltype(&aShell32_dll)) 0x50b3f8);
char(&aStorm_dll)[10] = * ((decltype(&aStorm_dll)) 0x50b404);
__int16& word_50B40E = * ((decltype(&word_50B40E)) 0x50b40e);
__int16& word_50B422 = * ((decltype(&word_50B422)) 0x50b422);
__int16& word_50B438 = * ((decltype(&word_50B438)) 0x50b438);
__int16& word_50B44A = * ((decltype(&word_50B44A)) 0x50b44a);
__int16& word_50B458 = * ((decltype(&word_50B458)) 0x50b458);
__int16& word_50B466 = * ((decltype(&word_50B466)) 0x50b466);
__int16& word_50B47A = * ((decltype(&word_50B47A)) 0x50b47a);
__int16& word_50B488 = * ((decltype(&word_50B488)) 0x50b488);
__int16& word_50B49A = * ((decltype(&word_50B49A)) 0x50b49a);
__int16& word_50B4AE = * ((decltype(&word_50B4AE)) 0x50b4ae);
__int16& word_50B4BC = * ((decltype(&word_50B4BC)) 0x50b4bc);
__int16& word_50B4C8 = * ((decltype(&word_50B4C8)) 0x50b4c8);
__int16& word_50B4D4 = * ((decltype(&word_50B4D4)) 0x50b4d4);
__int16& word_50B4EE = * ((decltype(&word_50B4EE)) 0x50b4ee);
__int16& word_50B4FA = * ((decltype(&word_50B4FA)) 0x50b4fa);
__int16& word_50B50A = * ((decltype(&word_50B50A)) 0x50b50a);
__int16& word_50B51A = * ((decltype(&word_50B51A)) 0x50b51a);
int& __xc_z_0 = * ((decltype(&__xc_z_0)) 0x50c4bc);
int (*&dword_50C4D4)(void) = *((decltype(&dword_50C4D4)) 0x50c4d4);
int& __xt_a_0 = * ((decltype(&__xt_a_0)) 0x50c4d8);
int& __xt_z_0 = * ((decltype(&__xt_z_0)) 0x50c4e0);
int& __xt_a_1 = * ((decltype(&__xt_a_1)) 0x50c4e4);
int& __xt_z_1 = * ((decltype(&__xt_z_1)) 0x50c4e8);
int (__cdecl *&off_50C4F0)(_DWORD) = *((decltype(&off_50C4F0)) 0x50c4f0);
int& dword_50C4F4 = * ((decltype(&dword_50C4F4)) 0x50c4f4);
int(&dword_50C4F8)[] = * ((decltype(&dword_50C4F8)) 0x50c4f8);
char(&off_50C4FC)[148] = * ((decltype(&off_50C4FC)) 0x50c4fc);
int& dword_50C608 = * ((decltype(&dword_50C608)) 0x50c608);
int& dword_50C60C = * ((decltype(&dword_50C60C)) 0x50c60c);
size_t& dword_50C610 = * ((decltype(&dword_50C610)) 0x50c610);
int& dword_50C614 = * ((decltype(&dword_50C614)) 0x50c614);
_DWORD& dword_50C63C = * ((decltype(&dword_50C63C)) 0x50c63c);
LPCRITICAL_SECTION& lpCriticalSection = * ((decltype(&lpCriticalSection)) 0x50c650);
int& dword_50C654 = * ((decltype(&dword_50C654)) 0x50c654);
int& dword_50C770 = * ((decltype(&dword_50C770)) 0x50c770);
char& byte_50C778 = * ((decltype(&byte_50C778)) 0x50c778);
int& dword_50C780 = * ((decltype(&dword_50C780)) 0x50c780);
char(&aVyv)[6] = * ((decltype(&aVyv)) 0x50c784);
char(&aJ)[3] = * ((decltype(&aJ)) 0x50c790);
char(&aBe)[3] = * ((decltype(&aBe)) 0x50c798);
void *& off_50C8CC = * ((decltype(&off_50C8CC)) 0x50c8cc);
_DWORD(&dword_50CA04)[5] = * ((decltype(&dword_50CA04)) 0x50ca04);
int(&dword_50CA18)[] = * ((decltype(&dword_50CA18)) 0x50ca18);
int(&dword_50CA1C)[89] = * ((decltype(&dword_50CA1C)) 0x50ca1c);
wchar_t *& off_50CB80 = * ((decltype(&off_50CB80)) 0x50cb80);
void *& off_50CB84 = * ((decltype(&off_50CB84)) 0x50cb84);
char *(&off_50CB98)[43] = * ((decltype(&off_50CB98)) 0x50cb98);
void *& off_50CC54 = * ((decltype(&off_50CC54)) 0x50cc54);
void *& off_50CC58 = * ((decltype(&off_50CC58)) 0x50cc58);
void *& off_50CC5C = * ((decltype(&off_50CC5C)) 0x50cc5c);
void *& off_50CC60 = * ((decltype(&off_50CC60)) 0x50cc60);
void *& off_50CC64 = * ((decltype(&off_50CC64)) 0x50cc64);
void *& off_50CC68 = * ((decltype(&off_50CC68)) 0x50cc68);
void *& off_50CC6C = * ((decltype(&off_50CC6C)) 0x50cc6c);
void *& off_50CC70 = * ((decltype(&off_50CC70)) 0x50cc70);
void *& off_50CC74 = * ((decltype(&off_50CC74)) 0x50cc74);
void *& off_50CC78 = * ((decltype(&off_50CC78)) 0x50cc78);
void **& off_50CC84 = * ((decltype(&off_50CC84)) 0x50cc84);
int& dword_50CCA0 = * ((decltype(&dword_50CCA0)) 0x50cca0);
int& dword_50CCA4 = * ((decltype(&dword_50CCA4)) 0x50cca4);
int& dword_50CCA8 = * ((decltype(&dword_50CCA8)) 0x50cca8);
void *& off_50CCB0 = * ((decltype(&off_50CCB0)) 0x50ccb0);
void *& off_50CCF0 = * ((decltype(&off_50CCF0)) 0x50ccf0);
LPSTR& lpMultiByteStr = * ((decltype(&lpMultiByteStr)) 0x50cd30);
LPSTR& off_50CD34 = * ((decltype(&off_50CD34)) 0x50cd34);
int& dword_50CD38 = * ((decltype(&dword_50CD38)) 0x50cd38);
int& dword_50CD3C = * ((decltype(&dword_50CD3C)) 0x50cd3c);
int& dword_50CD40 = * ((decltype(&dword_50CD40)) 0x50cd40);
int& dword_50CD44 = * ((decltype(&dword_50CD44)) 0x50cd44);
int& dword_50CD48 = * ((decltype(&dword_50CD48)) 0x50cd48);
int& dword_50CD4C = * ((decltype(&dword_50CD4C)) 0x50cd4c);
int& dword_50CD50 = * ((decltype(&dword_50CD50)) 0x50cd50);
int& dword_50CD80 = * ((decltype(&dword_50CD80)) 0x50cd80);
int& dword_50CD84 = * ((decltype(&dword_50CD84)) 0x50cd84);
u8(&byte_50CDC1)[256] = * ((decltype(&byte_50CDC1)) 0x50cdc1);
int& imgDrawPaletteIndex = * ((decltype(&imgDrawPaletteIndex)) 0x50cec1);
int& dword_50CEC5 = * ((decltype(&dword_50CEC5)) 0x50cec5);
int& dword_50CEC9 = * ((decltype(&dword_50CEC9)) 0x50cec9);
int& dword_50CECD = * ((decltype(&dword_50CECD)) 0x50cecd);
int& dword_50CED1 = * ((decltype(&dword_50CED1)) 0x50ced1);
int& dword_50CED5 = * ((decltype(&dword_50CED5)) 0x50ced5);
byte *& dword_50CED9 = * ((decltype(&dword_50CED9)) 0x50ced9);
char& byte_50CEDD = * ((decltype(&byte_50CEDD)) 0x50cedd);
int& dword_50CEDE = * ((decltype(&dword_50CEDE)) 0x50cede);
_DWORD(&dword_50CEE2)[3] = * ((decltype(&dword_50CEE2)) 0x50cee2);
int& dword_50CEF0 = * ((decltype(&dword_50CEF0)) 0x50cef0);
char(&aAvtypeInfo)[16] = * ((decltype(&aAvtypeInfo)) 0x50cf18);
int (__cdecl *&off_50D1B8)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD) = *((decltype(&off_50D1B8)) 0x50d1b8);
void (__noreturn *(&off_50D1BC)[5])() = * ((decltype(&off_50D1BC)) 0x50d1bc);
void (__noreturn *(&off_50D1C4)[3])() = * ((decltype(&off_50D1C4)) 0x50d1c4);
_DWORD& dword_50D1D0 = * ((decltype(&dword_50D1D0)) 0x50d1d0);
_DWORD& dword_50D1D4 = * ((decltype(&dword_50D1D4)) 0x50d1d4);
_DWORD& dword_50D1D8 = * ((decltype(&dword_50D1D8)) 0x50d1d8);
_DWORD& dword_50D1DC = * ((decltype(&dword_50D1DC)) 0x50d1dc);
_DWORD& dword_50D1E0 = * ((decltype(&dword_50D1E0)) 0x50d1e0);
_DWORD& dword_50D1E4 = * ((decltype(&dword_50D1E4)) 0x50d1e4);
char(&aPkwareDataCompressionLibraryForWin32Copyr_0)[193] = * ((decltype(&aPkwareDataCompressionLibraryForWin32Copyr_0)) 0x50d1e8);
int(&crc_table)[256] = * ((decltype(&crc_table)) 0x50d2b0);
char(&byte_50D6B0)[64] = * ((decltype(&byte_50D6B0)) 0x50d6b0);
char(&byte_50D730)[16] = * ((decltype(&byte_50D730)) 0x50d730);
char(&byte_50D740)[32] = * ((decltype(&byte_50D740)) 0x50d740);
char(&byte_50D760)[16] = * ((decltype(&byte_50D760)) 0x50d760);
char& asc_50D780 = * ((decltype(&asc_50D780)) 0x50d780);
_WORD(&word_50D880)[255] = * ((decltype(&word_50D880)) 0x50d880);
char(&aPkwareDataCompressionLibraryForWin32Copyr)[194] = * ((decltype(&aPkwareDataCompressionLibraryForWin32Copyr)) 0x50da80);
char(&byte_50DBC8)[] = * ((decltype(&byte_50DBC8)) 0x50dbc8);
char(&byte_50DBD8)[16] = * ((decltype(&byte_50DBD8)) 0x50dbd8);
char(&byte_50DBE8)[16] = * ((decltype(&byte_50DBE8)) 0x50dbe8);
char(&byte_50DBF8)[256] = * ((decltype(&byte_50DBF8)) 0x50dbf8);
char(&aPkwareDataComp)[193] = * ((decltype(&aPkwareDataComp)) 0x50def8);
char(&aRegistration_b)[19] = * ((decltype(&aRegistration_b)) 0x50dfc0);
char *(&off_50E040)[6] = * ((decltype(&off_50E040)) 0x50e040);
int& replay_speed_multiplier = * ((decltype(&replay_speed_multiplier)) 0x50e058);
int& dword_50E05C = * ((decltype(&dword_50E05C)) 0x50e05c);
int& dword_50E064 = * ((decltype(&dword_50E064)) 0x50e064);
GluRelated(&stru_50E06C)[12] = * ((decltype(&stru_50E06C)) 0x50e06c);
CampaignMenuEntry *(&campaign_menu_entries)[3] = * ((decltype(&campaign_menu_entries)) 0x5122a0);
CampaignMenuEntry *(&expcampaign_menu_entries)[3] = * ((decltype(&expcampaign_menu_entries)) 0x5122ac);
Cinematic& active_cinematic = * ((decltype(&active_cinematic)) 0x5122b8);
char(&campaignFirstMission)[4] = * ((decltype(&campaignFirstMission)) 0x5122bc);
char(&xCampaignFirstMission)[8] = * ((decltype(&xCampaignFirstMission)) 0x5122c0);
char(&aInternalVersio)[260] = * ((decltype(&aInternalVersio)) 0x5122c8);
char(&aRegistration_block_2)[19] = * ((decltype(&aRegistration_block_2)) 0x5123d0);
char(&aRegistration_table)[19] = * ((decltype(&aRegistration_table)) 0x512450);
int& is_spawn = * ((decltype(&is_spawn)) 0x5124d0);
int& FrameSkip = * ((decltype(&FrameSkip)) 0x5124d4);
GameSpeeds& GameSpeedModifiers = * ((decltype(&GameSpeedModifiers)) 0x5124d8);
UpdateFunction(&update_functions)[18] = * ((decltype(&update_functions)) 0x512510);
RenderFunction(&render_functions)[18] = * ((decltype(&render_functions)) 0x5125a0);
int& g_ActiveNationID = * ((decltype(&g_ActiveNationID)) 0x512678);
int& dword_51267C = * ((decltype(&dword_51267C)) 0x51267c);
int& dword_512680 = * ((decltype(&dword_512680)) 0x512680);
unsigned int& g_LocalNationID = * ((decltype(&g_LocalNationID)) 0x512684);
int& g_LocalHumanID = * ((decltype(&g_LocalHumanID)) 0x512688);
int& playerid = * ((decltype(&playerid)) 0x51268c);
char *(&cinematics)[28] = * ((decltype(&cinematics)) 0x512690);
char(&race_lowercase_char_id)[3] = * ((decltype(&race_lowercase_char_id)) 0x512700);
char *(&cursor_filenames)[19] = * ((decltype(&cursor_filenames)) 0x512708);
__int16(&word_51275C)[6] = * ((decltype(&word_51275C)) 0x51275c);
__int16(&word_512768)[2] = * ((decltype(&word_512768)) 0x512768);
__int16& word_51276C = * ((decltype(&word_51276C)) 0x51276c);
__int16& word_512770 = * ((decltype(&word_512770)) 0x512770);
__int16& word_512774 = * ((decltype(&word_512774)) 0x512774);
UnknownTilesetRelated1& stru_512778 = * ((decltype(&stru_512778)) 0x512778);
UnknownTilesetRelated1& stru_51279C = * ((decltype(&stru_51279C)) 0x51279c);
UnknownTilesetRelated1& stru_5127B8 = * ((decltype(&stru_5127B8)) 0x5127b8);
UnknownTilesetRelated1 *(&off_5127DC)[8] = * ((decltype(&off_5127DC)) 0x5127dc);
ActionPointer(&ActionTable)[60] = * ((decltype(&ActionTable)) 0x512800);
int (__fastcall *&off_512818)(Action *) = *((decltype(&off_512818)) 0x512818);
int& dword_5128F0 = * ((decltype(&dword_5128F0)) 0x5128f0);
ColorShiftData(&colorShift)[8] = * ((decltype(&colorShift)) 0x5128f8);
char *(&TileSetNames)[8] = * ((decltype(&TileSetNames)) 0x512998);
int& value = * ((decltype(&value)) 0x5129b8);
int(&aTenbg)[] = * ((decltype(&aTenbg)) 0x5129bc);
char(&aMdomd)[6] = * ((decltype(&aMdomd)) 0x5129c4);
char(&aNxpif)[6] = * ((decltype(&aNxpif)) 0x5129cc);
char(&aNpdu)[6] = * ((decltype(&aNpdu)) 0x5129d4);
char(&aLbcse)[6] = * ((decltype(&aLbcse)) 0x5129dc);
swishTimer(&commonSwishControllers)[5] = * ((decltype(&commonSwishControllers)) 0x5129ec);
swishTimer(&timers)[3] = * ((decltype(&timers)) 0x512a00);
__int16& word_512A0C = * ((decltype(&word_512A0C)) 0x512a0c);
int& dword_512A10 = * ((decltype(&dword_512A10)) 0x512a10);
swishTimer(&stru_512A14)[7] = * ((decltype(&stru_512A14)) 0x512a14);
__int16& word_512A30 = * ((decltype(&word_512A30)) 0x512a30);
swishTimer(&stru_512A34)[4] = * ((decltype(&stru_512A34)) 0x512a34);
swishTimer(&stru_512A48)[3] = * ((decltype(&stru_512A48)) 0x512a48);
swishTimer(&stru_512A54)[7] = * ((decltype(&stru_512A54)) 0x512a54);
swishTimer(&stru_512A70)[7] = * ((decltype(&stru_512A70)) 0x512a70);
swishTimer(&stru_512A8C)[2] = * ((decltype(&stru_512A8C)) 0x512a8c);
char *(&score_screens)[6] = * ((decltype(&score_screens)) 0x512a98);
MenuPosition(&score_menus)[6] = * ((decltype(&score_menus)) 0x512ab0);
MusicTrack(&score_music_track)[6] = * ((decltype(&score_music_track)) 0x512ac8);
GluAllTblEntry& tbl_entry = * ((decltype(&tbl_entry)) 0x512ae0);
swishTimer(&gluCmpgnSwishController)[2] = * ((decltype(&gluCmpgnSwishController)) 0x512b10);
char(&aRegistration_block)[19] = * ((decltype(&aRegistration_block)) 0x512b18);
__int16& word_512B98 = * ((decltype(&word_512B98)) 0x512b98);
DatLoad(&mapdataDat)[1] = * ((decltype(&mapdataDat)) 0x512ba0);
MusicTrackDescription(&music_tracks)[25] = * ((decltype(&music_tracks)) 0x512bb8);
char(&aRegistration_block_1)[19] = * ((decltype(&aRegistration_block_1)) 0x512c80);
RECT& stru_512D00 = * ((decltype(&stru_512D00)) 0x512d00);
int(&dword_512D20)[] = * ((decltype(&dword_512D20)) 0x512d20);
POINT(&AngleDistance)[256] = * ((decltype(&AngleDistance)) 0x512d28);
int(&tangent_table)[64] = * ((decltype(&tangent_table)) 0x513528);
u16 *(&off_513628)[3] = * ((decltype(&off_513628)) 0x513628);
__int16(&word_513634)[14] = * ((decltype(&word_513634)) 0x513634);
point(&bullet_random_offsets)[15] = * ((decltype(&bullet_random_offsets)) 0x513650);
int& nextReplayCommandFrame = * ((decltype(&nextReplayCommandFrame)) 0x5136c8);
RECT& command_card_pos = * ((decltype(&command_card_pos)) 0x5136cc);
DatLoad(&upgradesDat)[12] = * ((decltype(&upgradesDat)) 0x5136e0);
DatLoad(&portdataDat)[6] = * ((decltype(&portdataDat)) 0x513780);
int& ColorCycle = * ((decltype(&ColorCycle)) 0x5137d4);
DatLoad(&techdataDat)[11] = * ((decltype(&techdataDat)) 0x5137d8);
DatLoad(&weaponsDat)[24] = * ((decltype(&weaponsDat)) 0x513868);
char(&aRegistration_block_0)[19] = * ((decltype(&aRegistration_block_0)) 0x513998);
SightStruct(&line_of_sight)[12] = * ((decltype(&line_of_sight)) 0x513a18);
ScrollSpeeds& scrollSpeeds = * ((decltype(&scrollSpeeds)) 0x513b68);
char(&byte_513B92)[14] = * ((decltype(&byte_513B92)) 0x513b92);
__int16(&unknown_campaign_related)[65] = * ((decltype(&unknown_campaign_related)) 0x513ba0);
char(&byte_513C24)[12] = * ((decltype(&byte_513C24)) 0x513c24);
DatLoad(&unitsDat)[54] = * ((decltype(&unitsDat)) 0x513c30);
DatLoad(&ordersDat)[19] = * ((decltype(&ordersDat)) 0x513ec8);
DatLoad(&spritesDat)[6] = * ((decltype(&spritesDat)) 0x513fb8);
DatLoad(&imagesDat)[14] = * ((decltype(&imagesDat)) 0x514010);
char& byte_5140C4 = * ((decltype(&byte_5140C4)) 0x5140c4);
char& byte_5140D8 = * ((decltype(&byte_5140D8)) 0x5140d8);
unsigned __int8(&byte_5140E0)[8] = * ((decltype(&byte_5140E0)) 0x5140e0);
char& byte_5140E8 = * ((decltype(&byte_5140E8)) 0x5140e8);
unsigned __int8(&byte_514100)[8] = * ((decltype(&byte_514100)) 0x514100);
char(&byte_514108)[4] = * ((decltype(&byte_514108)) 0x514108);
char(&byte_51410C)[4] = * ((decltype(&byte_51410C)) 0x51410c);
char *(&ReservedDosFilenames)[25] = * ((decltype(&ReservedDosFilenames)) 0x514110);
__int16(&word_514178)[] = * ((decltype(&word_514178)) 0x514178);
Tech2(&tech)[547] = * ((decltype(&tech)) 0x51417a);
__int16(&word_5145C0)[] = * ((decltype(&word_5145C0)) 0x5145c0);
__int16(&word_5145C2)[419] = * ((decltype(&word_5145C2)) 0x5145c2);
__int16(&word_514908)[] = * ((decltype(&word_514908)) 0x514908);
__int16(&word_51490A)[159] = * ((decltype(&word_51490A)) 0x51490a);
__int16(&word_514A48)[] = * ((decltype(&word_514A48)) 0x514a48);
__int16(&word_514A4A)[343] = * ((decltype(&word_514A4A)) 0x514a4a);
__int16(&word_514CF8)[] = * ((decltype(&word_514CF8)) 0x514cf8);
__int16(&word_514CFA)[657] = * ((decltype(&word_514CFA)) 0x514cfa);
__int16(&word_51521C)[4] = * ((decltype(&word_51521C)) 0x51521c);
int& UnitPortraits = * ((decltype(&UnitPortraits)) 0x515224);
char(&byte_515228)[88] = * ((decltype(&byte_515228)) 0x515228);
char(&asc_515230)[8] = * ((decltype(&asc_515230)) 0x515230);
char(&asc_515258)[8] = * ((decltype(&asc_515258)) 0x515258);
char(&wireframeConstants)[] = * ((decltype(&wireframeConstants)) 0x515280);
StatFlufDialog(&statfluf_zerg)[7] = * ((decltype(&statfluf_zerg)) 0x5152a8);
StatFlufDialog(&statfluf_terran)[6] = * ((decltype(&statfluf_terran)) 0x515300);
StatFlufDialog(&statfluf_protoss)[5] = * ((decltype(&statfluf_protoss)) 0x515348);
StatFlufDialog(&statfluf_neutral)[8] = * ((decltype(&statfluf_neutral)) 0x515388);
StatFlufDialog *(&statfluf_dialogs)[4] = * ((decltype(&statfluf_dialogs)) 0x5153e8);
int& dword_5153F8 = * ((decltype(&dword_5153F8)) 0x5153f8);
int (__stdcall *(&funcs_455F96)[7])(int, int, int) = * ((decltype(&funcs_455F96)) 0x5153fc);
int(&dword_515418)[] = * ((decltype(&dword_515418)) 0x515418);
int(&dword_51541C)[31] = * ((decltype(&dword_51541C)) 0x51541c);
DatLoad(&sfxdataDat)[5] = * ((decltype(&sfxdataDat)) 0x515498);
char(&aProfileSex_0)[12] = * ((decltype(&aProfileSex_0)) 0x515688);
char(&aProfileAge_0)[12] = * ((decltype(&aProfileAge_0)) 0x515694);
char(&aProfileLocat_0)[17] = * ((decltype(&aProfileLocat_0)) 0x5156a0);
char(&aProfileDescr_0)[20] = * ((decltype(&aProfileDescr_0)) 0x5156b1);
char(&aRecordStar0W_0)[19] = * ((decltype(&aRecordStar0W_0)) 0x5156c5);
char(&aRecordStar0L_1)[21] = * ((decltype(&aRecordStar0L_1)) 0x5156d8);
char(&aRecordStar0D_0)[26] = * ((decltype(&aRecordStar0D_0)) 0x5156ed);
char(&aRecordStar0L_2)[24] = * ((decltype(&aRecordStar0L_2)) 0x515707);
char(&aRecordStar0L_3)[31] = * ((decltype(&aRecordStar0L_3)) 0x51571f);
char(&aRecordStar1W_0)[19] = * ((decltype(&aRecordStar1W_0)) 0x51573e);
char(&aRecordStar1L_1)[21] = * ((decltype(&aRecordStar1L_1)) 0x515751);
char(&aRecordStar1D_0)[26] = * ((decltype(&aRecordStar1D_0)) 0x515766);
char(&aRecordStar1R_0)[21] = * ((decltype(&aRecordStar1R_0)) 0x515780);
char(&aRecordStar1H_1)[26] = * ((decltype(&aRecordStar1H_1)) 0x515795);
char(&aDynkeyStar1R_0)[19] = * ((decltype(&aDynkeyStar1R_0)) 0x5157af);
char(&aRecordStar1H_2)[24] = * ((decltype(&aRecordStar1H_2)) 0x5157c2);
char(&aRecordStar1L_2)[24] = * ((decltype(&aRecordStar1L_2)) 0x5157da);
char(&aRecordStar1L_3)[31] = * ((decltype(&aRecordStar1L_3)) 0x5157f2);
char(&aProfileSex)[12] = * ((decltype(&aProfileSex)) 0x515818);
char(&aProfileAge_1)[12] = * ((decltype(&aProfileAge_1)) 0x515824);
char(&aProfileLocat_1)[17] = * ((decltype(&aProfileLocat_1)) 0x515830);
char(&aProfileDescr_1)[20] = * ((decltype(&aProfileDescr_1)) 0x515841);
char(&aRecordSexp0W_0)[19] = * ((decltype(&aRecordSexp0W_0)) 0x515855);
char(&aRecordSexp0L_1)[21] = * ((decltype(&aRecordSexp0L_1)) 0x515868);
char(&aRecordSexp0D_0)[26] = * ((decltype(&aRecordSexp0D_0)) 0x51587d);
char(&aRecordSexp0L_2)[24] = * ((decltype(&aRecordSexp0L_2)) 0x515897);
char(&aRecordSexp0L_3)[31] = * ((decltype(&aRecordSexp0L_3)) 0x5158af);
char(&aRecordSexp1W_0)[19] = * ((decltype(&aRecordSexp1W_0)) 0x5158ce);
char(&aRecordSexp1L_1)[21] = * ((decltype(&aRecordSexp1L_1)) 0x5158e1);
char(&aRecordSexp1D_0)[26] = * ((decltype(&aRecordSexp1D_0)) 0x5158f6);
char(&aRecordSexp1R_0)[21] = * ((decltype(&aRecordSexp1R_0)) 0x515910);
char(&aRecordSexp1H_1)[26] = * ((decltype(&aRecordSexp1H_1)) 0x515925);
char(&aDynkeySexp1R_0)[19] = * ((decltype(&aDynkeySexp1R_0)) 0x51593f);
char(&aRecordSexp1H_2)[24] = * ((decltype(&aRecordSexp1H_2)) 0x515952);
char(&aRecordSexp1L_2)[24] = * ((decltype(&aRecordSexp1L_2)) 0x51596a);
char(&aRecordSexp1L_3)[31] = * ((decltype(&aRecordSexp1L_3)) 0x515982);
int& dword_5159A4 = * ((decltype(&dword_5159A4)) 0x5159a4);
char *(&off_5159A8)[2] = * ((decltype(&off_5159A8)) 0x5159a8);
char(&aOk_dialog)[10] = * ((decltype(&aOk_dialog)) 0x5159b8);
char(&aBigok_dialog)[13] = * ((decltype(&aBigok_dialog)) 0x5159d8);
char(&aOkcancel_dialo)[16] = * ((decltype(&aOkcancel_dialo)) 0x5159f8);
char(&aBigokcancel_dialog)[19] = * ((decltype(&aBigokcancel_dialog)) 0x515a18);
DatLoad(&flingyDat)[8] = * ((decltype(&flingyDat)) 0x515a38);
int (*(&trigger_conditions)[24])() = * ((decltype(&trigger_conditions)) 0x515a98);
char(&byte_515AF8)[] = * ((decltype(&byte_515AF8)) 0x515af8);
char(&byte_515B08)[16] = * ((decltype(&byte_515B08)) 0x515b08);
__int16(&word_515B18)[] = * ((decltype(&word_515B18)) 0x515b18);
__int16(&word_515B1A)[] = * ((decltype(&word_515B1A)) 0x515b1a);
__int16(&word_515B38)[] = * ((decltype(&word_515B38)) 0x515b38);
__int16(&word_515B3A)[] = * ((decltype(&word_515B3A)) 0x515b3a);
__int16(&word_515B58)[4] = * ((decltype(&word_515B58)) 0x515b58);
BytePair(&stru_515B60)[4] = * ((decltype(&stru_515B60)) 0x515b60);
char(&byte_515B68)[] = * ((decltype(&byte_515B68)) 0x515b68);
char(&byte_515B69)[31] = * ((decltype(&byte_515B69)) 0x515b69);
int(&damage_type_multiplier)[5][5] = * ((decltype(&damage_type_multiplier)) 0x515b88);
ButtonOrder(&replay_paused)[3] = * ((decltype(&replay_paused)) 0x515be8);
ButtonOrder(&replay_playing)[3] = * ((decltype(&replay_playing)) 0x515c24);
ButtonOrder(&stru_515C60)[1] = * ((decltype(&stru_515C60)) 0x515c60);
ButtonOrder(&stru_515C74)[1] = * ((decltype(&stru_515C74)) 0x515c74);
ButtonOrder(&stru_515C88)[1] = * ((decltype(&stru_515C88)) 0x515c88);
ButtonOrder(&stru_515C9C)[2] = * ((decltype(&stru_515C9C)) 0x515c9c);
ButtonOrder(&stru_515CC4)[1] = * ((decltype(&stru_515CC4)) 0x515cc4);
ButtonOrder(&stru_515CD8)[2] = * ((decltype(&stru_515CD8)) 0x515cd8);
ButtonOrder(&stru_515D00)[1] = * ((decltype(&stru_515D00)) 0x515d00);
ButtonOrder(&stru_515D14)[3] = * ((decltype(&stru_515D14)) 0x515d14);
ButtonOrder(&stru_515D50)[1] = * ((decltype(&stru_515D50)) 0x515d50);
ButtonOrder(&stru_515D68)[5] = * ((decltype(&stru_515D68)) 0x515d68);
ButtonOrder(&button_set_generic_army)[5] = * ((decltype(&button_set_generic_army)) 0x515dd0);
ButtonOrder(&stru_515E38)[5] = * ((decltype(&stru_515E38)) 0x515e38);
ButtonOrder(&button_set_dropship)[7] = * ((decltype(&button_set_dropship)) 0x515ea0);
ButtonOrder(&button_set_missile_turret)[2] = * ((decltype(&button_set_missile_turret)) 0x515f2c);
ButtonOrder(&button_set_larva)[9] = * ((decltype(&button_set_larva)) 0x515f58);
ButtonOrder(&button_set_egg)[1] = * ((decltype(&button_set_egg)) 0x51600c);
ButtonOrder(&button_set_drone)[9] = * ((decltype(&button_set_drone)) 0x516020);
ButtonOrder(&button_set_basic_zerg_buildings)[7] = * ((decltype(&button_set_basic_zerg_buildings)) 0x5160d8);
ButtonOrder(&button_set_advanced_zerg_buildings)[6] = * ((decltype(&button_set_advanced_zerg_buildings)) 0x516168);
ButtonOrder(&button_set_zergling)[7] = * ((decltype(&button_set_zergling)) 0x5161e0);
ButtonOrder(&button_set_hydralisk)[8] = * ((decltype(&button_set_hydralisk)) 0x516270);
ButtonOrder(&button_set_mutalisk)[7] = * ((decltype(&button_set_mutalisk)) 0x516310);
ButtonOrder(&button_set_lurker)[7] = * ((decltype(&button_set_lurker)) 0x5163a0);
ButtonOrder(&button_set_queen)[9] = * ((decltype(&button_set_queen)) 0x516430);
ButtonOrder(&button_set_deflier)[9] = * ((decltype(&button_set_deflier)) 0x5164e8);
ButtonOrder(&button_set_infested_terran)[7] = * ((decltype(&button_set_infested_terran)) 0x5165a0);
ButtonOrder(&button_set_infested_kerrigan)[10] = * ((decltype(&button_set_infested_kerrigan)) 0x516630);
ButtonOrder(&button_set_infested_duran)[9] = * ((decltype(&button_set_infested_duran)) 0x5166f8);
ButtonOrder(&button_set_hatchery)[5] = * ((decltype(&button_set_hatchery)) 0x5167b0);
ButtonOrder(&button_set_lair)[9] = * ((decltype(&button_set_lair)) 0x516818);
ButtonOrder(&button_set_hive)[8] = * ((decltype(&button_set_hive)) 0x5168d0);
ButtonOrder(&button_set_nydus_canal)[1] = * ((decltype(&button_set_nydus_canal)) 0x516970);
ButtonOrder(&button_set_spire)[4] = * ((decltype(&button_set_spire)) 0x516988);
ButtonOrder(&button_set_greater_spire)[3] = * ((decltype(&button_set_greater_spire)) 0x5169d8);
ButtonOrder(&button_set_spawning_pool)[3] = * ((decltype(&button_set_spawning_pool)) 0x516a14);
ButtonOrder(&button_set_creep_colony)[2] = * ((decltype(&button_set_creep_colony)) 0x516a50);
ButtonOrder(&button_set_hydralisk_den)[5] = * ((decltype(&button_set_hydralisk_den)) 0x516a78);
ButtonOrder(&button_set_queens_nest)[5] = * ((decltype(&button_set_queens_nest)) 0x516ae0);
ButtonOrder(&button_set_defiler_mound)[5] = * ((decltype(&button_set_defiler_mound)) 0x516b48);
ButtonOrder(&button_set_evolution_chamber)[4] = * ((decltype(&button_set_evolution_chamber)) 0x516bb0);
ButtonOrder(&button_set_ultralisk_cavern)[3] = * ((decltype(&button_set_ultralisk_cavern)) 0x516c00);
ButtonOrder(&button_set_nexus)[3] = * ((decltype(&button_set_nexus)) 0x516c3c);
ButtonOrder(&button_set_probe)[7] = * ((decltype(&button_set_probe)) 0x516c78);
ButtonOrder(&stru_516D08)[9] = * ((decltype(&stru_516D08)) 0x516d08);
ButtonOrder(&stru_516DC0)[9] = * ((decltype(&stru_516DC0)) 0x516dc0);
ButtonOrder(&button_set_high_templar)[8] = * ((decltype(&button_set_high_templar)) 0x516e78);
ButtonOrder(&button_set_dark_templar)[7] = * ((decltype(&button_set_dark_templar)) 0x516f18);
ButtonOrder(&button_set_carrier)[7] = * ((decltype(&button_set_carrier)) 0x516fa8);
ButtonOrder(&button_set_reaver)[7] = * ((decltype(&button_set_reaver)) 0x517038);
ButtonOrder(&button_set_arbiter)[7] = * ((decltype(&button_set_arbiter)) 0x5170c8);
ButtonOrder(&button_set_tassadar)[7] = * ((decltype(&button_set_tassadar)) 0x517158);
ButtonOrder(&button_set_corsair)[6] = * ((decltype(&button_set_corsair)) 0x5171e8);
ButtonOrder(&button_set_dark_archon)[7] = * ((decltype(&button_set_dark_archon)) 0x517260);
ButtonOrder(&button_set_robotics_facility)[5] = * ((decltype(&button_set_robotics_facility)) 0x5172f0);
ButtonOrder(&button_set_gateway)[6] = * ((decltype(&button_set_gateway)) 0x517358);
ButtonOrder(&button_set_stargate)[6] = * ((decltype(&button_set_stargate)) 0x5173d0);
ButtonOrder(&button_set_citadel_of_adun)[2] = * ((decltype(&button_set_citadel_of_adun)) 0x517448);
ButtonOrder(&button_set_cybernetics_core)[4] = * ((decltype(&button_set_cybernetics_core)) 0x517470);
ButtonOrder(&button_set_templar_archives)[8] = * ((decltype(&button_set_templar_archives)) 0x5174c0);
ButtonOrder(&button_set_forge)[4] = * ((decltype(&button_set_forge)) 0x517560);
ButtonOrder(&button_set_fleet_beacon)[7] = * ((decltype(&button_set_fleet_beacon)) 0x5175b0);
ButtonOrder(&button_set_arbiter_tribunal)[5] = * ((decltype(&button_set_arbiter_tribunal)) 0x517640);
ButtonOrder(&button_set_robotics_support_bay)[4] = * ((decltype(&button_set_robotics_support_bay)) 0x5176a8);
ButtonOrder(&button_set_shield_battery)[1] = * ((decltype(&button_set_shield_battery)) 0x5176f8);
ButtonOrder(&button_set_observatory)[3] = * ((decltype(&button_set_observatory)) 0x51770c);
ButtonOrder(&button_set_wraiths_maybe)[7] = * ((decltype(&button_set_wraiths_maybe)) 0x517748);
ButtonOrder(&button_set_terran_infantry)[6] = * ((decltype(&button_set_terran_infantry)) 0x5177d8);
ButtonOrder(&button_set_medic)[7] = * ((decltype(&button_set_medic)) 0x517850);
ButtonOrder(&button_set_scv)[9] = * ((decltype(&button_set_scv)) 0x5178e0);
ButtonOrder(&button_set_basic_terran_buildings)[9] = * ((decltype(&button_set_basic_terran_buildings)) 0x517998);
ButtonOrder(&button_set_advanced_terran_buildings)[5] = * ((decltype(&button_set_advanced_terran_buildings)) 0x517a50);
ButtonOrder(&button_set_ghost)[9] = * ((decltype(&button_set_ghost)) 0x517ab8);
ButtonOrder(&button_set_ghost_hero)[8] = * ((decltype(&button_set_ghost_hero)) 0x517b70);
ButtonOrder(&button_set_vulture)[6] = * ((decltype(&button_set_vulture)) 0x517c10);
ButtonOrder(&button_set_siege_tank)[7] = * ((decltype(&button_set_siege_tank)) 0x517c88);
ButtonOrder(&button_set_wraith)[7] = * ((decltype(&button_set_wraith)) 0x517d18);
ButtonOrder(&button_set_science_vessel)[8] = * ((decltype(&button_set_science_vessel)) 0x517da8);
ButtonOrder(&button_set_battlecruiser)[6] = * ((decltype(&button_set_battlecruiser)) 0x517e48);
ButtonOrder(&button_set_vaynor_vulture)[6] = * ((decltype(&button_set_vaynor_vulture)) 0x517ec0);
ButtonOrder(&button_set_command_center)[10] = * ((decltype(&button_set_command_center)) 0x517f38);
ButtonOrder(&button_set_comsat)[1] = * ((decltype(&button_set_comsat)) 0x518000);
ButtonOrder(&button_set_nuclear_silo)[2] = * ((decltype(&button_set_nuclear_silo)) 0x518014);
ButtonOrder(&button_set_bunker)[2] = * ((decltype(&button_set_bunker)) 0x51803c);
ButtonOrder(&button_set_barracks)[11] = * ((decltype(&button_set_barracks)) 0x518068);
ButtonOrder(&button_set_factory)[12] = * ((decltype(&button_set_factory)) 0x518148);
ButtonOrder(&button_set_science_facility)[12] = * ((decltype(&button_set_science_facility)) 0x518238);
ButtonOrder(&button_set_starport)[13] = * ((decltype(&button_set_starport)) 0x518328);
ButtonOrder(&button_set_control_tower)[4] = * ((decltype(&button_set_control_tower)) 0x518430);
ButtonOrder(&button_set_engineering_bay)[7] = * ((decltype(&button_set_engineering_bay)) 0x518480);
ButtonOrder(&button_set_covert_ops)[6] = * ((decltype(&button_set_covert_ops)) 0x518510);
ButtonOrder(&button_set_physics_lab)[4] = * ((decltype(&button_set_physics_lab)) 0x518588);
ButtonOrder(&button_set_armory)[5] = * ((decltype(&button_set_armory)) 0x5185d8);
ButtonOrder(&button_set_academy)[7] = * ((decltype(&button_set_academy)) 0x518640);
ButtonOrder(&button_set_machine_shop)[6] = * ((decltype(&button_set_machine_shop)) 0x5186d0);
ButtonOrder(&button_set_infested_command_center)[7] = * ((decltype(&button_set_infested_command_center)) 0x518748);
ButtonOrder(&button_set_flag_beacon)[1] = * ((decltype(&button_set_flag_beacon)) 0x5187d4);
ButtonSet(&button_sets)[250] = * ((decltype(&button_sets)) 0x5187e8);
UnitStat(&unit_stats)[228] = * ((decltype(&unit_stats)) 0x5193a0);
BriefingAction(&briefing_actions)[10] = * ((decltype(&briefing_actions)) 0x519e50);
char *(&statusscreen_infobtn)[1] = * ((decltype(&statusscreen_infobtn)) 0x519f40);
__int16(&word_519F54)[] = * ((decltype(&word_519F54)) 0x519f54);
__int16(&word_519F5C)[] = * ((decltype(&word_519F5C)) 0x519f5c);
__int16& word_519F64 = * ((decltype(&word_519F64)) 0x519f64);
RegistryOption(&stru_519F68)[16] = * ((decltype(&stru_519F68)) 0x519f68);
char& byte_51A0E8 = * ((decltype(&byte_51A0E8)) 0x51a0e8);
char& byte_51A0E9 = * ((decltype(&byte_51A0E9)) 0x51a0e9);
int& Gamma = * ((decltype(&Gamma)) 0x51a158);
RECT& ScrLimit = * ((decltype(&ScrLimit)) 0x51a15c);
RECT& ScrSize = * ((decltype(&ScrSize)) 0x51a16c);
char(&byte_51A17C)[16] = * ((decltype(&byte_51A17C)) 0x51a17c);
int& dword_51A18C = * ((decltype(&dword_51A18C)) 0x51a18c);
int& dword_51A190 = * ((decltype(&dword_51A190)) 0x51a190);
int& dword_51A194 = * ((decltype(&dword_51A194)) 0x51a194);
__int16(&word_51A198)[4] = * ((decltype(&word_51A198)) 0x51a198);
__int16& word_51A1A0 = * ((decltype(&word_51A1A0)) 0x51a1a0);
__int16& word_51A1A2 = * ((decltype(&word_51A1A2)) 0x51a1a2);
ListNode& stru_51A1F0 = * ((decltype(&stru_51A1F0)) 0x51a1f0);
int& dword_51A1F8 = * ((decltype(&dword_51A1F8)) 0x51a1f8);
ListNode& stru_51A1FC = * ((decltype(&stru_51A1FC)) 0x51a1fc);
int& dword_51A204 = * ((decltype(&dword_51A204)) 0x51a204);
SFX_related& soundFXList = * ((decltype(&soundFXList)) 0x51a208);
STREAMED *& dword_51A210 = * ((decltype(&dword_51A210)) 0x51a210);
ListNode& stru_51A214 = * ((decltype(&stru_51A214)) 0x51a214);
TPROVIDER *& dword_51A21C = * ((decltype(&dword_51A21C)) 0x51a21c);
ListNode& stru_51A220 = * ((decltype(&stru_51A220)) 0x51a220);
int& dword_51A228 = * ((decltype(&dword_51A228)) 0x51a228);
ListNode& stru_51A22C = * ((decltype(&stru_51A22C)) 0x51a22c);
void *& dword_51A234 = * ((decltype(&dword_51A234)) 0x51a234);
ListNode& stru_51A238 = * ((decltype(&stru_51A238)) 0x51a238);
int& dword_51A240 = * ((decltype(&dword_51A240)) 0x51a240);
ListNode& stru_51A244 = * ((decltype(&stru_51A244)) 0x51a244);
int& dword_51A24C = * ((decltype(&dword_51A24C)) 0x51a24c);
ListNode& stru_51A250 = * ((decltype(&stru_51A250)) 0x51a250);
int& dword_51A258 = * ((decltype(&dword_51A258)) 0x51a258);
ListNode& stru_51A25C = * ((decltype(&stru_51A25C)) 0x51a25c);
_DWORD& dword_51A264 = * ((decltype(&dword_51A264)) 0x51a264);
TemplateList& templates_list = * ((decltype(&templates_list)) 0x51a268);
ListNode& stru_51A274 = * ((decltype(&stru_51A274)) 0x51a274);
MapDirEntry *& dword_51A27C = * ((decltype(&dword_51A27C)) 0x51a27c);
TriggerList(&stru_51A280)[8] = * ((decltype(&stru_51A280)) 0x51a280);
ListNode& stru_51A2E0 = * ((decltype(&stru_51A2E0)) 0x51a2e0);
int& dword_51A2E8 = * ((decltype(&dword_51A2E8)) 0x51a2e8);
ListNode& stru_51A2EC = * ((decltype(&stru_51A2EC)) 0x51a2ec);
int& dword_51A2F4 = * ((decltype(&dword_51A2F4)) 0x51a2f4);
ListNode& stru_51A2F8 = * ((decltype(&stru_51A2F8)) 0x51a2f8);
BOOL& dword_51A300 = * ((decltype(&dword_51A300)) 0x51a300);
ChunkNode& dword_51A304 = * ((decltype(&dword_51A304)) 0x51a304);
void *& off_51A308 = * ((decltype(&off_51A308)) 0x51a308);
void *& dword_51A30C = * ((decltype(&dword_51A30C)) 0x51a30c);
void *& off_51A314 = * ((decltype(&off_51A314)) 0x51a314);
int& dword_51A318 = * ((decltype(&dword_51A318)) 0x51a318);
ListNode& stru_51A31C = * ((decltype(&stru_51A31C)) 0x51a31c);
TSAVEGAME *& dword_51A324 = * ((decltype(&dword_51A324)) 0x51a324);
ListNode& stru_51A328 = * ((decltype(&stru_51A328)) 0x51a328);
int& dword_51A330 = * ((decltype(&dword_51A330)) 0x51a330);
ListNode& TransMaskVector = * ((decltype(&TransMaskVector)) 0x51a334);
void *& dword_51A33C = * ((decltype(&dword_51A33C)) 0x51a33c);
ListNode& stru_51A340 = * ((decltype(&stru_51A340)) 0x51a340);
void *& dword_51A348 = * ((decltype(&dword_51A348)) 0x51a348);
ListNode& stru_51A34C = * ((decltype(&stru_51A34C)) 0x51a34c);
int& dword_51A354 = * ((decltype(&dword_51A354)) 0x51a354);
FnInteract(&functions)[4] = * ((decltype(&functions)) 0x51a358);
char(&a_au_hiddenctrl)[18] = * ((decltype(&a_au_hiddenctrl)) 0x51a370);
_DWORD& dword_51A384 = * ((decltype(&dword_51A384)) 0x51a384);
FnInteract(&off_51A388)[11] = * ((decltype(&off_51A388)) 0x51a388);
int& consoleRaceSpecific = * ((decltype(&consoleRaceSpecific)) 0x51a3b4);
char(&a_autgame_hdr_node)[21] = * ((decltype(&a_autgame_hdr_node)) 0x51a3c0);
int& is_cursor_shown = * ((decltype(&is_cursor_shown)) 0x51a3d8);
_DWORD(&dword_51A3DC)[2] = * ((decltype(&dword_51A3DC)) 0x51a3dc);
char(&a_autsaved_game_node)[23] = * ((decltype(&a_autsaved_game_node)) 0x51a3ec);
FnInteract(&off_51A404)[8] = * ((decltype(&off_51A404)) 0x51a404);
char(&a_austreamed)[15] = * ((decltype(&a_austreamed)) 0x51a42c);
int& dword_51A43C = * ((decltype(&dword_51A43C)) 0x51a43c);
char(&a_autprovider)[16] = * ((decltype(&a_autprovider)) 0x51a448);
char(&a_au_id)[10] = * ((decltype(&a_au_id)) 0x51a460);
FnInteract(&off_51A46C)[9] = * ((decltype(&off_51A46C)) 0x51a46c);
swishTimer(&gluChatSwishController)[5] = * ((decltype(&gluChatSwishController)) 0x51a490);
FnInteract(&off_51A4A8)[84] = * ((decltype(&off_51A4A8)) 0x51a4a8);
FnInteract(&off_51A5F8)[20] = * ((decltype(&off_51A5F8)) 0x51a5f8);
char(&a_au_gamenode)[16] = * ((decltype(&a_au_gamenode)) 0x51a650);
FnInteract(&off_51A660)[15] = * ((decltype(&off_51A660)) 0x51a660);
FnInteract(&off_51A69C)[7] = * ((decltype(&off_51A69C)) 0x51a69c);
FnInteract(&off_51A6B8)[5] = * ((decltype(&off_51A6B8)) 0x51a6b8);
FnInteract(&off_51A6CC)[4] = * ((decltype(&off_51A6CC)) 0x51a6cc);
FnInteract(&off_51A6DC)[2] = * ((decltype(&off_51A6DC)) 0x51a6dc);
FnInteract(&off_51A6E4)[3] = * ((decltype(&off_51A6E4)) 0x51a6e4);
FnInteract(&off_51A6F0)[7] = * ((decltype(&off_51A6F0)) 0x51a6f0);
char(&separators2_maybe)[13] = * ((decltype(&separators2_maybe)) 0x51a70c);
char(&a_au_savegame)[16] = * ((decltype(&a_au_savegame)) 0x51a724);
FnInteract(&off_51A734)[7] = * ((decltype(&off_51A734)) 0x51a734);
FnInteract(&off_51A750)[20] = * ((decltype(&off_51A750)) 0x51a750);
FnInteract(&off_51A7A0)[20] = * ((decltype(&off_51A7A0)) 0x51a7a0);
FnInteract(&off_51A7F0)[5] = * ((decltype(&off_51A7F0)) 0x51a7f0);
FnInteract(&off_51A804)[2] = * ((decltype(&off_51A804)) 0x51a804);
FnInteract(&off_51A80C)[3] = * ((decltype(&off_51A80C)) 0x51a80c);
FnInteract(&off_51A818)[11] = * ((decltype(&off_51A818)) 0x51a818);
swishTimer& gluScoreSwishController = * ((decltype(&gluScoreSwishController)) 0x51a844);
FnInteract(&off_51A848)[61] = * ((decltype(&off_51A848)) 0x51a848);
FnInteract(&off_51A93C)[11] = * ((decltype(&off_51A93C)) 0x51a93c);
char(&a_au_phonenumber)[19] = * ((decltype(&a_au_phonenumber)) 0x51a970);
char(&a_au_device)[14] = * ((decltype(&a_au_device)) 0x51a98c);
swishTimer(&stru_51A99C)[4] = * ((decltype(&stru_51A99C)) 0x51a99c);
FnInteract(&off_51A9AC)[13] = * ((decltype(&off_51A9AC)) 0x51a9ac);
__int16& word_51A9E0 = * ((decltype(&word_51A9E0)) 0x51a9e0);
char(&separators_maybe)[8] = * ((decltype(&separators_maybe)) 0x51a9e8);
swishTimer(&gluCustmSwishController)[5] = * ((decltype(&gluCustmSwishController)) 0x51a9f0);
FnInteract(&off_51AA08)[38] = * ((decltype(&off_51AA08)) 0x51aa08);
RaceDropdownSelect(&singleRaceSelect)[4] = * ((decltype(&singleRaceSelect)) 0x51aaa0);
TypeDropdownSelect(&singleTypeSelect)[2] = * ((decltype(&singleTypeSelect)) 0x51aaa8);
char(&a_au_drawtext)[16] = * ((decltype(&a_au_drawtext)) 0x51aab8);
char(&a_auttemplate)[16] = * ((decltype(&a_auttemplate)) 0x51aad0);
char(&a_aulistentry)[16] = * ((decltype(&a_aulistentry)) 0x51aae8);
FnInteract& off_51AAF8 = * ((decltype(&off_51AAF8)) 0x51aaf8);
FnInteract(&off_51AAFC)[4] = * ((decltype(&off_51AAFC)) 0x51aafc);
FnInteract(&off_51AB0C)[4] = * ((decltype(&off_51AB0C)) 0x51ab0c);
FnInteract(&off_51AB20)[29] = * ((decltype(&off_51AB20)) 0x51ab20);
char(&a_autriggernode)[18] = * ((decltype(&a_autriggernode)) 0x51ab9c);
FnInteract(&off_51ABB0)[4] = * ((decltype(&off_51ABB0)) 0x51abb0);
FnInteract(&off_51ABC0)[5] = * ((decltype(&off_51ABC0)) 0x51abc0);
char(&a_autbnetmessage)[19] = * ((decltype(&a_autbnetmessage)) 0x51abdc);
FnInteract(&off_51ABF0)[3] = * ((decltype(&off_51ABF0)) 0x51abf0);
int(&dword_51ABFC)[] = * ((decltype(&dword_51ABFC)) 0x51abfc);
char(&a_autfd_session)[18] = * ((decltype(&a_autfd_session)) 0x51ac18);
char(&a_autuser_info)[17] = * ((decltype(&a_autuser_info)) 0x51ac34);
char(&a_autban)[11] = * ((decltype(&a_autban)) 0x51ac50);
char(&a_autsavegame)[16] = * ((decltype(&a_autsavegame)) 0x51ac64);
FnInteract(&off_51AC74)[4] = * ((decltype(&off_51AC74)) 0x51ac74);
FnInteract(&off_51AC84)[3] = * ((decltype(&off_51AC84)) 0x51ac84);
FnInteract& off_51AC90 = * ((decltype(&off_51AC90)) 0x51ac90);
FnInteract& off_51AC94 = * ((decltype(&off_51AC94)) 0x51ac94);
FnInteract(&off_51AC98)[6] = * ((decltype(&off_51AC98)) 0x51ac98);
int& dword_51ACB0 = * ((decltype(&dword_51ACB0)) 0x51acb0);
int& dword_51ACB4 = * ((decltype(&dword_51ACB4)) 0x51acb4);
int& dword_51ACB8 = * ((decltype(&dword_51ACB8)) 0x51acb8);
int& dword_51ACC0 = * ((decltype(&dword_51ACC0)) 0x51acc0);
char(&aEntrextrdwhepb)[81] = * ((decltype(&aEntrextrdwhepb)) 0x51acc4);
char(&a_autfd_user)[15] = * ((decltype(&a_autfd_user)) 0x51ad20);
FnInteract(&off_51AD30)[10] = * ((decltype(&off_51AD30)) 0x51ad30);
RaceDropdownSelect(&multiRaceSelect)[4] = * ((decltype(&multiRaceSelect)) 0x51ad58);
int(&dword_51AD60)[] = * ((decltype(&dword_51AD60)) 0x51ad60);
char *& off_51AD64 = * ((decltype(&off_51AD64)) 0x51ad64);
int(&dword_51AD68)[] = * ((decltype(&dword_51AD68)) 0x51ad68);
int(&dword_51AD90)[] = * ((decltype(&dword_51AD90)) 0x51ad90);
char *& off_51AD94 = * ((decltype(&off_51AD94)) 0x51ad94);
int(&dword_51AD98)[] = * ((decltype(&dword_51AD98)) 0x51ad98);
int(&byte_51ADC0)[4] = * ((decltype(&byte_51ADC0)) 0x51adc0);
int(&dword_51ADD0)[13] = * ((decltype(&dword_51ADD0)) 0x51add0);
int(&dword_51AE04)[11] = * ((decltype(&dword_51AE04)) 0x51ae04);
int(&dword_51AE30)[13] = * ((decltype(&dword_51AE30)) 0x51ae30);
LPCSTR& lpFileName = * ((decltype(&lpFileName)) 0x51ae64);
int& dword_51AE68 = * ((decltype(&dword_51AE68)) 0x51ae68);
char *& off_51AE6C = * ((decltype(&off_51AE6C)) 0x51ae6c);
int& dword_51AE80 = * ((decltype(&dword_51AE80)) 0x51ae80);
int& dword_51AE84 = * ((decltype(&dword_51AE84)) 0x51ae84);
int& id = * ((decltype(&id)) 0x51ae88);
char *(&off_51AE94)[4] = * ((decltype(&off_51AE94)) 0x51ae94);
char *(&off_51AE98)[3] = * ((decltype(&off_51AE98)) 0x51ae98);
char *(&off_51AE9C)[2] = * ((decltype(&off_51AE9C)) 0x51ae9c);
char *& off_51AEA0 = * ((decltype(&off_51AEA0)) 0x51aea0);
int& nNumber = * ((decltype(&nNumber)) 0x51aea4);
char *& off_51AEA8 = * ((decltype(&off_51AEA8)) 0x51aea8);
char(&a_xxx_xxxxxxxxx)[26] = * ((decltype(&a_xxx_xxxxxxxxx)) 0x51aebc);
char(&a___xxx____xxxx)[82] = * ((decltype(&a___xxx____xxxx)) 0x51aed8);
_DWORD& a____xxxxx_____ = * ((decltype(&a____xxxxx_____)) 0x51af30);
_DWORD& a______xxxxx___ = * ((decltype(&a______xxxxx___)) 0x51afe0);
int& dword_51B108 = * ((decltype(&dword_51B108)) 0x51b108);
struc_51B1E8(&stru_51B1E8)[3] = * ((decltype(&stru_51B1E8)) 0x51b1e8);
int& dword_51B260 = * ((decltype(&dword_51B260)) 0x51b260);
char(&aAutareafixup)[17] = * ((decltype(&aAutareafixup)) 0x51b27c);
HANDLE& hObject = * ((decltype(&hObject)) 0x51b290);
int& dword_51B294 = * ((decltype(&dword_51B294)) 0x51b294);
char(&a_au_bltmask)[15] = * ((decltype(&a_au_bltmask)) 0x51b2a0);
char(&a_au_ctrlnode)[16] = * ((decltype(&a_au_ctrlnode)) 0x51b2b8);
int& dword_51B2C8 = * ((decltype(&dword_51B2C8)) 0x51b2c8);
char& asc_51B2CC = * ((decltype(&asc_51B2CC)) 0x51b2cc);
char& byte_51B2CD = * ((decltype(&byte_51B2CD)) 0x51b2cd);
char& byte_51B2CE = * ((decltype(&byte_51B2CE)) 0x51b2ce);
char& byte_51B2CF = * ((decltype(&byte_51B2CF)) 0x51b2cf);
char(&a_au_dlggrp)[14] = * ((decltype(&a_au_dlggrp)) 0x51b2d8);
int& dword_51B2E8 = * ((decltype(&dword_51B2E8)) 0x51b2e8);
int(&dword_51B2F0)[] = * ((decltype(&dword_51B2F0)) 0x51b2f0);
int(&dword_51B2F4)[] = * ((decltype(&dword_51B2F4)) 0x51b2f4);
int(&dword_51B2F8)[] = * ((decltype(&dword_51B2F8)) 0x51b2f8);
char(&a_auchunknode)[16] = * ((decltype(&a_auchunknode)) 0x51b430);
char(&aUs)[3] = * ((decltype(&aUs)) 0x51b440);
char(&aSs)[3] = * ((decltype(&aSs)) 0x51b444);
int (__cdecl *&off_51B448)(_DWORD) = *((decltype(&off_51B448)) 0x51b448);
int (*(&off_51B44C)[2])() = * ((decltype(&off_51B44C)) 0x51b44c);
int (*&off_51B450)() = *((decltype(&off_51B450)) 0x51b450);
char(&aPow_0)[4] = * ((decltype(&aPow_0)) 0x51b468);
char& byte_51B540 = * ((decltype(&byte_51B540)) 0x51b540);
char(&byte_51B55C)[24] = * ((decltype(&byte_51B55C)) 0x51b55c);
void *(&jpt_4FA13D)[64] = * ((decltype(&jpt_4FA13D)) 0x51b59e);
double& dbl_51B6A0 = * ((decltype(&dbl_51B6A0)) 0x51b6a0);
double& dbl_51B6B0 = * ((decltype(&dbl_51B6B0)) 0x51b6b0);
char *& dword_51BAA0 = * ((decltype(&dword_51BAA0)) 0x51baa0);
int& dword_51BAA8 = * ((decltype(&dword_51BAA8)) 0x51baa8);
int& dword_51BAAC = * ((decltype(&dword_51BAAC)) 0x51baac);
int& dword_51BAB0 = * ((decltype(&dword_51BAB0)) 0x51bab0);
int& dword_51BAB4 = * ((decltype(&dword_51BAB4)) 0x51bab4);
int& dword_51BAB8 = * ((decltype(&dword_51BAB8)) 0x51bab8);
int& dword_51BABC = * ((decltype(&dword_51BABC)) 0x51babc);
int& dword_51BAC0 = * ((decltype(&dword_51BAC0)) 0x51bac0);
int& dword_51BAC4 = * ((decltype(&dword_51BAC4)) 0x51bac4);
int& dword_51BAC8 = * ((decltype(&dword_51BAC8)) 0x51bac8);
void *& dword_51BAD0 = * ((decltype(&dword_51BAD0)) 0x51bad0);
int& dword_51BAD4 = * ((decltype(&dword_51BAD4)) 0x51bad4);
int& dword_51BAD8 = * ((decltype(&dword_51BAD8)) 0x51bad8);
int& dword_51BAE0 = * ((decltype(&dword_51BAE0)) 0x51bae0);
char& byte_51BAE8 = * ((decltype(&byte_51BAE8)) 0x51bae8);
int& dword_51BAEC = * ((decltype(&dword_51BAEC)) 0x51baec);
int& dword_51BAF0 = * ((decltype(&dword_51BAF0)) 0x51baf0);
int (*&dword_51BAF4)(void) = *((decltype(&dword_51BAF4)) 0x51baf4);
CHAR(&Filename)[260] = * ((decltype(&Filename)) 0x51baf8);
char& byte_51BBFC = * ((decltype(&byte_51BBFC)) 0x51bbfc);
int& dword_51BC00 = * ((decltype(&dword_51BC00)) 0x51bc00);
int (__stdcall *&MessageBoxA_0)(HWND hWnd, LPCSTR lpText, LPCSTR lpCaption, UINT uType) = *((decltype(&MessageBoxA_0)) 0x51bd68);
HWND (__stdcall *&GetActiveWindow_0)() = *((decltype(&GetActiveWindow_0)) 0x51bd6c);
HWND (__stdcall *&GetLastActivePopup_0)(HWND hWnd) = *((decltype(&GetLastActivePopup_0)) 0x51bd70);
HWINSTA (__stdcall *&GetProcessWindowStation_0)() = *((decltype(&GetProcessWindowStation_0)) 0x51bd74);
BOOL (__stdcall *&GetUserObjectInformationA_0)(HANDLE hObj, int nIndex, PVOID pvInfo, DWORD nLength, LPDWORD lpnLengthNeeded) = *((decltype(&GetUserObjectInformationA_0)) 0x51bd78);
int& dword_51BD7C = * ((decltype(&dword_51BD7C)) 0x51bd7c);
int& dword_51BD80 = * ((decltype(&dword_51BD80)) 0x51bd80);
int& dword_51BD90 = * ((decltype(&dword_51BD90)) 0x51bd90);
int(&dword_51BD98)[] = * ((decltype(&dword_51BD98)) 0x51bd98);
volatile LONG& Target = * ((decltype(&Target)) 0x51bdd8);
int (__cdecl *&dword_51BDDC)(_DWORD, _DWORD) = *((decltype(&dword_51BDDC)) 0x51bddc);
int& dword_51BDE8 = * ((decltype(&dword_51BDE8)) 0x51bde8);
UINT& dword_51BDF8 = * ((decltype(&dword_51BDF8)) 0x51bdf8);
int& dword_51BE00 = * ((decltype(&dword_51BE00)) 0x51be00);
int& dword_51BE04 = * ((decltype(&dword_51BE04)) 0x51be04);
int (__cdecl *&dword_51BE08)(_DWORD) = *((decltype(&dword_51BE08)) 0x51be08);
int& dword_51BE0C = * ((decltype(&dword_51BE0C)) 0x51be0c);
int& dword_51BE14 = * ((decltype(&dword_51BE14)) 0x51be14);
int& dword_51BE18 = * ((decltype(&dword_51BE18)) 0x51be18);
struct _TIME_ZONE_INFORMATION& TimeZoneInformation = * ((decltype(&TimeZoneInformation)) 0x51be68);
int& dword_51BF14 = * ((decltype(&dword_51BF14)) 0x51bf14);
char *& dword_51BF18 = * ((decltype(&dword_51BF18)) 0x51bf18);
int& dword_51BF1C = * ((decltype(&dword_51BF1C)) 0x51bf1c);
int& dword_51BF30 = * ((decltype(&dword_51BF30)) 0x51bf30);
int& dword_51BF34 = * ((decltype(&dword_51BF34)) 0x51bf34);
int& dword_51BF38 = * ((decltype(&dword_51BF38)) 0x51bf38);
int& dword_51BF3C = * ((decltype(&dword_51BF3C)) 0x51bf3c);
int& dword_51BF40 = * ((decltype(&dword_51BF40)) 0x51bf40);
int& dword_51BF44 = * ((decltype(&dword_51BF44)) 0x51bf44);
int& dword_51BF64 = * ((decltype(&dword_51BF64)) 0x51bf64);
int& dword_51BF94 = * ((decltype(&dword_51BF94)) 0x51bf94);
int& dword_51BF98 = * ((decltype(&dword_51BF98)) 0x51bf98);
int& dword_51BF9C = * ((decltype(&dword_51BF9C)) 0x51bf9c);
int& dword_51BFA0 = * ((decltype(&dword_51BFA0)) 0x51bfa0);
int& is_app_active = * ((decltype(&is_app_active)) 0x51bfa8);
HINSTANCE& hInst = * ((decltype(&hInst)) 0x51bfac);
HWND& hWndParent = * ((decltype(&hWndParent)) 0x51bfb0);
int& dword_51BFB4 = * ((decltype(&dword_51BFB4)) 0x51bfb4);
char(&byte_51BFB8)[28] = * ((decltype(&byte_51BFB8)) 0x51bfb8);
int& dword_51BFD4 = * ((decltype(&dword_51BFD4)) 0x51bfd4);
unsigned __int8& byte_51BFD8 = * ((decltype(&byte_51BFD8)) 0x51bfd8);
int(&dword_51BFDC)[7] = * ((decltype(&dword_51BFDC)) 0x51bfdc);
int& Ophelia = * ((decltype(&Ophelia)) 0x51bff8);
Bitmap(&glue_background_palette)[129] = * ((decltype(&glue_background_palette)) 0x51c000);
void *& gluAllTblData = * ((decltype(&gluAllTblData)) 0x51c408);
FontColorRelated *& dword_51C40C = * ((decltype(&dword_51C40C)) 0x51c40c);
MapData4& level_cheat_mission = * ((decltype(&level_cheat_mission)) 0x51c410);
int& dword_51C414 = * ((decltype(&dword_51C414)) 0x51c414);
dialog *& dword_51C418 = * ((decltype(&dword_51C418)) 0x51c418);
TimerRelated& timer_related = * ((decltype(&timer_related)) 0x51c428);
__int16(&word_51C480)[20] = * ((decltype(&word_51C480)) 0x51c480);
int& dword_51C4A8 = * ((decltype(&dword_51C4A8)) 0x51c4a8);
int& dword_51C4AC = * ((decltype(&dword_51C4AC)) 0x51c4ac);
dialog *& dword_51C4B0 = * ((decltype(&dword_51C4B0)) 0x51c4b0);
ListNodeUnknown *& dword_51C4B4 = * ((decltype(&dword_51C4B4)) 0x51c4b4);
int& dialog_count = * ((decltype(&dialog_count)) 0x51c4b8);
int& level_cheat_is_bw = * ((decltype(&level_cheat_is_bw)) 0x51c4bc);
CHAR(&main_directory)[260] = * ((decltype(&main_directory)) 0x51c4c0);
DlgGrp *(&dword_51C5C8)[16] = * ((decltype(&dword_51C5C8)) 0x51c5c8);
int& level_cheat_race = * ((decltype(&level_cheat_race)) 0x51c608);
void *& dword_51C60C = * ((decltype(&dword_51C60C)) 0x51c60c);
int(&randomCounts)[] = * ((decltype(&randomCounts)) 0x51c610);
int& dword_51C618 = * ((decltype(&dword_51C618)) 0x51c618);
int& dword_51C630 = * ((decltype(&dword_51C630)) 0x51c630);
int& dword_51C648 = * ((decltype(&dword_51C648)) 0x51c648);
int& dword_51C64C = * ((decltype(&dword_51C64C)) 0x51c64c);
int& dword_51C654 = * ((decltype(&dword_51C654)) 0x51c654);
int& dword_51C65C = * ((decltype(&dword_51C65C)) 0x51c65c);
int& dword_51C660 = * ((decltype(&dword_51C660)) 0x51c660);
int& dword_51C678 = * ((decltype(&dword_51C678)) 0x51c678);
int& dword_51C67C = * ((decltype(&dword_51C67C)) 0x51c67c);
int& dword_51C680 = * ((decltype(&dword_51C680)) 0x51c680);
int& dword_51C68C = * ((decltype(&dword_51C68C)) 0x51c68c);
int& dword_51C690 = * ((decltype(&dword_51C690)) 0x51c690);
int& dword_51C694 = * ((decltype(&dword_51C694)) 0x51c694);
int& dword_51C6AC = * ((decltype(&dword_51C6AC)) 0x51c6ac);
int& dword_51C6B0 = * ((decltype(&dword_51C6B0)) 0x51c6b0);
int& dword_51C6C0 = * ((decltype(&dword_51C6C0)) 0x51c6c0);
int& dword_51C6C4 = * ((decltype(&dword_51C6C4)) 0x51c6c4);
int& dword_51C6C8 = * ((decltype(&dword_51C6C8)) 0x51c6c8);
int& dword_51C6D8 = * ((decltype(&dword_51C6D8)) 0x51c6d8);
int& dword_51C6E8 = * ((decltype(&dword_51C6E8)) 0x51c6e8);
int& dword_51C6EC = * ((decltype(&dword_51C6EC)) 0x51c6ec);
int& dword_51C6F4 = * ((decltype(&dword_51C6F4)) 0x51c6f4);
int& dword_51C850 = * ((decltype(&dword_51C850)) 0x51c850);
unsigned int& initialSeed = * ((decltype(&initialSeed)) 0x51ca10);
int& LastRandomNumber = * ((decltype(&LastRandomNumber)) 0x51ca14);
int& randomCountsTotal = * ((decltype(&randomCountsTotal)) 0x51ca18);
int& dword_51CA1C = * ((decltype(&dword_51CA1C)) 0x51ca1c);
char(&archive_files)[520] = * ((decltype(&archive_files)) 0x51ca20);
HANDLE& patch_rt_mpq = * ((decltype(&patch_rt_mpq)) 0x51cc28);
HANDLE& broodat_mpq = * ((decltype(&broodat_mpq)) 0x51cc2c);
void *& dword_51CC30 = * ((decltype(&dword_51CC30)) 0x51cc30);
HANDLE& cd_archive_mpq = * ((decltype(&cd_archive_mpq)) 0x51cc34);
HANDLE& stardat_mpq = * ((decltype(&stardat_mpq)) 0x51cc38);
char(&tstrFilename)[260] = * ((decltype(&tstrFilename)) 0x51cc40);
SNETVERSIONDATA& snet_version_data = * ((decltype(&snet_version_data)) 0x51cd44);
char(&patch_archive_file)[260] = * ((decltype(&patch_archive_file)) 0x51cd58);
int& cdkey_encrypted_len = * ((decltype(&cdkey_encrypted_len)) 0x51ce5c);
void *& cdkey_encrypted = * ((decltype(&cdkey_encrypted)) 0x51ce60);
int& cdkeyowner_encrypted_len = * ((decltype(&cdkeyowner_encrypted_len)) 0x51ce64);
void *& cdkeyowner_encrypted = * ((decltype(&cdkeyowner_encrypted)) 0x51ce68);
int& IsRunning = * ((decltype(&IsRunning)) 0x51ce6c);
int(&LatencyFrames)[7] = * ((decltype(&LatencyFrames)) 0x51ce70);
int(&dword_51CE8C)[] = * ((decltype(&dword_51CE8C)) 0x51ce8c);
GamePosition& gwNextGameMode = * ((decltype(&gwNextGameMode)) 0x51ce90);
int& dword_51CE94 = * ((decltype(&dword_51CE94)) 0x51ce94);
int& visionUpdateCount = * ((decltype(&visionUpdateCount)) 0x51ce98);
char& visionUpdated = * ((decltype(&visionUpdated)) 0x51ce9c);
char& byte_51CE9D = * ((decltype(&byte_51CE9D)) 0x51ce9d);
int& FramesUntilNextTurn = * ((decltype(&FramesUntilNextTurn)) 0x51cea0);
int& bytes_read = * ((decltype(&bytes_read)) 0x51cea4);
char *& dword_51CEA8 = * ((decltype(&dword_51CEA8)) 0x51cea8);
char& byte_51CEAC = * ((decltype(&byte_51CEAC)) 0x51ceac);
dialog *& dword_51CEB0 = * ((decltype(&dword_51CEB0)) 0x51ceb0);
int& dword_51CEB4 = * ((decltype(&dword_51CEB4)) 0x51ceb4);
int& dword_51CEB8 = * ((decltype(&dword_51CEB8)) 0x51ceb8);
char *& dword_51CEBC = * ((decltype(&dword_51CEBC)) 0x51cebc);
int& credits_interrupted = * ((decltype(&credits_interrupted)) 0x51cec0);
int& dword_51CEC4 = * ((decltype(&dword_51CEC4)) 0x51cec4);
u8& byte_51CEC8 = * ((decltype(&byte_51CEC8)) 0x51cec8);
int(&dword_51CECC)[] = * ((decltype(&dword_51CECC)) 0x51cecc);
grpHead *(&ImageGrpGraphics)[1] = * ((decltype(&ImageGrpGraphics)) 0x51ced0);
int& dword_51D218 = * ((decltype(&dword_51D218)) 0x51d218);
int(&dword_51D794)[23] = * ((decltype(&dword_51D794)) 0x51d794);
int& dword_51D7F0 = * ((decltype(&dword_51D7F0)) 0x51d7f0);
CImage(&stru_51DE70)[64] = * ((decltype(&stru_51DE70)) 0x51de70);
CImage *& dword_51EE70 = * ((decltype(&dword_51EE70)) 0x51ee70);
grpHead(&stru_51EE78)[1] = * ((decltype(&stru_51EE78)) 0x51ee78);
CImage *& dword_51F1F8 = * ((decltype(&dword_51F1F8)) 0x51f1f8);
ImagesDatExtraOverlayLO_Files& lo_files = * ((decltype(&lo_files)) 0x51f2a8);
CImage *& dword_5240B4 = * ((decltype(&dword_5240B4)) 0x5240b4);
int(&dword_5240B8)[] = * ((decltype(&dword_5240B8)) 0x5240b8);
int(&dword_5240BC)[5] = * ((decltype(&dword_5240BC)) 0x5240bc);
char(&building_overlay_state_max)[1000] = * ((decltype(&building_overlay_state_max)) 0x5240d0);
CImage(&stru_5244B8)[64] = * ((decltype(&stru_5244B8)) 0x5244b8);
CImage *& dword_5254B8 = * ((decltype(&dword_5254B8)) 0x5254b8);
CImage *& dword_52E4C0 = * ((decltype(&dword_52E4C0)) 0x52e4c0);
CImage *& dword_52E4C4 = * ((decltype(&dword_52E4C4)) 0x52e4c4);
char(&tileset_shift)[256] = * ((decltype(&tileset_shift)) 0x52e4c8);
LO_Header *(&ShieldOverlays)[999] = * ((decltype(&ShieldOverlays)) 0x52e5c8);
CImage *& dword_52F564 = * ((decltype(&dword_52F564)) 0x52f564);
CImage(&images)[5000] = * ((decltype(&images)) 0x52f568);
CImage(&stru_57D768)[80] = * ((decltype(&stru_57D768)) 0x57d768);
CImage *& dword_57EB68 = * ((decltype(&dword_57EB68)) 0x57eb68);
CImage *& dword_57EB6C = * ((decltype(&dword_57EB6C)) 0x57eb6c);
CImage *& dword_57EB70 = * ((decltype(&dword_57EB70)) 0x57eb70);
CImage(&stru_57EB78)[12] = * ((decltype(&stru_57EB78)) 0x57eb78);
char& byte_57EE78 = * ((decltype(&byte_57EE78)) 0x57ee78);
int(&dword_57EE7C)[7] = * ((decltype(&dword_57EE7C)) 0x57ee7c);
int(&dword_57EE98)[] = * ((decltype(&dword_57EE98)) 0x57ee98);
char(&playerName)[25] = * ((decltype(&playerName)) 0x57ee9c);
int& playerExploredVisions = * ((decltype(&playerExploredVisions)) 0x57eeb8);
unsigned int& turn_counter = * ((decltype(&turn_counter)) 0x57eebc);
int(&dword_57EEC0)[] = * ((decltype(&dword_57EEC0)) 0x57eec0);
int& dword_57EEC4 = * ((decltype(&dword_57EEC4)) 0x57eec4);
int& dword_57EEC8 = * ((decltype(&dword_57EEC8)) 0x57eec8);
int& dword_57EECC = * ((decltype(&dword_57EECC)) 0x57eecc);
int& dword_57EED0 = * ((decltype(&dword_57EED0)) 0x57eed0);
int& dword_57EED4 = * ((decltype(&dword_57EED4)) 0x57eed4);
int& dword_57EED8 = * ((decltype(&dword_57EED8)) 0x57eed8);
int& dword_57EEDC = * ((decltype(&dword_57EEDC)) 0x57eedc);
PlayerInfo(&Players)[12] = * ((decltype(&Players)) 0x57eee0);
int& LatencyCalls = * ((decltype(&LatencyCalls)) 0x57f090);
char(&curPlayerID)[4] = * ((decltype(&curPlayerID)) 0x57f094);
char(&byte_57F098)[] = * ((decltype(&byte_57F098)) 0x57f098);
char(&byte_57F09A)[22] = * ((decltype(&byte_57F09A)) 0x57f09a);
int& playerVisions = * ((decltype(&playerVisions)) 0x57f0b0);
BYTE& multiPlayerMode = * ((decltype(&multiPlayerMode)) 0x57f0b4);
int(&playerStatusArray)[8] = * ((decltype(&playerStatusArray)) 0x57f0b8);
int& dword_57F0BC = * ((decltype(&dword_57F0BC)) 0x57f0bc);
int& dword_57F0C0 = * ((decltype(&dword_57F0C0)) 0x57f0c0);
int& dword_57F0C4 = * ((decltype(&dword_57F0C4)) 0x57f0c4);
int& dword_57F0C8 = * ((decltype(&dword_57F0C8)) 0x57f0c8);
int& dword_57F0CC = * ((decltype(&dword_57F0CC)) 0x57f0cc);
int& dword_57F0D0 = * ((decltype(&dword_57F0D0)) 0x57f0d0);
int& dword_57F0D4 = * ((decltype(&dword_57F0D4)) 0x57f0d4);
int& MaxTurnSize = * ((decltype(&MaxTurnSize)) 0x57f0d8);
dialog *& load_screen = * ((decltype(&load_screen)) 0x57f0dc);
Bitmap& stru_57F0E0 = * ((decltype(&stru_57F0E0)) 0x57f0e0);
Bitmap& stru_57F0E8 = * ((decltype(&stru_57F0E8)) 0x57f0e8);
PlayerResources& BWDATA_PlayerResources = * ((decltype(&BWDATA_PlayerResources)) 0x57f0f0);
int& dword_57F1B0 = * ((decltype(&dword_57F1B0)) 0x57f1b0);
int& dword_57F1B4 = * ((decltype(&dword_57F1B4)) 0x57f1b4);
int& dword_57F1B8 = * ((decltype(&dword_57F1B8)) 0x57f1b8);
int& dword_57F1BC = * ((decltype(&dword_57F1BC)) 0x57f1bc);
RaceId(&byte_57F1C0)[8] = * ((decltype(&byte_57F1C0)) 0x57f1c0);
char(&byte_57F1CB)[] = * ((decltype(&byte_57F1CB)) 0x57f1cb);
int& dword_57F1CC = * ((decltype(&dword_57F1CC)) 0x57f1cc);
Position& MoveToTile = * ((decltype(&MoveToTile)) 0x57f1d0);
MapSize& map_size = * ((decltype(&map_size)) 0x57f1d4);
__int16& unignored_player_flags = * ((decltype(&unignored_player_flags)) 0x57f1d8);
__int16& SendTextFilter = * ((decltype(&SendTextFilter)) 0x57f1da);
Tileset& CurrentTileSet = * ((decltype(&CurrentTileSet)) 0x57f1dc);
__int16& currentMusicId = * ((decltype(&currentMusicId)) 0x57f1de);
char& byte_57F1E1 = * ((decltype(&byte_57F1E1)) 0x57f1e1);
RaceId& consoleIndex = * ((decltype(&consoleIndex)) 0x57f1e2);
char(&customSingleplayer)[9] = * ((decltype(&customSingleplayer)) 0x57f1e3);
int(&PlayerVision)[12] = * ((decltype(&PlayerVision)) 0x57f1ec);
int(&factionsColorsOrdering)[8] = * ((decltype(&factionsColorsOrdering)) 0x57f21c);
DWORD& ElapsedTimeFrames = * ((decltype(&ElapsedTimeFrames)) 0x57f23c);
int& savedElapsedSeconds = * ((decltype(&savedElapsedSeconds)) 0x57f240);
MapData& CampaignIndex = * ((decltype(&CampaignIndex)) 0x57f244);
char(&next_scenario)[32] = * ((decltype(&next_scenario)) 0x57f246);
RaceId& selectedSingleplayerRace = * ((decltype(&selectedSingleplayerRace)) 0x57f266);
RaceId(&single_player_opponent_races)[8] = * ((decltype(&single_player_opponent_races)) 0x57f267);
__int16(&word_57F270)[] = * ((decltype(&word_57F270)) 0x57f270);
__int16(&word_57F272)[5] = * ((decltype(&word_57F272)) 0x57f272);
UnitAvail& UnitAvailability = * ((decltype(&UnitAvailability)) 0x57f27c);
char(&byte_57FD2C)[8] = * ((decltype(&byte_57FD2C)) 0x57fd2c);
int& dword_57FD34 = * ((decltype(&dword_57FD34)) 0x57fd34);
int& dword_57FD38 = * ((decltype(&dword_57FD38)) 0x57fd38);
char(&CurrentMapFileName)[260] = * ((decltype(&CurrentMapFileName)) 0x57fd3c);
char(&CurrentMapName)[32] = * ((decltype(&CurrentMapName)) 0x57fe40);
UnitGroupRelated(&stru_57FE60)[8] = * ((decltype(&stru_57FE60)) 0x57fe60);
char& byte_581D60 = * ((decltype(&byte_581D60)) 0x581d60);
char& lossType = * ((decltype(&lossType)) 0x581d61);
char(&playerHasLeft)[] = * ((decltype(&playerHasLeft)) 0x581d62);
int& unkVictoryVariable = * ((decltype(&unkVictoryVariable)) 0x581d66);
char(&byte_581D6A)[11] = * ((decltype(&byte_581D6A)) 0x581d6a);
char& byte_581D75 = * ((decltype(&byte_581D75)) 0x581d75);
struc_581D76(&stru_581D76)[8] = * ((decltype(&stru_581D76)) 0x581d76);
char(&byte_581DD5)[] = * ((decltype(&byte_581DD5)) 0x581dd5);
u8(&PlayerColors)[12] = * ((decltype(&PlayerColors)) 0x581dd6);
AllScoresStruct& AllScores = * ((decltype(&AllScores)) 0x581de4);
TechSC(&TechAvailableSC)[12] = * ((decltype(&TechAvailableSC)) 0x58ce24);
TechSC(&TechResearchSC)[12] = * ((decltype(&TechResearchSC)) 0x58cf44);
UpgradesSC(&UpgradeMaxSC)[12] = * ((decltype(&UpgradeMaxSC)) 0x58d088);
UpgradesSC(&UpgradeLevelSC)[12] = * ((decltype(&UpgradeLevelSC)) 0x58d2b0);
char(&byte_58D5AF)[] = * ((decltype(&byte_58D5AF)) 0x58d5af);
byte(&dword_58D5B0)[8] = * ((decltype(&dword_58D5B0)) 0x58d5b0);
int& dword_58D5B4 = * ((decltype(&dword_58D5B4)) 0x58d5b4);
int& dword_58D5B8 = * ((decltype(&dword_58D5B8)) 0x58d5b8);
ForceName& BWDATA_ForceNames = * ((decltype(&BWDATA_ForceNames)) 0x58d5bc);
PlayerAlliance(&Alliance)[12] = * ((decltype(&Alliance)) 0x58d634);
int(&MissionObjectives)[12] = * ((decltype(&MissionObjectives)) 0x58d6c4);
int& CountdownTimer = * ((decltype(&CountdownTimer)) 0x58d6f4);
int& ElapsedTimeSeconds = * ((decltype(&ElapsedTimeSeconds)) 0x58d6f8);
int& dword_58D6FC = * ((decltype(&dword_58D6FC)) 0x58d6fc);
char(&byte_58D700)[8] = * ((decltype(&byte_58D700)) 0x58d700);
int& dword_58D708 = * ((decltype(&dword_58D708)) 0x58d708);
char& byte_58D70C = * ((decltype(&byte_58D70C)) 0x58d70c);
char& byte_58D70D = * ((decltype(&byte_58D70D)) 0x58d70d);
__int16& word_58D70E = * ((decltype(&word_58D70E)) 0x58d70e);
int& dword_58D710 = * ((decltype(&dword_58D710)) 0x58d710);
int& dword_58D714 = * ((decltype(&dword_58D714)) 0x58d714);
u8(&byte_58D718)[8] = * ((decltype(&byte_58D718)) 0x58d718);
Position(&startPositions)[8] = * ((decltype(&startPositions)) 0x58d720);
int(&TriggerSwitches)[8] = * ((decltype(&TriggerSwitches)) 0x58dc40);
Location(&LocationTable)[254] = * ((decltype(&LocationTable)) 0x58dc60);
char(&byte_58F038)[20] = * ((decltype(&byte_58F038)) 0x58f038);
int& TimerIsPaused = * ((decltype(&TimerIsPaused)) 0x58f04c);
TechBW(&TechAvailableBW)[12] = * ((decltype(&TechAvailableBW)) 0x58f050);
TechBW(&TechResearchBW)[12] = * ((decltype(&TechResearchBW)) 0x58f140);
u8(&ResearchProgress)[72] = * ((decltype(&ResearchProgress)) 0x58f230);
UpgradesBW(&UpgradeMaxBW)[12] = * ((decltype(&UpgradeMaxBW)) 0x58f278);
UpgradesBW(&UpgradeLevelBW)[12] = * ((decltype(&UpgradeLevelBW)) 0x58f32c);
u8(&UpgradeProgress)[96] = * ((decltype(&UpgradeProgress)) 0x58f3e0);
char& IsExpansion = * ((decltype(&IsExpansion)) 0x58f440);
int& dword_58F442 = * ((decltype(&dword_58F442)) 0x58f442);
int& dword_58F446 = * ((decltype(&dword_58F446)) 0x58f446);
int& dword_5967F0 = * ((decltype(&dword_5967F0)) 0x5967f0);
GameData& gameData = * ((decltype(&gameData)) 0x5967f8);
int& isHost = * ((decltype(&isHost)) 0x596888);
Char4& NetMode = * ((decltype(&NetMode)) 0x59688c);
MapDownload *& map_download = * ((decltype(&map_download)) 0x596890);
char& byte_596894 = * ((decltype(&byte_596894)) 0x596894);
HACCEL& DlgAccelerator = * ((decltype(&DlgAccelerator)) 0x596898);
InputProcedure(&input_procedures)[19] = * ((decltype(&input_procedures)) 0x5968a0);
int& dword_5968EC = * ((decltype(&dword_5968EC)) 0x5968ec);
HACCEL& hAccel = * ((decltype(&hAccel)) 0x5968f0);
HACCEL& dword_5968F4 = * ((decltype(&dword_5968F4)) 0x5968f4);
HACCEL& dword_5968F8 = * ((decltype(&dword_5968F8)) 0x5968f8);
InputProcedure& AcceleratorTables = * ((decltype(&AcceleratorTables)) 0x5968fc);
GamePosition& gwGameMode = * ((decltype(&gwGameMode)) 0x596904);
char(&byte_596910)[260] = * ((decltype(&byte_596910)) 0x596910);
int& dword_596A14 = * ((decltype(&dword_596A14)) 0x596a14);
char(&is_keycode_used)[256] = * ((decltype(&is_keycode_used)) 0x596a18);
dialog *& dlg = * ((decltype(&dlg)) 0x596b18);
grpHead *(&cursor_graphics)[19] = * ((decltype(&cursor_graphics)) 0x596b20);
int& possible_gamescreen_y_min = * ((decltype(&possible_gamescreen_y_min)) 0x596b6c);
CursorType& last_cursor_type = * ((decltype(&last_cursor_type)) 0x596b70);
int& possible_gamescreen_y_max = * ((decltype(&possible_gamescreen_y_max)) 0x596b74);
LPTOP_LEVEL_EXCEPTION_FILTER& lpTopLevelExceptionFilter = * ((decltype(&lpTopLevelExceptionFilter)) 0x596b78);
int(&dword_596B7C)[12] = * ((decltype(&dword_596B7C)) 0x596b7c);
int& dword_596BAC = * ((decltype(&dword_596BAC)) 0x596bac);
int& dword_596BB0 = * ((decltype(&dword_596BB0)) 0x596bb0);
int& dword_596BB4 = * ((decltype(&dword_596BB4)) 0x596bb4);
int& dword_596BB8 = * ((decltype(&dword_596BB8)) 0x596bb8);
GameActionDataBlock *& replayData = * ((decltype(&replayData)) 0x596bbc);
HANDLE& mapArchiveHandle = * ((decltype(&mapArchiveHandle)) 0x596bc4);
char(&byte_596BC8)[260] = * ((decltype(&byte_596BC8)) 0x596bc8);
int& has_effects_scode_maybe = * ((decltype(&has_effects_scode_maybe)) 0x596ccc);
grpHead *& dword_596CD0 = * ((decltype(&dword_596CD0)) 0x596cd0);
int& dword_596CD4 = * ((decltype(&dword_596CD4)) 0x596cd4);
UnitProperties(&stru_596CD8)[64] = * ((decltype(&stru_596CD8)) 0x596cd8);
int& dword_5971D8 = * ((decltype(&dword_5971D8)) 0x5971d8);
int& dword_5971DC = * ((decltype(&dword_5971DC)) 0x5971dc);
int& dword_5971E0 = * ((decltype(&dword_5971E0)) 0x5971e0);
int(&player_left)[8] = * ((decltype(&player_left)) 0x5971e4);
int& game_result_reported_maybe = * ((decltype(&game_result_reported_maybe)) 0x597204);
CUnit *(&ClientSelectionGroup)[12] = * ((decltype(&ClientSelectionGroup)) 0x597208);
BltMask *& MainBltMask = * ((decltype(&MainBltMask)) 0x597238);
char& byte_59723C = * ((decltype(&byte_59723C)) 0x59723c);
char& ClientSelectionCount = * ((decltype(&ClientSelectionCount)) 0x59723d);
Bitmap& GameScreenConsole = * ((decltype(&GameScreenConsole)) 0x597240);
CUnit *& ActivePortraitUnit = * ((decltype(&ActivePortraitUnit)) 0x597248);
CUnit *(&dword_59724C)[12] = * ((decltype(&dword_59724C)) 0x59724c);
int& dword_59727C = * ((decltype(&dword_59727C)) 0x59727c);
char& byte_597280 = * ((decltype(&byte_597280)) 0x597280);
dialog *& statlb_Dlg = * ((decltype(&statlb_Dlg)) 0x597284);
int& dword_597288 = * ((decltype(&dword_597288)) 0x597288);
char& byte_59728C = * ((decltype(&byte_59728C)) 0x59728c);
char(&byte_597290)[128] = * ((decltype(&byte_597290)) 0x597290);
char(&byte_597310)[128] = * ((decltype(&byte_597310)) 0x597310);
int& dword_597390 = * ((decltype(&dword_597390)) 0x597390);
grpHead *& last_cursor = * ((decltype(&last_cursor)) 0x597394);
int& dword_597398 = * ((decltype(&dword_597398)) 0x597398);
char(&byte_5973A0)[3840] = * ((decltype(&byte_5973A0)) 0x5973a0);
char(&byte_5982A0)[768] = * ((decltype(&byte_5982A0)) 0x5982a0);
char(&byte_5985A0)[3328] = * ((decltype(&byte_5985A0)) 0x5985a0);
char(&byte_5992A0)[256] = * ((decltype(&byte_5992A0)) 0x5992a0);
void *& dword_5993A0 = * ((decltype(&dword_5993A0)) 0x5993a0);
int& dword_5993A4 = * ((decltype(&dword_5993A4)) 0x5993a4);
TileID *& ZergCreepArray = * ((decltype(&ZergCreepArray)) 0x5993a8);
int& dword_5993AC = * ((decltype(&dword_5993AC)) 0x5993ac);
RECT& game_screen_pos = * ((decltype(&game_screen_pos)) 0x5993b0);
unsigned int& dword_5993C0 = * ((decltype(&dword_5993C0)) 0x5993c0);
TileID *& MapTileArray = * ((decltype(&MapTileArray)) 0x5993c4);
int& TileSetMapSize = * ((decltype(&TileSetMapSize)) 0x5993c8);
MegatileFlags *& megatile_default_flags = * ((decltype(&megatile_default_flags)) 0x5993cc);
MiniTileMaps_type *& MiniTileFlags = * ((decltype(&MiniTileFlags)) 0x5993d0);
StringTbl& MapStringTbl = * ((decltype(&MapStringTbl)) 0x5993d4);
char(&byte_5993D8)[256] = * ((decltype(&byte_5993D8)) 0x5993d8);
size_t& chk_string_section_size = * ((decltype(&chk_string_section_size)) 0x5994d8);
int& dword_5994DC = * ((decltype(&dword_5994DC)) 0x5994dc);
PALETTEENTRY(&palette)[256] = * ((decltype(&palette)) 0x5994e0);
__int16& megatileCount = * ((decltype(&megatileCount)) 0x5998e0);
unsigned int& ThreadId = * ((decltype(&ThreadId)) 0x5998e4);
int& dword_5998E8 = * ((decltype(&dword_5998E8)) 0x5998e8);
struct_6(&stru_5998F0)[8] = * ((decltype(&stru_5998F0)) 0x5998f0);
void *& dword_5999B0 = * ((decltype(&dword_5999B0)) 0x5999b0);
int& dword_5999B4 = * ((decltype(&dword_5999B4)) 0x5999b4);
char& byte_5999B8 = * ((decltype(&byte_5999B8)) 0x5999b8);
MenuPosition& glGluesRelated_maybe = * ((decltype(&glGluesRelated_maybe)) 0x5999bc);
dialog *& dword_5999C0 = * ((decltype(&dword_5999C0)) 0x5999c0);
dialog *& gluLogin_Dlg = * ((decltype(&gluLogin_Dlg)) 0x5999c4);
int& dword_5999C8 = * ((decltype(&dword_5999C8)) 0x5999c8);
int& dword_5999CC = * ((decltype(&dword_5999CC)) 0x5999cc);
int& dword_5999D0 = * ((decltype(&dword_5999D0)) 0x5999d0);
int& update_lobby_glue = * ((decltype(&update_lobby_glue)) 0x5999d4);
int& dword_5999D8 = * ((decltype(&dword_5999D8)) 0x5999d8);
int& dword_5999DC = * ((decltype(&dword_5999DC)) 0x5999dc);
GluAllTblEntry& dword_5999E0 = * ((decltype(&dword_5999E0)) 0x5999e0);
dialog *& dword_5999E4 = * ((decltype(&dword_5999E4)) 0x5999e4);
int& dword_5999E8 = * ((decltype(&dword_5999E8)) 0x5999e8);
dialog *& dword_5999EC = * ((decltype(&dword_5999EC)) 0x5999ec);
GameData& stru_5999F0 = * ((decltype(&stru_5999F0)) 0x5999f0);
dialog *& gluJoin_Dlg = * ((decltype(&gluJoin_Dlg)) 0x599a80);
int& dword_599A84 = * ((decltype(&dword_599A84)) 0x599a84);
int& dword_599A88 = * ((decltype(&dword_599A88)) 0x599a88);
char(&byte_599A90)[256] = * ((decltype(&byte_599A90)) 0x599a90);
Bitmap& p_hist_pcx = * ((decltype(&p_hist_pcx)) 0x599b90);
char(&byte_599B98)[256] = * ((decltype(&byte_599B98)) 0x599b98);
char(&byte_599C98)[256] = * ((decltype(&byte_599C98)) 0x599c98);
int& dword_599D98 = * ((decltype(&dword_599D98)) 0x599d98);
dialog *& glu_load_Dlg = * ((decltype(&glu_load_Dlg)) 0x599d9c);
dialog *& dword_599DA0 = * ((decltype(&dword_599DA0)) 0x599da0);
char(&byte_599DA4)[28] = * ((decltype(&byte_599DA4)) 0x599da4);
int& dword_599DC0 = * ((decltype(&dword_599DC0)) 0x599dc0);
char(&byte_599DC8)[256] = * ((decltype(&byte_599DC8)) 0x599dc8);
CHAR(&dword_599EC8)[] = * ((decltype(&dword_599EC8)) 0x599ec8);
int& dword_599ECC = * ((decltype(&dword_599ECC)) 0x599ecc);
int& dword_599ED0 = * ((decltype(&dword_599ED0)) 0x599ed0);
int& dword_599ED4 = * ((decltype(&dword_599ED4)) 0x599ed4);
char& byte_599ED8 = * ((decltype(&byte_599ED8)) 0x599ed8);
char(&byte_599FD0)[256] = * ((decltype(&byte_599FD0)) 0x599fd0);
unsigned int& dword_59A0D0 = * ((decltype(&dword_59A0D0)) 0x59a0d0);
int(&dword_59A0D4)[3] = * ((decltype(&dword_59A0D4)) 0x59a0d4);
int& dword_59A0E0 = * ((decltype(&dword_59A0E0)) 0x59a0e0);
int(&dword_59A0E4)[] = * ((decltype(&dword_59A0E4)) 0x59a0e4);
int& dword_59A0E8 = * ((decltype(&dword_59A0E8)) 0x59a0e8);
int& dword_59A0EC = * ((decltype(&dword_59A0EC)) 0x59a0ec);
struc_59A0F0(&stru_59A0F0)[8] = * ((decltype(&stru_59A0F0)) 0x59a0f0);
_DWORD& dword_59B3D0 = * ((decltype(&dword_59B3D0)) 0x59b3d0);
struct_v0(&byte_59B3D8)[8] = * ((decltype(&byte_59B3D8)) 0x59b3d8);
int(&dword_59B410)[] = * ((decltype(&dword_59B410)) 0x59b410);
int(&dword_59B414)[] = * ((decltype(&dword_59B414)) 0x59b414);
int(&dword_59B418)[] = * ((decltype(&dword_59B418)) 0x59b418);
char(&byte_59B41C)[508] = * ((decltype(&byte_59B41C)) 0x59b41c);
int& dword_59B618 = * ((decltype(&dword_59B618)) 0x59b618);
int& dword_59B61C = * ((decltype(&dword_59B61C)) 0x59b61c);
dialog *& gluScore_Dlg = * ((decltype(&gluScore_Dlg)) 0x59b620);
int& dword_59B624 = * ((decltype(&dword_59B624)) 0x59b624);
char(&byte_59B628)[260] = * ((decltype(&byte_59B628)) 0x59b628);
void *& iscore_grp = * ((decltype(&iscore_grp)) 0x59b72c);
char(&byte_59B730)[12] = * ((decltype(&byte_59B730)) 0x59b730);
int(&dword_59B73C)[8] = * ((decltype(&dword_59B73C)) 0x59b73c);
int& dword_59B75C = * ((decltype(&dword_59B75C)) 0x59b75c);
int(&dword_59B760)[3] = * ((decltype(&dword_59B760)) 0x59b760);
int& dword_59B76C = * ((decltype(&dword_59B76C)) 0x59b76c);
char(&byte_59B770)[32] = * ((decltype(&byte_59B770)) 0x59b770);
GameData& stru_59B790 = * ((decltype(&stru_59B790)) 0x59b790);
int& dword_59B820 = * ((decltype(&dword_59B820)) 0x59b820);
int& dword_59B824 = * ((decltype(&dword_59B824)) 0x59b824);
int& dword_59B828 = * ((decltype(&dword_59B828)) 0x59b828);
int& dword_59B82C = * ((decltype(&dword_59B82C)) 0x59b82c);
int (*&dword_59B830)(void) = *((decltype(&dword_59B830)) 0x59b830);
int& dword_59B834 = * ((decltype(&dword_59B834)) 0x59b834);
dialog *& glu_modem_status_Dlg = * ((decltype(&glu_modem_status_Dlg)) 0x59b838);
int& dword_59B83C = * ((decltype(&dword_59B83C)) 0x59b83c);
dialog *& custom_game_slots = * ((decltype(&custom_game_slots)) 0x59b840);
int& dword_59B844 = * ((decltype(&dword_59B844)) 0x59b844);
int& dword_59B848 = * ((decltype(&dword_59B848)) 0x59b848);
char(&menuMapRelativePath)[260] = * ((decltype(&menuMapRelativePath)) 0x59b850);
char(&byte_59B958)[260] = * ((decltype(&byte_59B958)) 0x59b958);
__int16& selectedGameTypeParam = * ((decltype(&selectedGameTypeParam)) 0x59ba5c);
void *& dword_59BA60 = * ((decltype(&dword_59BA60)) 0x59ba60);
GameType& selectedGameType = * ((decltype(&selectedGameType)) 0x59ba64);
char& byte_59BA65 = * ((decltype(&byte_59BA65)) 0x59ba65);
char(&byte_59BA68)[260] = * ((decltype(&byte_59BA68)) 0x59ba68);
char& byte_59BB6C = * ((decltype(&byte_59BB6C)) 0x59bb6c);
char(&CurrentMapFolder)[260] = * ((decltype(&CurrentMapFolder)) 0x59bb70);
dialog *& custom_game_submode = * ((decltype(&custom_game_submode)) 0x59bc74);
dialog *& map_listbox = * ((decltype(&map_listbox)) 0x59bc7c);
dialog *& custom_game_mode = * ((decltype(&custom_game_mode)) 0x59bc80);
char(&menuMapFileName)[260] = * ((decltype(&menuMapFileName)) 0x59bc88);
int& dword_59BD8C = * ((decltype(&dword_59BD8C)) 0x59bd8c);
HGDIOBJ& ho = * ((decltype(&ho)) 0x59bd90);
int& dword_59BD94 = * ((decltype(&dword_59BD94)) 0x59bd94);
HGDIOBJ& dword_59BD98 = * ((decltype(&dword_59BD98)) 0x59bd98);
void *& dword_59BD9C = * ((decltype(&dword_59BD9C)) 0x59bd9c);
int& dword_59BDA0 = * ((decltype(&dword_59BDA0)) 0x59bda0);
int& dword_59BDA4 = * ((decltype(&dword_59BDA4)) 0x59bda4);
byte(&playerForce)[8] = * ((decltype(&playerForce)) 0x59bda8);
PlayerInfo(&LobbyPlayers)[12] = * ((decltype(&LobbyPlayers)) 0x59bdb0);
int(&dword_59BF60)[] = * ((decltype(&dword_59BF60)) 0x59bf60);
int(&dword_59BF64)[] = * ((decltype(&dword_59BF64)) 0x59bf64);
PlayerInfo& dword_59BF68 = * ((decltype(&dword_59BF68)) 0x59bf68);
int& dword_59BF6C = * ((decltype(&dword_59BF6C)) 0x59bf6c);
MapDirEntry *& replay = * ((decltype(&replay)) 0x59bf70);
char(&top_map_listing_dir)[260] = * ((decltype(&top_map_listing_dir)) 0x59bf78);
char *(&MapdataFilenames)[65] = * ((decltype(&MapdataFilenames)) 0x59c080);
__int16& word_59C184 = * ((decltype(&word_59C184)) 0x59c184);
void (__cdecl *&minimapVisionUpdate)() = *((decltype(&minimapVisionUpdate)) 0x59c188);
Bitmap& minimap_surface_no_fog = * ((decltype(&minimap_surface_no_fog)) 0x59c18c);
Bitmap& minimap_surface = * ((decltype(&minimap_surface)) 0x59c194);
__int16& word_59C19C = * ((decltype(&word_59C19C)) 0x59c19c);
void (__cdecl *&minimapSurfaceUpdate)() = *((decltype(&minimapSurfaceUpdate)) 0x59c1a0);
dialog *& dword_59C1A4 = * ((decltype(&dword_59C1A4)) 0x59c1a4);
int& dword_59C1A8 = * ((decltype(&dword_59C1A8)) 0x59c1a8);
void *& blink_grp = * ((decltype(&blink_grp)) 0x59c1ac);
__int16& word_59C1B0 = * ((decltype(&word_59C1B0)) 0x59c1b0);
MinimapSurfaceInfoRelated(&stru_59C1B8)[16] = * ((decltype(&stru_59C1B8)) 0x59c1b8);
int& dword_59C2B8 = * ((decltype(&dword_59C2B8)) 0x59c2b8);
char(&byte_59C2C0)[] = * ((decltype(&byte_59C2C0)) 0x59c2c0);
char(&byte_59C3C0)[256] = * ((decltype(&byte_59C3C0)) 0x59c3c0);
char(&byte_59C4C0)[256] = * ((decltype(&byte_59C4C0)) 0x59c4c0);
char(&byte_59C5C0)[256] = * ((decltype(&byte_59C5C0)) 0x59c5c0);
PALETTEENTRY(&stru_59C6C0)[256] = * ((decltype(&stru_59C6C0)) 0x59c6c0);
byte(&byte_59CAC0)[152] = * ((decltype(&byte_59CAC0)) 0x59cac0);
bool& HasMegatileUpdate = * ((decltype(&HasMegatileUpdate)) 0x59cb58);
dialog *& minimap_Dlg = * ((decltype(&minimap_Dlg)) 0x59cb5c);
char(&byte_59CB60)[] = * ((decltype(&byte_59CB60)) 0x59cb60);
int(&dword_59CB64)[] = * ((decltype(&dword_59CB64)) 0x59cb64);
dialog *& minimap_dialog = * ((decltype(&minimap_dialog)) 0x59cc60);
int& minimap_surface_height = * ((decltype(&minimap_surface_height)) 0x59cc64);
__int16& word_59CC68 = * ((decltype(&word_59CC68)) 0x59cc68);
__int16& word_59CC6C = * ((decltype(&word_59CC6C)) 0x59cc6c);
__int16& word_59CC70 = * ((decltype(&word_59CC70)) 0x59cc70);
int& minimap_surface_width = * ((decltype(&minimap_surface_width)) 0x59cc74);
int& countdownTimeRemaining = * ((decltype(&countdownTimeRemaining)) 0x59cc78);
int& dword_59CC7C = * ((decltype(&dword_59CC7C)) 0x59cc7c);
unsigned int& dword_59CC80 = * ((decltype(&dword_59CC80)) 0x59cc80);
int& dword_59CC84 = * ((decltype(&dword_59CC84)) 0x59cc84);
int& countdownTimeTickCount_0 = * ((decltype(&countdownTimeTickCount_0)) 0x59cc88);
int& dword_59CC8C = * ((decltype(&dword_59CC8C)) 0x59cc8c);
int& dword_59CC90 = * ((decltype(&dword_59CC90)) 0x59cc90);
int& dword_59CC94 = * ((decltype(&dword_59CC94)) 0x59cc94);
CUnit *& dword_59CC98 = * ((decltype(&dword_59CC98)) 0x59cc98);
CUnit *& UnitNodeList_VisibleUnit_Last = * ((decltype(&UnitNodeList_VisibleUnit_Last)) 0x59cc9c);
WORD& error_message = * ((decltype(&error_message)) 0x59cca0);
int& dword_59CCA4 = * ((decltype(&dword_59CCA4)) 0x59cca4);
CUnit(&UnitNodeTable)[1700] = * ((decltype(&UnitNodeTable)) 0x59cca8);
int& dword_6283E8 = * ((decltype(&dword_6283E8)) 0x6283e8);
CUnit *& UnitNodeList_HiddenUnit_First = * ((decltype(&UnitNodeList_HiddenUnit_First)) 0x6283ec);
int& UnitNodeTable_UsedNodeCount = * ((decltype(&UnitNodeTable_UsedNodeCount)) 0x6283f0);
CUnit *& UnitNodeList_ScannerSweep_First = * ((decltype(&UnitNodeList_ScannerSweep_First)) 0x6283f4);
CUnit *(&UnitNodeList_PlayerFirstUnit)[12] = * ((decltype(&UnitNodeList_PlayerFirstUnit)) 0x6283f8);
CUnit *& dword_628428 = * ((decltype(&dword_628428)) 0x628428);
CUnit *& UnitNodeList_HiddenUnit_Last = * ((decltype(&UnitNodeList_HiddenUnit_Last)) 0x62842c);
CUnit *& UnitNodeList_VisibleUnit_First = * ((decltype(&UnitNodeList_VisibleUnit_First)) 0x628430);
CUnit *& UnitNodeList_ScannerSweep_Last = * ((decltype(&UnitNodeList_ScannerSweep_Last)) 0x628434);
CUnit *& UnitNodeList_UnusedUnit_First_maybe = * ((decltype(&UnitNodeList_UnusedUnit_First_maybe)) 0x628438);
CUnit *& UnitNodeList_UnusedUnit_Last_maybe = * ((decltype(&UnitNodeList_UnusedUnit_Last_maybe)) 0x62843c);
vr4entry *& VR4Data = * ((decltype(&VR4Data)) 0x628444);
int& ScreenX = * ((decltype(&ScreenX)) 0x628448);
int& map_width_pixels = * ((decltype(&map_width_pixels)) 0x628450);
byte *& GameTerrainCache = * ((decltype(&GameTerrainCache)) 0x628454);
vx4entry *& VX4Data = * ((decltype(&VX4Data)) 0x628458);
int(&dword_62846C)[] = * ((decltype(&dword_62846C)) 0x62846c);
int& ScreenY = * ((decltype(&ScreenY)) 0x628470);
int(&dword_628484)[] = * ((decltype(&dword_628484)) 0x628484);
int(&dword_628488)[] = * ((decltype(&dword_628488)) 0x628488);
int& MoveToX = * ((decltype(&MoveToX)) 0x62848c);
int& parallaxSomethingWidth = * ((decltype(&parallaxSomethingWidth)) 0x628490);
__int16 *& CellMap = * ((decltype(&CellMap)) 0x628494);
int& unknown_x_tile = * ((decltype(&unknown_x_tile)) 0x628498);
int& parallaxSomethingHeight = * ((decltype(&parallaxSomethingHeight)) 0x62849c);
__int16& move_area = * ((decltype(&move_area)) 0x6284a0);
__int16& word_6284A2 = * ((decltype(&word_6284A2)) 0x6284a2);
__int16& word_6284A4 = * ((decltype(&word_6284A4)) 0x6284a4);
__int16& word_6284A6 = * ((decltype(&word_6284A6)) 0x6284a6);
int& MoveToY = * ((decltype(&MoveToY)) 0x6284a8);
int& unknown_y_tile = * ((decltype(&unknown_y_tile)) 0x6284ac);
int& unknown_y_pixel = * ((decltype(&unknown_y_pixel)) 0x6284b0);
int& map_height_pixels = * ((decltype(&map_height_pixels)) 0x6284b4);
CUnit *(&PlayerSelection)[12] = * ((decltype(&PlayerSelection)) 0x6284b8);
CUnit *(&playersSelections)[8][12] = * ((decltype(&playersSelections)) 0x6284e8);
char(&validation_replay_path)[3072] = * ((decltype(&validation_replay_path)) 0x628668);
char(&league_maybe)[30] = * ((decltype(&league_maybe)) 0x629268);
SpriteTileData& SpritesOnTileRow = * ((decltype(&SpritesOnTileRow)) 0x629288);
char(&byte_629A88)[520] = * ((decltype(&byte_629A88)) 0x629a88);
char(&byte_629C90)[256] = * ((decltype(&byte_629C90)) 0x629c90);
int(&dword_629D74)[] = * ((decltype(&dword_629D74)) 0x629d74);
int& dword_629D90 = * ((decltype(&dword_629D90)) 0x629d90);
CSprite(&SpriteTable)[2500] = * ((decltype(&SpriteTable)) 0x629d98);
int& dword_63FD28 = * ((decltype(&dword_63FD28)) 0x63fd28);
char(&byte_63FD30)[256] = * ((decltype(&byte_63FD30)) 0x63fd30);
__int16(&word_63FE2C)[] = * ((decltype(&word_63FE2C)) 0x63fe2c);
CSprite *& UnusedSprites = * ((decltype(&UnusedSprites)) 0x63fe30);
CSprite *& dword_63FE34 = * ((decltype(&dword_63FE34)) 0x63fe34);
char& byte_63FE38 = * ((decltype(&byte_63FE38)) 0x63fe38);
unsigned __int16(&word_63FE40)[1][8] = * ((decltype(&word_63FE40)) 0x63fe40);
char& byte_63FEC0 = * ((decltype(&byte_63FEC0)) 0x63fec0);
char& byte_63FEC1 = * ((decltype(&byte_63FEC1)) 0x63fec1);
char& byte_63FEC2 = * ((decltype(&byte_63FEC2)) 0x63fec2);
__int16& word_63FEC4 = * ((decltype(&word_63FEC4)) 0x63fec4);
CUnit *& dword_63FEC8 = * ((decltype(&dword_63FEC8)) 0x63fec8);
int& dword_63FECC = * ((decltype(&dword_63FECC)) 0x63fecc);
__int16& word_63FED0 = * ((decltype(&word_63FED0)) 0x63fed0);
int& dword_63FED4 = * ((decltype(&dword_63FED4)) 0x63fed4);
int& dword_63FED8 = * ((decltype(&dword_63FED8)) 0x63fed8);
int(&dword_63FEE0)[] = * ((decltype(&dword_63FEE0)) 0x63fee0);
int(&dword_63FEE4)[] = * ((decltype(&dword_63FEE4)) 0x63fee4);
int(&dword_63FEEC)[] = * ((decltype(&dword_63FEEC)) 0x63feec);
int& dword_63FEF4 = * ((decltype(&dword_63FEF4)) 0x63fef4);
int& dword_63FF2C = * ((decltype(&dword_63FF2C)) 0x63ff2c);
char& byte_63FF30 = * ((decltype(&byte_63FF30)) 0x63ff30);
CUnit *& dword_63FF34 = * ((decltype(&dword_63FF34)) 0x63ff34);
CUnit *& dword_63FF38 = * ((decltype(&dword_63FF38)) 0x63ff38);
CUnit *& dword_63FF3C = * ((decltype(&dword_63FF3C)) 0x63ff3c);
int& dword_63FF40 = * ((decltype(&dword_63FF40)) 0x63ff40);
int& CanUpdatePoweredStatus = * ((decltype(&CanUpdatePoweredStatus)) 0x63ff44);
int& dword_63FF48 = * ((decltype(&dword_63FF48)) 0x63ff48);
int& dword_63FF4C = * ((decltype(&dword_63FF4C)) 0x63ff4c);
int& units_recalled = * ((decltype(&units_recalled)) 0x63ff50);
CUnit *& UnitNodeList_PsiFieldProvider_First = * ((decltype(&UnitNodeList_PsiFieldProvider_First)) 0x63ff54);
int& dword_63FF58 = * ((decltype(&dword_63FF58)) 0x63ff58);
CUnit *& dword_63FF5C = * ((decltype(&dword_63FF5C)) 0x63ff5c);
char(&byte_63FF60)[] = * ((decltype(&byte_63FF60)) 0x63ff60);
char(&byte_63FF61)[] = * ((decltype(&byte_63FF61)) 0x63ff61);
char(&byte_63FF62)[] = * ((decltype(&byte_63FF62)) 0x63ff62);
char(&byte_63FF63)[] = * ((decltype(&byte_63FF63)) 0x63ff63);
PlayerAlliance& stru_63FF64 = * ((decltype(&stru_63FF64)) 0x63ff64);
char& byte_63FF70 = * ((decltype(&byte_63FF70)) 0x63ff70);
__int16& word_63FF74 = * ((decltype(&word_63FF74)) 0x63ff74);
u16(&terran_sfx_related)[413] = * ((decltype(&terran_sfx_related)) 0x63ff78);
u16(&zerg_sfx_related)[327] = * ((decltype(&zerg_sfx_related)) 0x6402b8);
int& selectionSoundCounter = * ((decltype(&selectionSoundCounter)) 0x640548);
u16(&protoss_sfx_related)[396] = * ((decltype(&protoss_sfx_related)) 0x640550);
int& dword_64086C = * ((decltype(&dword_64086C)) 0x64086c);
int& dword_640870 = * ((decltype(&dword_640870)) 0x640870);
int& dword_640874 = * ((decltype(&dword_640874)) 0x640874);
int& dword_640878 = * ((decltype(&dword_640878)) 0x640878);
int& dword_64087C = * ((decltype(&dword_64087C)) 0x64087c);
int& is_placing_building = * ((decltype(&is_placing_building)) 0x640880);
int& isPlacingAddon = * ((decltype(&isPlacingAddon)) 0x640884);
UnitType& placeBuildBaseType = * ((decltype(&placeBuildBaseType)) 0x640888);
UnitType& placeBuildingUnitType = * ((decltype(&placeBuildingUnitType)) 0x64088a);
char& _placementRelated = * ((decltype(&_placementRelated)) 0x64088c);
char& byte_64088D = * ((decltype(&byte_64088D)) 0x64088d);
Position& placeBuilding = * ((decltype(&placeBuilding)) 0x640890);
char(&byte_640898)[96] = * ((decltype(&byte_640898)) 0x640898);
char(&byte_6408F8)[96] = * ((decltype(&byte_6408F8)) 0x6408f8);
int& placeBuildingMessageId = * ((decltype(&placeBuildingMessageId)) 0x640958);
__int16(&word_64095C)[] = * ((decltype(&word_64095C)) 0x64095c);
char(&algn_64095E)[2] = * ((decltype(&algn_64095E)) 0x64095e);
struct_0(&placement_boxes)[2] = * ((decltype(&placement_boxes)) 0x640960);
PlayerInfo(&playerReplayWatchers)[12] = * ((decltype(&playerReplayWatchers)) 0x640970);
int& Chat_IncrementY = * ((decltype(&Chat_IncrementY)) 0x640b20);
int(&chat_line_expiration)[12] = * ((decltype(&chat_line_expiration)) 0x640b24);
int& info_message_remove_tick = * ((decltype(&info_message_remove_tick)) 0x640b54);
u8& Chat_NextLine = * ((decltype(&Chat_NextLine)) 0x640b58);
Chat_TextLine(&Chat_GameText)[13] = * ((decltype(&Chat_GameText)) 0x640b60);
u8(&Chat_ColorBytes)[13] = * ((decltype(&Chat_ColorBytes)) 0x641674);
char(&Chat_LineFlags)[13] = * ((decltype(&Chat_LineFlags)) 0x641684);
char(&tritarget_command_args)[3] = * ((decltype(&tritarget_command_args)) 0x641691);
char& is_placing_order = * ((decltype(&is_placing_order)) 0x641694);
int& COrderCount = * ((decltype(&COrderCount)) 0x641698);
COrder *& dword_64B2E0 = * ((decltype(&dword_64B2E0)) 0x64b2e0);
COrder *& dword_64B2E4 = * ((decltype(&dword_64B2E4)) 0x64b2e4);
CBullet(&BulletNodeTable)[100] = * ((decltype(&BulletNodeTable)) 0x64b2e8);
int& dword_64DEA8 = * ((decltype(&dword_64DEA8)) 0x64dea8);
CBullet *& BulletNodeTable_LastElement = * ((decltype(&BulletNodeTable_LastElement)) 0x64deac);
CUnit *& dword_64DEB0 = * ((decltype(&dword_64DEB0)) 0x64deb0);
int& unknown_air_splash_related_unit_count = * ((decltype(&unknown_air_splash_related_unit_count)) 0x64deb4);
int& isInGroundSplashProc = * ((decltype(&isInGroundSplashProc)) 0x64deb8);
int& bullet_count = * ((decltype(&bullet_count)) 0x64debc);
int& dword_64DEC0 = * ((decltype(&dword_64DEC0)) 0x64dec0);
CBullet *& BulletNodeTable_FirstElement = * ((decltype(&BulletNodeTable_FirstElement)) 0x64dec4);
struc_64DEC8(&stru_64DEC8)[32] = * ((decltype(&stru_64DEC8)) 0x64dec8);
int& dword_64EEC8 = * ((decltype(&dword_64EEC8)) 0x64eec8);
CUnit *& bulletBounceMissileSource = * ((decltype(&bulletBounceMissileSource)) 0x64eecc);
CUnit *& bulletBounceMissileTarget = * ((decltype(&bulletBounceMissileTarget)) 0x64eed0);
CUnit *& bulletBounceMissileNext = * ((decltype(&bulletBounceMissileNext)) 0x64eed4);
CBullet *& first_free_bullet = * ((decltype(&first_free_bullet)) 0x64eed8);
CBullet *& last_free_bullet = * ((decltype(&last_free_bullet)) 0x64eedc);
CUnit& target = * ((decltype(&target)) 0x64eee0);
__int16& word_650970 = * ((decltype(&word_650970)) 0x650970);
EndgameState(&endgame_state)[8] = * ((decltype(&endgame_state)) 0x650974);
__int16& word_65097C = * ((decltype(&word_65097C)) 0x65097c);
int(&dword_650980)[8] = * ((decltype(&dword_650980)) 0x650980);
__int16& word_6509A0 = * ((decltype(&word_6509A0)) 0x6509a0);
char(&active_players)[8] = * ((decltype(&active_players)) 0x6509a4);
TriggerListEntry *& dword_6509AC = * ((decltype(&dword_6509AC)) 0x6509ac);
int& active_trigger_player = * ((decltype(&active_trigger_player)) 0x6509b0);
char& byte_6509B4 = * ((decltype(&byte_6509B4)) 0x6509b4);
_BYTE(&byte_6509B8)[8] = * ((decltype(&byte_6509B8)) 0x6509b8);
__int16& word_6509C0 = * ((decltype(&word_6509C0)) 0x6509c0);
int& IS_GAME_PAUSED = * ((decltype(&IS_GAME_PAUSED)) 0x6509c4);
int(&dword_6509C8)[] = * ((decltype(&dword_6509C8)) 0x6509c8);
__int16& word_6509CC = * ((decltype(&word_6509CC)) 0x6509cc);
__int16& word_6509CE = * ((decltype(&word_6509CE)) 0x6509ce);
CThingy *& dword_6509D0 = * ((decltype(&dword_6509D0)) 0x6509d0);
CThingy(&stru_6509D8)[500] = * ((decltype(&stru_6509D8)) 0x6509d8);
CThingy *& ThingyList_UsedFirst = * ((decltype(&ThingyList_UsedFirst)) 0x652918);
CThingy *& dword_65291C = * ((decltype(&dword_65291C)) 0x65291c);
bool& wantThingyUpdate = * ((decltype(&wantThingyUpdate)) 0x652920);
CThingy(&stru_652928)[500] = * ((decltype(&stru_652928)) 0x652928);
CThingy *& dword_654868 = * ((decltype(&dword_654868)) 0x654868);
CThingy *& dword_65486C = * ((decltype(&dword_65486C)) 0x65486c);
CThingy *& dword_654870 = * ((decltype(&dword_654870)) 0x654870);
CThingy *& first_lone_sprite = * ((decltype(&first_lone_sprite)) 0x654874);
CThingy *& dword_654878 = * ((decltype(&dword_654878)) 0x654878);
CThingy *& dword_65487C = * ((decltype(&dword_65487C)) 0x65487c);
char(&TurnBuffer)[512] = * ((decltype(&TurnBuffer)) 0x654880);
int(&arraydatabytes)[8] = * ((decltype(&arraydatabytes)) 0x654a80);
unsigned int& sgdwBytesInCmdQueue = * ((decltype(&sgdwBytesInCmdQueue)) 0x654aa0);
int(&dword_654AA8)[512] = * ((decltype(&dword_654AA8)) 0x654aa8);
int& dword_6552A8 = * ((decltype(&dword_6552A8)) 0x6552a8);
u8(&dest)[512] = * ((decltype(&dest)) 0x6552b0);
char& byte_6554B0 = * ((decltype(&byte_6554B0)) 0x6554b0);
int(&arraydata)[9] = * ((decltype(&arraydata)) 0x6554b4);
char(&byte_6554D8)[512] = * ((decltype(&byte_6554D8)) 0x6554d8);
int& dword_6556D8 = * ((decltype(&dword_6556D8)) 0x6556d8);
int& dword_6556DC = * ((decltype(&dword_6556DC)) 0x6556dc);
int& InGame = * ((decltype(&InGame)) 0x6556e0);
int& Latency = * ((decltype(&Latency)) 0x6556e4);
int& dword_6556E8 = * ((decltype(&dword_6556E8)) 0x6556e8);
void (__fastcall *&GameScreenLClickEvent)(dlgEvent *) = *((decltype(&GameScreenLClickEvent)) 0x6556ec);
void (__fastcall *&GameScreenRClickEvent)(dlgEvent *) = *((decltype(&GameScreenRClickEvent)) 0x6556f0);
int& dword_6556F4 = * ((decltype(&dword_6556F4)) 0x6556f4);
int& dword_6556F8 = * ((decltype(&dword_6556F8)) 0x6556f8);
CursorType& word_6556FC = * ((decltype(&word_6556FC)) 0x6556fc);
char(&Upgrade_MaxRepeats)[61] = * ((decltype(&Upgrade_MaxRepeats)) 0x655700);
__int16(&Upgrade_MineralCostBase)[61] = * ((decltype(&Upgrade_MineralCostBase)) 0x655740);
__int16(&Upgrade_GasCostFactor)[61] = * ((decltype(&Upgrade_GasCostFactor)) 0x6557c0);
__int16(&Upgrade_GasCostBase)[61] = * ((decltype(&Upgrade_GasCostBase)) 0x655840);
__int16(&Upgrade_Unknown)[61] = * ((decltype(&Upgrade_Unknown)) 0x6558c0);
__int16(&Upgrade_TimeCostFactor)[61] = * ((decltype(&Upgrade_TimeCostFactor)) 0x655940);
__int16(&Upgrade_MineralCostFactor)[61] = * ((decltype(&Upgrade_MineralCostFactor)) 0x6559c0);
__int16(&Upgrade_Label)[61] = * ((decltype(&Upgrade_Label)) 0x655a40);
__int16(&Upgrade_Icon)[61] = * ((decltype(&Upgrade_Icon)) 0x655ac0);
char(&Upgrade_IsBroodWarPnly)[61] = * ((decltype(&Upgrade_IsBroodWarPnly)) 0x655b3c);
__int16(&Upgrade_TimeCostBase)[61] = * ((decltype(&Upgrade_TimeCostBase)) 0x655b80);
char(&Upgrade_Race)[61] = * ((decltype(&Upgrade_Race)) 0x655bfc);
int& dword_655C3C = * ((decltype(&dword_655C3C)) 0x655c3c);
Bitmap& stru_655C40 = * ((decltype(&stru_655C40)) 0x655c40);
int& dword_655C48 = * ((decltype(&dword_655C48)) 0x655c48);
bounds& stru_655C4C = * ((decltype(&stru_655C4C)) 0x655c4c);
int(&dword_655C58)[110] = * ((decltype(&dword_655C58)) 0x655c58);
char(&byte_655E10)[110] = * ((decltype(&byte_655E10)) 0x655e10);
int(&dword_655E80)[110] = * ((decltype(&dword_655E80)) 0x655e80);
char(&byte_656038)[110] = * ((decltype(&byte_656038)) 0x656038);
char(&byte_6560A8)[110] = * ((decltype(&byte_6560A8)) 0x6560a8);
char(&byte_656118)[110] = * ((decltype(&byte_656118)) 0x656118);
int& dword_656188 = * ((decltype(&dword_656188)) 0x656188);
int& dword_65618C = * ((decltype(&dword_65618C)) 0x65618c);
int& dword_656190 = * ((decltype(&dword_656190)) 0x656190);
__int16(&Tech_Unknown)[44] = * ((decltype(&Tech_Unknown)) 0x656198);
__int16(&Tech_GasCost)[44] = * ((decltype(&Tech_GasCost)) 0x6561f0);
__int16(&Tech_MineralCost)[44] = * ((decltype(&Tech_MineralCost)) 0x656248);
__int16(&Tech_LabelIndex)[44] = * ((decltype(&Tech_LabelIndex)) 0x6562a0);
__int16(&Tech_Unknown2)[44] = * ((decltype(&Tech_Unknown2)) 0x6562f8);
__int16(&Tech_EnergyCost)[44] = * ((decltype(&Tech_EnergyCost)) 0x656380);
__int16(&Tech_ResearchTime)[44] = * ((decltype(&Tech_ResearchTime)) 0x6563d8);
__int16(&Tech_Icon)[44] = * ((decltype(&Tech_Icon)) 0x656430);
u8(&Weapon_DamageFactor)[130] = * ((decltype(&Weapon_DamageFactor)) 0x6564e0);
u16(&Weapon_TargetErrorMessage)[130] = * ((decltype(&Weapon_TargetErrorMessage)) 0x656568);
WeaponBehavior(&Weapon_Behavior)[130] = * ((decltype(&Weapon_Behavior)) 0x656670);
char(&Weapon_ExplosionType)[130] = * ((decltype(&Weapon_ExplosionType)) 0x6566f8);
u16(&Weapon_Icon)[130] = * ((decltype(&Weapon_Icon)) 0x656780);
__int16(&Weapon_InnerSplashRadius)[130] = * ((decltype(&Weapon_InnerSplashRadius)) 0x656888);
u8(&Weapon_AttackDirection)[130] = * ((decltype(&Weapon_AttackDirection)) 0x656990);
int(&Weapon_MinRange)[130] = * ((decltype(&Weapon_MinRange)) 0x656a18);
u8(&Weapon_YOffset)[130] = * ((decltype(&Weapon_YOffset)) 0x656c20);
int(&Weapon_Graphic)[130] = * ((decltype(&Weapon_Graphic)) 0x656ca8);
u16(&Weapon_DamageAmount)[130] = * ((decltype(&Weapon_DamageAmount)) 0x656eb0);
u8(&Weapon_DamageCooldown)[130] = * ((decltype(&Weapon_DamageCooldown)) 0x656fb8);
char(&Weapon_RemoveAfter)[130] = * ((decltype(&Weapon_RemoveAfter)) 0x657040);
__int16(&Weapon_MedianSplashRadius)[130] = * ((decltype(&Weapon_MedianSplashRadius)) 0x6570c8);
char(&Weapon_Upgrade)[130] = * ((decltype(&Weapon_Upgrade)) 0x6571d0);
DamageType(&Weapon_DamageType)[130] = * ((decltype(&Weapon_DamageType)) 0x657258);
__int16(&Weapon_Label)[130] = * ((decltype(&Weapon_Label)) 0x6572e0);
char(&Weapon_TechHint)[130] = * ((decltype(&Weapon_TechHint)) 0x6573e8);
int(&Weapon_MaxRange)[130] = * ((decltype(&Weapon_MaxRange)) 0x657470);
__int16(&Weapon_DamageBonus)[130] = * ((decltype(&Weapon_DamageBonus)) 0x657678);
u16(&Weapon_OuterSplashRadius)[132] = * ((decltype(&Weapon_OuterSplashRadius)) 0x657780);
u8(&Weapon_LaunchSpin)[130] = * ((decltype(&Weapon_LaunchSpin)) 0x657888);
u8(&Weapon_XOffset)[130] = * ((decltype(&Weapon_XOffset)) 0x657910);
WeaponTargetFlags(&Weapon_TargetFlags)[130] = * ((decltype(&Weapon_TargetFlags)) 0x657998);
char& byte_657A9C = * ((decltype(&byte_657A9C)) 0x657a9c);
int(&dword_657AA0)[1024] = * ((decltype(&dword_657AA0)) 0x657aa0);
int& dword_658AA0 = * ((decltype(&dword_658AA0)) 0x658aa0);
int (*&dword_658AA4)(void) = *((decltype(&dword_658AA4)) 0x658aa4);
int& dword_658AA8 = * ((decltype(&dword_658AA8)) 0x658aa8);
int& dword_658AAC = * ((decltype(&dword_658AAC)) 0x658aac);
int& dword_658AB0 = * ((decltype(&dword_658AB0)) 0x658ab0);
int& dword_658AB4 = * ((decltype(&dword_658AB4)) 0x658ab4);
int& dword_658AB8 = * ((decltype(&dword_658AB8)) 0x658ab8);
int& dword_658ABC = * ((decltype(&dword_658ABC)) 0x658abc);
char& byte_658AC0 = * ((decltype(&byte_658AC0)) 0x658ac0);
int(&spkLayer)[5] = * ((decltype(&spkLayer)) 0x658ac4);
void *& spkHandle = * ((decltype(&spkHandle)) 0x658ad8);
void *& dword_658ADC = * ((decltype(&dword_658ADC)) 0x658adc);
int& dword_658AE0 = * ((decltype(&dword_658AE0)) 0x658ae0);
int& dword_658AE4 = * ((decltype(&dword_658AE4)) 0x658ae4);
int(&dword_658AE8)[] = * ((decltype(&dword_658AE8)) 0x658ae8);
int& dword_658AEC = * ((decltype(&dword_658AEC)) 0x658aec);
int& dword_658AF0 = * ((decltype(&dword_658AF0)) 0x658af0);
int& dword_658AF4 = * ((decltype(&dword_658AF4)) 0x658af4);
int& dword_658AF8 = * ((decltype(&dword_658AF8)) 0x658af8);
int& dword_658AFC = * ((decltype(&dword_658AFC)) 0x658afc);
int& dword_658B00 = * ((decltype(&dword_658B00)) 0x658b00);
int& dword_658B04 = * ((decltype(&dword_658B04)) 0x658b04);
int& dword_658B08 = * ((decltype(&dword_658B08)) 0x658b08);
int& dword_658B0C = * ((decltype(&dword_658B0C)) 0x658b0c);
int(&dword_658B10)[1024] = * ((decltype(&dword_658B10)) 0x658b10);
struc_659B10(&stru_659B10)[1024] = * ((decltype(&stru_659B10)) 0x659b10);
int& dword_65EB10 = * ((decltype(&dword_65EB10)) 0x65eb10);
int& dword_65EB14 = * ((decltype(&dword_65EB14)) 0x65eb14);
int& dword_65EB18 = * ((decltype(&dword_65EB18)) 0x65eb18);
int& dword_65EB1C = * ((decltype(&dword_65EB1C)) 0x65eb1c);
int& dword_65EB20 = * ((decltype(&dword_65EB20)) 0x65eb20);
__int16& word_65EB26 = * ((decltype(&word_65EB26)) 0x65eb26);
int& dword_65EB28 = * ((decltype(&dword_65EB28)) 0x65eb28);
char& byte_65EB2C = * ((decltype(&byte_65EB2C)) 0x65eb2c);
char& byte_65EB2D = * ((decltype(&byte_65EB2D)) 0x65eb2d);
char& byte_65EB2E = * ((decltype(&byte_65EB2E)) 0x65eb2e);
__int16(&word_65EB30)[] = * ((decltype(&word_65EB30)) 0x65eb30);
char(&byte_65EB32)[] = * ((decltype(&byte_65EB32)) 0x65eb32);
char(&byte_65EB34)[] = * ((decltype(&byte_65EB34)) 0x65eb34);
int& IsMultiplayer = * ((decltype(&IsMultiplayer)) 0x65fbf0);
int& dword_65FBF4 = * ((decltype(&dword_65FBF4)) 0x65fbf4);
int& dword_65FBF8 = * ((decltype(&dword_65FBF8)) 0x65fbf8);
int& dword_65FBFC = * ((decltype(&dword_65FBFC)) 0x65fbfc);
int& dword_65FC00 = * ((decltype(&dword_65FC00)) 0x65fc00);
int& dword_65FC04 = * ((decltype(&dword_65FC04)) 0x65fc04);
int& dword_65FC08 = * ((decltype(&dword_65FC08)) 0x65fc08);
int& dword_65FC0C = * ((decltype(&dword_65FC0C)) 0x65fc0c);
char& byte_65FC10 = * ((decltype(&byte_65FC10)) 0x65fc10);
char& byte_65FC11 = * ((decltype(&byte_65FC11)) 0x65fc11);
u8(&Unit_MaxAirHits)[228] = * ((decltype(&Unit_MaxAirHits)) 0x65fc18);
u16(&Unit_GasCost)[228] = * ((decltype(&Unit_GasCost)) 0x65fd00);
u8(&Unit_ArmorAmount)[228] = * ((decltype(&Unit_ArmorAmount)) 0x65fec8);
char(&byte_65FFAC)[] = * ((decltype(&byte_65FFAC)) 0x65ffac);
u16(&Unit_FirstWhatSound)[228] = * ((decltype(&Unit_FirstWhatSound)) 0x65ffb0);
u8(&Unit_AIInterval)[228] = * ((decltype(&Unit_AIInterval)) 0x660178);
u16(&Unit_MapStringID)[228] = * ((decltype(&Unit_MapStringID)) 0x660260);
u16(&Unit_TimeCost)[228] = * ((decltype(&Unit_TimeCost)) 0x660428);
u8(&Unit_Direction)[228] = * ((decltype(&Unit_Direction)) 0x6605f0);
u8(&Unit_BroodwarOnly)[228] = * ((decltype(&Unit_BroodwarOnly)) 0x6606d8);
__int16(&Unit_SubUnit)[228] = * ((decltype(&Unit_SubUnit)) 0x6607c0);
u8(&Unit_SpaceProvided)[228] = * ((decltype(&Unit_SpaceProvided)) 0x660988);
u16(&Unit_Requirements)[228] = * ((decltype(&Unit_Requirements)) 0x660a70);
u16(&Unit_SubUnit2)[228] = * ((decltype(&Unit_SubUnit2)) 0x660c38);
u16(&Unit_MaxShieldPoints)[228] = * ((decltype(&Unit_MaxShieldPoints)) 0x660e00);
u8(&Unit_Unknown)[228] = * ((decltype(&Unit_Unknown)) 0x660fc8);
u32(&Unit_ConstructionAnimation)[228] = * ((decltype(&Unit_ConstructionAnimation)) 0x6610b0);
u16(&Unit_LastYesSound)[106] = * ((decltype(&Unit_LastYesSound)) 0x661440);
u16(&Unit_AvailabilityFlags)[228] = * ((decltype(&Unit_AvailabilityFlags)) 0x661518);
WeaponType(&Unit_AirWeapon)[228] = * ((decltype(&Unit_AirWeapon)) 0x6616e0);
UnitDimentions(&Unit_Dimensions)[228] = * ((decltype(&Unit_Dimensions)) 0x6617c8);
u16(&Unit_LastAnnoyedSound)[106] = * ((decltype(&Unit_LastAnnoyedSound)) 0x661ee8);
u16(&Unit_ReadySound)[106] = * ((decltype(&Unit_ReadySound)) 0x661fc0);
u8(&Unit_RightClickAction)[228] = * ((decltype(&Unit_RightClickAction)) 0x662098);
u8(&Unit_SizeType)[228] = * ((decltype(&Unit_SizeType)) 0x662180);
Order(&Unit_HumanAiIdleOrder)[228] = * ((decltype(&Unit_HumanAiIdleOrder)) 0x662268);
u32(&Unit_MaxHitPoints)[228] = * ((decltype(&Unit_MaxHitPoints)) 0x662350);
u16(&Unit_AddonOffset)[192] = * ((decltype(&Unit_AddonOffset)) 0x6626e0);
points(&Unit_Placement)[228] = * ((decltype(&Unit_Placement)) 0x662860);
u16(&Unit_LastWhatSound)[228] = * ((decltype(&Unit_LastWhatSound)) 0x662bf0);
u8(&Unit_SeekRange)[228] = * ((decltype(&Unit_SeekRange)) 0x662db8);
Order(&Unit_ComputerAiIdleOrder)[228] = * ((decltype(&Unit_ComputerAiIdleOrder)) 0x662ea0);
u16(&Unit_IdlePortrait)[228] = * ((decltype(&Unit_IdlePortrait)) 0x662f88);
u8(&Unit_Elevation)[228] = * ((decltype(&Unit_Elevation)) 0x663150);
u8(&Unit_SightRange)[228] = * ((decltype(&Unit_SightRange)) 0x663238);
Order(&Unit_AttackUnitOrder)[228] = * ((decltype(&Unit_AttackUnitOrder)) 0x663320);
char& byte_66333E = * ((decltype(&byte_66333E)) 0x66333e);
Order& order_id = * ((decltype(&order_id)) 0x66333f);
char& byte_663369 = * ((decltype(&byte_663369)) 0x663369);
char& byte_663375 = * ((decltype(&byte_663375)) 0x663375);
u16(&Unit_BuildScore)[228] = * ((decltype(&Unit_BuildScore)) 0x663408);
u8(&Unit_ArmorUpgrade)[228] = * ((decltype(&Unit_ArmorUpgrade)) 0x6635d0);
WeaponType(&Unit_GroundWeapon)[228] = * ((decltype(&Unit_GroundWeapon)) 0x6636b8);
u8(&Unit_GroupFlags)[228] = * ((decltype(&Unit_GroupFlags)) 0x6637a0);
u16(&Unit_MineralCost)[228] = * ((decltype(&Unit_MineralCost)) 0x663888);
u8(&Unit_AttackMoveOrder)[228] = * ((decltype(&Unit_AttackMoveOrder)) 0x663a50);
u16(&Unit_FirstAnnoyedSound)[106] = * ((decltype(&Unit_FirstAnnoyedSound)) 0x663b38);
u16(&Unit_FirstYesSound)[106] = * ((decltype(&Unit_FirstYesSound)) 0x663c10);
u8(&Unit_SupplyRequired)[228] = * ((decltype(&Unit_SupplyRequired)) 0x663ce8);
u8(&Unit_SubLabel)[228] = * ((decltype(&Unit_SubLabel)) 0x663dd0);
u16(&Unit_DestroyScore)[228] = * ((decltype(&Unit_DestroyScore)) 0x663eb8);
UnitPrototypeFlags(&Unit_PrototypeFlags)[228] = * ((decltype(&Unit_PrototypeFlags)) 0x664080);
u8(&Unit_SpaceRequired)[228] = * ((decltype(&Unit_SpaceRequired)) 0x664410);
FlingyID(&Unit_Graphic)[228] = * ((decltype(&Unit_Graphic)) 0x6644f8);
u8(&Unit_MaxGroundHits)[228] = * ((decltype(&Unit_MaxGroundHits)) 0x6645e0);
u8(&Unit_SupplyProvided)[228] = * ((decltype(&Unit_SupplyProvided)) 0x6646c8);
u8(&Unit_ShieldsEnabled)[228] = * ((decltype(&Unit_ShieldsEnabled)) 0x6647b0);
Order(&Unit_ReturnToIdleOrder)[228] = * ((decltype(&Unit_ReturnToIdleOrder)) 0x664898);
u16(&Units_InfestChangeUnit)[96] = * ((decltype(&Units_InfestChangeUnit)) 0x664980);
char(&Orders_Unknown4)[189] = * ((decltype(&Orders_Unknown4)) 0x664a40);
char(&Orders_UseWeaponTargeting)[189] = * ((decltype(&Orders_UseWeaponTargeting)) 0x664b00);
char(&Orders_Unused12)[189] = * ((decltype(&Orders_Unused12)) 0x664bc0);
char(&Orders_Unknown11)[189] = * ((decltype(&Orders_Unknown11)) 0x664c80);
char(&Orders_IscriptAnimation)[189] = * ((decltype(&Orders_IscriptAnimation)) 0x664d40);
Tech(&Orders_TechUsed)[189] = * ((decltype(&Orders_TechUsed)) 0x664e00);
__int16(&Orders_HilightedIcon)[189] = * ((decltype(&Orders_HilightedIcon)) 0x664ec0);
char(&Orders_CanBeInterrupted)[189] = * ((decltype(&Orders_CanBeInterrupted)) 0x665040);
char(&Orders_Unknown7)[189] = * ((decltype(&Orders_Unknown7)) 0x665100);
char(&Orders_Unknown9)[189] = * ((decltype(&Orders_Unknown9)) 0x6651c0);
__int16(&Orders_Label)[189] = * ((decltype(&Orders_Label)) 0x665280);
char(&Orders_ObscuredOrder)[189] = * ((decltype(&Orders_ObscuredOrder)) 0x665400);
char(&Orders_CanBeObstructed)[189] = * ((decltype(&Orders_CanBeObstructed)) 0x6654c0);
__int16(&Orders_Unknown17)[189] = * ((decltype(&Orders_Unknown17)) 0x665580);
char(&Orders_CanBeQueued)[189] = * ((decltype(&Orders_CanBeQueued)) 0x665700);
char(&Orders_Unused5)[189] = * ((decltype(&Orders_Unused5)) 0x6657c0);
WeaponType(&Orders_TargetingWeapon)[189] = * ((decltype(&Orders_TargetingWeapon)) 0x665880);
char(&Orders_Unused2)[189] = * ((decltype(&Orders_Unused2)) 0x665940);
char(&Orders_Unused3)[189] = * ((decltype(&Orders_Unused3)) 0x665a00);
char(&Sprites_SelectionCircle)[387] = * ((decltype(&Sprites_SelectionCircle)) 0x665ac0);
char(&Sprites_IsVisible)[517] = * ((decltype(&Sprites_IsVisible)) 0x665c48);
char(&Sprites_HealthBarSize)[387] = * ((decltype(&Sprites_HealthBarSize)) 0x665e50);
char(&Sprites_SelectionCircleVPos)[387] = * ((decltype(&Sprites_SelectionCircleVPos)) 0x665fd8);
unsigned __int16(&Sprites_Image)[517] = * ((decltype(&Sprites_Image)) 0x666160);
char(&Sprites_Unknown)[517] = * ((decltype(&Sprites_Unknown)) 0x666570);
int(&Images_LandingDustLO)[999] = * ((decltype(&Images_LandingDustLO)) 0x666778);
u8(&Image_DrawIfCloaked)[999] = * ((decltype(&Image_DrawIfCloaked)) 0x667718);
int(&Images_SpecialOverlayLO)[999] = * ((decltype(&Images_SpecialOverlayLO)) 0x667b00);
int(&Images_GrpFile)[999] = * ((decltype(&Images_GrpFile)) 0x668aa0);
u8(&Images_Remapping)[999] = * ((decltype(&Images_Remapping)) 0x669a40);
u8(&Image_DrawFunction)[999] = * ((decltype(&Image_DrawFunction)) 0x669e28);
int(&Images_InjuryOverlayLO)[999] = * ((decltype(&Images_InjuryOverlayLO)) 0x66a210);
int(&Images_AttackOverlayLO)[999] = * ((decltype(&Images_AttackOverlayLO)) 0x66b1b0);
u8(&Images_IsClickable)[999] = * ((decltype(&Images_IsClickable)) 0x66c150);
int(&Images_ShieldOverlayLO)[999] = * ((decltype(&Images_ShieldOverlayLO)) 0x66c538);
u8(&Images_UseFullIscript)[999] = * ((decltype(&Images_UseFullIscript)) 0x66d4d8);
int(&Images_LiftOffDustLO)[999] = * ((decltype(&Images_LiftOffDustLO)) 0x66d8c0);
u8(&Images_IsTurnable)[999] = * ((decltype(&Images_IsTurnable)) 0x66e860);
int(&Images_IscriptEntry)[999] = * ((decltype(&Images_IscriptEntry)) 0x66ec48);
char(&byte_66FBE4)[18] = * ((decltype(&byte_66FBE4)) 0x66fbe4);
char& byte_66FBF6 = * ((decltype(&byte_66FBF6)) 0x66fbf6);
char& countdown_seconds = * ((decltype(&countdown_seconds)) 0x66fbf7);
char& countdown_finished_maybe = * ((decltype(&countdown_finished_maybe)) 0x66fbf8);
char& download_percentage = * ((decltype(&download_percentage)) 0x66fbf9);
unsigned __int8& gameState = * ((decltype(&gameState)) 0x66fbfa);
int& countdownTimerInterval = * ((decltype(&countdownTimerInterval)) 0x66fbfc);
int (__stdcall *&SendMapDlCommand)(_DWORD, _DWORD, _DWORD) = *((decltype(&SendMapDlCommand)) 0x66fc00);
char(&mapsFolder)[264] = * ((decltype(&mapsFolder)) 0x66fc08);
char(&byte_66FD10)[260] = * ((decltype(&byte_66FD10)) 0x66fd10);
char& byte_66FE14 = * ((decltype(&byte_66FE14)) 0x66fe14);
int& dword_66FE18 = * ((decltype(&dword_66FE18)) 0x66fe18);
char& byte_66FE1C = * ((decltype(&byte_66FE1C)) 0x66fe1c);
struc_66FE20(&stru_66FE20)[8] = * ((decltype(&stru_66FE20)) 0x66fe20);
int& dword_66FF30 = * ((decltype(&dword_66FF30)) 0x66ff30);
u8(&byte_66FF34)[8] = * ((decltype(&byte_66FF34)) 0x66ff34);
int& dword_66FF3C = * ((decltype(&dword_66FF3C)) 0x66ff3c);
int& dword_66FF40 = * ((decltype(&dword_66FF40)) 0x66ff40);
int& dword_66FF44 = * ((decltype(&dword_66FF44)) 0x66ff44);
int& dword_66FF48 = * ((decltype(&dword_66FF48)) 0x66ff48);
pt& stru_66FF4C = * ((decltype(&stru_66FF4C)) 0x66ff4c);
Box16& stru_66FF50 = * ((decltype(&stru_66FF50)) 0x66ff50);
int& dword_66FF58 = * ((decltype(&dword_66FF58)) 0x66ff58);
char& byte_66FF5C = * ((decltype(&byte_66FF5C)) 0x66ff5c);
int& dword_66FF60 = * ((decltype(&dword_66FF60)) 0x66ff60);
Bitmap& stru_66FF64 = * ((decltype(&stru_66FF64)) 0x66ff64);
dialog *& dword_66FF6C = * ((decltype(&dword_66FF6C)) 0x66ff6c);
int& dword_66FF70 = * ((decltype(&dword_66FF70)) 0x66ff70);
int(&UnitOrderingCount)[] = * ((decltype(&UnitOrderingCount)) 0x66ff74);
UnitFinderData(&UnitOrderingX)[3400] = * ((decltype(&UnitOrderingX)) 0x66ff78);
UnitFinderData(&UnitOrderingY)[3400] = * ((decltype(&UnitOrderingY)) 0x6769b8);
char& byte_67D3F8 = * ((decltype(&byte_67D3F8)) 0x67d3f8);
_DWORD(&dword_67D400)[8002] = * ((decltype(&dword_67D400)) 0x67d400);
int(&dword_685108)[] = * ((decltype(&dword_685108)) 0x685108);
int(&dword_68510C)[] = * ((decltype(&dword_68510C)) 0x68510c);
int& dword_685110 = * ((decltype(&dword_685110)) 0x685110);
int& dword_685114 = * ((decltype(&dword_685114)) 0x685114);
int& dword_685118 = * ((decltype(&dword_685118)) 0x685118);
int& dword_68511C = * ((decltype(&dword_68511C)) 0x68511c);
int& dword_685120 = * ((decltype(&dword_685120)) 0x685120);
int& dword_685124 = * ((decltype(&dword_685124)) 0x685124);
int& dword_685128 = * ((decltype(&dword_685128)) 0x685128);
int& dword_68512C = * ((decltype(&dword_68512C)) 0x68512c);
int& dword_685130 = * ((decltype(&dword_685130)) 0x685130);
int& dword_685134 = * ((decltype(&dword_685134)) 0x685134);
int& dword_685138 = * ((decltype(&dword_685138)) 0x685138);
int& dword_68513C = * ((decltype(&dword_68513C)) 0x68513c);
int& dword_685140 = * ((decltype(&dword_685140)) 0x685140);
int& dword_685144 = * ((decltype(&dword_685144)) 0x685144);
char(&SaveGameFile)[28] = * ((decltype(&SaveGameFile)) 0x685148);
int& dword_685164 = * ((decltype(&dword_685164)) 0x685164);
unsigned __int16& word_685168 = * ((decltype(&word_685168)) 0x685168);
char& byte_68516A = * ((decltype(&byte_68516A)) 0x68516a);
int& dword_68516C = * ((decltype(&dword_68516C)) 0x68516c);
void *& dword_685170 = * ((decltype(&dword_685170)) 0x685170);
int& dword_685174 = * ((decltype(&dword_685174)) 0x685174);
int& dword_685178 = * ((decltype(&dword_685178)) 0x685178);
int& dword_68517C = * ((decltype(&dword_68517C)) 0x68517c);
char& byte_685180 = * ((decltype(&byte_685180)) 0x685180);
int(&completed_unit_counts_at_location)[228][12] = * ((decltype(&completed_unit_counts_at_location)) 0x685188);
int(&all_unit_counts_at_location)[228][12] = * ((decltype(&all_unit_counts_at_location)) 0x687c48);
int(&all_unit_counts)[12] = * ((decltype(&all_unit_counts)) 0x68a708);
int(&dword_68A738)[72] = * ((decltype(&dword_68A738)) 0x68a738);
int(&dword_68A858)[12] = * ((decltype(&dword_68A858)) 0x68a858);
int(&dword_68A888)[72] = * ((decltype(&dword_68A888)) 0x68a888);
int(&dword_68A9A8)[12] = * ((decltype(&dword_68A9A8)) 0x68a9a8);
int(&dword_68A9D8)[156] = * ((decltype(&dword_68A9D8)) 0x68a9d8);
char& byte_68AC48 = * ((decltype(&byte_68AC48)) 0x68ac48);
int& dword_68AC4C = * ((decltype(&dword_68AC4C)) 0x68ac4c);
BYTE *(&dword_68AC50)[4] = * ((decltype(&dword_68AC50)) 0x68ac50);
int& dword_68AC60 = * ((decltype(&dword_68AC60)) 0x68ac60);
int& dword_68AC64 = * ((decltype(&dword_68AC64)) 0x68ac64);
int& dword_68AC68 = * ((decltype(&dword_68AC68)) 0x68ac68);
int& dword_68AC6C = * ((decltype(&dword_68AC6C)) 0x68ac6c);
int& dword_68AC70 = * ((decltype(&dword_68AC70)) 0x68ac70);
char& CanUpdateSelectedUnitPortrait = * ((decltype(&CanUpdateSelectedUnitPortrait)) 0x68ac74);
Bitmap& stru_68AC78 = * ((decltype(&stru_68AC78)) 0x68ac78);
Bitmap& stru_68AC80 = * ((decltype(&stru_68AC80)) 0x68ac80);
const char *& dword_68AC88 = * ((decltype(&dword_68AC88)) 0x68ac88);
dialog *& statport_Dlg = * ((decltype(&statport_Dlg)) 0x68ac8c);
int& dword_68AC90 = * ((decltype(&dword_68AC90)) 0x68ac90);
int& dword_68AC94 = * ((decltype(&dword_68AC94)) 0x68ac94);
dialog *& dword_68AC98 = * ((decltype(&dword_68AC98)) 0x68ac98);
char& byte_68AC9C = * ((decltype(&byte_68AC9C)) 0x68ac9c);
int& dword_68ACA0 = * ((decltype(&dword_68ACA0)) 0x68aca0);
_DWORD& seg_68ACA8 = * ((decltype(&seg_68ACA8)) 0x68aca8);
int& dword_68C0FC = * ((decltype(&dword_68C0FC)) 0x68c0fc);
_DWORD& dword_68C100 = * ((decltype(&dword_68C100)) 0x68c100);
void *& aiscript_bin_data = * ((decltype(&aiscript_bin_data)) 0x68c104);
void *& aiscript_bin = * ((decltype(&aiscript_bin)) 0x68c108);
char(&buff)[52] = * ((decltype(&buff)) 0x68c10c);
dialog *& textbox_bin = * ((decltype(&textbox_bin)) 0x68c140);
char& byte_68C144 = * ((decltype(&byte_68C144)) 0x68c144);
dialog *& current_dialog = * ((decltype(&current_dialog)) 0x68c148);
__int16& word_68C14C = * ((decltype(&word_68C14C)) 0x68c14c);
char(&byte_68C150)[96] = * ((decltype(&byte_68C150)) 0x68c150);
int& CanUpdateCurrentButtonSet = * ((decltype(&CanUpdateCurrentButtonSet)) 0x68c1b0);
dialog *& current_cmdbtn_tooltip_control = * ((decltype(&current_cmdbtn_tooltip_control)) 0x68c1b4);
char& byte_68C1B8 = * ((decltype(&byte_68C1B8)) 0x68c1b8);
__int16& word_68C1BC = * ((decltype(&word_68C1BC)) 0x68c1bc);
void *& cmdbtns_grp = * ((decltype(&cmdbtns_grp)) 0x68c1c0);
__int16& word_68C1C4 = * ((decltype(&word_68C1C4)) 0x68c1c4);
__int16& word_68C1C8 = * ((decltype(&word_68C1C8)) 0x68c1c8);
__int16& word_68C1CC = * ((decltype(&word_68C1CC)) 0x68c1cc);
__int16(&word_68C1D0)[] = * ((decltype(&word_68C1D0)) 0x68c1d0);
__int16& word_68C1D2 = * ((decltype(&word_68C1D2)) 0x68c1d2);
__int16& word_68C1D4 = * ((decltype(&word_68C1D4)) 0x68c1d4);
__int16& word_68C1D6 = * ((decltype(&word_68C1D6)) 0x68c1d6);
__int16& word_68C1D8 = * ((decltype(&word_68C1D8)) 0x68c1d8);
__int16& word_68C1DA = * ((decltype(&word_68C1DA)) 0x68c1da);
__int16& word_68C1DC = * ((decltype(&word_68C1DC)) 0x68c1dc);
__int16& word_68C1DE = * ((decltype(&word_68C1DE)) 0x68c1de);
void *& cmdicons_grp = * ((decltype(&cmdicons_grp)) 0x68c1e0);
char& byte_68C1E4 = * ((decltype(&byte_68C1E4)) 0x68c1e4);
char& statusScreenFunc = * ((decltype(&statusScreenFunc)) 0x68c1e5);
dialog *& ctrl_under_mouse = * ((decltype(&ctrl_under_mouse)) 0x68c1e8);
int& ctrl_under_mouse_val = * ((decltype(&ctrl_under_mouse_val)) 0x68c1ec);
dialog *& stardata_Dlg = * ((decltype(&stardata_Dlg)) 0x68c1f0);
grpHead *& dword_68C1F4 = * ((decltype(&dword_68C1F4)) 0x68c1f4);
char& CanUpdateStatDataDialog = * ((decltype(&CanUpdateStatDataDialog)) 0x68c1f8);
grpHead *& dword_68C1FC = * ((decltype(&dword_68C1FC)) 0x68c1fc);
dialog *& dword_68C200 = * ((decltype(&dword_68C200)) 0x68c200);
void *& wirefram_grp = * ((decltype(&wirefram_grp)) 0x68c204);
char(&byte_68C208)[] = * ((decltype(&byte_68C208)) 0x68c208);
char(&byteShieldStr)[22] = * ((decltype(&byteShieldStr)) 0x68c20a);
dialog *& dword_68C220 = * ((decltype(&dword_68C220)) 0x68c220);
dialog *& stat_f10_Dlg = * ((decltype(&stat_f10_Dlg)) 0x68c224);
RaceId& statfluf_current_race = * ((decltype(&statfluf_current_race)) 0x68c228);
int& dword_68C22C = * ((decltype(&dword_68C22C)) 0x68c22c);
int& dword_68C230 = * ((decltype(&dword_68C230)) 0x68c230);
dialog *& statres_Dlg = * ((decltype(&statres_Dlg)) 0x68c234);
void *& game_icons_grp = * ((decltype(&game_icons_grp)) 0x68c238);
char(&byte_68C23C)[4] = * ((decltype(&byte_68C23C)) 0x68c23c);
char(&byte_68C240)[192] = * ((decltype(&byte_68C240)) 0x68c240);
char& byte_68C300 = * ((decltype(&byte_68C300)) 0x68c300);
int& dword_68C308 = * ((decltype(&dword_68C308)) 0x68c308);
int& dword_68C30C = * ((decltype(&dword_68C30C)) 0x68c30c);
int& dword_68C310 = * ((decltype(&dword_68C310)) 0x68c310);
int& dword_68C314 = * ((decltype(&dword_68C314)) 0x68c314);
int& dword_68C318 = * ((decltype(&dword_68C318)) 0x68c318);
int& dword_68C31C = * ((decltype(&dword_68C31C)) 0x68c31c);
int& dword_68C320 = * ((decltype(&dword_68C320)) 0x68c320);
int& dword_68C324 = * ((decltype(&dword_68C324)) 0x68c324);
int& dword_68C328 = * ((decltype(&dword_68C328)) 0x68c328);
int& dword_68C32C = * ((decltype(&dword_68C32C)) 0x68c32c);
int& dword_68C330 = * ((decltype(&dword_68C330)) 0x68c330);
int& dword_68C334 = * ((decltype(&dword_68C334)) 0x68c334);
int& dword_68C338 = * ((decltype(&dword_68C338)) 0x68c338);
int& dword_68C33C = * ((decltype(&dword_68C33C)) 0x68c33c);
int& dword_68C340 = * ((decltype(&dword_68C340)) 0x68c340);
int& dword_68C344 = * ((decltype(&dword_68C344)) 0x68c344);
char(&byte_68C348)[32] = * ((decltype(&byte_68C348)) 0x68c348);
char(&byte_68C368)[32] = * ((decltype(&byte_68C368)) 0x68c368);
char(&byte_68C388)[32] = * ((decltype(&byte_68C388)) 0x68c388);
char(&byte_68C3A8)[32] = * ((decltype(&byte_68C3A8)) 0x68c3a8);
char(&byte_68C3C8)[32] = * ((decltype(&byte_68C3C8)) 0x68c3c8);
char(&byte_68C3E8)[32] = * ((decltype(&byte_68C3E8)) 0x68c3e8);
char(&byte_68C408)[32] = * ((decltype(&byte_68C408)) 0x68c408);
char(&byte_68C428)[32] = * ((decltype(&byte_68C428)) 0x68c428);
char(&SFXData_MuteVolume)[1144] = * ((decltype(&SFXData_MuteVolume)) 0x68c448);
char(&SFXData_Flags2)[1144] = * ((decltype(&SFXData_Flags2)) 0x68c8c0);
__int16(&SFXData_Race)[1144] = * ((decltype(&SFXData_Race)) 0x68cd38);
char(&SFXData_Flags1)[1144] = * ((decltype(&SFXData_Flags1)) 0x68d628);
char *(&SFXData_SoundFile)[1144] = * ((decltype(&SFXData_SoundFile)) 0x68daa0);
dialog *& dlgFatal_Dlg = * ((decltype(&dlgFatal_Dlg)) 0x68ec80);
char *& dword_68EC84 = * ((decltype(&dword_68EC84)) 0x68ec84);
char *& dword_68EC88 = * ((decltype(&dword_68EC88)) 0x68ec88);
BNetGateways& bnet_gateways = * ((decltype(&bnet_gateways)) 0x68ec8c);
int& dword_68ECAC = * ((decltype(&dword_68ECAC)) 0x68ecac);
LobbySlot(&lobby_slots)[12] = * ((decltype(&lobby_slots)) 0x68ecb0);
int& dword_68F4F0 = * ((decltype(&dword_68F4F0)) 0x68f4f0);
int& dword_68F4F4 = * ((decltype(&dword_68F4F4)) 0x68f4f4);
int& dword_68F4F8 = * ((decltype(&dword_68F4F8)) 0x68f4f8);
int(&PlayerDownloadStatus)[8] = * ((decltype(&PlayerDownloadStatus)) 0x68f4fc);
int& dword_68F500 = * ((decltype(&dword_68F500)) 0x68f500);
int& dword_68F504 = * ((decltype(&dword_68F504)) 0x68f504);
int& dword_68F508 = * ((decltype(&dword_68F508)) 0x68f508);
int& dword_68F50C = * ((decltype(&dword_68F50C)) 0x68f50c);
int& dword_68F510 = * ((decltype(&dword_68F510)) 0x68f510);
int& dword_68F514 = * ((decltype(&dword_68F514)) 0x68f514);
int& dword_68F518 = * ((decltype(&dword_68F518)) 0x68f518);
int& dword_68F51C = * ((decltype(&dword_68F51C)) 0x68f51c);
int& dword_68F520 = * ((decltype(&dword_68F520)) 0x68f520);
void *& dword_68F524 = * ((decltype(&dword_68F524)) 0x68f524);
int(&dword_68F528)[4] = * ((decltype(&dword_68F528)) 0x68f528);
Bitmap(&stru_68F538)[4] = * ((decltype(&stru_68F538)) 0x68f538);
WORD *& portdata_tbl = * ((decltype(&portdata_tbl)) 0x68f558);
Bitmap(&stru_68F55C)[4] = * ((decltype(&stru_68F55C)) 0x68f55c);
CheatHashRelated(&stru_68F580)[6] = * ((decltype(&stru_68F580)) 0x68f580);
LPARAM& dword_68F6B8 = * ((decltype(&dword_68F6B8)) 0x68f6b8);
void *& dword_68F6BC = * ((decltype(&dword_68F6BC)) 0x68f6bc);
void *& dword_68F6C0 = * ((decltype(&dword_68F6C0)) 0x68f6c0);
int& dword_68F6C4 = * ((decltype(&dword_68F6C4)) 0x68f6c4);
HGDIOBJ& dword_68F6C8 = * ((decltype(&dword_68F6C8)) 0x68f6c8);
int& dword_68F6CC = * ((decltype(&dword_68F6CC)) 0x68f6cc);
int& dword_68F6D0 = * ((decltype(&dword_68F6D0)) 0x68f6d0);
void *& dword_68F6D4 = * ((decltype(&dword_68F6D4)) 0x68f6d4);
char *& dword_68F6D8 = * ((decltype(&dword_68F6D8)) 0x68f6d8);
void *& dword_68F6DC = * ((decltype(&dword_68F6DC)) 0x68f6dc);
int (__stdcall *&dword_68F6E0)(_DWORD, _DWORD, _DWORD, _DWORD) = *((decltype(&dword_68F6E0)) 0x68f6e0);
int& dword_68F6E4 = * ((decltype(&dword_68F6E4)) 0x68f6e4);
int& dword_68F6E8 = * ((decltype(&dword_68F6E8)) 0x68f6e8);
HGDIOBJ& dword_68F6EC = * ((decltype(&dword_68F6EC)) 0x68f6ec);
HWND& dword_68F6F0 = * ((decltype(&dword_68F6F0)) 0x68f6f0);
HWND& dword_68F6F4 = * ((decltype(&dword_68F6F4)) 0x68f6f4);
int& dword_68F6F8 = * ((decltype(&dword_68F6F8)) 0x68f6f8);
__int16& dword_68F6FC = * ((decltype(&dword_68F6FC)) 0x68f6fc);
char(&dword_68F700)[] = * ((decltype(&dword_68F700)) 0x68f700);
int& dword_68F704 = * ((decltype(&dword_68F704)) 0x68f704);
HWND& dword_68F708 = * ((decltype(&dword_68F708)) 0x68f708);
HWND& dword_68F70C = * ((decltype(&dword_68F70C)) 0x68f70c);
char(&dword_68F710)[] = * ((decltype(&dword_68F710)) 0x68f710);
int& dword_68F714 = * ((decltype(&dword_68F714)) 0x68f714);
CHAR(&bnet_previous_map_dir)[260] = * ((decltype(&bnet_previous_map_dir)) 0x68f718);
unsigned __int8(&byte_68F820)[260] = * ((decltype(&byte_68F820)) 0x68f820);
int& dword_68F924 = * ((decltype(&dword_68F924)) 0x68f924);
int& dword_68F928 = * ((decltype(&dword_68F928)) 0x68f928);
int& dword_68F92C = * ((decltype(&dword_68F92C)) 0x68f92c);
int& dword_68F930 = * ((decltype(&dword_68F930)) 0x68f930);
int& dword_68F934 = * ((decltype(&dword_68F934)) 0x68f934);
int& dword_68F938 = * ((decltype(&dword_68F938)) 0x68f938);
int& dword_68F93C = * ((decltype(&dword_68F93C)) 0x68f93c);
int& dword_68F940 = * ((decltype(&dword_68F940)) 0x68f940);
MapDirEntry *& bnet_selected_map_maybe = * ((decltype(&bnet_selected_map_maybe)) 0x68f944);
char(&byte_68F948)[] = * ((decltype(&byte_68F948)) 0x68f948);
int& dword_68FA48 = * ((decltype(&dword_68FA48)) 0x68fa48);
int& bnet_browse_icons_dimensions = * ((decltype(&bnet_browse_icons_dimensions)) 0x68fa4c);
int(&dword_68FA50)[3] = * ((decltype(&dword_68FA50)) 0x68fa50);
HWND& bnet_recent_maps_box = * ((decltype(&bnet_recent_maps_box)) 0x68fa5c);
HWND& dword_68FA60 = * ((decltype(&dword_68FA60)) 0x68fa60);
HWND& dword_68FA64 = * ((decltype(&dword_68FA64)) 0x68fa64);
char(&dword_68FA68)[] = * ((decltype(&dword_68FA68)) 0x68fa68);
int& dword_68FA6C = * ((decltype(&dword_68FA6C)) 0x68fa6c);
char(&previous_selected_map)[260] = * ((decltype(&previous_selected_map)) 0x68fb70);
char& byte_68FC74 = * ((decltype(&byte_68FC74)) 0x68fc74);
HWND& dword_68FC78 = * ((decltype(&dword_68FC78)) 0x68fc78);
int(&bnet_browse_icons)[] = * ((decltype(&bnet_browse_icons)) 0x68fc7c);
HWND& dword_68FC84 = * ((decltype(&dword_68FC84)) 0x68fc84);
char(&byte_68FC88)[256] = * ((decltype(&byte_68FC88)) 0x68fc88);
int& _10_wins_icon = * ((decltype(&_10_wins_icon)) 0x68fd88);
char(&byte_68FD90)[260] = * ((decltype(&byte_68FD90)) 0x68fd90);
HWND& hWnd = * ((decltype(&hWnd)) 0x68fe94);
HWND& dword_68FE98 = * ((decltype(&dword_68FE98)) 0x68fe98);
char(&dword_68FE9C)[] = * ((decltype(&dword_68FE9C)) 0x68fe9c);
int& dword_68FEA0 = * ((decltype(&dword_68FEA0)) 0x68fea0);
GameType& template_id = * ((decltype(&template_id)) 0x68fea4);
void *& dword_68FEA8 = * ((decltype(&dword_68FEA8)) 0x68fea8);
int& dword_68FEAC = * ((decltype(&dword_68FEAC)) 0x68feac);
int& dword_68FEB0 = * ((decltype(&dword_68FEB0)) 0x68feb0);
int& dword_68FEB4 = * ((decltype(&dword_68FEB4)) 0x68feb4);
int& dword_68FEB8 = * ((decltype(&dword_68FEB8)) 0x68feb8);
int& dword_68FEBC = * ((decltype(&dword_68FEBC)) 0x68febc);
int& dword_68FEC0 = * ((decltype(&dword_68FEC0)) 0x68fec0);
void *& dword_68FEC4 = * ((decltype(&dword_68FEC4)) 0x68fec4);
int& dword_68FEC8 = * ((decltype(&dword_68FEC8)) 0x68fec8);
int& dword_68FECC = * ((decltype(&dword_68FECC)) 0x68fecc);
WPARAM& wParam = * ((decltype(&wParam)) 0x68fed0);
int& dword_68FED4 = * ((decltype(&dword_68FED4)) 0x68fed4);
HWND& hDlg = * ((decltype(&hDlg)) 0x68fed8);
LPCSTR& lpString = * ((decltype(&lpString)) 0x68fedc);
int& dword_68FEE0 = * ((decltype(&dword_68FEE0)) 0x68fee0);
int& dword_68FEE4 = * ((decltype(&dword_68FEE4)) 0x68fee4);
AI_Main(&AIScriptController)[8] = * ((decltype(&AIScriptController)) 0x68fee8);
int& dword_692628 = * ((decltype(&dword_692628)) 0x692628);
unsigned __int16(&word_69262C)[24] = * ((decltype(&word_69262C)) 0x69262c);
int& dword_69265C = * ((decltype(&dword_69265C)) 0x69265c);
int(&dword_692660)[] = * ((decltype(&dword_692660)) 0x692660);
int& dword_692684 = * ((decltype(&dword_692684)) 0x692684);
baseLocation(&Bases)[250] = * ((decltype(&Bases)) 0x692688);
int& dword_695568 = * ((decltype(&dword_695568)) 0x695568);
int& dword_69556C = * ((decltype(&dword_69556C)) 0x69556c);
int(&dword_695570)[] = * ((decltype(&dword_695570)) 0x695570);
int& dword_695574 = * ((decltype(&dword_695574)) 0x695574);
int& dword_695578 = * ((decltype(&dword_695578)) 0x695578);
int& dword_69557C = * ((decltype(&dword_69557C)) 0x69557c);
int& dword_695580 = * ((decltype(&dword_695580)) 0x695580);
int& dword_695584 = * ((decltype(&dword_695584)) 0x695584);
int& dword_695588 = * ((decltype(&dword_695588)) 0x695588);
int& dword_69558C = * ((decltype(&dword_69558C)) 0x69558c);
int& dword_695590 = * ((decltype(&dword_695590)) 0x695590);
int(&dword_695594)[] = * ((decltype(&dword_695594)) 0x695594);
int& dword_695598 = * ((decltype(&dword_695598)) 0x695598);
int& dword_69559C = * ((decltype(&dword_69559C)) 0x69559c);
int& dword_6955A0 = * ((decltype(&dword_6955A0)) 0x6955a0);
int& dword_6955A4 = * ((decltype(&dword_6955A4)) 0x6955a4);
int& dword_6955A8 = * ((decltype(&dword_6955A8)) 0x6955a8);
int& dword_6955AC = * ((decltype(&dword_6955AC)) 0x6955ac);
int& dword_6955B0 = * ((decltype(&dword_6955B0)) 0x6955b0);
int& dword_6955B4 = * ((decltype(&dword_6955B4)) 0x6955b4);
int(&dword_6955B8)[] = * ((decltype(&dword_6955B8)) 0x6955b8);
unsigned int& dword_6955DC = * ((decltype(&dword_6955DC)) 0x6955dc);
__int16& word_6955E0 = * ((decltype(&word_6955E0)) 0x6955e0);
__int16& word_6955E2 = * ((decltype(&word_6955E2)) 0x6955e2);
CUnit *& dword_6955E4 = * ((decltype(&dword_6955E4)) 0x6955e4);
int& dword_6955E8 = * ((decltype(&dword_6955E8)) 0x6955e8);
int(&dword_6955EC)[] = * ((decltype(&dword_6955EC)) 0x6955ec);
int& dword_6955F0 = * ((decltype(&dword_6955F0)) 0x6955f0);
int& dword_6955F4 = * ((decltype(&dword_6955F4)) 0x6955f4);
int& dword_6955F8 = * ((decltype(&dword_6955F8)) 0x6955f8);
int& dword_6955FC = * ((decltype(&dword_6955FC)) 0x6955fc);
int& dword_695600 = * ((decltype(&dword_695600)) 0x695600);
WeaponType& tempWeapon = * ((decltype(&tempWeapon)) 0x695604);
int& dword_695608 = * ((decltype(&dword_695608)) 0x695608);
int& dword_69560C = * ((decltype(&dword_69560C)) 0x69560c);
int(&dword_695610)[] = * ((decltype(&dword_695610)) 0x695610);
int& dword_695790 = * ((decltype(&dword_695790)) 0x695790);
int& dword_695794 = * ((decltype(&dword_695794)) 0x695794);
int& tempHPShields = * ((decltype(&tempHPShields)) 0x695798);
Position& stru_69579C = * ((decltype(&stru_69579C)) 0x69579c);
int& dword_6957A0 = * ((decltype(&dword_6957A0)) 0x6957a0);
unsigned int& dword_6957A4 = * ((decltype(&dword_6957A4)) 0x6957a4);
int& dword_6957A8 = * ((decltype(&dword_6957A8)) 0x6957a8);
int& dword_6957AC = * ((decltype(&dword_6957AC)) 0x6957ac);
int(&dword_6957B0)[8] = * ((decltype(&dword_6957B0)) 0x6957b0);
int& dword_6957D0 = * ((decltype(&dword_6957D0)) 0x6957d0);
int& dword_6957D4 = * ((decltype(&dword_6957D4)) 0x6957d4);
int& dword_6957D8 = * ((decltype(&dword_6957D8)) 0x6957d8);
unsigned int(&dword_6957E0)[5001] = * ((decltype(&dword_6957E0)) 0x6957e0);
AiCaptain *(&AiRegionCaptains)[1] = * ((decltype(&AiRegionCaptains)) 0x69a604);
char(&byte_69A628)[19988] = * ((decltype(&byte_69A628)) 0x69a628);
int(&dword_69F448)[] = * ((decltype(&dword_69F448)) 0x69f448);
int& dword_69F44C = * ((decltype(&dword_69F44C)) 0x69f44c);
int& dword_69F450 = * ((decltype(&dword_69F450)) 0x69f450);
int& dword_69F454 = * ((decltype(&dword_69F454)) 0x69f454);
int& dword_69F458 = * ((decltype(&dword_69F458)) 0x69f458);
int& dword_69F45C = * ((decltype(&dword_69F45C)) 0x69f45c);
int& dword_69F460 = * ((decltype(&dword_69F460)) 0x69f460);
int& dword_69F464 = * ((decltype(&dword_69F464)) 0x69f464);
_DWORD(&dword_69F468)[742] = * ((decltype(&dword_69F468)) 0x69f468);
int& dword_6AA04C = * ((decltype(&dword_6AA04C)) 0x6aa04c);
int(&AiDataList)[] = * ((decltype(&AiDataList)) 0x6aa050);
int(&dword_6AA054)[] = * ((decltype(&dword_6AA054)) 0x6aa054);
int& dword_6AA058 = * ((decltype(&dword_6AA058)) 0x6aa058);
int& dword_6AA05C = * ((decltype(&dword_6AA05C)) 0x6aa05c);
int& dword_6AA060 = * ((decltype(&dword_6AA060)) 0x6aa060);
int& dword_6AA064 = * ((decltype(&dword_6AA064)) 0x6aa064);
int& dword_6AA068 = * ((decltype(&dword_6AA068)) 0x6aa068);
int& dword_6AA06C = * ((decltype(&dword_6AA06C)) 0x6aa06c);
int& dword_6AA070 = * ((decltype(&dword_6AA070)) 0x6aa070);
int& dword_6AA074 = * ((decltype(&dword_6AA074)) 0x6aa074);
int& dword_6AA078 = * ((decltype(&dword_6AA078)) 0x6aa078);
int& dword_6AA07C = * ((decltype(&dword_6AA07C)) 0x6aa07c);
int& dword_6AA080 = * ((decltype(&dword_6AA080)) 0x6aa080);
int& dword_6AA084 = * ((decltype(&dword_6AA084)) 0x6aa084);
int& dword_6AA088 = * ((decltype(&dword_6AA088)) 0x6aa088);
int& dword_6AA08C = * ((decltype(&dword_6AA08C)) 0x6aa08c);
_DWORD(&AiArray)[11502] = * ((decltype(&AiArray)) 0x6aa090);
_DWORD(&dword_6B5448)[6001] = * ((decltype(&dword_6B5448)) 0x6b5448);
int(&dword_6BB20C)[] = * ((decltype(&dword_6BB20C)) 0x6bb20c);
int(&dword_6BB210)[227] = * ((decltype(&dword_6BB210)) 0x6bb210);
int(&dword_6BB59C)[] = * ((decltype(&dword_6BB59C)) 0x6bb59c);
int(&dword_6BB5A0)[228] = * ((decltype(&dword_6BB5A0)) 0x6bb5a0);
int& MaxUnitHeight = * ((decltype(&MaxUnitHeight)) 0x6bb930);
CUnit *(&tempUnitsListsArray)[1701] = * ((decltype(&tempUnitsListsArray)) 0x6bb938);
int(&dword_6BD3D0)[1701] = * ((decltype(&dword_6BD3D0)) 0x6bd3d0);
int& tempUnitsListCurrentArrayCount = * ((decltype(&tempUnitsListCurrentArrayCount)) 0x6bee64);
int& MaxUnitWidth = * ((decltype(&MaxUnitWidth)) 0x6bee68);
int(&tempUnitsListArraysCountsListLastIndex)[] = * ((decltype(&tempUnitsListArraysCountsListLastIndex)) 0x6bee6c);
int(&tempUnitsListArraysCountsList)[] = * ((decltype(&tempUnitsListArraysCountsList)) 0x6bee70);
int& dword_6BEE74 = * ((decltype(&dword_6BEE74)) 0x6bee74);
int& dword_6BEE78 = * ((decltype(&dword_6BEE78)) 0x6bee78);
int& dword_6BEE7C = * ((decltype(&dword_6BEE7C)) 0x6bee7c);
int& dword_6BEE80 = * ((decltype(&dword_6BEE80)) 0x6bee80);
int& dword_6BEE84 = * ((decltype(&dword_6BEE84)) 0x6bee84);
CUnit *& dword_6BEE88 = * ((decltype(&dword_6BEE88)) 0x6bee88);
void *& dword_6BEE8C = * ((decltype(&dword_6BEE8C)) 0x6bee8c);
Position& stru_6BEE90 = * ((decltype(&stru_6BEE90)) 0x6bee90);
__int16& word_6BEE94 = * ((decltype(&word_6BEE94)) 0x6bee94);
char& byte_6BEE96 = * ((decltype(&byte_6BEE96)) 0x6bee96);
char& byte_6BEE97 = * ((decltype(&byte_6BEE97)) 0x6bee97);
char& byte_6BEE98 = * ((decltype(&byte_6BEE98)) 0x6bee98);
char& byte_6BEE99 = * ((decltype(&byte_6BEE99)) 0x6bee99);
char& byte_6BEE9A = * ((decltype(&byte_6BEE9A)) 0x6bee9a);
char& byte_6BEE9B = * ((decltype(&byte_6BEE9B)) 0x6bee9b);
int& dword_6BEEA0 = * ((decltype(&dword_6BEEA0)) 0x6beea0);
int& dword_6BEEA4 = * ((decltype(&dword_6BEEA4)) 0x6beea4);
int& dword_6BEEA8 = * ((decltype(&dword_6BEEA8)) 0x6beea8);
int& dword_6BEEAC = * ((decltype(&dword_6BEEAC)) 0x6beeac);
int& dword_6BEEB0 = * ((decltype(&dword_6BEEB0)) 0x6beeb0);
int(&dword_6C0DD0)[] = * ((decltype(&dword_6C0DD0)) 0x6c0dd0);
Position *& dword_6C0DD4 = * ((decltype(&dword_6C0DD4)) 0x6c0dd4);
int& dword_6C102C = * ((decltype(&dword_6C102C)) 0x6c102c);
int& dword_6C1030 = * ((decltype(&dword_6C1030)) 0x6c1030);
CUnit *& dword_6C1074 = * ((decltype(&dword_6C1074)) 0x6c1074);
int& dword_6C1078 = * ((decltype(&dword_6C1078)) 0x6c1078);
CUnit *& dword_6C107C = * ((decltype(&dword_6C107C)) 0x6c107c);
rect& stru_6C1080 = * ((decltype(&stru_6C1080)) 0x6c1080);
__int16& word_6C10A8 = * ((decltype(&word_6C10A8)) 0x6c10a8);
IScriptProgramState& program_state = * ((decltype(&program_state)) 0x6c2310);
CSprite *(&dword_6C2318)[2500] = * ((decltype(&dword_6C2318)) 0x6c2318);
int& dword_6C4A28 = * ((decltype(&dword_6C4A28)) 0x6c4a28);
int& dword_6C4A2C = * ((decltype(&dword_6C4A2C)) 0x6c4a2c);
int(&dword_6C4A30)[] = * ((decltype(&dword_6C4A30)) 0x6c4a30);
int(&dword_6C4A34)[] = * ((decltype(&dword_6C4A34)) 0x6c4a34);
int(&dword_6C4A38)[] = * ((decltype(&dword_6C4A38)) 0x6c4a38);
int& dword_6C4A3C = * ((decltype(&dword_6C4A3C)) 0x6c4a3c);
u8(&Flingy_MovementControl)[209] = * ((decltype(&Flingy_MovementControl)) 0x6c9858);
u32(&Flingy_HaltDistance)[209] = * ((decltype(&Flingy_HaltDistance)) 0x6c9930);
u16(&Flingy_Acceleration)[209] = * ((decltype(&Flingy_Acceleration)) 0x6c9c78);
u8(&Flingy_TurnSpeed)[209] = * ((decltype(&Flingy_TurnSpeed)) 0x6c9e20);
u32(&Flingy_TopSpeed)[209] = * ((decltype(&Flingy_TopSpeed)) 0x6c9ef8);
u8(&Flingy_Unused)[209] = * ((decltype(&Flingy_Unused)) 0x6ca240);
u16(&Flingy_SpriteID)[209] = * ((decltype(&Flingy_SpriteID)) 0x6ca318);
int(&AiSupplyReserved)[12] = * ((decltype(&AiSupplyReserved)) 0x6ca4bc);
int(&dword_6CA4EC)[12] = * ((decltype(&dword_6CA4EC)) 0x6ca4ec);
int(&dword_6CA51C)[12] = * ((decltype(&dword_6CA51C)) 0x6ca51c);
BYTE *& dword_6CA54C = * ((decltype(&dword_6CA54C)) 0x6ca54c);
int(&seeds_maybe)[] = * ((decltype(&seeds_maybe)) 0x6ca550);
int(&dword_6CA554)[] = * ((decltype(&dword_6CA554)) 0x6ca554);
int(&dword_6CA558)[] = * ((decltype(&dword_6CA558)) 0x6ca558);
int(&dword_6CA55C)[] = * ((decltype(&dword_6CA55C)) 0x6ca55c);
int(&dword_6CA560)[] = * ((decltype(&dword_6CA560)) 0x6ca560);
int& dword_6CA564 = * ((decltype(&dword_6CA564)) 0x6ca564);
int& dword_6CA568 = * ((decltype(&dword_6CA568)) 0x6ca568);
char& byte_6CA664 = * ((decltype(&byte_6CA664)) 0x6ca664);
char(&byte_6CA668)[16] = * ((decltype(&byte_6CA668)) 0x6ca668);
char(&byte_6CA76C)[32] = * ((decltype(&byte_6CA76C)) 0x6ca76c);
char(&byte_6CA7A0)[100] = * ((decltype(&byte_6CA7A0)) 0x6ca7a0);
char(&byte_6CA818)[260] = * ((decltype(&byte_6CA818)) 0x6ca818);
char(&byte_6CA91C)[32] = * ((decltype(&byte_6CA91C)) 0x6ca91c);
int& suppliesAvailableTemp = * ((decltype(&suppliesAvailableTemp)) 0x6ca93c);
__int16& word_6CA940 = * ((decltype(&word_6CA940)) 0x6ca940);
int(&selectionGroupHP)[] = * ((decltype(&selectionGroupHP)) 0x6ca94c);
int(&dword_6CA950)[] = * ((decltype(&dword_6CA950)) 0x6ca950);
int(&dword_6CA954)[] = * ((decltype(&dword_6CA954)) 0x6ca954);
int(&dword_6CA958)[] = * ((decltype(&dword_6CA958)) 0x6ca958);
int(&dword_6CA95C)[] = * ((decltype(&dword_6CA95C)) 0x6ca95c);
int(&dword_6CA960)[] = * ((decltype(&dword_6CA960)) 0x6ca960);
char(&byte_6CA988)[100] = * ((decltype(&byte_6CA988)) 0x6ca988);
int& userInterfaceShields = * ((decltype(&userInterfaceShields)) 0x6ca9ec);
char& redrawTransportUI = * ((decltype(&redrawTransportUI)) 0x6ca9f0);
char(&byte_6CA9F8)[260] = * ((decltype(&byte_6CA9F8)) 0x6ca9f8);
char(&byte_6CAB08)[260] = * ((decltype(&byte_6CAB08)) 0x6cab08);
__int16& userInterfaceEnergy = * ((decltype(&userInterfaceEnergy)) 0x6cac0c);
char(&byte_6CAC10)[104] = * ((decltype(&byte_6CAC10)) 0x6cac10);
char(&byte_6CAC78)[260] = * ((decltype(&byte_6CAC78)) 0x6cac78);
struct_a2_1& stru_6CAD98 = * ((decltype(&stru_6CAD98)) 0x6cad98);
int& dword_6CAF94 = * ((decltype(&dword_6CAF94)) 0x6caf94);
int& dword_6CAF98 = * ((decltype(&dword_6CAF98)) 0x6caf98);
int(&dword_6CAFA0)[2688] = * ((decltype(&dword_6CAFA0)) 0x6cafa0);
int& dword_6CD9A0 = * ((decltype(&dword_6CD9A0)) 0x6cd9a0);
int& dword_6CD9A4 = * ((decltype(&dword_6CD9A4)) 0x6cd9a4);
int& dword_6CDBA4 = * ((decltype(&dword_6CDBA4)) 0x6cdba4);
int& dword_6CDBA8 = * ((decltype(&dword_6CDBA8)) 0x6cdba8);
int& dword_6CDBAC = * ((decltype(&dword_6CDBAC)) 0x6cdbac);
RECT& screen = * ((decltype(&screen)) 0x6cddb0);
int& InputFlags = * ((decltype(&InputFlags)) 0x6cddc0);
POINT& Mouse = * ((decltype(&Mouse)) 0x6cddc4);
CHAR(&fatal_error_message)[512] = * ((decltype(&fatal_error_message)) 0x6cddd0);
int& main_thread_id = * ((decltype(&main_thread_id)) 0x6cdfd0);
RegistryOptions& registry_options = * ((decltype(&registry_options)) 0x6cdfd4);
FontColorRelated& stru_6CE000 = * ((decltype(&stru_6CE000)) 0x6ce000);
fontMemStruct& PrintXY_Font = * ((decltype(&PrintXY_Font)) 0x6ce0c0);
int& dword_6CE0D0 = * ((decltype(&dword_6CE0D0)) 0x6ce0d0);
char& byte_6CE0D4 = * ((decltype(&byte_6CE0D4)) 0x6ce0d4);
int& dword_6CE0D8 = * ((decltype(&dword_6CE0D8)) 0x6ce0d8);
int& dword_6CE0DC = * ((decltype(&dword_6CE0DC)) 0x6ce0dc);
int& PrintXY_PositionY = * ((decltype(&PrintXY_PositionY)) 0x6ce0e0);
int& dword_6CE0E4 = * ((decltype(&dword_6CE0E4)) 0x6ce0e4);
int& dword_6CE0E8 = * ((decltype(&dword_6CE0E8)) 0x6ce0e8);
char& byte_6CE0EC = * ((decltype(&byte_6CE0EC)) 0x6ce0ec);
char& byte_6CE0ED = * ((decltype(&byte_6CE0ED)) 0x6ce0ed);
int& dword_6CE0F0 = * ((decltype(&dword_6CE0F0)) 0x6ce0f0);
Font *(&FontBase)[4] = * ((decltype(&FontBase)) 0x6ce0f4);
char& text_input_position_char = * ((decltype(&text_input_position_char)) 0x6ce104);
int& PrintXY_PositionX = * ((decltype(&PrintXY_PositionX)) 0x6ce108);
int& dword_6CE10C = * ((decltype(&dword_6CE10C)) 0x6ce10c);
PrintFlags& PrintXY_flags = * ((decltype(&PrintXY_flags)) 0x6ce110);
char& byte_6CE111 = * ((decltype(&byte_6CE111)) 0x6ce111);
char(&byte_6CE118)[392] = * ((decltype(&byte_6CE118)) 0x6ce118);
CycleStruct(&cycle_colors)[8] = * ((decltype(&cycle_colors)) 0x6ce2a0);
PALETTEENTRY(&GamePalette)[256] = * ((decltype(&GamePalette)) 0x6ce320);
PALETTEENTRY(&stru_6CE720)[256] = * ((decltype(&stru_6CE720)) 0x6ce720);
char(&byte_6CEB20)[] = * ((decltype(&byte_6CEB20)) 0x6ceb20);
char& byte_6CEB22 = * ((decltype(&byte_6CEB22)) 0x6ceb22);
char& byte_6CEB25 = * ((decltype(&byte_6CEB25)) 0x6ceb25);
char& byte_6CEB28 = * ((decltype(&byte_6CEB28)) 0x6ceb28);
int& dword_6CEB2C = * ((decltype(&dword_6CEB2C)) 0x6ceb2c);
char& byte_6CEB30 = * ((decltype(&byte_6CEB30)) 0x6ceb30);
char& byte_6CEB31 = * ((decltype(&byte_6CEB31)) 0x6ceb31);
char& byte_6CEB32 = * ((decltype(&byte_6CEB32)) 0x6ceb32);
char& byte_6CEB33 = * ((decltype(&byte_6CEB33)) 0x6ceb33);
char& byte_6CEB34 = * ((decltype(&byte_6CEB34)) 0x6ceb34);
char& byte_6CEB39 = * ((decltype(&byte_6CEB39)) 0x6ceb39);
char(&byte_6CEB3D)[] = * ((decltype(&byte_6CEB3D)) 0x6ceb3d);
char(&byte_6CEB3E)[] = * ((decltype(&byte_6CEB3E)) 0x6ceb3e);
PALETTEENTRY(&stru_6CEB40)[256] = * ((decltype(&stru_6CEB40)) 0x6ceb40);
bounds& stru_6CEF40 = * ((decltype(&stru_6CEF40)) 0x6cef40);
int& dword_6CEF4C = * ((decltype(&dword_6CEF4C)) 0x6cef4c);
layer(&ScreenLayers)[12] = * ((decltype(&ScreenLayers)) 0x6cef50);
Bitmap& GameScreenBuffer = * ((decltype(&GameScreenBuffer)) 0x6ceff0);
u8(&RefreshRegions)[1200] = * ((decltype(&RefreshRegions)) 0x6ceff8);
Bitmap *& dword_6CF4A8 = * ((decltype(&dword_6CF4A8)) 0x6cf4a8);
char& DrawColor = * ((decltype(&DrawColor)) 0x6cf4ac);
int& dword_6CF4B4 = * ((decltype(&dword_6CF4B4)) 0x6cf4b4);
dialog *& dword_6CF4BC = * ((decltype(&dword_6CF4BC)) 0x6cf4bc);
RECT& stru_6CF4C0 = * ((decltype(&stru_6CF4C0)) 0x6cf4c0);
dialog *& current_dropdown_maybe = * ((decltype(&current_dropdown_maybe)) 0x6d04b0);
__int16& word_6D04B4 = * ((decltype(&word_6D04B4)) 0x6d04b4);
__int16& word_6D04B8 = * ((decltype(&word_6D04B8)) 0x6d04b8);
int& dword_6D04BC = * ((decltype(&dword_6D04BC)) 0x6d04bc);
__int16& word_6D04C0 = * ((decltype(&word_6D04C0)) 0x6d04c0);
__int16& word_6D04C4 = * ((decltype(&word_6D04C4)) 0x6d04c4);
unsigned __int16& dword_6D04C8 = * ((decltype(&dword_6D04C8)) 0x6d04c8);
int& dword_6D04CC = * ((decltype(&dword_6D04CC)) 0x6d04cc);
__int16& word_6D04D0 = * ((decltype(&word_6D04D0)) 0x6d04d0);
__int16& word_6D04D4 = * ((decltype(&word_6D04D4)) 0x6d04d4);
__int16& word_6D04D8 = * ((decltype(&word_6D04D8)) 0x6d04d8);
__int16& word_6D04DC = * ((decltype(&word_6D04DC)) 0x6d04dc);
int& dword_6D04E0 = * ((decltype(&dword_6D04E0)) 0x6d04e0);
__int16& word_6D04E4 = * ((decltype(&word_6D04E4)) 0x6d04e4);
__int16& word_6D04E8 = * ((decltype(&word_6D04E8)) 0x6d04e8);
int& dword_6D04EC = * ((decltype(&dword_6D04EC)) 0x6d04ec);
int& dword_6D04F0 = * ((decltype(&dword_6D04F0)) 0x6d04f0);
int& dword_6D04F4 = * ((decltype(&dword_6D04F4)) 0x6d04f4);
__int16& word_6D04F8 = * ((decltype(&word_6D04F8)) 0x6d04f8);
__int16& word_6D04FC = * ((decltype(&word_6D04FC)) 0x6d04fc);
__int16& word_6D0500 = * ((decltype(&word_6D0500)) 0x6d0500);
__int16& word_6D0504 = * ((decltype(&word_6D0504)) 0x6d0504);
__int16& word_6D0508 = * ((decltype(&word_6D0508)) 0x6d0508);
int& dword_6D050C = * ((decltype(&dword_6D050C)) 0x6d050c);
__int16& word_6D0510 = * ((decltype(&word_6D0510)) 0x6d0510);
__int16& word_6D0514 = * ((decltype(&word_6D0514)) 0x6d0514);
int& dword_6D0518 = * ((decltype(&dword_6D0518)) 0x6d0518);
int& LastControlID = * ((decltype(&LastControlID)) 0x6d051c);
int& dword_6D0520 = * ((decltype(&dword_6D0520)) 0x6d0520);
__int16& word_6D0524 = * ((decltype(&word_6D0524)) 0x6d0524);
int& dword_6D0528 = * ((decltype(&dword_6D0528)) 0x6d0528);
__int16& word_6D052C = * ((decltype(&word_6D052C)) 0x6d052c);
int& dword_6D0530 = * ((decltype(&dword_6D0530)) 0x6d0530);
__int16& word_6D0534 = * ((decltype(&word_6D0534)) 0x6d0534);
dialog *& interrupting_child = * ((decltype(&interrupting_child)) 0x6d0538);
void *& unknown_palette_trans2 = * ((decltype(&unknown_palette_trans2)) 0x6d053c);
HANDLE& dword_6D0540 = * ((decltype(&dword_6D0540)) 0x6d0540);
int& dword_6D0548 = * ((decltype(&dword_6D0548)) 0x6d0548);
int& dword_6D0550 = * ((decltype(&dword_6D0550)) 0x6d0550);
int& dword_6D0554 = * ((decltype(&dword_6D0554)) 0x6d0554);
int& dword_6D0558 = * ((decltype(&dword_6D0558)) 0x6d0558);
int& dword_6D055C = * ((decltype(&dword_6D055C)) 0x6d055c);
int& dword_6D0560 = * ((decltype(&dword_6D0560)) 0x6d0560);
int& dword_6D0564 = * ((decltype(&dword_6D0564)) 0x6d0564);
int& dword_6D0568 = * ((decltype(&dword_6D0568)) 0x6d0568);
HANDLE& dword_6D0588 = * ((decltype(&dword_6D0588)) 0x6d0588);
int(&dword_6D058C)[] = * ((decltype(&dword_6D058C)) 0x6d058c);
int(&unknown_palette_trans3)[3] = * ((decltype(&unknown_palette_trans3)) 0x6d0590);
int& dword_6D059C = * ((decltype(&dword_6D059C)) 0x6d059c);
int& dword_6D05A0 = * ((decltype(&dword_6D05A0)) 0x6d05a0);
char& byte_6D05A4 = * ((decltype(&byte_6D05A4)) 0x6d05a4);
void *& unknown_palette_trans = * ((decltype(&unknown_palette_trans)) 0x6d05a8);
int& dword_6D05AC = * ((decltype(&dword_6D05AC)) 0x6d05ac);
__int16& word_6D09B0 = * ((decltype(&word_6D09B0)) 0x6d09b0);
char& byte_6D09B2 = * ((decltype(&byte_6D09B2)) 0x6d09b2);
_DWORD(&dword_6D09B8)[60] = * ((decltype(&dword_6D09B8)) 0x6d09b8);
int& dword_6D0AA8 = * ((decltype(&dword_6D0AA8)) 0x6d0aa8);
int& dword_6D0AF8 = * ((decltype(&dword_6D0AF8)) 0x6d0af8);
char(&byte_6D0B50)[256] = * ((decltype(&byte_6D0B50)) 0x6d0b50);
char& byte_6D0C50 = * ((decltype(&byte_6D0C50)) 0x6d0c50);
__int16& last_deleted_timer = * ((decltype(&last_deleted_timer)) 0x6d0c54);
dialog *& dword_6D0C58 = * ((decltype(&dword_6D0C58)) 0x6d0c58);
__int16& word_6D0C5C = * ((decltype(&word_6D0C5C)) 0x6d0c5c);
__int16& word_6D0C60 = * ((decltype(&word_6D0C60)) 0x6d0c60);
grpHead *& TerrainGraphics = * ((decltype(&TerrainGraphics)) 0x6d0c64);
TileID *& location = * ((decltype(&location)) 0x6d0c68);
int& dword_6D0C6C = * ((decltype(&dword_6D0C6C)) 0x6d0c6c);
void (__stdcall *&dword_6D0C70)(_DWORD, _DWORD, _DWORD, TileID, RECT *) = *((decltype(&dword_6D0C70)) 0x6d0c70);
int (__stdcall *&dword_6D0C74)(_DWORD, _DWORD) = *((decltype(&dword_6D0C74)) 0x6d0c74);
int (__stdcall *&dword_6D0C78)(_DWORD, _DWORD) = *((decltype(&dword_6D0C78)) 0x6d0c78);
int (__stdcall *&dword_6D0C7C)(_DWORD) = *((decltype(&dword_6D0C7C)) 0x6d0c7c);
char(&byte_6D0C80)[512] = * ((decltype(&byte_6D0C80)) 0x6d0c80);
u8 *& CreepEdgeData = * ((decltype(&CreepEdgeData)) 0x6d0e80);
TileID *& dword_6D0E84 = * ((decltype(&dword_6D0E84)) 0x6d0e84);
char(&byte_6D0E88)[128] = * ((decltype(&byte_6D0E88)) 0x6d0e88);
int& dword_6D0F08 = * ((decltype(&dword_6D0F08)) 0x6d0f08);
int& next_campaign_mission = * ((decltype(&next_campaign_mission)) 0x6d0f0c);
int& low_memory = * ((decltype(&low_memory)) 0x6d0f10);
int& InReplay = * ((decltype(&InReplay)) 0x6d0f14);
int& ReplayVision = * ((decltype(&ReplayVision)) 0x6d0f18);
int& replayShowEntireMap = * ((decltype(&replayShowEntireMap)) 0x6d0f1c);
int& scenarioChkSize = * ((decltype(&scenarioChkSize)) 0x6d0f20);
void *& scenarioChk = * ((decltype(&scenarioChk)) 0x6d0f24);
dialog *& savegame_Dlg = * ((decltype(&savegame_Dlg)) 0x6d0f28);
HANDLE& dword_6D0F2C = * ((decltype(&dword_6D0F2C)) 0x6d0f2c);
ReplayHeader& replay_header = * ((decltype(&replay_header)) 0x6d0f30);
dialog *& dword_6D11AC = * ((decltype(&dword_6D11AC)) 0x6d11ac);
int& is_replay_paused = * ((decltype(&is_replay_paused)) 0x6d11b0);
int& dword_6D11B4 = * ((decltype(&dword_6D11B4)) 0x6d11b4);
int& dword_6D11B8 = * ((decltype(&dword_6D11B8)) 0x6d11b8);
MenuPosition& glGluesMode = * ((decltype(&glGluesMode)) 0x6d11bc);
int& OpheliaEnabled = * ((decltype(&OpheliaEnabled)) 0x6d11c0);
int& gluAllTblDataLoaded = * ((decltype(&gluAllTblDataLoaded)) 0x6d11c4);
int& IsInGameLoop = * ((decltype(&IsInGameLoop)) 0x6d11c8);
CampaignMenuEntry *& active_campaign_menu_entry = * ((decltype(&active_campaign_menu_entry)) 0x6d11cc);
char& byte_6D11D0 = * ((decltype(&byte_6D11D0)) 0x6d11d0);
int& dword_6D11D4 = * ((decltype(&dword_6D11D4)) 0x6d11d4);
int& dword_6D11D8 = * ((decltype(&dword_6D11D8)) 0x6d11d8);
int& dword_6D11DC = * ((decltype(&dword_6D11DC)) 0x6d11dc);
int& is_expansion_installed = * ((decltype(&is_expansion_installed)) 0x6d11e4);
int& dword_6D11E8 = * ((decltype(&dword_6D11E8)) 0x6d11e8);
char& GameState = * ((decltype(&GameState)) 0x6d11ec);
int& dword_6D11F0 = * ((decltype(&dword_6D11F0)) 0x6d11f0);
CUnit *& iscript_flingy = * ((decltype(&iscript_flingy)) 0x6d11f4);
CBullet *& iscript_bullet = * ((decltype(&iscript_bullet)) 0x6d11f8);
CUnit *& iscript_unit = * ((decltype(&iscript_unit)) 0x6d11fc);
IScript *& iscript_data = * ((decltype(&iscript_data)) 0x6d1200);
int& game_starting_maybe = * ((decltype(&game_starting_maybe)) 0x6d1204);
void (__cdecl *&dword_6D1208)() = *((decltype(&dword_6D1208)) 0x6d1208);
HACCEL& hAccTable = * ((decltype(&hAccTable)) 0x6d120c);
int& dword_6D1210 = * ((decltype(&dword_6D1210)) 0x6d1210);
char& byte_6D1214 = * ((decltype(&byte_6D1214)) 0x6d1214);
FILE *& loadGameFileHandle = * ((decltype(&loadGameFileHandle)) 0x6d1218);
char& mapStarted = * ((decltype(&mapStarted)) 0x6d121c);
WORD *& networkTable = * ((decltype(&networkTable)) 0x6d1220);
char& byte_6D1224 = * ((decltype(&byte_6D1224)) 0x6d1224);
char& byte_6D1225 = * ((decltype(&byte_6D1225)) 0x6d1225);
UnknownTilesetRelated1& stru_6D1228 = * ((decltype(&stru_6D1228)) 0x6d1228);
void (__fastcall *&active_menu_handler)(dialog *) = *((decltype(&active_menu_handler)) 0x6d1234);
StringTbl& StatTxtTbl = * ((decltype(&StatTxtTbl)) 0x6d1238);
char *& okcancel_message = * ((decltype(&okcancel_message)) 0x6d123c);
void *& dword_6D1240 = * ((decltype(&dword_6D1240)) 0x6d1240);
int& dword_6D1244 = * ((decltype(&dword_6D1244)) 0x6d1244);
HANDLE& dword_6D1248 = * ((decltype(&dword_6D1248)) 0x6d1248);
int (__fastcall *&dword_6D124C)(__int16) = *((decltype(&dword_6D124C)) 0x6d124c);
void *& dword_6D1250 = * ((decltype(&dword_6D1250)) 0x6d1250);
void *& dword_6D1254 = * ((decltype(&dword_6D1254)) 0x6d1254);
void *& dword_6D1258 = * ((decltype(&dword_6D1258)) 0x6d1258);
void *& dword_6D125C = * ((decltype(&dword_6D125C)) 0x6d125c);
MegatileFlags *& active_tiles = * ((decltype(&active_tiles)) 0x6d1260);
char& byte_6D1264 = * ((decltype(&byte_6D1264)) 0x6d1264);
char& byte_6D1265 = * ((decltype(&byte_6D1265)) 0x6d1265);
char& byte_6D1266 = * ((decltype(&byte_6D1266)) 0x6d1266);
IDirectSoundBuffer *& dword_6D1268 = * ((decltype(&dword_6D1268)) 0x6d1268);
struct_5(&stru_6D1270)[1144] = * ((decltype(&stru_6D1270)) 0x6d1270);
HMODULE& dsound_dll = * ((decltype(&dsound_dll)) 0x6d59f0);
IDirectSound *& direct_sound = * ((decltype(&direct_sound)) 0x6d59f4);
IDirectSoundBuffer *& soundbuffer = * ((decltype(&soundbuffer)) 0x6d59f8);
int& dword_6D59FC = * ((decltype(&dword_6D59FC)) 0x6d59fc);
HANDLE& dword_6D5A00 = * ((decltype(&dword_6D5A00)) 0x6d5a00);
HANDLE& sound_thread_handle = * ((decltype(&sound_thread_handle)) 0x6d5a04);
int& dword_6D5A08 = * ((decltype(&dword_6D5A08)) 0x6d5a08);
int& dword_6D5A0C = * ((decltype(&dword_6D5A0C)) 0x6d5a0c);
char& outOfGame = * ((decltype(&outOfGame)) 0x6d5a10);
int& dword_6D5A14 = * ((decltype(&dword_6D5A14)) 0x6d5a14);
char *& dword_6D5A18 = * ((decltype(&dword_6D5A18)) 0x6d5a18);
char *& dword_6D5A1C = * ((decltype(&dword_6D5A1C)) 0x6d5a1c);
int& dword_6D5A20 = * ((decltype(&dword_6D5A20)) 0x6d5a20);
dialog *& gluConn_Dlg = * ((decltype(&gluConn_Dlg)) 0x6d5a24);
Char4& network_provider_id = * ((decltype(&network_provider_id)) 0x6d5a28);
Char4& network_provider_id_related = * ((decltype(&network_provider_id_related)) 0x6d5a2c);
dialog *& lobby_dlg = * ((decltype(&lobby_dlg)) 0x6d5a30);
int& dword_6D5A38 = * ((decltype(&dword_6D5A38)) 0x6d5a38);
dialog *& dword_6D5A3C = * ((decltype(&dword_6D5A3C)) 0x6d5a3c);
FnInteract *& dword_6D5A40 = * ((decltype(&dword_6D5A40)) 0x6d5a40);
WORD *& dword_6D5A44 = * ((decltype(&dword_6D5A44)) 0x6d5a44);
CampaignMenuEntry *& campaign_menu_active_mission = * ((decltype(&campaign_menu_active_mission)) 0x6d5a48);
CampaignMenuEntry *& campaign_menu_active_campaign = * ((decltype(&campaign_menu_active_campaign)) 0x6d5a4c);
int& dword_6D5A50 = * ((decltype(&dword_6D5A50)) 0x6d5a50);
int& dword_6D5A54 = * ((decltype(&dword_6D5A54)) 0x6d5a54);
dialog *& dword_6D5A58 = * ((decltype(&dword_6D5A58)) 0x6d5a58);
FnInteract *& dword_6D5A5C = * ((decltype(&dword_6D5A5C)) 0x6d5a5c);
int& dword_6D5A60 = * ((decltype(&dword_6D5A60)) 0x6d5a60);
int& game_id_hash = * ((decltype(&game_id_hash)) 0x6d5a64);
int& saveLoadSuccess = * ((decltype(&saveLoadSuccess)) 0x6d5a68);
CheatFlags& GameCheats = * ((decltype(&GameCheats)) 0x6d5a6c);
dialog *& gluCreateOrCustm_bin = * ((decltype(&gluCreateOrCustm_bin)) 0x6d5a70);
int& dword_6D5A74 = * ((decltype(&dword_6D5A74)) 0x6d5a74);
int& dword_6D5A78 = * ((decltype(&dword_6D5A78)) 0x6d5a78);
struct_v4_1 *& dword_6D5A7C = * ((decltype(&dword_6D5A7C)) 0x6d5a7c);
struct_v4_1 *& dword_6D5A80 = * ((decltype(&dword_6D5A80)) 0x6d5a80);
struct_v4_1 *& dword_6D5A84 = * ((decltype(&dword_6D5A84)) 0x6d5a84);
struct_v4_1 *& dword_6D5A88 = * ((decltype(&dword_6D5A88)) 0x6d5a88);
struct_v4_1 *& dword_6D5A8C = * ((decltype(&dword_6D5A8C)) 0x6d5a8c);
struct_v4_1 *& dword_6D5A90 = * ((decltype(&dword_6D5A90)) 0x6d5a90);
struct_v4_1 *& dword_6D5A94 = * ((decltype(&dword_6D5A94)) 0x6d5a94);
struct_v4_1 *& dword_6D5A98 = * ((decltype(&dword_6D5A98)) 0x6d5a98);
struct_v4_1 *& dword_6D5A9C = * ((decltype(&dword_6D5A9C)) 0x6d5a9c);
struct_v4_1 *& dword_6D5AA0 = * ((decltype(&dword_6D5AA0)) 0x6d5aa0);
char& byte_6D5AA8 = * ((decltype(&byte_6D5AA8)) 0x6d5aa8);
HANDLE& directsound = * ((decltype(&directsound)) 0x6d5bac);
MusicTrack& current_music = * ((decltype(&current_music)) 0x6d5bb0);
signed int& bigvolume = * ((decltype(&bigvolume)) 0x6d5bb4);
int& dword_6D5BB8 = * ((decltype(&dword_6D5BB8)) 0x6d5bb8);
char& byte_6D5BBC = * ((decltype(&byte_6D5BBC)) 0x6d5bbc);
char& byte_6D5BBD = * ((decltype(&byte_6D5BBD)) 0x6d5bbd);
char& byte_6D5BBE = * ((decltype(&byte_6D5BBE)) 0x6d5bbe);
char& byte_6D5BBF = * ((decltype(&byte_6D5BBF)) 0x6d5bbf);
char& byte_6D5BC0 = * ((decltype(&byte_6D5BC0)) 0x6d5bc0);
char& byte_6D5BC1 = * ((decltype(&byte_6D5BC1)) 0x6d5bc1);
char& byte_6D5BC2 = * ((decltype(&byte_6D5BC2)) 0x6d5bc2);
dialog *& dword_6D5BC4 = * ((decltype(&dword_6D5BC4)) 0x6d5bc4);
int& isInGame = * ((decltype(&isInGame)) 0x6d5bc8);
int& elapstedTimeModifier = * ((decltype(&elapstedTimeModifier)) 0x6d5bcc);
int& dword_6D5BD0 = * ((decltype(&dword_6D5BD0)) 0x6d5bd0);
int& dword_6D5BD4 = * ((decltype(&dword_6D5BD4)) 0x6d5bd4);
void *& pylon_power_mask = * ((decltype(&pylon_power_mask)) 0x6d5bd8);
int& dword_6D5BDC = * ((decltype(&dword_6D5BDC)) 0x6d5bdc);
int& lastRandSFX = * ((decltype(&lastRandSFX)) 0x6d5be0);
char& byte_6D5BE4 = * ((decltype(&byte_6D5BE4)) 0x6d5be4);
int& dword_6D5BE8 = * ((decltype(&dword_6D5BE8)) 0x6d5be8);
char& byte_6D5BEC = * ((decltype(&byte_6D5BEC)) 0x6d5bec);
char& byte_6D5BED = * ((decltype(&byte_6D5BED)) 0x6d5bed);
_DWORD& dword_6D5BF0 = * ((decltype(&dword_6D5BF0)) 0x6d5bf0);
dialog *& GameMenuDlg = * ((decltype(&GameMenuDlg)) 0x6d5bf4);
int& dword_6D5BF8 = * ((decltype(&dword_6D5BF8)) 0x6d5bf8);
SAI_Paths *& SAIPathing = * ((decltype(&SAIPathing)) 0x6d5bfc);
DWORD& CpuThrottle = * ((decltype(&CpuThrottle)) 0x6d5c00);
Bitmap& stru_6D5C04 = * ((decltype(&stru_6D5C04)) 0x6d5c04);
void *& dword_6D5C0C = * ((decltype(&dword_6D5C0C)) 0x6d5c0c);
void *& dword_6D5C10 = * ((decltype(&dword_6D5C10)) 0x6d5c10);
void *& dword_6D5C14 = * ((decltype(&dword_6D5C14)) 0x6d5c14);
void *& dword_6D5C18 = * ((decltype(&dword_6D5C18)) 0x6d5c18);
int& dword_6D5C1C = * ((decltype(&dword_6D5C1C)) 0x6d5c1c);
Position& orderType4Position = * ((decltype(&orderType4Position)) 0x6d5c20);
CUnit *& orderType4Target = * ((decltype(&orderType4Target)) 0x6d5c24);
int& dword_6D5C28 = * ((decltype(&dword_6D5C28)) 0x6d5c28);
UINT_PTR& uIDEvent = * ((decltype(&uIDEvent)) 0x6d5c2c);
void *(&player_slots)[8] = * ((decltype(&player_slots)) 0x6d5c30);
int(&net_player_info)[8] = * ((decltype(&net_player_info)) 0x6d5c50);
void *& start_game_command = * ((decltype(&start_game_command)) 0x6d5c70);
void *& command_3d = * ((decltype(&command_3d)) 0x6d5c74);
void *& dword_6D5C78 = * ((decltype(&dword_6D5C78)) 0x6d5c78);
void *& dword_6D5C7C = * ((decltype(&dword_6D5C7C)) 0x6d5c7c);
void *& dword_6D5C80 = * ((decltype(&dword_6D5C80)) 0x6d5c80);
void *& dword_6D5C84 = * ((decltype(&dword_6D5C84)) 0x6d5c84);
void *& dword_6D5C88 = * ((decltype(&dword_6D5C88)) 0x6d5c88);
void *& dword_6D5C8C = * ((decltype(&dword_6D5C8C)) 0x6d5c8c);
struct_v2 *& dword_6D5C90 = * ((decltype(&dword_6D5C90)) 0x6d5c90);
void *& defaultValue = * ((decltype(&defaultValue)) 0x6d5c94);
int& dword_6D5C98 = * ((decltype(&dword_6D5C98)) 0x6d5c98);
void *& dword_6D5C9C = * ((decltype(&dword_6D5C9C)) 0x6d5c9c);
char& byte_6D5CA0 = * ((decltype(&byte_6D5CA0)) 0x6d5ca0);
HANDLE& video = * ((decltype(&video)) 0x6d5ca4);
int& dword_6D5CA8 = * ((decltype(&dword_6D5CA8)) 0x6d5ca8);
Bitmap& pbrempt_pcx = * ((decltype(&pbrempt_pcx)) 0x6d5cac);
Bitmap& pbrfull_pcx = * ((decltype(&pbrfull_pcx)) 0x6d5cb4);
Bitmap& progress_bar_empty_pcx = * ((decltype(&progress_bar_empty_pcx)) 0x6d5cbc);
Bitmap& progress_bar_full_pcx = * ((decltype(&progress_bar_full_pcx)) 0x6d5cc4);
void *& dword_6D5CD8 = * ((decltype(&dword_6D5CD8)) 0x6d5cd8);
void *& dword_6D5CDC = * ((decltype(&dword_6D5CDC)) 0x6d5cdc);
int(&dword_6D5D00)[] = * ((decltype(&dword_6D5D00)) 0x6d5d00);
int& dword_6D5D10 = * ((decltype(&dword_6D5D10)) 0x6d5d10);
int& dword_6D5D14 = * ((decltype(&dword_6D5D14)) 0x6d5d14);
int& dword_6D5D18 = * ((decltype(&dword_6D5D18)) 0x6d5d18);
char *& dword_6D5D1C = * ((decltype(&dword_6D5D1C)) 0x6d5d1c);
char *& dword_6D5D20 = * ((decltype(&dword_6D5D20)) 0x6d5d20);
int& dword_6D5D30 = * ((decltype(&dword_6D5D30)) 0x6d5d30);
int& dword_6D5D48 = * ((decltype(&dword_6D5D48)) 0x6d5d48);
void *& dword_6D5D4C = * ((decltype(&dword_6D5D4C)) 0x6d5d4c);
char *& dword_6D5D50 = * ((decltype(&dword_6D5D50)) 0x6d5d50);
char *& dword_6D5D54 = * ((decltype(&dword_6D5D54)) 0x6d5d54);
char *& dword_6D5D58 = * ((decltype(&dword_6D5D58)) 0x6d5d58);
void *& dword_6D5D5C = * ((decltype(&dword_6D5D5C)) 0x6d5d5c);
char(&byte_6D5D60)[4] = * ((decltype(&byte_6D5D60)) 0x6d5d60);
int& dword_6D5D64 = * ((decltype(&dword_6D5D64)) 0x6d5d64);
int& dword_6D5D68 = * ((decltype(&dword_6D5D68)) 0x6d5d68);
int(&dword_6D5D70)[10] = * ((decltype(&dword_6D5D70)) 0x6d5d70);
int(&dword_6D5D98)[] = * ((decltype(&dword_6D5D98)) 0x6d5d98);
void *& dword_6D5DC0 = * ((decltype(&dword_6D5DC0)) 0x6d5dc0);
char *& buffer2 = * ((decltype(&buffer2)) 0x6d5dc4);
int& dword_6D5DC8 = * ((decltype(&dword_6D5DC8)) 0x6d5dc8);
int& dword_6D5DCC = * ((decltype(&dword_6D5DCC)) 0x6d5dcc);
int& dword_6D5DD0 = * ((decltype(&dword_6D5DD0)) 0x6d5dd0);
int& dword_6D5DD4 = * ((decltype(&dword_6D5DD4)) 0x6d5dd4);
AppExitHandle *& app_exit_handles = * ((decltype(&app_exit_handles)) 0x6d5dd8);
Font *& PrintXY_Current_Font = * ((decltype(&PrintXY_Current_Font)) 0x6d5ddc);
char& byte_6D5DE0 = * ((decltype(&byte_6D5DE0)) 0x6d5de0);
HINSTANCE& local_dll_library = * ((decltype(&local_dll_library)) 0x6d5de4);
LPCVOID& lpAddress = * ((decltype(&lpAddress)) 0x6d5de8);
DWORD& nNumberOfBytesToWrite = * ((decltype(&nNumberOfBytesToWrite)) 0x6d5dec);
Bitmap& stru_6D5DF0 = * ((decltype(&stru_6D5DF0)) 0x6d5df0);
int& dword_6D5DF8 = * ((decltype(&dword_6D5DF8)) 0x6d5df8);
char& byte_6D5DFC = * ((decltype(&byte_6D5DFC)) 0x6d5dfc);
IDirectDrawSurface *& PrimarySurface = * ((decltype(&PrimarySurface)) 0x6d5e00);
HMODULE& ddraw_dll = * ((decltype(&ddraw_dll)) 0x6d5e04);
IDirectDraw *& DDInterface = * ((decltype(&DDInterface)) 0x6d5e08);
IDirectDrawPalette *& PrimaryPalette = * ((decltype(&PrimaryPalette)) 0x6d5e0c);
IDirectDrawSurface *& BackSurface = * ((decltype(&BackSurface)) 0x6d5e10);
HANDLE& handle = * ((decltype(&handle)) 0x6d5e14);
int& dword_6D5E18 = * ((decltype(&dword_6D5E18)) 0x6d5e18);
int& dword_6D5E1C = * ((decltype(&dword_6D5E1C)) 0x6d5e1c);
Bitmap *& dword_6D5E20 = * ((decltype(&dword_6D5E20)) 0x6d5e20);
int& dword_6D5E24 = * ((decltype(&dword_6D5E24)) 0x6d5e24);
__int16& word_6D5E28 = * ((decltype(&word_6D5E28)) 0x6d5e28);
int& dword_6D5E2C = * ((decltype(&dword_6D5E2C)) 0x6d5e2c);
int& dword_6D5E30 = * ((decltype(&dword_6D5E30)) 0x6d5e30);
dialog *& DialogList = * ((decltype(&DialogList)) 0x6d5e34);
void (__cdecl *&dword_6D5E38)() = *((decltype(&dword_6D5E38)) 0x6d5e38);
int& dword_6D5E3C = * ((decltype(&dword_6D5E3C)) 0x6d5e3c);
dialog *(&EventDialogs)[19] = * ((decltype(&EventDialogs)) 0x6d5e40);
activation_delays(&stru_6D5E8C)[4] = * ((decltype(&stru_6D5E8C)) 0x6d5e8c);
void (__stdcall *&ButtonPressSound)(int) = *((decltype(&ButtonPressSound)) 0x6d5eac);
dialog *& to_be_deleted_maybe = * ((decltype(&to_be_deleted_maybe)) 0x6d5eb0);
int& dword_6D5EB4 = * ((decltype(&dword_6D5EB4)) 0x6d5eb4);
int& dword_6D5EB8 = * ((decltype(&dword_6D5EB8)) 0x6d5eb8);
void *& first_timer1 = * ((decltype(&first_timer1)) 0x6d5ebc);
Timer *& first_timer2 = * ((decltype(&first_timer2)) 0x6d5ec0);
TileType *& TileSetMap = * ((decltype(&TileSetMap)) 0x6d5ec8);
HANDLE& hEvent = * ((decltype(&hEvent)) 0x6d5ecc);
int& IsBattleNet = * ((decltype(&IsBattleNet)) 0x6d5ed0);
int& dword_6D5ED4 = * ((decltype(&dword_6D5ED4)) 0x6d5ed4);
int& dword_6D5ED8 = * ((decltype(&dword_6D5ED8)) 0x6d5ed8);
struct _RTL_CRITICAL_SECTION& stru_6D5EDC = * ((decltype(&stru_6D5EDC)) 0x6d5edc);
int& dword_6D5EF4 = * ((decltype(&dword_6D5EF4)) 0x6d5ef4);
int& dword_6D5EF8 = * ((decltype(&dword_6D5EF8)) 0x6d5ef8);
int& dword_6D5EFC = * ((decltype(&dword_6D5EFC)) 0x6d5efc);
int& dword_6D5F04 = * ((decltype(&dword_6D5F04)) 0x6d5f04);
int& dword_6D5F08 = * ((decltype(&dword_6D5F08)) 0x6d5f08);
int& dword_6D5F0C = * ((decltype(&dword_6D5F0C)) 0x6d5f0c);
int& dword_6D5F10 = * ((decltype(&dword_6D5F10)) 0x6d5f10);
int& dword_6D5F14 = * ((decltype(&dword_6D5F14)) 0x6d5f14);
int& dword_6D5F18 = * ((decltype(&dword_6D5F18)) 0x6d5f18);
int& dword_6D5F1C = * ((decltype(&dword_6D5F1C)) 0x6d5f1c);
int& dword_6D5F20 = * ((decltype(&dword_6D5F20)) 0x6d5f20);
int& dword_6D5F24 = * ((decltype(&dword_6D5F24)) 0x6d5f24);
int& dword_6D5F28 = * ((decltype(&dword_6D5F28)) 0x6d5f28);
int& dword_6D5F2C = * ((decltype(&dword_6D5F2C)) 0x6d5f2c);
int& dword_6D5F30 = * ((decltype(&dword_6D5F30)) 0x6d5f30);
int& dword_6D5F34 = * ((decltype(&dword_6D5F34)) 0x6d5f34);
int& dword_6D5F38 = * ((decltype(&dword_6D5F38)) 0x6d5f38);
int& dword_6D5F3C = * ((decltype(&dword_6D5F3C)) 0x6d5f3c);
int& dword_6D5F40 = * ((decltype(&dword_6D5F40)) 0x6d5f40);
int& dword_6D5F44 = * ((decltype(&dword_6D5F44)) 0x6d5f44);
int& dword_6D5F48 = * ((decltype(&dword_6D5F48)) 0x6d5f48);
struct _RTL_CRITICAL_SECTION& stru_6D5F4C = * ((decltype(&stru_6D5F4C)) 0x6d5f4c);
int& dword_6D5F64 = * ((decltype(&dword_6D5F64)) 0x6d5f64);
int& dword_6D5F68 = * ((decltype(&dword_6D5F68)) 0x6d5f68);
int& dword_6D5F6C = * ((decltype(&dword_6D5F6C)) 0x6d5f6c);
int& dword_6D5F70 = * ((decltype(&dword_6D5F70)) 0x6d5f70);
int& dword_6D5F74 = * ((decltype(&dword_6D5F74)) 0x6d5f74);
int& dword_6D5F78 = * ((decltype(&dword_6D5F78)) 0x6d5f78);
int& dword_6D5F7C = * ((decltype(&dword_6D5F7C)) 0x6d5f7c);
int& dword_6D5F80 = * ((decltype(&dword_6D5F80)) 0x6d5f80);
int& dword_6D5F84 = * ((decltype(&dword_6D5F84)) 0x6d5f84);
int& dword_6D5F88 = * ((decltype(&dword_6D5F88)) 0x6d5f88);
int& dword_6D5F8C = * ((decltype(&dword_6D5F8C)) 0x6d5f8c);
int& dword_6D5F90 = * ((decltype(&dword_6D5F90)) 0x6d5f90);
int& dword_6D5F94 = * ((decltype(&dword_6D5F94)) 0x6d5f94);
int& dword_6D5F98 = * ((decltype(&dword_6D5F98)) 0x6d5f98);
int& dword_6D5F9C = * ((decltype(&dword_6D5F9C)) 0x6d5f9c);
int& dword_6D5FA0 = * ((decltype(&dword_6D5FA0)) 0x6d5fa0);
int& dword_6D5FA4 = * ((decltype(&dword_6D5FA4)) 0x6d5fa4);
int& dword_6D5FA8 = * ((decltype(&dword_6D5FA8)) 0x6d5fa8);
int& dword_6D5FAC = * ((decltype(&dword_6D5FAC)) 0x6d5fac);
int& dword_6D5FB0 = * ((decltype(&dword_6D5FB0)) 0x6d5fb0);
int& dword_6D5FB4 = * ((decltype(&dword_6D5FB4)) 0x6d5fb4);
int& dword_6D5FB8 = * ((decltype(&dword_6D5FB8)) 0x6d5fb8);
int& dword_6D5FBC = * ((decltype(&dword_6D5FBC)) 0x6d5fbc);
int& dword_6D5FC0 = * ((decltype(&dword_6D5FC0)) 0x6d5fc0);
int& dword_6D5FC4 = * ((decltype(&dword_6D5FC4)) 0x6d5fc4);
int& dword_6D5FC8 = * ((decltype(&dword_6D5FC8)) 0x6d5fc8);
int& dword_6D5FCC = * ((decltype(&dword_6D5FCC)) 0x6d5fcc);
int& dword_6D5FD0 = * ((decltype(&dword_6D5FD0)) 0x6d5fd0);
int& dword_6D5FD4 = * ((decltype(&dword_6D5FD4)) 0x6d5fd4);
int& dword_6D5FD8 = * ((decltype(&dword_6D5FD8)) 0x6d5fd8);
int& dword_6D5FDC = * ((decltype(&dword_6D5FDC)) 0x6d5fdc);
int& dword_6D5FE0 = * ((decltype(&dword_6D5FE0)) 0x6d5fe0);
int& dword_6D5FE4 = * ((decltype(&dword_6D5FE4)) 0x6d5fe4);
int& dword_6D5FE8 = * ((decltype(&dword_6D5FE8)) 0x6d5fe8);
int& dword_6D5FEC = * ((decltype(&dword_6D5FEC)) 0x6d5fec);
int& dword_6D5FF0 = * ((decltype(&dword_6D5FF0)) 0x6d5ff0);
int& dword_6D5FF4 = * ((decltype(&dword_6D5FF4)) 0x6d5ff4);
int& dword_6D5FF8 = * ((decltype(&dword_6D5FF8)) 0x6d5ff8);
int& dword_6D5FFC = * ((decltype(&dword_6D5FFC)) 0x6d5ffc);
int& dword_6D6000 = * ((decltype(&dword_6D6000)) 0x6d6000);
int& dword_6D6004 = * ((decltype(&dword_6D6004)) 0x6d6004);
int& dword_6D6008 = * ((decltype(&dword_6D6008)) 0x6d6008);
int& dword_6D600C = * ((decltype(&dword_6D600C)) 0x6d600c);
int& dword_6D6010 = * ((decltype(&dword_6D6010)) 0x6d6010);
int& dword_6D6014 = * ((decltype(&dword_6D6014)) 0x6d6014);
int& dword_6D6018 = * ((decltype(&dword_6D6018)) 0x6d6018);
int& dword_6D601C = * ((decltype(&dword_6D601C)) 0x6d601c);
int& dword_6D6020 = * ((decltype(&dword_6D6020)) 0x6d6020);
int& dword_6D6024 = * ((decltype(&dword_6D6024)) 0x6d6024);
int& dword_6D6028 = * ((decltype(&dword_6D6028)) 0x6d6028);
int& dword_6D602C = * ((decltype(&dword_6D602C)) 0x6d602c);
int& dword_6D6030 = * ((decltype(&dword_6D6030)) 0x6d6030);
int& dword_6D6034 = * ((decltype(&dword_6D6034)) 0x6d6034);
int& dword_6D6038 = * ((decltype(&dword_6D6038)) 0x6d6038);
int& dword_6D603C = * ((decltype(&dword_6D603C)) 0x6d603c);
int& dword_6D6040 = * ((decltype(&dword_6D6040)) 0x6d6040);
int& dword_6D6044 = * ((decltype(&dword_6D6044)) 0x6d6044);
int& dword_6D6048 = * ((decltype(&dword_6D6048)) 0x6d6048);
int& dword_6D604C = * ((decltype(&dword_6D604C)) 0x6d604c);
int& dword_6D6050 = * ((decltype(&dword_6D6050)) 0x6d6050);
int& dword_6D6054 = * ((decltype(&dword_6D6054)) 0x6d6054);
int& dword_6D6058 = * ((decltype(&dword_6D6058)) 0x6d6058);
int& dword_6D605C = * ((decltype(&dword_6D605C)) 0x6d605c);
int& dword_6D6060 = * ((decltype(&dword_6D6060)) 0x6d6060);
int& dword_6D6064 = * ((decltype(&dword_6D6064)) 0x6d6064);
int& dword_6D6068 = * ((decltype(&dword_6D6068)) 0x6d6068);
int& dword_6D606C = * ((decltype(&dword_6D606C)) 0x6d606c);
int& dword_6D6070 = * ((decltype(&dword_6D6070)) 0x6d6070);
int& dword_6D6074 = * ((decltype(&dword_6D6074)) 0x6d6074);
int& dword_6D6078 = * ((decltype(&dword_6D6078)) 0x6d6078);
int& dword_6D607C = * ((decltype(&dword_6D607C)) 0x6d607c);
int& dword_6D6080 = * ((decltype(&dword_6D6080)) 0x6d6080);
int& dword_6D6084 = * ((decltype(&dword_6D6084)) 0x6d6084);
int& dword_6D6088 = * ((decltype(&dword_6D6088)) 0x6d6088);
int& dword_6D608C = * ((decltype(&dword_6D608C)) 0x6d608c);
int& dword_6D6090 = * ((decltype(&dword_6D6090)) 0x6d6090);
int& dword_6D6094 = * ((decltype(&dword_6D6094)) 0x6d6094);
int& dword_6D6098 = * ((decltype(&dword_6D6098)) 0x6d6098);
int& dword_6D609C = * ((decltype(&dword_6D609C)) 0x6d609c);
int& dword_6D60A0 = * ((decltype(&dword_6D60A0)) 0x6d60a0);
int& dword_6D60A4 = * ((decltype(&dword_6D60A4)) 0x6d60a4);
int& dword_6D60A8 = * ((decltype(&dword_6D60A8)) 0x6d60a8);
int& dword_6D60AC = * ((decltype(&dword_6D60AC)) 0x6d60ac);
int& dword_6D60B0 = * ((decltype(&dword_6D60B0)) 0x6d60b0);
int& dword_6D60B4 = * ((decltype(&dword_6D60B4)) 0x6d60b4);
int& dword_6D60B8 = * ((decltype(&dword_6D60B8)) 0x6d60b8);
int& dword_6D60BC = * ((decltype(&dword_6D60BC)) 0x6d60bc);
int& dword_6D60C0 = * ((decltype(&dword_6D60C0)) 0x6d60c0);
int& dword_6D60C4 = * ((decltype(&dword_6D60C4)) 0x6d60c4);
int& dword_6D60C8 = * ((decltype(&dword_6D60C8)) 0x6d60c8);
int& dword_6D60CC = * ((decltype(&dword_6D60CC)) 0x6d60cc);
int& dword_6D60D0 = * ((decltype(&dword_6D60D0)) 0x6d60d0);
int& dword_6D60D4 = * ((decltype(&dword_6D60D4)) 0x6d60d4);
int& dword_6D60D8 = * ((decltype(&dword_6D60D8)) 0x6d60d8);
int& dword_6D60DC = * ((decltype(&dword_6D60DC)) 0x6d60dc);
int& dword_6D60E0 = * ((decltype(&dword_6D60E0)) 0x6d60e0);
int& dword_6D60E4 = * ((decltype(&dword_6D60E4)) 0x6d60e4);
int& dword_6D60E8 = * ((decltype(&dword_6D60E8)) 0x6d60e8);
int& dword_6D60EC = * ((decltype(&dword_6D60EC)) 0x6d60ec);
int& dword_6D60F0 = * ((decltype(&dword_6D60F0)) 0x6d60f0);
int& dword_6D60F4 = * ((decltype(&dword_6D60F4)) 0x6d60f4);
int& dword_6D60F8 = * ((decltype(&dword_6D60F8)) 0x6d60f8);
int& dword_6D60FC = * ((decltype(&dword_6D60FC)) 0x6d60fc);
int& dword_6D6100 = * ((decltype(&dword_6D6100)) 0x6d6100);
int& dword_6D6104 = * ((decltype(&dword_6D6104)) 0x6d6104);
int& dword_6D6108 = * ((decltype(&dword_6D6108)) 0x6d6108);
int& dword_6D610C = * ((decltype(&dword_6D610C)) 0x6d610c);
int& dword_6D6110 = * ((decltype(&dword_6D6110)) 0x6d6110);
int& dword_6D6114 = * ((decltype(&dword_6D6114)) 0x6d6114);
int& dword_6D6118 = * ((decltype(&dword_6D6118)) 0x6d6118);
int& dword_6D611C = * ((decltype(&dword_6D611C)) 0x6d611c);
int& dword_6D6120 = * ((decltype(&dword_6D6120)) 0x6d6120);
int& dword_6D6124 = * ((decltype(&dword_6D6124)) 0x6d6124);
int& dword_6D6128 = * ((decltype(&dword_6D6128)) 0x6d6128);
int& dword_6D612C = * ((decltype(&dword_6D612C)) 0x6d612c);
int& dword_6D6130 = * ((decltype(&dword_6D6130)) 0x6d6130);
int& dword_6D6134 = * ((decltype(&dword_6D6134)) 0x6d6134);
int& dword_6D6138 = * ((decltype(&dword_6D6138)) 0x6d6138);
int& dword_6D613C = * ((decltype(&dword_6D613C)) 0x6d613c);
int& dword_6D6140 = * ((decltype(&dword_6D6140)) 0x6d6140);
int& dword_6D6144 = * ((decltype(&dword_6D6144)) 0x6d6144);
int& dword_6D6148 = * ((decltype(&dword_6D6148)) 0x6d6148);
int& dword_6D614C = * ((decltype(&dword_6D614C)) 0x6d614c);
int& dword_6D6150 = * ((decltype(&dword_6D6150)) 0x6d6150);
int& dword_6D6154 = * ((decltype(&dword_6D6154)) 0x6d6154);
int& dword_6D6158 = * ((decltype(&dword_6D6158)) 0x6d6158);
int& dword_6D615C = * ((decltype(&dword_6D615C)) 0x6d615c);
int& dword_6D6160 = * ((decltype(&dword_6D6160)) 0x6d6160);
int& dword_6D6164 = * ((decltype(&dword_6D6164)) 0x6d6164);
int& dword_6D6168 = * ((decltype(&dword_6D6168)) 0x6d6168);
int& dword_6D616C = * ((decltype(&dword_6D616C)) 0x6d616c);
int& dword_6D6170 = * ((decltype(&dword_6D6170)) 0x6d6170);
int& dword_6D6174 = * ((decltype(&dword_6D6174)) 0x6d6174);
int& dword_6D6178 = * ((decltype(&dword_6D6178)) 0x6d6178);
int& dword_6D617C = * ((decltype(&dword_6D617C)) 0x6d617c);
int& dword_6D6180 = * ((decltype(&dword_6D6180)) 0x6d6180);
int& dword_6D6184 = * ((decltype(&dword_6D6184)) 0x6d6184);
int& dword_6D6188 = * ((decltype(&dword_6D6188)) 0x6d6188);
int& dword_6D618C = * ((decltype(&dword_6D618C)) 0x6d618c);
int& dword_6D6190 = * ((decltype(&dword_6D6190)) 0x6d6190);
int& dword_6D6194 = * ((decltype(&dword_6D6194)) 0x6d6194);
int& dword_6D6198 = * ((decltype(&dword_6D6198)) 0x6d6198);
void *& dword_6D619C = * ((decltype(&dword_6D619C)) 0x6d619c);
int& dword_6D61A0 = * ((decltype(&dword_6D61A0)) 0x6d61a0);
void *& buffer = * ((decltype(&buffer)) 0x6d61a4);
int& dword_6D61A8 = * ((decltype(&dword_6D61A8)) 0x6d61a8);
int& dword_6D61AC = * ((decltype(&dword_6D61AC)) 0x6d61ac);
int& dword_6D61B0 = * ((decltype(&dword_6D61B0)) 0x6d61b0);
int& dword_6D61B4 = * ((decltype(&dword_6D61B4)) 0x6d61b4);
int& dword_6D61B8 = * ((decltype(&dword_6D61B8)) 0x6d61b8);
int& dword_6D61BC = * ((decltype(&dword_6D61BC)) 0x6d61bc);
int& dword_6D61C0 = * ((decltype(&dword_6D61C0)) 0x6d61c0);
int& dword_6D61C4 = * ((decltype(&dword_6D61C4)) 0x6d61c4);
int& dword_6D61C8 = * ((decltype(&dword_6D61C8)) 0x6d61c8);
int& dword_6D61CC = * ((decltype(&dword_6D61CC)) 0x6d61cc);
int& dword_6D61D0 = * ((decltype(&dword_6D61D0)) 0x6d61d0);
int& dword_6D61D4 = * ((decltype(&dword_6D61D4)) 0x6d61d4);
int& dword_6D61D8 = * ((decltype(&dword_6D61D8)) 0x6d61d8);
int& dword_6D61DC = * ((decltype(&dword_6D61DC)) 0x6d61dc);
int& dword_6D61E0 = * ((decltype(&dword_6D61E0)) 0x6d61e0);
int& dword_6D61E4 = * ((decltype(&dword_6D61E4)) 0x6d61e4);
int& dword_6D61E8 = * ((decltype(&dword_6D61E8)) 0x6d61e8);
int& dword_6D61EC = * ((decltype(&dword_6D61EC)) 0x6d61ec);
int& dword_6D61F0 = * ((decltype(&dword_6D61F0)) 0x6d61f0);
int& dword_6D61F4 = * ((decltype(&dword_6D61F4)) 0x6d61f4);
int& dword_6D61F8 = * ((decltype(&dword_6D61F8)) 0x6d61f8);
int& dword_6D61FC = * ((decltype(&dword_6D61FC)) 0x6d61fc);
int& dword_6D6200 = * ((decltype(&dword_6D6200)) 0x6d6200);
int& dword_6D6204 = * ((decltype(&dword_6D6204)) 0x6d6204);
int& dword_6D6208 = * ((decltype(&dword_6D6208)) 0x6d6208);
int& dword_6D620C = * ((decltype(&dword_6D620C)) 0x6d620c);
int& dword_6D6210 = * ((decltype(&dword_6D6210)) 0x6d6210);
int& dword_6D6214 = * ((decltype(&dword_6D6214)) 0x6d6214);
int& dword_6D6218 = * ((decltype(&dword_6D6218)) 0x6d6218);
int& dword_6D621C = * ((decltype(&dword_6D621C)) 0x6d621c);
int& dword_6D6220 = * ((decltype(&dword_6D6220)) 0x6d6220);
int& dword_6D6224 = * ((decltype(&dword_6D6224)) 0x6d6224);
int& dword_6D6228 = * ((decltype(&dword_6D6228)) 0x6d6228);
int& dword_6D622C = * ((decltype(&dword_6D622C)) 0x6d622c);
int& dword_6D6230 = * ((decltype(&dword_6D6230)) 0x6d6230);
int& dword_6D6234 = * ((decltype(&dword_6D6234)) 0x6d6234);
int& dword_6D6238 = * ((decltype(&dword_6D6238)) 0x6d6238);
int& dword_6D623C = * ((decltype(&dword_6D623C)) 0x6d623c);
int& dword_6D6240 = * ((decltype(&dword_6D6240)) 0x6d6240);
int& dword_6D6244 = * ((decltype(&dword_6D6244)) 0x6d6244);
int& dword_6D6248 = * ((decltype(&dword_6D6248)) 0x6d6248);
int& dword_6D624C = * ((decltype(&dword_6D624C)) 0x6d624c);
int& dword_6D6250 = * ((decltype(&dword_6D6250)) 0x6d6250);
int& dword_6D6254 = * ((decltype(&dword_6D6254)) 0x6d6254);
int& dword_6D6258 = * ((decltype(&dword_6D6258)) 0x6d6258);
int& dword_6D625C = * ((decltype(&dword_6D625C)) 0x6d625c);
int& dword_6D6260 = * ((decltype(&dword_6D6260)) 0x6d6260);
int& dword_6D6264 = * ((decltype(&dword_6D6264)) 0x6d6264);
int& dword_6D6268 = * ((decltype(&dword_6D6268)) 0x6d6268);
int& dword_6D626C = * ((decltype(&dword_6D626C)) 0x6d626c);
int& dword_6D6270 = * ((decltype(&dword_6D6270)) 0x6d6270);
int& dword_6D6274 = * ((decltype(&dword_6D6274)) 0x6d6274);
int& dword_6D6278 = * ((decltype(&dword_6D6278)) 0x6d6278);
int& dword_6D627C = * ((decltype(&dword_6D627C)) 0x6d627c);
int& dword_6D6280 = * ((decltype(&dword_6D6280)) 0x6d6280);
int& dword_6D6284 = * ((decltype(&dword_6D6284)) 0x6d6284);
int& dword_6D6288 = * ((decltype(&dword_6D6288)) 0x6d6288);
int& dword_6D628C = * ((decltype(&dword_6D628C)) 0x6d628c);
int& dword_6D6290 = * ((decltype(&dword_6D6290)) 0x6d6290);
int& dword_6D6294 = * ((decltype(&dword_6D6294)) 0x6d6294);
int& dword_6D6298 = * ((decltype(&dword_6D6298)) 0x6d6298);
int& dword_6D629C = * ((decltype(&dword_6D629C)) 0x6d629c);
int& dword_6D62A0 = * ((decltype(&dword_6D62A0)) 0x6d62a0);
int& dword_6D62A4 = * ((decltype(&dword_6D62A4)) 0x6d62a4);
int& dword_6D62A8 = * ((decltype(&dword_6D62A8)) 0x6d62a8);
int& dword_6D62AC = * ((decltype(&dword_6D62AC)) 0x6d62ac);
int& dword_6D62B0 = * ((decltype(&dword_6D62B0)) 0x6d62b0);
int& dword_6D62B4 = * ((decltype(&dword_6D62B4)) 0x6d62b4);
struct _RTL_CRITICAL_SECTION& CriticalSection = * ((decltype(&CriticalSection)) 0x6d62b8);
int& dword_6D62D0 = * ((decltype(&dword_6D62D0)) 0x6d62d0);
int& dword_6D62D4 = * ((decltype(&dword_6D62D4)) 0x6d62d4);
int& dword_6D62D8 = * ((decltype(&dword_6D62D8)) 0x6d62d8);
int& dword_6D62DC = * ((decltype(&dword_6D62DC)) 0x6d62dc);
int& dword_6D62E0 = * ((decltype(&dword_6D62E0)) 0x6d62e0);
int& dword_6D62E4 = * ((decltype(&dword_6D62E4)) 0x6d62e4);
int& dword_6D62E8 = * ((decltype(&dword_6D62E8)) 0x6d62e8);
int& dword_6D62EC = * ((decltype(&dword_6D62EC)) 0x6d62ec);
int& dword_6D62F0 = * ((decltype(&dword_6D62F0)) 0x6d62f0);
int& dword_6D62F4 = * ((decltype(&dword_6D62F4)) 0x6d62f4);
int& dword_6D62F8 = * ((decltype(&dword_6D62F8)) 0x6d62f8);
int& dword_6D62FC = * ((decltype(&dword_6D62FC)) 0x6d62fc);
int& dword_6D6300 = * ((decltype(&dword_6D6300)) 0x6d6300);
int& dword_6D6304 = * ((decltype(&dword_6D6304)) 0x6d6304);
int& dword_6D6308 = * ((decltype(&dword_6D6308)) 0x6d6308);
int& dword_6D630C = * ((decltype(&dword_6D630C)) 0x6d630c);
int& dword_6D6310 = * ((decltype(&dword_6D6310)) 0x6d6310);
int& dword_6D6314 = * ((decltype(&dword_6D6314)) 0x6d6314);
int& dword_6D6318 = * ((decltype(&dword_6D6318)) 0x6d6318);
int& dword_6D631C = * ((decltype(&dword_6D631C)) 0x6d631c);
int& dword_6D6320 = * ((decltype(&dword_6D6320)) 0x6d6320);
int& dword_6D6324 = * ((decltype(&dword_6D6324)) 0x6d6324);
int& dword_6D6328 = * ((decltype(&dword_6D6328)) 0x6d6328);
int& dword_6D632C = * ((decltype(&dword_6D632C)) 0x6d632c);
int& dword_6D6330 = * ((decltype(&dword_6D6330)) 0x6d6330);
int& dword_6D6334 = * ((decltype(&dword_6D6334)) 0x6d6334);
int& dword_6D6338 = * ((decltype(&dword_6D6338)) 0x6d6338);
int& dword_6D633C = * ((decltype(&dword_6D633C)) 0x6d633c);
int& dword_6D6340 = * ((decltype(&dword_6D6340)) 0x6d6340);
int& dword_6D6344 = * ((decltype(&dword_6D6344)) 0x6d6344);
int& dword_6D6348 = * ((decltype(&dword_6D6348)) 0x6d6348);
int& dword_6D634C = * ((decltype(&dword_6D634C)) 0x6d634c);
int& dword_6D6350 = * ((decltype(&dword_6D6350)) 0x6d6350);
int& dword_6D6354 = * ((decltype(&dword_6D6354)) 0x6d6354);
int& dword_6D6358 = * ((decltype(&dword_6D6358)) 0x6d6358);
int& dword_6D635C = * ((decltype(&dword_6D635C)) 0x6d635c);
int& dword_6D6360 = * ((decltype(&dword_6D6360)) 0x6d6360);
int& dword_6D6364 = * ((decltype(&dword_6D6364)) 0x6d6364);
int& dword_6D6368 = * ((decltype(&dword_6D6368)) 0x6d6368);
int& dword_6D636C = * ((decltype(&dword_6D636C)) 0x6d636c);
int& dword_6D6370 = * ((decltype(&dword_6D6370)) 0x6d6370);
int& dword_6D6374 = * ((decltype(&dword_6D6374)) 0x6d6374);
int& dword_6D6378 = * ((decltype(&dword_6D6378)) 0x6d6378);
int& dword_6D637C = * ((decltype(&dword_6D637C)) 0x6d637c);
int& message_handling_tick = * ((decltype(&message_handling_tick)) 0x6d6380);
HCURSOR& cursor = * ((decltype(&cursor)) 0x6d6384);
u16 *& dword_6D6388 = * ((decltype(&dword_6D6388)) 0x6d6388);
char& byte_6D638C = * ((decltype(&byte_6D638C)) 0x6d638c);
SfxData& dword_6D6390 = * ((decltype(&dword_6D6390)) 0x6d6390);
char& src = * ((decltype(&src)) 0x6d6394);
int& dword_6D63AC = * ((decltype(&dword_6D63AC)) 0x6d63ac);
int& dword_6D63B0 = * ((decltype(&dword_6D63B0)) 0x6d63b0);
int& dword_6D63B4 = * ((decltype(&dword_6D63B4)) 0x6d63b4);
int& dword_6D63B8 = * ((decltype(&dword_6D63B8)) 0x6d63b8);
int& dword_6D63BC = * ((decltype(&dword_6D63BC)) 0x6d63bc);
int& dword_6D63C0 = * ((decltype(&dword_6D63C0)) 0x6d63c0);
int& dword_6D63C4 = * ((decltype(&dword_6D63C4)) 0x6d63c4);
int& dword_6D63C8 = * ((decltype(&dword_6D63C8)) 0x6d63c8);
int& dword_6D63CC = * ((decltype(&dword_6D63CC)) 0x6d63cc);
int& dword_6D63D0 = * ((decltype(&dword_6D63D0)) 0x6d63d0);
int& dword_6D63D4 = * ((decltype(&dword_6D63D4)) 0x6d63d4);
int& dword_6D63D8 = * ((decltype(&dword_6D63D8)) 0x6d63d8);
int& dword_6D63DC = * ((decltype(&dword_6D63DC)) 0x6d63dc);
int& dword_6D63E0 = * ((decltype(&dword_6D63E0)) 0x6d63e0);
int& dword_6D63E4 = * ((decltype(&dword_6D63E4)) 0x6d63e4);
int& dword_6D63E8 = * ((decltype(&dword_6D63E8)) 0x6d63e8);
int& dword_6D63EC = * ((decltype(&dword_6D63EC)) 0x6d63ec);
char& byte_6D63F0 = * ((decltype(&byte_6D63F0)) 0x6d63f0);
tagRECT& stru_6D63F4 = * ((decltype(&stru_6D63F4)) 0x6d63f4);
int& dword_6D6404 = * ((decltype(&dword_6D6404)) 0x6d6404);
int& dword_6D6408 = * ((decltype(&dword_6D6408)) 0x6d6408);
int& dword_6D640C = * ((decltype(&dword_6D640C)) 0x6d640c);
int& dword_6D6410 = * ((decltype(&dword_6D6410)) 0x6d6410);
int& dword_6D6414 = * ((decltype(&dword_6D6414)) 0x6d6414);
HDC& hdc = * ((decltype(&hdc)) 0x6d6418);
HDC& dword_6D641C = * ((decltype(&dword_6D641C)) 0x6d641c);
int& dword_6D6420 = * ((decltype(&dword_6D6420)) 0x6d6420);
HGDIOBJ& h = * ((decltype(&h)) 0x6d6424);
int& dword_6D6428 = * ((decltype(&dword_6D6428)) 0x6d6428);
int& cached_game_screen_region_check_result = * ((decltype(&cached_game_screen_region_check_result)) 0x6d642c);
int& cached_game_screen_region_check_x = * ((decltype(&cached_game_screen_region_check_x)) 0x6d6430);
int& cached_game_screen_region_check_y = * ((decltype(&cached_game_screen_region_check_y)) 0x6d6434);
HIMC& dword_6D6438 = * ((decltype(&dword_6D6438)) 0x6d6438);
int& dword_6D643C = * ((decltype(&dword_6D643C)) 0x6d643c);
int(&dword_6D683C)[256] = * ((decltype(&dword_6D683C)) 0x6d683c);
size_t& amount = * ((decltype(&amount)) 0x6d6c3c);
int& dword_6D6C40 = * ((decltype(&dword_6D6C40)) 0x6d6c40);
CHAR(&byte_6D7448)[260] = * ((decltype(&byte_6D7448)) 0x6d7448);
char& byte_6D754C = * ((decltype(&byte_6D754C)) 0x6d754c);
char(&byte_6D7550)[32] = * ((decltype(&byte_6D7550)) 0x6d7550);
int& dword_6D7570 = * ((decltype(&dword_6D7570)) 0x6d7570);
int& dword_6D7574 = * ((decltype(&dword_6D7574)) 0x6d7574);
int(&dword_6D7578)[] = * ((decltype(&dword_6D7578)) 0x6d7578);
int(&dword_6D757C)[] = * ((decltype(&dword_6D757C)) 0x6d757c);
char(&byte_6DB178)[] = * ((decltype(&byte_6DB178)) 0x6db178);
char(&byte_6DB179)[] = * ((decltype(&byte_6DB179)) 0x6db179);
char(&byte_6DB17A)[] = * ((decltype(&byte_6DB17A)) 0x6db17a);
char(&byte_6DB17B)[] = * ((decltype(&byte_6DB17B)) 0x6db17b);
char(&byte_6DB180)[260] = * ((decltype(&byte_6DB180)) 0x6db180);
Bitmap& stru_6DB284 = * ((decltype(&stru_6DB284)) 0x6db284);
Bitmap& stru_6DB28C = * ((decltype(&stru_6DB28C)) 0x6db28c);
char(&byte_6DB298)[1024] = * ((decltype(&byte_6DB298)) 0x6db298);
char(&byte_6DB698)[128] = * ((decltype(&byte_6DB698)) 0x6db698);
char(&byte_6DB718)[128] = * ((decltype(&byte_6DB718)) 0x6db718);
char(&byte_6DB798)[128] = * ((decltype(&byte_6DB798)) 0x6db798);
char(&byte_6DB818)[128] = * ((decltype(&byte_6DB818)) 0x6db818);
char(&byte_6DB898)[128] = * ((decltype(&byte_6DB898)) 0x6db898);
char& byte_6DB918 = * ((decltype(&byte_6DB918)) 0x6db918);
char& byte_6DBD18 = * ((decltype(&byte_6DBD18)) 0x6dbd18);
char(&byte_6DBD38)[40] = * ((decltype(&byte_6DBD38)) 0x6dbd38);
char(&byte_6DBD60)[256] = * ((decltype(&byte_6DBD60)) 0x6dbd60);
char& byte_6DBE60 = * ((decltype(&byte_6DBE60)) 0x6dbe60);
char& byte_6DC260 = * ((decltype(&byte_6DC260)) 0x6dc260);
char(&byte_6DC280)[36] = * ((decltype(&byte_6DC280)) 0x6dc280);
Bitmap& stru_6DC2A4 = * ((decltype(&stru_6DC2A4)) 0x6dc2a4);
u16(&word_6DC2AC)[9] = * ((decltype(&word_6DC2AC)) 0x6dc2ac);
char& base = * ((decltype(&base)) 0x6dc2c0);
int& dword_6DC2E0 = * ((decltype(&dword_6DC2E0)) 0x6dc2e0);
int& dword_6DC2F4 = * ((decltype(&dword_6DC2F4)) 0x6dc2f4);
size_t& dword_6DD300 = * ((decltype(&dword_6DD300)) 0x6dd300);
int& dword_6DD304 = * ((decltype(&dword_6DD304)) 0x6dd304);
int& dword_6DD308 = * ((decltype(&dword_6DD308)) 0x6dd308);
int& dword_6DD30C = * ((decltype(&dword_6DD30C)) 0x6dd30c);
void *& dword_6DD310 = * ((decltype(&dword_6DD310)) 0x6dd310);
int& dword_6DD314 = * ((decltype(&dword_6DD314)) 0x6dd314);
LPVOID& lpMem = * ((decltype(&lpMem)) 0x6dd318);
int& dword_6DD31C = * ((decltype(&dword_6DD31C)) 0x6dd31c);
int& dword_6DD320 = * ((decltype(&dword_6DD320)) 0x6dd320);
int& dword_6DD324 = * ((decltype(&dword_6DD324)) 0x6dd324);
int& dword_6DD328 = * ((decltype(&dword_6DD328)) 0x6dd328);
LCID& Locale = * ((decltype(&Locale)) 0x6dd32c);
void *& dword_6DD330 = * ((decltype(&dword_6DD330)) 0x6dd330);
int& dword_6DD334 = * ((decltype(&dword_6DD334)) 0x6dd334);
char& byte_6DD340 = * ((decltype(&byte_6DD340)) 0x6dd340);
char& byte_6DD341 = * ((decltype(&byte_6DD341)) 0x6dd341);
UINT& CodePage = * ((decltype(&CodePage)) 0x6dd444);
__int16& word_6DD450 = * ((decltype(&word_6DD450)) 0x6dd450);
char& byte_6DD460 = * ((decltype(&byte_6DD460)) 0x6dd460);
HANDLE& hHeap = * ((decltype(&hHeap)) 0x6dd560);
int& dword_6DD564 = * ((decltype(&dword_6DD564)) 0x6dd564);
UINT& uNumber = * ((decltype(&uNumber)) 0x6dd568);
int(&dword_6DD580)[] = * ((decltype(&dword_6DD580)) 0x6dd580);
int& dword_6DD680 = * ((decltype(&dword_6DD680)) 0x6dd680);
int& dword_6DD684 = * ((decltype(&dword_6DD684)) 0x6dd684);
void *& dword_6DD688 = * ((decltype(&dword_6DD688)) 0x6dd688);
int& dword_6DD68C = * ((decltype(&dword_6DD68C)) 0x6dd68c);
int& dword_6DD690 = * ((decltype(&dword_6DD690)) 0x6dd690);
#undef DECL_FUNC
}
